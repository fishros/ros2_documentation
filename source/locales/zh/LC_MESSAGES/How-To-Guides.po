# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 Documentation: Humble package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 Documentation: Humble \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-04 14:48+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh\n"
"Language-Team: zh <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"


#: ../../source/How-To-Guides.rst:8
msgid "How-to Guides"
msgstr "如何指南@{"calib_text": " `[1] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1>`_ "}@"


#: ../../source/How-To-Guides.rst:10
msgid "How-to Guides provide direct and modular answers to \"How-to\" questions regarding key aspects of ROS 2. They contain succinct steps to help you accomplish important tasks quickly."
msgstr "如何指南提供 ROS 2 关键方面的“如何”问题的直接和模块化答案。它们包含简明的步骤，帮助您快速完成重要任务。@{"calib_text": " `[2] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=2>`_ "}@"


#: ../../source/How-To-Guides.rst:13
msgid "How-to Guides are meant for users who already have some knowledge of ROS 2 and just want to find out how to implement something specific. They will not go in-depth by providing background information or teaching how a concept ties into the greater ROS 2 ecosystem."
msgstr "如何指南适用于已经具有一定 ROS 2 知识并且只想了解如何实现特定内容的用户。它们不会提供深入的背景信息或教授概念如何与更广泛的 ROS 2 生态系统相关联。@{"calib_text": " `[3] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3>`_ "}@"


#: ../../source/How-To-Guides.rst:16
msgid "If you are new and looking to learn the ropes, start with the :doc:`Tutorials <Tutorials>` for a more well-rounded progression through ROS 2."
msgstr "如果您是新手并且希望学习 ROS 2 的基础知识，请从 :doc:`教程 <Tutorials>`  开始，以更全面地掌握 ROS 2 的进展。@{"calib_text": " `[4] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:7
msgid "ament_cmake user documentation"
msgstr "ament_cmake 用户文档@{"calib_text": " `[5] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:9
msgid "``ament_cmake`` is the build system for CMake based packages in ROS 2 (in particular, it will be used for most C/C++ projects). It is a set of scripts enhancing CMake and adding convenience functionality for package authors. Before using ``ament_cmake``, it is very helpful to know the basics of `CMake <https://cmake.org/cmake/help/v3.8/>`__. An official tutorial can be found `here <https://cmake.org/cmake/help/latest/guide/tutorial/index.html>`__."
msgstr "``ament_cmake`` 是ROS 2中基于CMake的软件包构建系统（特别是大多数C/C++项目将使用它）。它是一组增强了CMake并为软件包作者添加便利功能的脚本。在使用 ``ament_cmake`` 之前，了解 `CMake <https://cmake.org/cmake/help/v3.8/>`__ 的基础知识非常有帮助。您可以在 `此处 <https://cmake.org/cmake/help/latest/guide/tutorial/index.html>`__ 找到官方教程。@{"calib_text": " `[15497] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15497>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:16 ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:20 ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:6 ../../source/How-To-Guides/Building-a-Custom-Debian-Package.rst:12 ../../source/How-To-Guides/Cross-compilation.rst:11 ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:12 ../../source/How-To-Guides/Launch-file-different-formats.rst:10 ../../source/How-To-Guides/Launching-composable-nodes.rst:6 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:12 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:6 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:14 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:6 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:12 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:11 ../../source/How-To-Guides/Node-arguments.rst:13 ../../source/How-To-Guides/Package-maintainer-guide.rst:12 ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:12 ../../source/How-To-Guides/Releasing/First-Time-Release.rst:9 ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:6 ../../source/How-To-Guides/Releasing/Release-Track.rst:6 ../../source/How-To-Guides/Releasing/Subsequent-Releases.rst:8 ../../source/How-To-Guides/Using-callback-groups.rst:11 ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:6 ../../source/How-To-Guides/Using-ros2-param.rst:6 ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:12
msgid "Table of Contents"
msgstr "目录@{"calib_text": " `[] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15498>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:19 ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:23
msgid "Basics"
msgstr "基础知识@{"calib_text": " `[] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15499>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:21
msgid "A basic CMake outline can be produced using ``ros2 pkg create <package_name>`` on the command line. The build information is then gathered in two files: the ``package.xml`` and the ``CMakeLists.txt``, which must be in the same directory. The ``package.xml`` must contain all dependencies and a bit of metadata to allow colcon to find the correct build order for your packages, to install the required dependencies in CI, and to provide the information for a release with ``bloom``. The ``CMakeLists.txt`` contains the commands to build and package executables and libraries and will be the main focus of this document."
msgstr "可以使用命令行上的 ``ros2 pkg create <package_name>`` 创建基本的CMake大纲。然后，构建信息会收集在两个文件中：``package.xml`` 和 ``CMakeLists.txt``，它们必须位于同一目录中。``package.xml`` 必须包含所有依赖项和一些元数据，以允许 colcon 找到正确的构建顺序，以在CI中安装所需的依赖项，并为使用 ``bloom`` 进行发布提供信息。``CMakeLists.txt`` 包含了构建和打包可执行文件和库的命令，将是本文档的主要关注点。@{"calib_text": " `[15500] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15500>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:27 ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:26
msgid "Basic project outline"
msgstr "基本项目概述@{"calib_text": " `[15501] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15501>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:29
msgid "The basic outline of the ``CMakeLists.txt`` of an ament package contains:"
msgstr "一个 ament 包的 ``CMakeLists.txt`` 的基本概述包括：@{"calib_text": " `[15502] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15502>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:38
msgid "The argument to ``project`` will be the package name and must be identical to the package name in the ``package.xml``."
msgstr "``project``的参数将是包名，并且必须与``package.xml``中的包名完全相同。@{"calib_text": " `[15503] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15503>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:40
msgid "The project setup is done by ``ament_package()`` and this call must occur exactly once per package. ``ament_package()`` installs the ``package.xml``, registers the package with the ament index, and installs configuration (and possibly target) files for CMake so that it can be found by other packages using ``find_package``. Since ``ament_package()`` gathers a lot of information from the ``CMakeLists.txt`` it should be the last call in your ``CMakeLists.txt``."
msgstr "项目设置由 ``ament_package()`` 完成，每个软件包必须恰好调用一次。 ``ament_package()`` 安装了 ``package.xml``，在ament索引中注册了软件包，并安装了CMake的配置（和可能的目标）文件，以便其他使用 ``find_package`` 的软件包可以找到它。由于 ``ament_package()`` 从 ``CMakeLists.txt`` 收集了大量信息，因此它应该是您的 ``CMakeLists.txt`` 中的最后一个调用。@{"calib_text": " `[15504] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15504>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:44
msgid "``ament_package`` can be given additional arguments:"
msgstr "``ament_package`` 可以接受额外的参数：@{"calib_text": " `[14] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=14>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:46
msgid "``CONFIG_EXTRAS``: a list of CMake files (``.cmake`` or ``.cmake.in`` templates expanded by ``configure_file()``) which should be available to clients of the package. For an example of when to use these arguments, see the discussion in `Adding resources`_. For more information on how to use template files, see `the official documentation <https://cmake.org/cmake/help/v3.8/command/configure_file.html>`__."
msgstr "``CONFIG_EXTRAS``: 一个CMake文件列表（通过 ``configure_file()`` 展开的 ``.cmake`` 或 ``.cmake.in`` 模板），应该对软件包的客户端可用。有关何时使用这些参数的示例，请参阅 `添加资源`_ 中的讨论。有关如何使用模板文件的更多信息，请参阅 `官方文档 <https://cmake.org/cmake/help/v3.8/command/configure_file.html>`__。@{"calib_text": " `[15505] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15505>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:50
msgid "``CONFIG_EXTRAS_POST``: same as ``CONFIG_EXTRAS``, but the order in which the files are added differs. While ``CONFIG_EXTRAS`` files are included before the files generated for the ``ament_export_*`` calls the files from ``CONFIG_EXTRAS_POST`` are included afterwards."
msgstr "``CONFIG_EXTRAS_POST``：与 ``CONFIG_EXTRAS`` 相同，但添加文件的顺序不同。``CONFIG_EXTRAS`` 文件在为 ``ament_export_*`` 调用生成文件之前包含，而 ``CONFIG_EXTRAS_POST`` 的文件在之后包含。@{"calib_text": " `[16] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:53
msgid "Instead of adding to ``ament_package``, you can also add to the variable ``${PROJECT_NAME}_CONFIG_EXTRAS`` and ``${PROJECT_NAME}_CONFIG_EXTRAS_POST`` with the same effect. The only difference is again the order in which the files are added with the following total order:"
msgstr "除了向 ``ament_package`` 添加外，您还可以添加到变量 ``${PROJECT_NAME}_CONFIG_EXTRAS`` 和 ``${PROJECT_NAME}_CONFIG_EXTRAS_POST``，效果相同。唯一的区别是再次添加文件的顺序，具体顺序如下：@{"calib_text": " `[17] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=17>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:56
msgid "files added by ``CONFIG_EXTRAS``"
msgstr "由``CONFIG_EXTRAS``添加的文件@{"calib_text": " `[18] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=18>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:58
msgid "files added by appending to ``${PROJECT_NAME}_CONFIG_EXTRAS``"
msgstr "通过附加到``${PROJECT_NAME}_CONFIG_EXTRAS``添加的文件@{"calib_text": " `[19] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=19>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:60
msgid "files added by appending to ``${PROJECT_NAME}_CONFIG_EXTRAS_POST``"
msgstr "通过附加到``${PROJECT_NAME}_CONFIG_EXTRAS_POST``添加的文件@{"calib_text": " `[20] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=20>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:62
msgid "files added by ``CONFIG_EXTRAS_POST``"
msgstr "由``CONFIG_EXTRAS_POST``添加的文件@{"calib_text": " `[21] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=21>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:65
msgid "Compiler and linker options"
msgstr "编译器和链接器选项@{"calib_text": " `[15506] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15506>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:67
msgid "ROS 2 targets compilers which comply with the C++17 and C99 standard. Newer versions might be targeted in the future and are referenced `here <https://www.ros.org/reps/rep-2000.html>`__. Therefore it is customary to set the corresponding CMake flags:"
msgstr "ROS 2针对符合C++17和C99标准的编译器。未来可能会针对更新的版本，可以在 `这里 <https://www.ros.org/reps/rep-2000.html>`__ 找到相关信息。因此，习惯性地设置相应的CMake标志：@{"calib_text": " `[15507] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15507>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:80
msgid "To keep the code clean, compilers should throw warnings for questionable code and these warnings should be fixed."
msgstr "为了保持代码的清洁，编译器应该对可疑的代码发出警告，并且这些警告应该被修复。@{"calib_text": " `[15508] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15508>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:82
msgid "It is recommended to at least cover the following warning levels:"
msgstr "建议至少包括以下警告级别：@{"calib_text": " `[15509] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15509>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:84
msgid "For Visual Studio: the default ``W1`` warnings"
msgstr "对于Visual Studio：默认的 ``W1`` 警告级别@{"calib_text": " `[15510] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15510>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:86
msgid "For GCC and Clang: ``-Wall -Wextra -Wpedantic`` are highly recommended and ``-Wshadow`` is advisable"
msgstr "对于GCC和Clang：强烈建议使用 ``-Wall -Wextra -Wpedantic``，并建议使用 ``-Wshadow``"@{"calib_text": " `[15511] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15511>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:88
msgid "It is currently recommended to use ``add_compile_options`` to add these options for all targets. This avoids cluttering the code with target-based compile options for all executables, libraries, and tests:"
msgstr "目前建议使用 ``add_compile_options`` 来为所有目标添加这些选项。这样可以避免在所有可执行文件、库和测试的目标编译选项中引入杂乱的代码：@{"calib_text": " `[15512] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15512>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:98
msgid "Finding dependencies"
msgstr "查找依赖项@{"calib_text": " `[15513] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15513>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:100
msgid "Most ``ament_cmake`` projects will have dependencies on other packages. In CMake, this is accomplished by calling ``find_package``. For instance, if your package depends on ``rclcpp``, then the ``CMakeLists.txt`` file should contain:"
msgstr "大多数 ``ament_cmake`` 项目会依赖其他软件包。在CMake中，可以通过调用 ``find_package`` 来实现这一点。例如，如果您的软件包依赖于 ``rclcpp``，则 ``CMakeLists.txt`` 文件应包含以下内容：@{"calib_text": " `[15514] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15514>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:110
msgid "It should never be necessary to ``find_package`` a library that is not explicitly needed but is a dependency of another dependency that is explicitly needed. If that is the case, file a bug against the corresponding package."
msgstr "通常情况下不需要对不明确需要但是另一个明确需要的依赖项的依赖项进行 ``find_package``。如果出现这种情况，请向相应的软件包提交错误报告。@{"calib_text": " `[15515] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15515>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:114
msgid "Adding targets"
msgstr "添加目标@{"calib_text": " `[15516] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15516>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:116
msgid "In CMake nomenclature, ``targets`` are the artifacts that this project will create. Either libraries or executables can be created, and a single project can contain zero or many of each of them."
msgstr "在CMake术语中，``目标`` 是此项目将创建的工件。可以创建库或可执行文件，一个项目可以包含零个或多个这些工件。@{"calib_text": " `[15517] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15517>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:121 ../../source/How-To-Guides/Ament-CMake-Documentation.rst:213
msgid "Libraries"
msgstr "库@{"calib_text": " `[15518] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15518>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:123
msgid "These are created with a call to ``add_library``, which should contain both the name of the target and the source files that should be compiled to create the library."
msgstr "使用 ``add_library`` 调用创建这些库，该调用应包含目标名称和应编译以创建库的源文件。@{"calib_text": " `[15519] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15519>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:125
msgid "With the separation of header files and implementation in C/C++, it is not usually necessary to add header files as arguments to ``add_library``."
msgstr "在C/C++中，由于头文件和实现分离，通常不需要将头文件作为 ``add_library`` 的参数。@{"calib_text": " `[15520] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15520>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:127
msgid "The following best practice is proposed:"
msgstr "建议采用以下最佳实践：@{"calib_text": " `[15521] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15521>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:129
msgid "Put all headers which should be usable by clients of this library (and therefore must be installed) into a subdirectory of the ``include`` folder named like the package, while all other files (``.c/.cpp`` and header files which should not be exported) are inside the ``src`` folder"
msgstr "将所有应该供库的客户端使用的头文件（因此必须安装）放入名为软件包名称的 ``include`` 文件夹的子文件夹中，而其他所有文件（``.c/.cpp`` 和不应导出的头文件）都在 ``src`` 文件夹中。@{"calib_text": " `[15522] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15522>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:131
msgid "Only ``.c/.cpp`` files are explicitly referenced in the call to ``add_library``"
msgstr "在 ``add_library`` 的调用中，仅显式引用了 ``.c/.cpp`` 文件。@{"calib_text": " `[15523] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15523>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:133
msgid "Find headers to your library ``my_library`` via"
msgstr "通过以下方式查找库 ``my_library`` 的头文件@{"calib_text": " `[15524] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15524>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:142
msgid "This adds all files in the folder ``${CMAKE_CURRENT_SOURCE_DIR}/include`` to the public interface during build time and all files in the include folder (relative to ``${CMAKE_INSTALL_DIR}``) when being installed."
msgstr "这将在构建时将``${CMAKE_CURRENT_SOURCE_DIR}/include``文件夹中的所有文件添加到公共接口中，并在安装时将所有文件添加到include文件夹中（相对于``${CMAKE_INSTALL_DIR}``）。@{"calib_text": " `[15525] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15525>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:144
msgid "``ros2 pkg create`` creates a package layout that follows these rules."
msgstr "``ros2 pkg create`` 创建的软件包布局遵循这些规则。@{"calib_text": " `[15526] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15526>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:148
msgid "Since Windows is one of the officially supported platforms, to have maximum impact, any package should also build on Windows. The Windows library format enforces symbol visibility; that is, every symbol which should be used from a client has to be explicitly exported by the library (and symbols need to be implicitly imported)."
msgstr "由于Windows是官方支持的平台之一，为了最大程度地影响，任何软件包都应在Windows上构建。Windows库格式强制执行符号可见性，即从客户端使用的每个符号都必须由库明确导出（并且需要隐式导入符号）。@{"calib_text": " `[15527] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15527>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:151
msgid "Since GCC and Clang builds do not generally do this, it is advised to use the logic in `the GCC wiki <https://gcc.gnu.org/wiki/Visibility>`__. To use it for a package called ``my_library``:"
msgstr "由于通常情况下，GCC和Clang构建不会执行这一操作，因此建议使用 `GCC维基 <https://gcc.gnu.org/wiki/Visibility>`__ 中的逻辑。要在名为 ``my_library`` 的软件包中使用它：@{"calib_text": " `[15528] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15528>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:154
msgid "Copy the logic in the link into a header file called ``visibility_control.hpp``."
msgstr "将链接中的逻辑复制到名为``visibility_control.hpp``的头文件中。@{"calib_text": " `[15529] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15529>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:156
msgid "Replace ``DLL`` by ``MY_LIBRARY`` (for an example, see visibility control of `rviz_rendering <https://github.com/ros2/rviz/blob/ros2/rviz_rendering/include/rviz_rendering/visibility_control.hpp>`__)."
msgstr "将``DLL``替换为``MY_LIBRARY``（例如，查看`rviz_rendering的可见性控制 <https://github.com/ros2/rviz/blob/ros2/rviz_rendering/include/rviz_rendering/visibility_control.hpp>`__）。@{"calib_text": " `[15530] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15530>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:158
msgid "Use the macros \"MY_LIBRARY_PUBLIC\" for all symbols you need to export (i.e. classes or functions)."
msgstr "对于需要导出的所有符号（例如类或函数），请使用宏\"MY_LIBRARY_PUBLIC\"。@{"calib_text": " `[15531] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15531>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:160
msgid "In the project ``CMakeLists.txt`` use:"
msgstr "在项目的 ``CMakeLists.txt`` 中使用：@{"calib_text": " `[15532] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15532>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:166
msgid "For more details, see :ref:`Windows Symbol Visibility in the Windows Tips and Tricks document <Windows_Symbol_Visibility>`."
msgstr "有关更多详细信息，请参阅：:ref:`Windows_Tips_and_Tricks 文档中的 Windows 符号可见性 <Windows_Symbol_Visibility>`。@{"calib_text": " `[15533] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15533>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:168 ../../source/How-To-Guides/Ament-CMake-Documentation.rst:283
msgid "Executables"
msgstr "可执行文件@{"calib_text": " `[15534] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15534>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:170
msgid "These should be created with a call to ``add_executable``, which should contain both the name of the target and the source files that should be compiled to create the executable. The executable may also have to be linked with any libraries created in this package by using ``target_link_libraries``."
msgstr "这些应该使用 ``add_executable`` 调用来创建，该调用应包含目标的名称和应编译以创建可执行文件的源文件。可执行文件可能还需要使用 ``target_link_libraries`` 来链接在此软件包中创建的任何库。@{"calib_text": " `[15535] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15535>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:173
msgid "Since executables aren't generally used by clients as a library, no header files need to be put in the ``include`` directory."
msgstr "由于可执行文件通常不作为库供客户端使用，因此不需要将头文件放入 ``include`` 目录中。@{"calib_text": " `[15536] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15536>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:175 ../../source/How-To-Guides/Ament-CMake-Documentation.rst:292
msgid "In the case that a package has both libraries and executables, make sure to combine the advice from both \"Libraries\" and \"Executables\" above."
msgstr "在软件包既有库又有可执行文件的情况下，请确保结合上述 \"库\" 和 \"可执行文件\" 部分的建议。@{"calib_text": " `[15537] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15537>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:178
msgid "Linking to dependencies"
msgstr "链接到依赖项@{"calib_text": " `[15538] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15538>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:180
msgid "There are two ways to link your targets against a dependency."
msgstr "有两种将目标链接到依赖项的方式。@{"calib_text": " `[15539] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15539>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:182
msgid "The first and recommended way is to use the ament macro ``ament_target_dependencies``. As an example, suppose we want to link ``my_library`` against the linear algebra library Eigen3."
msgstr "第一种并推荐的方式是使用ament宏 ``ament_target_dependencies``。例如，假设我们想要将 ``my_library`` 链接到线性代数库Eigen3。@{"calib_text": " `[15540] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15540>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:190
msgid "It includes the necessary headers and libraries and their dependencies to be correctly found by the project."
msgstr "它包括了必要的头文件和库以及它们的依赖项，以便项目能够正确找到它们。@{"calib_text": " `[15541] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15541>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:192
msgid "The second way is to use ``target_link_libraries``."
msgstr "第二种方法是使用``target_link_libraries``函数。@{"calib_text": " `[15542] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15542>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:194
msgid "Modern CMake prefers to use only targets, exporting and linking against them. CMake targets may be namespaced, similar to C++. Prefer to use the namespaced targets if they are available. For instance, ``Eigen3`` defines the target ``Eigen3::Eigen``."
msgstr "现代的 CMake 更倾向于只使用目标（targets），并对其进行导出和链接。CMake 目标可以被命名空间化，类似于 C++。如果有可用的命名空间目标，请优先使用它们。例如，``Eigen3`` 定义了名为 ``Eigen3::Eigen`` 的目标。@{"calib_text": " `[15543] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15543>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:199
msgid "In the example of Eigen3, the call should then look like"
msgstr "在 Eigen3 的示例中，调用应该如下所示：@{"calib_text": " `[15544] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15544>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:205
msgid "This will also include necessary headers, libraries and their dependencies. Note that this dependency must have been previously discovered via a call to ``find_package``."
msgstr "这也将包括必要的头文件、库和它们的依赖项。请注意，这个依赖关系必须之前通过调用 ``find_package`` 来发现。@{"calib_text": " `[15545] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15545>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:209
msgid "Installing"
msgstr "安装@{"calib_text": " `[15546] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15546>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:215
msgid "When building a reusable library, some information needs to be exported for downstream packages to easily use it."
msgstr "在构建可重用库时，需要导出一些信息以便下游软件包能够轻松使用它。@{"calib_text": " `[15547] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15547>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:217
msgid "First, install the headers files which should be available to clients. The include directory is custom to support overlays in ``colcon``; see https://colcon.readthedocs.io/en/released/user/overriding-packages.html#install-headers-to-a-unique-include-directory for more information."
msgstr "首先，安装应该对客户端可用的头文件。这个包含目录是定制的，以支持 ``colcon`` 中的覆盖；有关更多信息，请参阅 https://colcon.readthedocs.io/en/released/user/overriding-packages.html#install-headers-to-a-unique-include-directory。@{"calib_text": " `[15548] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15548>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:227
msgid "Next, install the targets and create the export target (``export_${PROJECT_NAME}``) that other code will use to find this package. Note that you can use a single ``install`` call to install all of the libraries in the project."
msgstr "接下来，安装目标并创建导出目标（``export_${PROJECT_NAME}``），其他代码将使用它来找到这个包。请注意，您可以使用单个 ``install`` 调用来安装项目中的所有库。@{"calib_text": " `[15549] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15549>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:243
msgid "Here is what's happening in the snippet above:"
msgstr "上面的代码片段中发生了什么，下面是说明：@{"calib_text": " `[15550] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15550>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:245
msgid "The ``ament_export_targets`` macro exports the targets for CMake. This is necessary to allow your library's clients to use the ``target_link_libraries(client PRIVATE my_library::my_library)`` syntax. If the export set includes a library, add the option ``HAS_LIBRARY_TARGET`` to ``ament_export_targets``, which adds potential libraries to environment variables."
msgstr "``ament_export_targets`` 宏用于导出 CMake 的目标。这是为了允许您的库的客户端使用 ``target_link_libraries(client PRIVATE my_library::my_library)`` 语法而必要的。如果导出集包括一个库，请在 ``ament_export_targets`` 中添加选项 ``HAS_LIBRARY_TARGET``，这将将潜在的库添加到环境变量中。@{"calib_text": " `[15551] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15551>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:249
msgid "The ``ament_export_dependencies`` exports dependencies to downstream packages. This is necessary so that the user of the library does not have to call ``find_package`` for those dependencies, too."
msgstr "``ament_export_dependencies`` 将依赖项导出到下游包。这是必要的，这样库的使用者也不必为这些依赖项调用 ``find_package``。@{"calib_text": " `[15552] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15552>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:254
msgid "Calling ``ament_export_targets``, ``ament_export_dependencies``, or other ament commands from a CMake subdirectory will not work as expected. This is because the CMake subdirectory has no way of setting necessary variables in the parent scope where ``ament_package`` is called."
msgstr "从CMake子目录调用``ament_export_targets``、``ament_export_dependencies``或其他ament命令将不会按预期工作。这是因为CMake子目录无法在调用``ament_package``的父范围中设置必要的变量。@{"calib_text": " `[15553] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15553>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:259
msgid "Windows DLLs are treated as runtime artifacts and installed into the ``RUNTIME DESTINATION`` folder. It is therefore advised to keep the ``RUNTIME`` install even when developing libraries on Unix based systems."
msgstr "Windows 的 DLL 文件被视为运行时构件，并安装到 ``RUNTIME DESTINATION`` 文件夹中。因此，在 Unix 基础系统上开发库时，建议保留 ``RUNTIME`` 安装选项。@{"calib_text": " `[15554] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15554>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:262
msgid "The ``EXPORT`` notation of the install call requires additional attention: It installs the CMake files for the ``my_library`` target. It must be named exactly the same as the argument in ``ament_export_targets``. To ensure that it can be used via ``ament_target_dependencies``, it should not be named exactly the same as the library name, but instead should have a prefix like ``export_`` (as shown above)."
msgstr "``INSTALL`` 调用的 ``EXPORT`` 标记需要额外注意：它安装了用于 ``my_library`` 目标的 CMake 文件。它的名称必须与 ``ament_export_targets`` 中的参数完全相同。为确保它可以通过 ``ament_target_dependencies`` 使用，它不应与库名称完全相同，而应该具有类似 ``export_`` 的前缀（如上所示）。@{"calib_text": " `[15555] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15555>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:267
msgid "All install paths are relative to ``CMAKE_INSTALL_PREFIX``, which is already set correctly by colcon/ament."
msgstr "所有安装路径都相对于 ``CMAKE_INSTALL_PREFIX``，这个路径已经由 colcon/ament 正确设置。@{"calib_text": " `[15556] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15556>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:269
msgid "There are two additional functions which are available, but are superfluous for target based installs:"
msgstr "还有两个额外的可用函数，但对于基于目标的安装来说是多余的：@{"calib_text": " `[15557] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15557>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:276
msgid "The first macro marks the directory of the exported include directories. The second macro marks the location of the installed library (this is done by the ``HAS_LIBRARY_TARGET`` argument in the call to ``ament_export_targets``). These should only be used if the downstream projects can't or don't want to use CMake target based dependencies."
msgstr "第一个宏标记了导出的包含目录的目录。第二个宏标记了已安装库的位置（这是在调用 ``ament_export_targets`` 时使用 ``HAS_LIBRARY_TARGET`` 参数完成的）。只有在下游项目无法或不想使用基于 CMake 目标的依赖关系时才应使用它们。@{"calib_text": " `[15558] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15558>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:280
msgid "Some of the macros can take different types of arguments for non-target exports, but since the recommended way for modern Make is to use targets, we will not cover them here. Documentation of these options can be found in the source code itself."
msgstr "一些宏可以接受不同类型的参数用于非目标导出，但由于现代Make的推荐方式是使用目标，我们将不在此处介绍它们。这些选项的文档可以在源代码本身中找到。@{"calib_text": " `[15559] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15559>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:285
msgid "When installing an executable, the following stanza *must be followed exactly* for the rest of the ROS tooling to find it:"
msgstr "在安装可执行文件时，必须*完全遵循*以下部分，以便 ROS 工具能够找到它：@{"calib_text": " `[15560] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15560>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:295
msgid "Linting and Testing"
msgstr "代码检查和测试@{"calib_text": " `[15561] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15561>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:297
msgid "In order to separate testing from building the library with colcon, wrap all calls to linters and tests in a conditional:"
msgstr "为了将测试与使用 colcon 构建库分开，将所有对代码检查和测试的调用都包装在条件语句中：@{"calib_text": " `[15562] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15562>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:307
msgid "Linting"
msgstr "代码检查@{"calib_text": " `[15563] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15563>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:309
msgid "It's advised to use the combined call from `ament_lint_auto <https://github.com/ament/ament_lint/blob/humble/ament_lint_auto/doc/index.rst#ament_lint_auto>`_:"
msgstr "建议使用`ament_lint_auto <https://github.com/ament/ament_lint/blob/humble/ament_lint_auto/doc/index.rst#ament_lint_auto>`_中的组合调用：@{"calib_text": " `[15564] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15564>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:316
msgid "This will run linters as defined in the ``package.xml``. It is recommended to use the set of linters defined by the package ``ament_lint_common``. The individual linters included there, as well as their functions, can be seen in the `ament_lint_common docs <https://github.com/ament/ament_lint/blob/humble/ament_lint_common/doc/index.rst>`_."
msgstr "这将按照``package.xml``中定义的方式运行代码检查工具。建议使用由``ament_lint_common``软件包定义的代码检查工具集。其中包含的各个代码检查工具及其功能可以在`ament_lint_common文档 <https://github.com/ament/ament_lint/blob/humble/ament_lint_common/doc/index.rst>`_中查看。@{"calib_text": " `[15565] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15565>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:320
msgid "Linters provided by ament can also be added separately, instead of running ``ament_lint_auto``. One example of how to do so can be found in the `ament_cmake_lint_cmake documentation <https://github.com/ament/ament_lint/blob/humble/ament_cmake_lint_cmake/doc/index.rst>`_."
msgstr "ament提供的代码检查工具也可以单独添加，而不是运行``ament_lint_auto``。如何添加的一个示例可以在`ament_cmake_lint_cmake文档 <https://github.com/ament/ament_lint/blob/humble/ament_cmake_lint_cmake/doc/index.rst>`_中找到。@{"calib_text": " `[15566] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15566>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:324
msgid "Testing"
msgstr "测试@{"calib_text": " `[15567] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15567>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:326
msgid "Ament contains CMake macros to simplify setting up GTests. Call:"
msgstr "Ament包含CMake宏，可以简化设置GTests的过程。调用：@{"calib_text": " `[15568] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15568>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:333
msgid "to add a GTest. This is then a regular target which can be linked against other libraries (such as the project library). The macros have additional parameters:"
msgstr "以添加一个GTest。然后，这是一个常规目标，可以与其他库链接（如项目库）。这些宏有额外的参数：@{"calib_text": " `[15569] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15569>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:337
msgid "``APPEND_ENV``: append environment variables. For instance you can add to the ament prefix path by calling:"
msgstr "``APPEND_ENV``：追加环境变量。例如，您可以通过调用来添加到ament前缀路径：@{"calib_text": " `[15570] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15570>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:346
msgid "``APPEND_LIBRARY_DIRS``: append libraries so that they can be found by the linker at runtime. This can be achieved by setting environment variables like ``PATH`` on Windows and ``LD_LIBRARY_PATH`` on Linux, but this makes the call platform specific."
msgstr "``APPEND_LIBRARY_DIRS``：追加库文件目录，以便链接器在运行时能够找到它们。这可以通过设置环境变量，如在Windows上设置``PATH``，在Linux上设置``LD_LIBRARY_PATH``来实现，但这样做会使调用与特定平台相关。@{"calib_text": " `[15571] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15571>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:349
msgid "``ENV``: set environment variables (same syntax as ``APPEND_ENV``)."
msgstr "``ENV``：设置环境变量（语法与``APPEND_ENV``相同）。@{"calib_text": " `[15572] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15572>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:351
msgid "``TIMEOUT``: set a test timeout in second. The default for GTests is 60 seconds.  For example:"
msgstr "``TIMEOUT``：设置测试的超时时间（以秒为单位）。GTests的默认超时时间为60秒。例如：@{"calib_text": " `[15573] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15573>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:357
msgid "``SKIP_TEST``: skip this test (will be shown as \"passed\" in the console output)."
msgstr "``SKIP_TEST``：跳过此测试（在控制台输出中将显示为“通过”）。@{"calib_text": " `[15574] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15574>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:359
msgid "``SKIP_LINKING_MAIN_LIBRARIES``: Don't link against GTest."
msgstr "``SKIP_LINKING_MAIN_LIBRARIES``：不链接GTest。@{"calib_text": " `[15575] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15575>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:361
msgid "``WORKING_DIRECTORY``: set the working directory for the test."
msgstr "``WORKING_DIRECTORY``：设置测试的工作目录。@{"calib_text": " `[15576] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15576>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:363
msgid "The default working directory otherwise is the ``CMAKE_CURRENT_BINARY_DIR``, which is described in the `CMake documentation <https://cmake.org/cmake/help/latest/variable/CMAKE_CURRENT_BINARY_DIR.html>`_."
msgstr "否则，默认工作目录是 ``CMAKE_CURRENT_BINARY_DIR``，在 `CMake 文档 <https://cmake.org/cmake/help/latest/variable/CMAKE_CURRENT_BINARY_DIR.html>`_ 中有描述。@{"calib_text": " `[15577] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15577>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:365
msgid "Similarly, there is a CMake macro to set up GTest including GMock:"
msgstr "类似地，有一个 CMake 宏用于设置 GTest，包括 GMock：@{"calib_text": " `[15578] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15578>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:372
msgid "It has the same additional parameters as ``ament_add_gtest``."
msgstr "它具有与 ``ament_add_gtest`` 相同的附加参数。@{"calib_text": " `[15579] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15579>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:375
msgid "Extending ament"
msgstr "扩展 ament@{"calib_text": " `[15580] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15580>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:377
msgid "It is possible to register additional macros/functions with ``ament_cmake`` and extend it in several ways."
msgstr "可以使用 ``ament_cmake`` 注册附加的宏/函数，并以多种方式进行扩展。@{"calib_text": " `[15581] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15581>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:380
msgid "Adding a function/macro to ament"
msgstr "向 ament 添加函数/宏@{"calib_text": " `[15582] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15582>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:382
msgid "Extending ament will often times mean that you want to have some functions available to other packages. The best way to provide the macro to client packages is to register it with ament."
msgstr "扩展ament通常意味着您希望其他软件包可以使用某些函数。向客户端软件包提供宏的最佳方法是将其注册到ament中。@{"calib_text": " `[15583] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15583>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:385
msgid "This can be done by appending the ``${PROJECT_NAME}_CONFIG_EXTRAS`` variable, which is used by ``ament_package()`` via"
msgstr "可以通过追加``${PROJECT_NAME}_CONFIG_EXTRAS``变量来实现，该变量由``ament_package()``使用，通过以下方式：@{"calib_text": " `[15584] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15584>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:394
msgid "Alternatively, you can directly add the files to the ``ament_package()`` call:"
msgstr "或者，您可以直接将文件添加到``ament_package()``调用中：@{"calib_text": " `[15585] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15585>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:404
msgid "Adding to extension points"
msgstr "添加到扩展点@{"calib_text": " `[15586] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15586>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:406
msgid "In addition to simple files with functions that can be used in other packages, you can also add extensions to ament. Those extensions are scripts which are executed with the function which defines the extension point. The most common use-case for ament extensions is probably registering rosidl message generators: When writing a generator, you normally want to generate all messages and services with your generator also without modifying the code for the message/service definition packages. This is possible by registering the generator as an extension to ``rosidl_generate_interfaces``."
msgstr "除了可以在其他软件包中使用的简单函数文件外，您还可以向ament添加扩展。这些扩展是通过定义扩展点的函数执行的脚本。ament扩展的最常见用例可能是注册rosidl消息生成器：当编写生成器时，通常希望使用生成器生成所有消息和服务，而无需修改消息/服务定义软件包的代码。通过将生成器注册为``rosidl_generate_interfaces``的扩展，可以实现这一点。@{"calib_text": " `[15587] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15587>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:412
msgid "As an example, see"
msgstr "例如，参见@{"calib_text": " `[15588] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15588>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:421
msgid "which registers the macro ``rosidl_generator_cpp_generate_interfaces.cmake`` for the package ``rosidl_generator_cpp`` to the extension point ``rosidl_generate_interfaces``. When the extension point gets executed, this will trigger the execution of the script ``rosidl_generator_cpp_generate_interfaces.cmake`` here. In particular, this will call the generator whenever the function ``rosidl_generate_interfaces`` gets executed."
msgstr "它为软件包 ``rosidl_generator_cpp`` 在扩展点 ``rosidl_generate_interfaces`` 上注册了宏 ``rosidl_generator_cpp_generate_interfaces.cmake`` 。当扩展点被执行时，它将触发在此处执行脚本 ``rosidl_generator_cpp_generate_interfaces.cmake`` 。特别地，这将在每次执行函数 ``rosidl_generate_interfaces`` 时调用生成器。@{"calib_text": " `[15589] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15589>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:425
msgid "The most important extension point for generators, aside from ``rosidl_generate_interfaces``, is ``ament_package``, which will simply execute scripts with the ``ament_package()`` call. This extension point is useful when registering resources (see below)."
msgstr "除了``rosidl_generate_interfaces``之外，生成器的最重要的扩展点是``ament_package``，它将通过``ament_package()``调用简单地执行脚本。在注册资源时，此扩展点非常有用（请参见下文）。@{"calib_text": " `[15590] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15590>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:428
msgid "``ament_register_extension`` is a function which takes exactly three arguments:"
msgstr "``ament_register_extension``是一个接受三个参数的函数：@{"calib_text": " `[15591] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15591>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:430
msgid "``extension_point``: The name of the extension point (most of the time this will be one of ``ament_package`` or ``rosidl_generate_interfaces``)"
msgstr "``extension_point``：扩展点的名称（大多数情况下，这将是 ``ament_package`` 或 ``rosidl_generate_interfaces`` 中的一个）@{"calib_text": " `[15592] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15592>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:432
msgid "``package_name``: The name of the package containing the CMake file (i.e. the project name of the project where the file is written to)"
msgstr "``package_name``：包含CMake文件的包的名称（即文件所在的项目的项目名称）@{"calib_text": " `[15593] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15593>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:434
msgid "``cmake_filename``: The CMake file executed when the extension point is run"
msgstr "``cmake_filename``：当运行扩展点时执行的CMake文件@{"calib_text": " `[15594] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15594>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:438
msgid "It is possible to define custom extension points in a similar manner to ``ament_package`` and ``rosidl_generate_interfaces``, but this should hardly be necessary."
msgstr "可以以类似于 ``ament_package`` 和 ``rosidl_generate_interfaces`` 的方式定义自定义扩展点，但这几乎是不必要的。@{"calib_text": " `[15595] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15595>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:441
msgid "Adding extension points"
msgstr "添加扩展点@{"calib_text": " `[15596] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15596>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:443
msgid "Very rarely, it might be interesting to define a new extension point to ament."
msgstr "非常罕见的情况下，定义一个新的扩展点到ament可能是有趣的。@{"calib_text": " `[15597] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15597>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:445
msgid "Extension points can be registered within a macro so that all extensions will be executed when the corresponding macro is called. To do so:"
msgstr "扩展点可以在宏中注册，以便在调用相应的宏时执行所有扩展。要实现这一点@{"calib_text": " `[15598] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15598>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:448
msgid "Define and document a name for your extension (e.g. ``my_extension_point``), which is the name passed to the ``ament_register_extension`` macro when using the extension point."
msgstr "为您的扩展定义和记录一个名称（例如``my_extension_point``），这个名称将在使用扩展点时传递给``ament_register_extension``宏。@{"calib_text": " `[15599] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15599>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:450
msgid "In the macro/function which should execute the extensions call:"
msgstr "在应执行扩展调用的宏/函数中：@{"calib_text": " `[15600] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15600>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:456
msgid "Ament extensions work by defining a variable containing the name of the extension point and filling it with the macros to be executed. Upon calling ``ament_execute_extensions``, the scripts defined in the variable are then executed one after another."
msgstr "Ament扩展通过定义一个变量来工作，该变量包含扩展点的名称，并用要执行的宏填充该变量。在调用``ament_execute_extensions``时，然后按顺序执行变量中定义的脚本。@{"calib_text": " `[15601] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15601>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:460
msgid "Adding resources"
msgstr "添加资源@{"calib_text": " `[15602] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15602>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:462
msgid "Especially when developing plugins or packages which allow plugins it is often essential to add resources to one ROS package from another (e.g. a plugin). Examples can be plugins for tools using the pluginlib."
msgstr "特别是在开发插件或允许插件的软件包时，通常需要从另一个ROS软件包（例如插件）中添加资源。示例可以是使用pluginlib的工具的插件。@{"calib_text": " `[15603] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15603>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:465
msgid "This can be achieved using the ament index (also called \"resource index\")."
msgstr "这可以通过使用ament索引（也称为“资源索引”）来实现。@{"calib_text": " `[15604] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15604>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:468
msgid "The ament index explained"
msgstr "解释ament索引@{"calib_text": " `[15605] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15605>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:470
msgid "For details on the design and intentions, see `here <https://github.com/ament/ament_cmake/blob/humble/ament_cmake_core/doc/resource_index.md>`__"
msgstr "有关设计和意图的详细信息，请参阅`此处 <https://github.com/ament/ament_cmake/blob/humble/ament_cmake_core/doc/resource_index.md>`__@{"calib_text": " `[15606] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15606>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:472
msgid "In principle, the ament index is contained in a folder within the install/share folder of your package. It contains shallow subfolders named after different types of resources. Within the subfolder, each package providing said resource is referenced by name with a \"marker file\". The file may contain whatever content necessary to obtain the resources, e.g. relative paths to the installation directories of the resource, it may also be simply empty."
msgstr "原则上，ament索引包含在您的软件包的install/share文件夹中的一个文件夹中。它包含以不同类型资源命名的浅层子文件夹。在子文件夹内，每个提供该资源的软件包都以“标记文件”的形式引用。该文件可以包含获取资源所需的任何内容，例如资源的安装目录的相对路径，也可以是空的。@{"calib_text": " `[15607] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15607>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:477
msgid "To give an example, consider providing display plugins for RViz: When providing RViz plugins in a project named ``my_rviz_displays`` which will be read by the pluginlib, you will provide a ``plugin_description.xml`` file, which will be installed and used by the pluginlib to load the plugins. To achieve this, the plugin_description.xml is registered as a resource in the resource_index via"
msgstr "举个例子，考虑为RViz提供显示插件：在名为``my_rviz_displays``的项目中提供RViz插件，这些插件将被pluginlib读取，您将提供一个``plugin_description.xml``文件，该文件将被安装和用于pluginlib来加载插件。为了实现这一点，通过资源索引将plugin_description.xml注册为资源@{"calib_text": " `[15608] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15608>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:485
msgid "When running ``colcon build``, this installs a file ``my_rviz_displays`` into a subfolder ``rviz_common__pluginlib__plugin`` into the resource_index. Pluginlib factories within rviz_common will know to gather information from all folders named ``rviz_common__pluginlib__plugin`` for packages that export plugins. The marker file for pluginlib factories contains an install-folder relative path to the ``plugins_description.xml`` file (and the name of the library as marker file name). With this information, the pluginlib can load the library and know which plugins to load from the ``plugin_description.xml`` file."
msgstr "运行``colcon build``时，它会将文件``my_rviz_displays``安装到resource_index的子文件夹``rviz_common__pluginlib__plugin``中。rviz_common内的Pluginlib工厂将从所有名为``rviz_common__pluginlib__plugin``的文件夹中收集来自导出插件的软件包的信息。Pluginlib工厂的标记文件包含到``plugins_description.xml``文件的安装文件夹相对路径（以及库的名称作为标记文件名）。有了这些信息，pluginlib可以加载库并从``plugin_description.xml``文件中知道要加载哪些插件。@{"calib_text": " `[15609] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15609>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:490
msgid "As a second example, consider the possibility to let your own RViz plugins use your own custom meshes. Meshes get loaded at startup time so that the plugin owner does not have to deal with it, but this implies RViz has to know about the meshes. To achieve this, RViz provides a function:"
msgstr "作为第二个例子，考虑让您自己的RViz插件使用您自己的自定义网格的可能性。网格在启动时加载，这样插件所有者就不必处理它，但这意味着RViz必须知道这些网格。为了实现这一点，RViz提供了一个函数：@{"calib_text": " `[15610] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15610>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:498
msgid "This registers the directories as an ogre_media resource in the ament index. In short, it installs a file named after the project which calls the function into a subfolder called ``rviz_ogre_media_exports``. The file contains the install folder relative paths to the directories listed in the macros. On startup time, RViz can now search for all folders called ``rviz_ogre_media_exports`` and load resources in all folders provided. These searches are done using ``ament_index_cpp`` (or ``ament_index_py`` for Python packages)."
msgstr "这将目录注册为ament索引中的ogre_media资源。简而言之，它会将名为该项目的文件安装到名为“rviz_ogre_media_exports”的子文件夹中，该文件调用该函数。该文件包含安装文件夹相对于宏中列出的目录的路径。在启动时，RViz现在可以搜索所有名为“rviz_ogre_media_exports”的文件夹，并加载所提供文件夹中的资源。这些搜索使用``ament_index_cpp``（对于Python软件包，使用``ament_index_py``）进行。@{"calib_text": " `[15611] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15611>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:504
msgid "In the following sections we will explore how to add your own resources to the ament index and provide best practices for doing so."
msgstr "在接下来的几节中，我们将探讨如何将您自己的资源添加到ament索引中，并提供最佳实践。@{"calib_text": " `[15612] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15612>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:507
msgid "Querying the ament index"
msgstr "查询ament索引@{"calib_text": " `[15613] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15613>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:509
msgid "If necessary, it is possible to query the ament index for resources via CMake. To do so, there are three functions:"
msgstr "如有必要，可以通过CMake查询ament索引中的资源。为此，有三个函数：@{"calib_text": " `[15614] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15614>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:512
msgid "``ament_index_has_resource``: Obtain a prefix path to the resource if it exists with the following parameters:"
msgstr "``ament_index_has_resource``：如果以下参数存在资源，则获取资源的前缀路径：@{"calib_text": " `[15615] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15615>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:514
msgid "``var``: the output parameter: fill this variable with FALSE if the resource does not exist or the prefix path to the resource otherwise"
msgstr "``var``：输出参数：如果资源不存在，请将此变量填充为FALSE，否则填充为资源的前缀路径@{"calib_text": " `[15616] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15616>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:516 ../../source/How-To-Guides/Ament-CMake-Documentation.rst:524 ../../source/How-To-Guides/Ament-CMake-Documentation.rst:536
msgid "``resource_type``: The type of the resource (e.g. ``rviz_common__pluginlib__plugin``)"
msgstr "``resource_type``：资源的类型（例如``rviz_common__pluginlib__plugin``）@{"calib_text": " `[15617] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15617>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:518 ../../source/How-To-Guides/Ament-CMake-Documentation.rst:526
msgid "``resource_name``: The name of the resource which usually amounts to the name of the package having added the resource of type resource_type (e.g. ``rviz_default_plugins``)"
msgstr "``resource_name``: 资源的名称通常等于添加资源的包的名称，资源的类型为 resource_type（例如 ``rviz_default_plugins``）。@{"calib_text": " `[15618] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15618>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:520
msgid "``ament_index_get_resource``: Obtain the content of a specific resource, i.e. the contents of the marker file in the ament index."
msgstr "``ament_index_get_resource``: 获取特定资源的内容，即 ament 索引中标记文件的内容。@{"calib_text": " `[15619] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15619>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:522
msgid "``var``: the output parameter: filled with the content of the resource marker file if it exists."
msgstr "``var``: 输出参数，如果存在，将填充资源标记文件的内容。@{"calib_text": " `[15620] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15620>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:528 ../../source/How-To-Guides/Ament-CMake-Documentation.rst:538
msgid "``PREFIX_PATH``: The prefix path to search for (usually, the default ``ament_index_get_prefix_path()`` will be enough)."
msgstr "``PREFIX_PATH``: 要搜索的前缀路径（通常，默认的 ``ament_index_get_prefix_path()`` 就足够了）。@{"calib_text": " `[15621] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15621>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:530
msgid "Note that ``ament_index_get_resource`` will throw an error if the resource does not exist, so it might be necessary to check using ``ament_index_has_resource``."
msgstr "请注意，如果资源不存在，``ament_index_get_resource`` 将抛出错误，因此可能需要使用 ``ament_index_has_resource`` 进行检查。@{"calib_text": " `[15622] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15622>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:532
msgid "``ament_index_get_resources``: Get all packages which registered resources of a specific type from the index"
msgstr "``ament_index_get_resources``：从索引中获取所有注册了特定类型资源的软件包@{"calib_text": " `[15623] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15623>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:534
msgid "``var``: Output parameter: filled with a list of names of all packages which registered a resource of resource_type"
msgstr "``var``：输出参数，包含所有注册了指定资源类型的软件包名称列表@{"calib_text": " `[15624] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15624>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:541
msgid "Adding to the ament index"
msgstr "添加到 ament 索引@{"calib_text": " `[15625] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15625>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:543
msgid "Defining a resource requires two bits of information:"
msgstr "定义资源需要两个信息：@{"calib_text": " `[15626] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15626>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:545
msgid "a name for the resource which must be unique,"
msgstr "资源的名称必须是唯一的，@{"calib_text": " `[15627] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15627>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:547
msgid "a layout of the marker file, which can be anything and could also be empty (this is true for instance for the \"package\" resource marking a ROS 2 package)"
msgstr "标记文件的布局可以是任意的，也可以是空的（例如，用于标记ROS 2包的“package”资源）@{"calib_text": " `[15628] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15628>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:549
msgid "For the RViz mesh resource, the corresponding choices were:"
msgstr "对于RViz网格资源，对应的选择是：@{"calib_text": " `[15629] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15629>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:551
msgid "``rviz_ogre_media_exports`` as name of the resource,"
msgstr "``rviz_ogre_media_exports`` 作为资源的名称，@{"calib_text": " `[15630] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15630>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:553
msgid "install path relative paths to all folders containing resources. This will already enable you to write the logic for using the corresponding resource in your package."
msgstr "安装路径相对于包含资源的所有文件夹的路径。这将使您能够编写使用包中相应资源的逻辑。@{"calib_text": " `[15631] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15631>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:555
msgid "To allow users to easily register resources for your package, you should furthermore provide macros or functions such as the pluginlib function or ``rviz_ogre_media_exports`` function."
msgstr "为了让用户能够轻松地为您的软件包注册资源，您还应该提供宏或函数，例如 pluginlib 函数或 ``rviz_ogre_media_exports`` 函数。@{"calib_text": " `[15632] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15632>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:557
msgid "To register a resource, use the ament function ``ament_index_register_resource``. This will create and install the marker files in the resource_index. As an example, the corresponding call for ``rviz_ogre_media_exports`` is the following:"
msgstr "要注册一个资源，请使用 ament 函数 ``ament_index_register_resource``。这将在资源索引中创建和安装标记文件。例如，对于 ``rviz_ogre_media_exports`` 的相应调用如下所示：@{"calib_text": " `[15633] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15633>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:565
msgid "This installs a file named like ``${PROJECT_NAME}`` into a folder ``rviz_ogre_media_exports`` into the resource_index with content given by variable ``${OGRE_MEDIA_RESOURCE_FILE}``. The macro has a number of parameters that can be useful:"
msgstr "这将安装一个名为 ``${PROJECT_NAME}`` 的文件到资源索引中的文件夹 ``rviz_ogre_media_exports`` 中，其内容由变量 ``${OGRE_MEDIA_RESOURCE_FILE}`` 提供。该宏有一些可能有用的参数：@{"calib_text": " `[15634] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15634>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:568
msgid "the first (unnamed) parameter is the name of the resource, which amounts to the name of the folder in the resource_index"
msgstr "第一个（无名称）参数是资源的名称，对应于资源索引中文件夹的名称@{"calib_text": " `[15635] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15635>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:570
msgid "``CONTENT``: The content of the marker file as string. This could be a list of relative paths, etc. ``CONTENT`` cannot be used together with ``CONTENT_FILE``."
msgstr "``CONTENT``: 标记文件的内容作为字符串。这可以是一个相对路径列表等。``CONTENT`` 不能与 ``CONTENT_FILE`` 一起使用。@{"calib_text": " `[15636] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15636>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:572
msgid "``CONTENT_FILE``: The path to a file which will be use to create the marker file. The file can be a plain file or a template file expanded with ``configure_file()``. ``CONTENT_FILE`` cannot be used together with ``CONTENT``."
msgstr "``CONTENT_FILE``: 用于创建标记文件的文件的路径。该文件可以是一个普通文件或使用 ``configure_file()`` 扩展的模板文件。``CONTENT_FILE`` 不能与 ``CONTENT`` 一起使用。@{"calib_text": " `[15637] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15637>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:575
msgid "``PACKAGE_NAME``: The name of the package/library exporting the resource, which amounts to the name of the marker file. Defaults to ``${PROJECT_NAME}``."
msgstr "``PACKAGE_NAME``：导出资源的软件包/库的名称，即标记文件的名称。默认为 ``${PROJECT_NAME}``。@{"calib_text": " `[15638] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15638>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:577
msgid "``AMENT_INDEX_BINARY_DIR``: The base path of the generated ament index. Unless really necessary, always use the default ``${CMAKE_BINARY_DIR}/ament_cmake_index``."
msgstr "``AMENT_INDEX_BINARY_DIR``：生成的ament索引的基路径。除非真的有必要，否则始终使用默认值 ``${CMAKE_BINARY_DIR}/ament_cmake_index``。@{"calib_text": " `[15639] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15639>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:579
msgid "``SKIP_INSTALL``: Skip installing the marker file."
msgstr "``SKIP_INSTALL``：跳过安装标记文件。@{"calib_text": " `[15640] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15640>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:581
msgid "Since only one marker file exists per package, it is usually a problem if the CMake function/macro gets called twice by the same project. However, for large projects it might be best to split up calls registering resources."
msgstr "由于每个软件包只存在一个标记文件，如果同一项目调用了两次CMake函数/宏，则通常会出现问题。然而，对于大型项目，最好将调用注册资源的操作拆分为多次。@{"calib_text": " `[15641] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15641>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:584
msgid "Therefore, it is best practice to let a macro registering a resource such as ``register_rviz_ogre_media_exports.cmake`` only fill some variables. The real call to ``ament_index_register_resource`` can then be added within an ament extension to ``ament_package``. Since there must only ever be one call to ``ament_package`` per project, there will always only be one place where the resource gets registered. In the case of ``rviz_ogre_media_exports`` this amounts to the following strategy:"
msgstr "因此，最佳实践是让一个注册资源的宏，例如 ``register_rviz_ogre_media_exports.cmake``，仅填充一些变量。然后，在 ``ament_package`` 的扩展中添加对 ``ament_index_register_resource`` 的真实调用。由于每个项目只能有一次对 ``ament_package`` 的调用，因此资源的注册始终只有一个位置。对于 ``rviz_ogre_media_exports``，这就是以下策略：@{"calib_text": " `[15642] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15642>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:589
msgid "The macro ``register_rviz_ogre_media_exports`` takes a list of folders and appends them to a variable called ``OGRE_MEDIA_RESOURCE_FILE``."
msgstr "宏 ``register_rviz_ogre_media_exports`` 接受一个文件夹列表，并将它们附加到名为 ``OGRE_MEDIA_RESOURCE_FILE`` 的变量中。@{"calib_text": " `[15643] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15643>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:591
msgid "Another macro called ``register_rviz_ogre_media_exports_hook`` calls ``ament_index_register_resource`` if ``${OGRE_MEDIA_RESOURCE_FILE}`` is non-empty."
msgstr "另一个名为 ``register_rviz_ogre_media_exports_hook`` 的宏在 ``${OGRE_MEDIA_RESOURCE_FILE}`` 非空时调用 ``ament_index_register_resource``。@{"calib_text": " `[15644] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15644>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:593
msgid "The ``register_rviz_ogre_media_exports_hook.cmake`` file is registered as an ament extension in a third file ``register_rviz_ogre_media_exports_hook-extras.cmake`` via calling"
msgstr "通过调用，将 ``register_rviz_ogre_media_exports_hook.cmake`` 文件在第三个文件 ``register_rviz_ogre_media_exports_hook-extras.cmake`` 中注册为 ament 扩展@{"calib_text": " `[15645] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15645>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:600
msgid "The files ``register_rviz_ogre_media_exports.cmake`` and ``register_rviz_ogre_media_exports_hook-extra.cmake`` are registered as ``CONFIG_EXTRA`` with ``ament_package()``."
msgstr "文件 ``register_rviz_ogre_media_exports.cmake`` 和 ``register_rviz_ogre_media_exports_hook-extra.cmake`` 在 ``ament_package()`` 中被注册为 ``CONFIG_EXTRA``。@{"calib_text": " `[15646] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15646>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:6
msgid "ament_cmake_python user documentation"
msgstr "ament_cmake_python 用户文档@{"calib_text": " `[158] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=158>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:8
msgid "``ament_cmake_python`` is a package that provides CMake functions for packages of the ``ament_cmake`` build type that contain Python code. See the :doc:`ament_cmake user documentation <Ament-CMake-Documentation>` for more information."
msgstr "``ament_cmake_python`` 是一个为包含 Python 代码的 ``ament_cmake`` 构建类型的软件包提供 CMake 函数的软件包。有关更多信息，请参阅 :doc:`ament_cmake 用户文档 <Ament-CMake-Documentation>`。@{"calib_text": " `[159] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=159>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:13
msgid "Pure Python packages should use the ``ament_python`` build type in most cases. To create an ``ament_python`` package, see :doc:`Creating your first ROS 2 package <../Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`. ``ament_cmake_python`` should only be used in cases where that is not possible, like when mixing C/C++ and Python code."
msgstr "在大多数情况下，纯 Python 包应使用 ``ament_python`` 构建类型。要创建一个 ``ament_python`` 包，请参阅 :doc:`创建你的第一个 ROS 2 包 <../Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`。``ament_cmake_python`` 仅在不可能的情况下才应使用，例如在混合使用 C/C++ 和 Python 代码时。@{"calib_text": " `[160] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=160>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:28
msgid "The outline of a package called \"my_project\" with the ``ament_cmake`` build type that uses ``ament_cmake_python`` looks like:"
msgstr "具有``ament_cmake``构建类型，并使用``ament_cmake_python``的名为\"my_project\"的软件包的概要如下：@{"calib_text": " `[161] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=161>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:40
msgid "The ``__init__.py`` file can be empty, but it is needed to `make Python treat the directory containing it as a package <https://docs.python.org/3/tutorial/modules.html#packages>`__. There can also be a ``src`` or ``include`` directory alongside the ``CMakeLists.txt`` which holds C/C++ code."
msgstr "``__init__.py``文件可以为空，但需要它来`使Python将包含它的目录视为软件包 <https://docs.python.org/3/tutorial/modules.html#packages>`__。在``CMakeLists.txt``旁边还可以有一个包含C/C++代码的``src``或``include``目录。@{"calib_text": " `[162] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=162>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:44
msgid "Using ament_cmake_python"
msgstr "使用ament_cmake_python@{"calib_text": " `[163] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=163>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:46
msgid "The package must declare a dependency on ``ament_cmake_python`` in its ``package.xml``."
msgstr "该软件包必须在其``package.xml``中声明对``ament_cmake_python``的依赖关系。@{"calib_text": " `[164] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=164>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:52 ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:100
msgid "The ``CMakeLists.txt`` should contain:"
msgstr "``CMakeLists.txt`` 应包含：@{"calib_text": " `[165] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=165>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:60
msgid "The argument to ``ament_python_install_package()`` is the name of the directory alongside the ``CMakeLists.txt`` that contains the Python file. In this case, it is ``my_project``, or ``${PROJECT_NAME}``."
msgstr "``ament_python_install_package()`` 的参数是与包含 Python 文件的 ``CMakeLists.txt`` 并列的目录的名称。在这种情况下，它是 ``my_project`` 或者 ``${PROJECT_NAME}``。@{"calib_text": " `[166] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=166>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:65
msgid "Calling ``rosidl_generate_interfaces`` and ``ament_python_install_package`` in the same CMake project does not work. See this `Github issue <https://github.com/ros2/rosidl_python/issues/141>`_ for more info. It is best practice to instead separate out the message generation into a separate package."
msgstr "在同一个 CMake 项目中调用 ``rosidl_generate_interfaces`` 和 ``ament_python_install_package`` 是不起作用的。请参阅此 `Github 问题 <https://github.com/ros2/rosidl_python/issues/141>`_ 了解更多信息。最佳实践是将消息生成分离到一个单独的包中。@{"calib_text": " `[167] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=167>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:69
msgid "Then, another Python package that correctly depends on ``my_project`` can use it as a normal Python module:"
msgstr "然后，另一个正确依赖于 ``my_project`` 的 Python 包可以将其作为普通的 Python 模块使用：@{"calib_text": " `[168] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=168>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:75
msgid "Assuming ``my_script.py`` contains a function called ``my_function()``."
msgstr "假设 ``my_script.py`` 包含一个名为 ``my_function()`` 的函数。@{"calib_text": " `[169] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=169>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:78
msgid "Using ament_cmake_pytest"
msgstr "使用 ament_cmake_pytest@{"calib_text": " `[170] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=170>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:80
msgid "The package ``ament_cmake_pytest`` is used to make tests discoverable to ``cmake``. The package must declare a test dependency on ``ament_cmake_pytest`` in its ``package.xml``."
msgstr "包 ``ament_cmake_pytest`` 用于使测试在 ``cmake`` 中可被发现。包必须在其 ``package.xml`` 中声明对 ``ament_cmake_pytest`` 的测试依赖。@{"calib_text": " `[171] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=171>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:87
msgid "Say the package has a file structure like below, with tests in the ``tests`` folder."
msgstr "假设该包的文件结构如下所示，其中的测试位于 ``tests`` 文件夹中。@{"calib_text": " `[172] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=172>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:121
msgid "Compared to the usage of ament_python, which supports automatic test discovery, ament_cmake_pytest must be called with the path to each test file. The timeout can be reduced as needed."
msgstr "与支持自动测试发现的ament_python的使用相比，ament_cmake_pytest必须使用每个测试文件的路径进行调用。超时时间可以根据需要缩短。@{"calib_text": " `[173] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=173>`_ "}@"


#: ../../source/How-To-Guides/Ament-CMake-Python-Documentation.rst:124
msgid "Now, you can invoke your tests with the :doc:`standard colcon testing commands <../Tutorials/Intermediate/Testing/CLI>`."
msgstr "现在，您可以使用:doc:`标准的colcon测试命令<../Tutorials/Intermediate/Testing/CLI>`来调用您的测试。@{"calib_text": " `[174] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=174>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:2
msgid "Building ROS 2 with tracing instrumentation"
msgstr "使用跟踪工具构建ROS 2@{"calib_text": " `[175] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=175>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:8
msgid "This guide shows you how to build ROS 2 with the tracing instrumentation provided by ``ros2_tracing``. For more information, see `the repository <https://github.com/ros2/ros2_tracing>`__."
msgstr "本指南介绍了如何使用``ros2_tracing``提供的跟踪工具构建ROS 2。更多信息请参见`存储库 <https://github.com/ros2/ros2_tracing>`__。@{"calib_text": " `[176] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=176>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:11
msgid "Instrumentation is included in the ROS 2 source code. However, if using the binaries or when building from source, the instrumentation does not actually trigger tracepoints by default. To get the tracepoints, the LTTng tracer needs to be installed, and then part of ROS 2 needs to be (re)built from source."
msgstr "ROS 2源代码中包含了工具仪器。然而，如果使用二进制文件或从源代码构建时，默认情况下工具仪器不会触发跟踪点。要获取跟踪点，需要安装LTTng跟踪器，然后重新从源代码构建ROS 2的一部分。@{"calib_text": " `[177] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=177>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:17
msgid "This guide only applies to Linux systems and assumes that Ubuntu is used."
msgstr "本指南仅适用于Linux系统，并假设使用的是Ubuntu。@{"calib_text": " `[178] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=178>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:20 ../../source/How-To-Guides/Building-a-Custom-Debian-Package.rst:15 ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:18 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:16 ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:17
msgid "Prerequisites"
msgstr "先决条件@{"calib_text": " `[15647] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15647>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:22
msgid "Set up your system to build ROS 2 from source. See :doc:`the source installation page <../Installation/Alternatives/Ubuntu-Development-Setup>` for more information."
msgstr "设置您的系统以从源代码构建ROS 2。有关更多信息，请参阅:doc:`源安装页面 <../Installation/Alternatives/Ubuntu-Development-Setup>`。@{"calib_text": " `[180] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=180>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:26
msgid "Installing the tracer"
msgstr "安装追踪器@{"calib_text": " `[181] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=181>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:28
msgid "Install the `LTTng tracer <https://lttng.org/docs>`__ and related tools and dependencies."
msgstr "安装 `LTTng追踪器 <https://lttng.org/docs>`__ 及其相关工具和依赖项。@{"calib_text": " `[182] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=182>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:35
msgid "This only installs the LTTng userspace tracer, and not the LTTng kernel tracer, since it is not needed to trace ROS 2 applications."
msgstr "这只安装了LTTng用户空间追踪器，而不安装LTTng内核追踪器，因为它不需要跟踪ROS 2应用程序。@{"calib_text": " `[183] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=183>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:38
msgid "Building"
msgstr "构建中@{"calib_text": " `[184] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=184>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:40
msgid "This step depends on whether you are building ROS 2 from source or using ROS 2 binaries."
msgstr "这一步取决于您是从源代码构建ROS 2还是使用ROS 2二进制文件。@{"calib_text": " `[185] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=185>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:43
msgid "With source installation"
msgstr "使用源代码安装@{"calib_text": " `[186] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=186>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:45
msgid "If you have already :doc:`built ROS 2 from source <../Installation/Alternatives/Ubuntu-Development-Setup>` before installing LTTng, you will need to re-build at least up to the ``tracetools`` package:"
msgstr "如果在安装LTTng之前已经 :doc:`从源代码构建了ROS 2 <../Installation/Alternatives/Ubuntu-Development-Setup>`，您将需要重新构建至少到 ``tracetools`` 软件包：@{"calib_text": " `[187] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=187>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:53
msgid "With binary installation"
msgstr "使用二进制安装@{"calib_text": " `[188] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=188>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:55
msgid "If you rely on the ROS 2 binaries (:doc:`Debian packages <../Installation/Ubuntu-Install-Debians>` or :doc:`\"fat\" archive <../Installation/Alternatives/Ubuntu-Install-Binary>`), you will need to clone the ``ros2_tracing`` repository into your workspace and build at least up to the ``tracetools`` package:"
msgstr "如果您依赖于ROS 2二进制文件（:doc:`Debian packages <../Installation/Ubuntu-Install-Debians>`或:doc:`\"fat\" archive <../Installation/Alternatives/Ubuntu-Install-Binary>`），您需要将``ros2_tracing``存储库克隆到您的工作空间中，并至少构建到``tracetools``包为止：@{"calib_text": " `[189] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=189>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:65
msgid "Validating"
msgstr "正在验证@{"calib_text": " `[190] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=190>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:67
msgid "Source and validate that tracing is enabled:"
msgstr "源代码并验证跟踪已启用：@{"calib_text": " `[191] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=191>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:75
msgid "It should print out:"
msgstr "它应该打印出：@{"calib_text": " `[192] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=192>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:81
msgid "If something else is printed, then something went wrong."
msgstr "如果打印出其他内容，那么出现了错误。@{"calib_text": " `[193] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=193>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:84
msgid "Disabling tracing"
msgstr "禁用跟踪@{"calib_text": " `[194] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=194>`_ "}@"


#: ../../source/How-To-Guides/Building-ROS-2-with-Tracing-Instrumentation.rst:86
msgid "If the LTTng userspace tracer is installed and found when building ``tracetools``, tracing will be automatically enabled. Alternatively, to build and completely remove both the tracepoints and the tracing instrumentation from ROS 2, set the ``TRACETOOLS_DISABLED`` CMake option to ``ON``:"
msgstr "如果在构建``tracetools``时安装并找到了LTTng用户空间跟踪器，将自动启用跟踪。或者，要从ROS 2中构建并完全删除跟踪点和跟踪工具，将``TRACETOOLS_DISABLED`` CMake选项设置为``ON``：@{"calib_text": " `[195] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=195>`_ "}@"


#: ../../source/How-To-Guides/Building-a-Custom-Debian-Package.rst:6
msgid "Building a custom Debian package"
msgstr "构建自定义的Debian软件包@{"calib_text": " `[196] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=196>`_ "}@"


#: ../../source/How-To-Guides/Building-a-Custom-Debian-Package.rst:8
msgid "Many Ubuntu users install ROS 2 on their system by installing :doc:`debian packages <../Installation/Ubuntu-Install-Debians>`. This guide gives a short set of instructions to build local, custom Debian packages."
msgstr "许多Ubuntu用户通过安装:doc:`Debian软件包 <../Installation/Ubuntu-Install-Debians>`在其系统上安装ROS 2。本指南提供了一组简短的说明，用于构建本地的自定义Debian软件包。@{"calib_text": " `[197] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=197>`_ "}@"


#: ../../source/How-To-Guides/Building-a-Custom-Debian-Package.rst:17
msgid "To successfully build a custom package, all of the dependencies of the package to be built must be available locally or in rosdep. Additionally, all of the dependencies of the package should be properly declared in the ``package.xml`` file of the package."
msgstr "为了成功构建自定义软件包，构建软件包的所有依赖项必须在本地或rosdep中可用。此外，软件包的所有依赖项应在软件包的``package.xml``文件中正确声明。@{"calib_text": " `[198] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=198>`_ "}@"


#: ../../source/How-To-Guides/Building-a-Custom-Debian-Package.rst:21 ../../source/How-To-Guides/RQt-Source-Install-MacOS.rst:24 ../../source/How-To-Guides/Releasing/First-Time-Release.rst:27 ../../source/How-To-Guides/Releasing/Subsequent-Releases.rst:16
msgid "Install dependencies"
msgstr "安装依赖项@{"calib_text": " `[199] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=199>`_ "}@"


#: ../../source/How-To-Guides/Building-a-Custom-Debian-Package.rst:23
msgid "Run the following command to install utilities needed for the build:"
msgstr "运行以下命令安装构建所需的实用工具：@{"calib_text": " `[200] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=200>`_ "}@"


#: ../../source/How-To-Guides/Building-a-Custom-Debian-Package.rst:30
msgid "Initialize rosdep"
msgstr "初始化 rosdep@{"calib_text": " `[201] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=201>`_ "}@"


#: ../../source/How-To-Guides/Building-a-Custom-Debian-Package.rst:32
msgid "Initialize the rosdep database by calling:"
msgstr "通过调用以下命令来初始化 rosdep 数据库：@{"calib_text": " `[202] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=202>`_ "}@"


#: ../../source/How-To-Guides/Building-a-Custom-Debian-Package.rst:39
msgid "Note that the ``rosdep init`` command may fail if it has already been initialized in the past; this can safely be ignored."
msgstr "请注意，如果 rosdep 在过去已经被初始化过，``rosdep init`` 命令可能会失败，但可以安全地忽略这个错误。@{"calib_text": " `[203] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=203>`_ "}@"


#: ../../source/How-To-Guides/Building-a-Custom-Debian-Package.rst:42
msgid "Build the debian from the package"
msgstr "从软件包中构建 Debian 包@{"calib_text": " `[204] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=204>`_ "}@"


#: ../../source/How-To-Guides/Building-a-Custom-Debian-Package.rst:44
msgid "Run the following commands to build the debian:"
msgstr "运行以下命令以构建Debian：@{"calib_text": " `[205] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=205>`_ "}@"


#: ../../source/How-To-Guides/Building-a-Custom-Debian-Package.rst:52
msgid "Assuming that all required dependencies are available and that compilation succeeds, the new package will be available in the parent directory of this directory."
msgstr "假设所有所需的依赖项都可用且编译成功，新软件包将在此目录的上级目录中可用。@{"calib_text": " `[206] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=206>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:7
msgid "Cross-compilation"
msgstr "交叉编译@{"calib_text": " `[207] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=207>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:13
msgid "For background information on cross-compilation, see the :doc:`conceptual article <../Concepts/Intermediate/About-Cross-Compilation>`."
msgstr "有关交叉编译的背景信息，请参阅 :doc:`概念文章 <../Concepts/Intermediate/About-Cross-Compilation>`。@{"calib_text": " `[15648] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15648>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:15
msgid "This document provides you with details on how to cross-compile the ROS 2 software stack as well as provide examples for cross-compiling to systems based on the Arm cores."
msgstr "本文档为您提供有关如何交叉编译ROS 2软件栈的详细信息，以及提供基于Arm核心的系统的交叉编译示例。@{"calib_text": " `[209] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=209>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:18
msgid "cross_compile tool"
msgstr "交叉编译工具@{"calib_text": " `[210] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=210>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:20
msgid "Instructions to use the tool are in the `cross_compile package <https://github.com/ros-tooling/cross_compile>`__."
msgstr "使用该工具的说明在 `cross_compile package <https://github.com/ros-tooling/cross_compile>`__ 中。@{"calib_text": " `[211] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=211>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:23
msgid "Legacy tool instructions"
msgstr "传统工具说明@{"calib_text": " `[212] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=212>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:25
msgid "Follow the steps below only if you are using the old version (release `0.0.1 <https://github.com/ros-tooling/cross_compile/releases/tag/0.0.1>`__) of the cross-compile tool. For all other purposes, follow the `cross_compile <https://github.com/ros-tooling/cross_compile>`__ package documentation."
msgstr "只有在使用旧版本（发布版 `0.0.1 <https://github.com/ros-tooling/cross_compile/releases/tag/0.0.1>`__）的交叉编译工具时才按照以下步骤操作。对于其他情况，请参考 `cross_compile <https://github.com/ros-tooling/cross_compile>`__ 包文档。@{"calib_text": " `[213] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=213>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:29
msgid "Although ROS 2 is a rich software stack with a number of dependencies, it primarily uses two different types of packages:"
msgstr "尽管ROS 2是一个具有多个依赖项的丰富软件堆栈，但它主要使用两种不同类型的软件包：@{"calib_text": " `[214] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=214>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:28
msgid "Python based software, which requires no cross-compilation."
msgstr "基于Python的软件，不需要进行交叉编译。@{"calib_text": " `[215] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=215>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:29
msgid "CMake based software, which provides a mechanism to do cross-compilation."
msgstr "基于CMake的软件，提供了进行交叉编译的机制。@{"calib_text": " `[216] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=216>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:31
msgid "Furthermore, the ROS 2 software stack is built with `Colcon <https://github.com/colcon/colcon-core>`__ which provides a mechanism to forward parameters to the CMake instance used for the individual build of each package/library that is part of the ROS 2 distribution."
msgstr "此外，ROS 2 软件栈使用 `Colcon <https://github.com/colcon/colcon-core>`__ 构建，它提供了一种机制，可以将参数传递给用于构建 ROS 2 发行版中每个包/库的单独构建的 CMake 实例。@{"calib_text": " `[217] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=217>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:33
msgid "When building ROS 2 natively, the developer is required to download all the dependencies (e.g. Python and other libraries) before compiling the packages that are part of the ROS 2 distribution. When cross-compiling, the same approach is required. The developer must first have the target system's filesystem with all dependencies already installed."
msgstr "在本地构建 ROS 2 时，开发人员需要在编译 ROS 2 发行版中的包之前下载所有的依赖项（例如 Python 和其他库）。在交叉编译时，也需要相同的方法。开发人员必须首先拥有目标系统的文件系统，并已安装所有的依赖项。@{"calib_text": " `[218] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=218>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:35
msgid "The next sections of this document explain in detail the use of `cmake-toolchains <https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html>`__ and the `CMAKE_SYSROOT <https://cmake.org/cmake/help/latest/variable/CMAKE_SYSROOT.html>`__ feature to cross-compile ROS 2."
msgstr "本文档的后续部分详细说明了使用 `cmake-toolchains <https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html>`__ 和 `CMAKE_SYSROOT <https://cmake.org/cmake/help/latest/variable/CMAKE_SYSROOT.html>`__ 功能进行 ROS 2 交叉编译的方法。@{"calib_text": " `[219] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=219>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:38
msgid "CMake toolchain-file"
msgstr "CMake 工具链文件@{"calib_text": " `[220] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=220>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:40
msgid "A CMake toolchain-file is a file which defines variables to configure CMake for cross-compilation. The basic entries are:"
msgstr "CMake工具链文件是用于配置CMake进行交叉编译的文件，它定义了变量。基本条目如下：@{"calib_text": " `[221] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=221>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:42
msgid "``CMAKE_SYSTEM_NAME``: the target platform, e.g. ``linux``"
msgstr "``CMAKE_SYSTEM_NAME``：目标平台，例如``linux``@{"calib_text": " `[222] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=222>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:43
msgid "``CMAKE_SYSTEM_PROCESSOR``: the target architecture, e.g. ``aarch64`` or ``arm``"
msgstr "``CMAKE_SYSTEM_PROCESSOR``：目标架构，例如``aarch64``或``arm``@{"calib_text": " `[223] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=223>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:44
msgid "``CMAKE_SYSROOT``: the path to the target file-system"
msgstr "``CMAKE_SYSROOT``：目标文件系统的路径@{"calib_text": " `[224] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=224>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:45
msgid "``CMAKE_C_COMPILER``: the C cross-compiler, e.g. ``aarch64-linux-gnu-gcc``"
msgstr "``CMAKE_C_COMPILER``：C交叉编译器，例如``aarch64-linux-gnu-gcc``@{"calib_text": " `[225] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=225>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:46
msgid "``CMAKE_CXX_COMPILER``: the C++ cross-compiler, e.g. ``aarch64-linux-gnu-g++``"
msgstr "``CMAKE_CXX_COMPILER``：C++交叉编译器，例如``aarch64-linux-gnu-g++``@{"calib_text": " `[226] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=226>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:47
msgid "``CMAKE_FIND_ROOT_PATH``: an alternative path used by the ``find_*`` command to find the file-system"
msgstr "``CMAKE_FIND_ROOT_PATH``：``find_*``命令用来查找文件系统的替代路径@{"calib_text": " `[227] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=227>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:49
msgid "When cross-compiling ROS 2, the following options are required to be set:"
msgstr "在进行ROS 2交叉编译时，需要设置以下选项：@{"calib_text": " `[228] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=228>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:51
msgid "``CMAKE_FIND_ROOT_PATH``: the alternative path used by the ``find_*`` command, use it to specify the path to ROS 2 ``/install`` folder"
msgstr "``CMAKE_FIND_ROOT_PATH``：``find_*``命令使用的替代路径，用于指定ROS 2 ``/install``文件夹的路径@{"calib_text": " `[229] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=229>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:52
msgid "``CMAKE_FIND_ROOT_PATH_MODE_*``: the search strategy for program,package,library, and include, usually: ``NEVER`` (look on the host-fs), ``ONLY`` (look on sysroot), and ``BOTH`` (look on both sysroot and host-fs)"
msgstr "``CMAKE_FIND_ROOT_PATH_MODE_*``：程序、包、库和包含文件的搜索策略，通常有：``NEVER``（在主机文件系统上查找）、``ONLY``（在sysroot上查找）和``BOTH``（在sysroot和主机文件系统上都查找）@{"calib_text": " `[230] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=230>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:53
msgid "``PYTHON_SOABI``: the index name of the python libraries generated by ROS 2, e.g. ``cpython-36m-aarch64-linux-gnu``"
msgstr "``PYTHON_SOABI``：由ROS 2生成的Python库的索引名称，例如``cpython-36m-aarch64-linux-gnu``@{"calib_text": " `[231] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=231>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:54
msgid "``THREADS_PTHREAD_ARG \"0\" CACHE STRING \"Result from TRY_RUN\" FORCE``: Force the result of the ``TRY_RUN`` cmd to 0 (success) because binaries can not run on the host system."
msgstr "``THREADS_PTHREAD_ARG \"0\" CACHE STRING \"Result from TRY_RUN\" FORCE``：将``TRY_RUN``命令的结果强制为0（成功），因为二进制文件无法在主机系统上运行。@{"calib_text": " `[232] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=232>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:56
msgid "The toolchain-file is provided to CMake with the ``-DCMAKE_TOOLCHAIN_FILE=path/to/file`` parameter. This will also set the ``CMAKE_CROSSCOMPILING`` variable to ``true`` which can be used by the software being built."
msgstr "将工具链文件提供给CMake时，使用``-DCMAKE_TOOLCHAIN_FILE=path/to/file``参数。这还将把``CMAKE_CROSSCOMPILING``变量设置为``true``，软件构建时可以使用该变量。@{"calib_text": " `[233] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=233>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:58
msgid "The ``CMAKE_SYSROOT`` is particularly important for ROS 2 as the packages need many dependencies (e.g. python, openssl, opencv, poco, eigen3, ...). Setting ``CMAKE_SYSROOT`` to a target file-system with all the dependencies installed on it will allow CMake to find them during the cross-compilation."
msgstr "对于ROS 2来说，``CMAKE_SYSROOT``非常重要，因为软件包需要许多依赖项（例如python、openssl、opencv、poco、eigen3等）。将``CMAKE_SYSROOT``设置为安装了所有依赖项的目标文件系统，将允许CMake在交叉编译过程中找到它们。@{"calib_text": " `[234] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=234>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:61
msgid "You can find more information on the CMake `documentation <https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html>`__ page."
msgstr "您可以在CMake的 `文档 <https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html>`__ 页面上找到更多信息。@{"calib_text": " `[235] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=235>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:63
msgid "When downloading the ROS 2 source code, a generic toolchain-file is available in the repository `ros-tooling/cross_compile/cmake-toolchains <https://github.com/ros-tooling/cross_compile>`__ which can be downloaded separately. Further examples on using it can be found on the `Cross-compiling examples for Arm`_ section."
msgstr "在下载ROS 2源代码时，存储库`ros-tooling/cross_compile/cmake-toolchains <https://github.com/ros-tooling/cross_compile>`__中提供了一个通用的工具链文件，可以单独下载。有关如何使用它的更多示例，请参阅`Cross-compiling examples for Arm`_部分。@{"calib_text": " `[236] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=236>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:66
msgid "Target file-system"
msgstr "目标文件系统@{"calib_text": " `[237] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=237>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:68
msgid "As mentioned previously, ROS 2 requires different libraries which needs to be provided to cross-compile."
msgstr "如前所述，ROS 2需要不同的库文件来进行交叉编译。@{"calib_text": " `[238] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=238>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:73
msgid "There are a number of ways to obtain the file-system:"
msgstr "获取文件系统有多种方式：@{"calib_text": " `[239] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=239>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:71
msgid "downloading a pre-built image"
msgstr "下载预构建的映像@{"calib_text": " `[240] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=240>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:72
msgid "installing the dependencies on the target and exporting the file-system (e.g. with sshfs)"
msgstr "在目标设备上安装依赖项并导出文件系统（例如使用sshfs）@{"calib_text": " `[241] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=241>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:73
msgid "using qemu + docker (or chroot) to generate the file-system on the host machine."
msgstr "使用qemu + docker（或chroot）在主机上生成文件系统。@{"calib_text": " `[242] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=242>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:75
msgid "You can find information on how to use Docker + qemu on the next `Cross-compiling examples for Arm`_ section."
msgstr "您可以在接下来的`Cross-compiling examples for Arm`_部分找到有关如何使用Docker + qemu的信息。@{"calib_text": " `[243] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=243>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:78
msgid "Build process"
msgstr "构建过程@{"calib_text": " `[244] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=244>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:80
msgid "The build process is similar to native compilation. The only difference is an extra argument to ``Colcon`` to specify the ``toolchain-file``:"
msgstr "构建过程类似于本地编译，唯一的区别是给 ``Colcon`` 添加了一个额外的参数来指定 ``toolchain-file``：@{"calib_text": " `[245] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=245>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:89
msgid "The ``toolchain-file`` provide to CMake the information of the ``cross-compiler`` and the ``target file-system``. ``Colcon`` will call CMake with the given toolchain-file on every package of ROS 2."
msgstr "``toolchain-file`` 提供给 CMake 有关 ``交叉编译器`` 和 ``目标文件系统`` 的信息。``Colcon`` 将在 ROS 2 的每个软件包上使用给定的 toolchain-file 来调用 CMake。@{"calib_text": " `[246] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=246>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:93
msgid "Cross-compiling examples for Arm"
msgstr "为 Arm 进行交叉编译示例@{"calib_text": " `[247] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=247>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:94
msgid "After :doc:`downloading the ROS 2 source code <../Installation/Alternatives/Ubuntu-Development-Setup>`, you can add cross-compilation assets to the workspace via ``git clone https://github.com/ros-tooling/cross_compile.git -b 0.0.1 src/ros2/cross_compile``. These are working examples on how to cross-compile for Arm cores."
msgstr "在 :doc:`下载 ROS 2 源代码 <../Installation/Alternatives/Ubuntu-Development-Setup>` 后，您可以通过 ``git clone https://github.com/ros-tooling/cross_compile.git -b 0.0.1 src/ros2/cross_compile`` 将交叉编译资产添加到工作空间。这些是关于如何为 Arm 内核进行交叉编译的可行示例。@{"calib_text": " `[248] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=248>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:98
msgid "The following targets are supported:"
msgstr "支持以下目标：@{"calib_text": " `[249] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=249>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:97
msgid "Ubuntu-arm64: To be used with any ARMv8-A based system."
msgstr "Ubuntu-arm64：适用于任何基于ARMv8-A的系统。@{"calib_text": " `[250] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=250>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:98
msgid "Ubuntu-armhf: To be used with any modern ARMv7-A based system."
msgstr "Ubuntu-armhf：适用于任何现代基于ARMv7-A的系统。@{"calib_text": " `[251] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=251>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:105
msgid "These are the main steps:"
msgstr "以下是主要步骤：@{"calib_text": " `[252] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=252>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:101
msgid "Installing development tools"
msgstr "安装开发工具@{"calib_text": " `[253] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=253>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:102
msgid "Downloading ROS 2 source code"
msgstr "下载 ROS 2 源代码@{"calib_text": " `[254] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=254>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:103
msgid "Downloading the ROS 2 cross-compilation assets"
msgstr "下载 ROS 2 交叉编译资产@{"calib_text": " `[255] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=255>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:104
msgid "Preparing the sysroot"
msgstr "准备 sysroot@{"calib_text": " `[256] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=256>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:105
msgid "Cross-compiling the ROS 2 software stack"
msgstr "交叉编译ROS 2软件栈@{"calib_text": " `[257] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=257>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:107
msgid "The next sections explains in detail each of these steps. For a quick-setup, have a look at the `Automated Cross-compilation`_."
msgstr "下面的章节详细解释了每个步骤。如果需要快速设置，请参阅`Automated Cross-compilation`_。@{"calib_text": " `[258] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=258>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:110
msgid "These steps were tested on an Ubuntu 18.04 (Bionic)"
msgstr "这些步骤在Ubuntu 18.04（Bionic）上进行了测试@{"calib_text": " `[259] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=259>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:113
msgid "1. Install development tools"
msgstr "1. 安装开发工具@{"calib_text": " `[260] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=260>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:115
msgid "This step is similar to when building natively. The difference is that some of the libraries and tools are not required because they will be in the sysroot instead. The following packages are required"
msgstr "这个步骤与本地构建类似。不同之处在于一些库和工具不需要，因为它们将在sysroot中。需要以下软件包：@{"calib_text": " `[261] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=261>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:134
msgid "You can install vcstool and colcon-common-extensions via pip. This means you are not required to add extra apt repositories."
msgstr "您可以使用pip安装vcstool和colcon-common-extensions。这意味着您不需要添加额外的apt仓库。@{"calib_text": " `[262] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=262>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:137
msgid "Docker is used to build the target environment. Follow the official `documentation <https://docs.docker.com/install/linux/docker-ce/ubuntu/>`__ for the installation."
msgstr "Docker用于构建目标环境。请按照官方 `文档 <https://docs.docker.com/install/linux/docker-ce/ubuntu/>`__ 进行安装。@{"calib_text": " `[263] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=263>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:140
msgid "2. Download ROS 2 source code"
msgstr "2. 下载ROS 2源代码@{"calib_text": " `[264] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=264>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:142
msgid "Then create a workspace and download the ROS 2 source code:"
msgstr "然后创建一个工作空间并下载ROS 2源代码：@{"calib_text": " `[265] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=265>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:154
msgid "3. Prepare the sysroot"
msgstr "3. 准备 sysroot@{"calib_text": " `[266] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=266>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:156
msgid "Build an arm Ubuntu image with all the ROS 2 dependencies using Docker and qemu: Copy the ``qemu-static`` binary to the workspace. It will be used to install the ROS 2 dependencies on the target file-system with docker."
msgstr "使用Docker和qemu构建带有所有ROS 2依赖项的arm Ubuntu镜像：将``qemu-static``二进制文件复制到工作空间。它将用于使用Docker在目标文件系统上安装ROS 2依赖项。@{"calib_text": " `[267] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=267>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:165
msgid "The standard :doc:`setup <../Installation/Alternatives/Ubuntu-Development-Setup>` process of ROS 2 is run inside an arm docker. This is possible thanks to ``qemu-static``, which will emulate an arm machine. The base image used is an Ubuntu Bionic from Docker Hub."
msgstr "ROS 2的标准:doc:`设置 <../Installation/Alternatives/Ubuntu-Development-Setup>`过程在arm docker内运行。这得益于``qemu-static``，它将模拟一个arm机器。使用的基础镜像是来自Docker Hub的Ubuntu Bionic。@{"calib_text": " `[268] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=268>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:172
msgid "Export the resulting container to a tarball and extract it:"
msgstr "将生成的容器导出为tarball文件并解压缩：@{"calib_text": " `[269] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=269>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:181
msgid "This container can be used later as virtual target to run the created file-system and run the demo code."
msgstr "此容器稍后可用作虚拟目标，以运行创建的文件系统和运行演示代码。@{"calib_text": " `[270] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=270>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:184
msgid "4. Build"
msgstr "4. 构建@{"calib_text": " `[271] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=271>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:186
msgid "Set the variables used by the generic toolchain-file"
msgstr "设置通用工具链文件使用的变量@{"calib_text": " `[272] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=272>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:199
msgid "The following packages still cause errors during the cross-compilation (under investigation) and must be disabled for now."
msgstr "以下软件包在交叉编译过程中仍然导致错误（正在调查中），现在必须禁用它们。@{"calib_text": " `[273] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=273>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:207
msgid "The ``Poco`` pre-built has a known issue where it is searching for ``libz`` and ``libpcre`` on the host system instead of SYSROOT. As a workaround for the moment, please link both libraries into the the host's file-system."
msgstr "预构建的 ``Poco`` 存在一个已知问题，它在主机系统上搜索 ``libz`` 和 ``libpcre`` 而不是 SYSROOT。暂时的解决方法是，请将这两个库链接到主机的文件系统中。@{"calib_text": " `[274] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=274>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:216
msgid "Then, start a build with colcon specifying the toolchain-file:"
msgstr "然后，使用 colcon 指定工具链文件启动构建：@{"calib_text": " `[275] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=275>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:229
msgid "Done! The install and build directories will contain the cross-compiled assets."
msgstr "完成！安装目录和构建目录将包含交叉编译的资源。@{"calib_text": " `[276] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=276>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:232
msgid "Automated Cross-compilation"
msgstr "自动交叉编译@{"calib_text": " `[277] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=277>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:234
msgid "All the steps above are also included into a Dockerfile and can be used for automation/CI."
msgstr "上述所有步骤也包含在一个Dockerfile中，可以用于自动化/持续集成。@{"calib_text": " `[278] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=278>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:236
msgid "First, download the dockerfile and build the image:"
msgstr "首先，下载Dockerfile并构建镜像：@{"calib_text": " `[279] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=279>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:243
msgid "Now run the image with: (it will take a while !)"
msgstr "现在运行镜像：（这将需要一些时间！）@{"calib_text": " `[280] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=280>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:252
msgid "..note:: The -v /var/run/docker.sock allow us to use Docker inside Docker."
msgstr "..注意:: 使用 -v /var/run/docker.sock 允许我们在 Docker 中使用 Docker。@{"calib_text": " `[281] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=281>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:254
msgid "The result of the build will be inside the ``ros2_ws`` directory, which can be exported with:"
msgstr "构建的结果将在 ``ros2_ws`` 目录中，可以使用以下命令导出：@{"calib_text": " `[282] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=282>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:261
msgid "Cross-compiling against a pre-built ROS 2"
msgstr "针对预构建的 ROS 2 进行交叉编译@{"calib_text": " `[283] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=283>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:263
msgid "It is possible to cross-compile your packages against a pre-built ROS 2. The steps are similar to the previous `Cross-compiling examples for Arm`_ section, with the following modifications:"
msgstr "您可以将您的软件包与预构建的 ROS 2 进行交叉编译。步骤与之前的“为 ARM 进行交叉编译示例”_ 部分相似，只需进行以下修改：@{"calib_text": " `[284] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=284>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:265
msgid "Instead of downloading the ROS 2 stack, just populate your workspace with your package (ros2 examples on this case) and the cross-compilation assets:"
msgstr "不需要下载ROS 2堆栈，只需将您的软件包（在此示例中是ros2 examples）和交叉编译资产填充到您的工作空间中：@{"calib_text": " `[285] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=285>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:275
msgid "Generate and export the file-system as described in `3. Prepare the sysroot`_, but with the provided ``Dockerfile_ubuntu_arm64_prebuilt``. These ``_prebuilt`` Dockerfile will use the :doc:`binary packages <../Installation/Ubuntu-Install-Debians>` to install ROS 2 instead of building from source."
msgstr "按照`3. 准备sysroot`_中所述的方法生成和导出文件系统，但使用提供的``Dockerfile_ubuntu_arm64_prebuilt``。这些``_prebuilt`` Dockerfile将使用:doc:`二进制包 <../Installation/Ubuntu-Install-Debians>`来安装ROS 2，而不是从源代码构建。@{"calib_text": " `[286] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=286>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:277
msgid "Modify the environment variable ``ROS2_INSTALL_PATH`` to point to the installation directory:"
msgstr "修改环境变量``ROS2_INSTALL_PATH``，指向安装目录：@{"calib_text": " `[287] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=287>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:283
msgid "Source the ``setup.bash`` script on the target file-system:"
msgstr "在目标文件系统上调用``setup.bash``脚本：@{"calib_text": " `[288] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=288>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:289
msgid "Then, start a build with ``Colcon`` specifying the ``toolchain-file``:"
msgstr "然后，使用``Colcon``指定``toolchain-file``来开始构建：@{"calib_text": " `[289] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=289>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:301
msgid "Run on the target"
msgstr "在目标设备上运行@{"calib_text": " `[290] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=290>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:303
msgid "Copy the file-system on your target or use the previously built docker image:"
msgstr "将文件系统复制到目标设备上或使用先前构建的 Docker 镜像：@{"calib_text": " `[291] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=291>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:309
msgid "Source the environment:"
msgstr "加载环境：@{"calib_text": " `[292] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=292>`_ "}@"


#: ../../source/How-To-Guides/Cross-compilation.rst:315
msgid "Run some of the C++ or python examples:"
msgstr "运行一些C++或Python示例：@{"calib_text": " `[293] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=293>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:7
msgid "DDS tuning information"
msgstr "DDS调优信息@{"calib_text": " `[294] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=294>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:9
msgid "This page provides some guidance on parameter tunings that were found to address issues faced while using various DDS implementations on Linux in real-world situations. It is possible that the issues we identified on Linux or while using one vendor may occur for other platforms and vendors not documented here."
msgstr "本页面提供了一些参数调优的指导，这些调优参数被发现可以解决在真实环境中使用Linux上的各种DDS实现时遇到的问题。我们在Linux或使用某个供应商时发现的问题可能也会出现在其他平台和未在此处记录的供应商上。@{"calib_text": " `[295] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=295>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:12
msgid "The recommendations below are starting points for tuning; they worked for specific systems and environments, but the tuning may vary depending on a number of factors. You may need to increase or decrease values while debugging relative to factors like message size, network topology, etc."
msgstr "以下建议是调优的起点；它们适用于特定的系统和环境，但调优可能会根据多个因素而有所不同。在调试过程中，您可能需要根据消息大小、网络拓扑等因素增加或减少值。@{"calib_text": " `[296] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=296>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:15
msgid "It is important to recognize that tuning parameters can come at a cost to resources, and may affect parts of your system beyond the scope of the desired improvements. The benefits of improving reliability should be weighed against any detriments for each individual case."
msgstr "重要的是要认识到调整参数可能会占用资源，并且可能会影响系统中超出预期改进范围的部分。改善可靠性的好处应该与每个个案的不利因素相权衡。@{"calib_text": " `[297] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=297>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:21
msgid "Cross-vendor tuning"
msgstr "跨供应商调优@{"calib_text": " `[298] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=298>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:23
msgid "**Issue:** Sending data over lossy (usually WiFi) connections becomes problematic when some IP fragments are dropped, possibly causing the kernel buffer on the receiving side to become full."
msgstr "**问题：**在一些 IP 片段丢失的情况下，通过有丢包的（通常是 WiFi）连接发送数据会变得困难，可能导致接收端的内核缓冲区变满。@{"calib_text": " `[299] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=299>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:25
msgid "When a UDP packet is missing at least one IP fragment, the rest of the received fragments fill up the kernel buffer. By default, the Linux kernel will time out after 30s of trying to recombine packet fragments. Since the kernel buffer is full at this point (default size is 256KB), no new fragments can come in, and so the connection will seemingly \"hang\" for long periods of time."
msgstr "当一个 UDP 包丢失至少一个 IP 片段时，其余的接收到的片段会填满内核缓冲区。默认情况下，Linux 内核将在尝试重新组合包片段后的30秒超时。由于此时内核缓冲区已满（默认大小为256KB），无法接收新的片段，因此连接似乎会长时间“挂起”。@{"calib_text": " `[300] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=300>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:29
msgid "This issue is generic across all DDS vendors, so the solutions involve adjusting kernel parameters."
msgstr "这个问题是DDS供应商都普遍存在的，因此解决方案涉及调整内核参数。@{"calib_text": " `[301] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=301>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:31
msgid "**Solution:** Use best-effort QoS settings instead of reliable."
msgstr "**解决方案：**使用最佳努力的QoS设置，而不是可靠的设置。@{"calib_text": " `[302] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=302>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:33
msgid "Best-effort settings reduce the amount of network traffic since the DDS implementation does not have to incur the overhead of reliable communications, where publishers require acknowledgements for messages sent to subscribers and must resend samples that have not been properly received."
msgstr "最佳努力的设置可以减少网络流量，因为DDS实现不需要承担可靠通信的开销。在可靠通信中，发布者需要对发送给订阅者的消息进行确认，并且必须重新发送未正确接收的样本。@{"calib_text": " `[303] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=303>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:35
msgid "If the kernel buffer for IP fragments gets full, though, the symptom is still the same (blocking for 30s). This solution should improve the issue somewhat without having to adjust parameters."
msgstr "但是，如果IP分片的内核缓冲区变满，症状仍然相同（阻塞30秒）。这个解决方案应该能在不调整参数的情况下在一定程度上改善问题。@{"calib_text": " `[304] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=304>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:38
msgid "**Solution:** Reduce the value of the ``ipfrag_time`` parameter."
msgstr "**解决方案：** 减小``ipfrag_time``参数的值。@{"calib_text": " `[305] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=305>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:40
msgid "``net.ipv4.ipfrag_time / /proc/sys/net/ipv4/ipfrag_time`` (default 30s) : Time in seconds to keep an IP fragment in memory."
msgstr "``net.ipv4.ipfrag_time / /proc/sys/net/ipv4/ipfrag_time``（默认值为30秒）：保留IP片段在内存中的时间（以秒为单位）。@{"calib_text": " `[306] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=306>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:43
msgid "Reduce the value, for example, to 3s, by running:"
msgstr "通过运行以下命令将该值减小到3秒，例如：@{"calib_text": " `[307] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=307>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:49
msgid "Reducing this parameter’s value also reduces the window of time where no fragments are received. The parameter is global for all incoming fragments, so the feasibility of reducing its value needs to be considered for every environment."
msgstr "减小此参数的值也会减少未接收到片段的时间窗口。该参数对所有传入的片段是全局的，因此需要考虑在每个环境中减小其值的可行性。@{"calib_text": " `[308] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=308>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:52
msgid "**Solution:** Increase the value of the ``ipfrag_high_thresh`` parameter."
msgstr "**解决方案:** 增加``ipfrag_high_thresh``参数的值。@{"calib_text": " `[309] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=309>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:54
msgid "``net.ipv4.ipfrag_high_thresh / /proc/sys/net/ipv4/ipfrag_high_thresh`` (default: 262144 bytes): Maximum memory used to reassemble IP fragments."
msgstr "``net.ipv4.ipfrag_high_thresh / /proc/sys/net/ipv4/ipfrag_high_thresh``（默认值：262144字节）：用于重新组装IP片段的最大内存使用量。@{"calib_text": " `[310] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=310>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:57
msgid "Increase the value, for example, to 128MB, by running:"
msgstr "通过运行以下命令，将值增加到128MB：@{"calib_text": " `[311] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=311>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:63
msgid "Significantly increasing this parameter’s value is an attempt to ensure that the buffer never becomes completely full. However, the value would likely have to be significantly high to hold all data received during the time window of ``ipfrag_time``, assuming every UDP packet lacks one fragment."
msgstr "显著增加此参数的值是为了确保缓冲区永远不会完全填满。然而，假设每个UDP数据包都缺少一个片段，在``ipfrag_time``时间窗口内接收到的所有数据可能需要相当高的值来保存。@{"calib_text": " `[312] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=312>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:66
msgid "**Issue:** Sending custom messages with large variable-sized arrays of non-primitive types causes high serialization/deserialization overhead and CPU load. This can lead to stalling of the publisher due to excessive time spent in ``publish()`` and tools like ``ros2 topic hz`` under reporting the actual frequency of messages being received. Note that for example ``builtin_interfaces/Time`` is also considered a non-primitive type and will incur higher serialization overhead. Because of the increased serialization overhead, severe performance degradation can be observed when naively transitioning custom message types from ROS 1 to ROS 2."
msgstr "**问题：** 使用大型变量大小的非原始类型数组发送自定义消息会导致高度的序列化/反序列化开销和CPU负载。这可能导致发布者由于在“publish()”中花费过多时间而停滞，并且像“ros2 topic hz”这样的工具会低估接收到的消息实际频率。请注意，例如“builtin_interfaces/Time”也被视为非原始类型，并且将产生更高的序列化开销。由于增加的序列化开销，当从ROS 1天真地转换自定义消息类型到ROS 2时，可能会观察到严重的性能下降。@{"calib_text": " `[313] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=313>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:71
msgid "**Workaround:** Use multiple arrays of primitives instead of a single array of custom types, or pack into byte array as done e.g. in ``PointCloud2`` messages. For example, instead of defining a ``FooArray`` message as:"
msgstr "**解决方法：** 使用原始类型的多个数组代替单个自定义类型的数组，或者像“PointCloud2”消息中所做的那样打包成字节数组。例如，不要定义一个名为“FooArray”的消息，例如：@{"calib_text": " `[314] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=314>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:78
msgid "with ``Foo`` is defined as:"
msgstr "其中“Foo”被定义为：@{"calib_text": " `[315] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=315>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:85
msgid "Instead, define ``FooArray`` as:"
msgstr "相反，将“FooArray”定义为：@{"calib_text": " `[316] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=316>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:93
msgid "Fast RTPS tuning"
msgstr "快速RTPS调优@{"calib_text": " `[317] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=317>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:95
msgid "**Issue:** Fast RTPS floods the network with large pieces of data or fast-published data when operating over WiFi."
msgstr "**问题：** 当在WiFi上操作时，快速RTPS会通过网络发送大块数据或快速发布数据，导致网络拥塞。@{"calib_text": " `[318] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=318>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:97
msgid "See the solutions under :ref:`Cross-vendor tuning <cross-vendor-tuning>`."
msgstr "请参考 :ref:`跨供应商调优 <cross-vendor-tuning>` 中的解决方案。@{"calib_text": " `[319] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=319>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:100
msgid "Cyclone DDS tuning"
msgstr "Cyclone DDS调优@{"calib_text": " `[320] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=320>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:102
msgid "**Issue:** Cyclone DDS is not delivering large messages reliably, despite using reliable settings and transferring over a wired network."
msgstr "**问题：**尽管使用可靠的设置并通过有线网络传输，Cyclone DDS无法可靠地传递大消息。@{"calib_text": " `[321] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=321>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:104
msgid "This issue should be `addressed soon <https://github.com/eclipse-cyclonedds/cyclonedds/issues/484>`_. Until then, we’ve come up with the following solution (debugged using `this test program <https://github.com/jacobperron/pc_pipe>`_):"
msgstr "这个问题应该会很快得到解决。在那之前，我们提出了以下解决方案（使用`此测试程序 <https://github.com/jacobperron/pc_pipe>`_ 进行了调试）：@{"calib_text": " `[322] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=322>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:107
msgid "**Solution:** Increase the maximum Linux kernel receive buffer size and the minimum socket receive buffer size that Cyclone uses."
msgstr "**解决方案：**增加Cyclone使用的Linux内核最大接收缓冲区大小和最小套接字接收缓冲区大小。@{"calib_text": " `[323] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=323>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:109
msgid "*Adjustments to solve for a 9MB message:*"
msgstr "*调整以解决9MB消息的问题：*@{"calib_text": " `[324] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=324>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:111 ../../source/How-To-Guides/DDS-tuning.rst:150
msgid "Set the maximum receive buffer size, ``rmem_max``, by running:"
msgstr "通过运行以下命令来设置最大接收缓冲区大小 `rmem_max`：@{"calib_text": " `[325] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=325>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:117
msgid "Or permanently set it by editing the ``/etc/sysctl.d/10-cyclone-max.conf`` file to contain:"
msgstr "或者通过编辑 `/etc/sysctl.d/10-cyclone-max.conf` 文件并包含以下内容来永久设置：@{"calib_text": " `[326] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=326>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:123
msgid "Next, to set the minimum socket receive buffer size that Cyclone requests, write out a configuration file for Cyclone to use while starting, like so:"
msgstr "然后，为了设置 Cyclone 请求的最小套接字接收缓冲区大小，请创建一个用于 Cyclone 启动时使用的配置文件，如下所示：@{"calib_text": " `[327] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=327>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:137
msgid "Then, whenever you are going to run a node, set the following environment variable:"
msgstr "然后，每当您要运行一个节点时，请设置以下环境变量：@{"calib_text": " `[328] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=328>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:144
msgid "RTI Connext tuning"
msgstr "RTI Connext调优@{"calib_text": " `[329] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=329>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:146
msgid "**Issue:** Connext is not delivering large messages reliably, despite using reliable settings and transferring over a wired network."
msgstr "**问题：**尽管使用可靠设置并通过有线网络传输，Connext无法可靠地传递大消息。@{"calib_text": " `[330] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=330>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:148
msgid "**Solution:** This `Connext QoS profile <https://github.com/jacobperron/pc_pipe/blob/master/etc/ROS2TEST_QOS_PROFILES.xml>`_, along with increasing the ``rmem_max`` parameter."
msgstr "**解决方案：** 使用此 `Connext QoS配置文件<https://github.com/jacobperron/pc_pipe/blob/master/etc/ROS2TEST_QOS_PROFILES.xml>`_ ，同时增加 ``rmem_max`` 参数。@{"calib_text": " `[331] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=331>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:156
msgid "By tuning ``net.core.rmem_max`` to 4MB in the Linux kernel, the QoS profile can produce truly reliable behavior."
msgstr "通过将Linux内核中的 ``net.core.rmem_max`` 调整为4MB，QoS配置文件可以产生真正可靠的行为。@{"calib_text": " `[332] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=332>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:158
msgid "This configuration has been proven to reliably deliver messages via SHMEM|UDPv4, and with just UDPv4 on a single machine. A multi-machine configuration was also tested with ``rmem_max`` at 4MB and at 20MB (two machines connected with 1Gbps ethernet), with no dropped messages and average message delivery times of 700ms and 371ms, respectively."
msgstr "这个配置经过验证，可靠地通过SHMEM|UDPv4传递消息，并且在单台机器上仅使用UDPv4。还进行了多机器配置的测试，``rmem_max``设置为4MB和20MB（两台机器通过1Gbps以太网连接），没有丢失消息，并且平均消息传递时间分别为700ms和371ms。@{"calib_text": " `[333] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=333>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:161
msgid "Without configuring the kernel’s ``rmem_max``, the same Connext QoS profile took up to 12 seconds for the data to be delivered. However, it always at least managed to complete the delivery."
msgstr "在没有配置内核的``rmem_max``的情况下，相同的Connext QoS配置需要长达12秒才能传递数据。然而，它至少始终成功完成传递。@{"calib_text": " `[334] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=334>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:164
msgid "**Solution:** Use the `Connext QoS profile <https://github.com/jacobperron/pc_pipe/blob/master/etc/ROS2TEST_QOS_PROFILES.xml>`_ *without* adjusting ``rmem_max``."
msgstr "**解决方案：** 使用`Connext QoS配置文件<https://github.com/jacobperron/pc_pipe/blob/master/etc/ROS2TEST_QOS_PROFILES.xml>`_，*不*调整``rmem_max``。@{"calib_text": " `[335] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=335>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:166
msgid "The ROS2TEST_QOS_PROFILES.xml file was configured using RTI’s documentation on `configuring flow controllers <https://community.rti.com/forum-topic/transfering-large-data-over-dds>`_. It has slow, medium and fast flow controllers (seen in the Connext QoS profile link)."
msgstr "ROS2TEST_QOS_PROFILES.xml文件是使用RTI的文档`配置流控制器<https://community.rti.com/forum-topic/transfering-large-data-over-dds>`_进行配置的。它包含了慢速、中速和快速的流控制器（在Connext QoS配置文件链接中可见）。@{"calib_text": " `[336] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=336>`_ "}@"


#: ../../source/How-To-Guides/DDS-tuning.rst:168
msgid "The medium flow controller produced the best results for our case. However, the controllers will still need to be tuned for the particular machine/network/environment they are operating in. The Connext flow controllers can be used to tune bandwidth and its aggressiveness for sending out data, though once the bandwidth of a particular setup is passed, performance will start to drop."
msgstr "中等流量控制器在我们的案例中产生了最好的结果。然而，控制器仍然需要根据它们所操作的特定机器/网络/环境进行调整。Connext流量控制器可以用来调整带宽及其发送数据的攻击性，尽管一旦超过特定设置的带宽，性能就会开始下降。@{"calib_text": " `[337] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=337>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:8
msgid "Developing a ROS 2 package"
msgstr "开发ROS 2软件包@{"calib_text": " `[338] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=338>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:14
msgid "This tutorial will teach you how to create your first ROS 2 application. It is intended for developers who want to learn how to create custom packages in ROS 2, not for people who want to use ROS 2 with its existing packages."
msgstr "本教程将教你如何创建你的第一个ROS 2应用程序。它适用于希望学习如何在ROS 2中创建自定义软件包的开发人员，而不适用于希望使用ROS 2及其现有软件包的用户。@{"calib_text": " `[339] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=339>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:20
msgid ":doc:`Install ROS <../../Installation>`"
msgstr ":doc:`安装ROS <../../Installation>`@{"calib_text": " `[340] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=340>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:22
msgid "`Install colcon <https://colcon.readthedocs.io/en/released/user/installation.html>`__"
msgstr "`安装 colcon <https://colcon.readthedocs.io/en/released/user/installation.html>`__@{"calib_text": " `[341] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=341>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:24
msgid "Setup your workspace by sourcing your ROS 2 installation."
msgstr "通过将您的 ROS 2 安装路径设置为源，设置您的工作空间。@{"calib_text": " `[342] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=342>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:27
msgid "Creating a package"
msgstr "创建软件包@{"calib_text": " `[343] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=343>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:29
msgid "All ROS 2 packages begin by running the command"
msgstr "所有 ROS 2 软件包都需要运行以下命令开始@{"calib_text": " `[344] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=344>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:35
msgid "in your workspace (usually ``~/ros2_ws/src``)."
msgstr "在您的工作空间中（通常为 ``~/ros2_ws/src``）。@{"calib_text": " `[345] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=345>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:37
msgid "To create a package for a specific client library:"
msgstr "要为特定的客户端库创建软件包：@{"calib_text": " `[346] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=346>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:41 ../../source/How-To-Guides/Using-callback-groups.rst:49 ../../source/How-To-Guides/Using-callback-groups.rst:196 ../../source/How-To-Guides/Using-callback-groups.rst:282 ../../source/How-To-Guides/Using-callback-groups.rst:448 ../../source/How-To-Guides/Using-callback-groups.rst:502 ../../source/How-To-Guides/Using-callback-groups.rst:525
msgid "C++"
msgstr "C++@{"calib_text": " `[347] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=347>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:47 ../../source/How-To-Guides/Launch-file-different-formats.rst:30 ../../source/How-To-Guides/Launching-composable-nodes.rst:32 ../../source/How-To-Guides/Launching-composable-nodes.rst:148 ../../source/How-To-Guides/Using-callback-groups.rst:61 ../../source/How-To-Guides/Using-callback-groups.rst:248 ../../source/How-To-Guides/Using-callback-groups.rst:347 ../../source/How-To-Guides/Using-callback-groups.rst:455 ../../source/How-To-Guides/Using-callback-groups.rst:509 ../../source/How-To-Guides/Using-callback-groups.rst:553
msgid "Python"
msgstr "Python@{"calib_text": " `[348] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=348>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:53
msgid "You can then update the ``package.xml`` with your package info such as dependencies, descriptions, and authorship."
msgstr "然后，您可以使用您的软件包信息（例如依赖项、描述和作者信息）更新``package.xml``文件。@{"calib_text": " `[349] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=349>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:56
msgid "C++ Packages"
msgstr "C++软件包@{"calib_text": " `[350] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=350>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:58
msgid "You will mostly use the ``add_executable()`` CMake macro along with"
msgstr "您将主要使用``add_executable()`` CMake宏，以及@{"calib_text": " `[351] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=351>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:64
msgid "to create executable nodes and link dependencies."
msgstr "创建可执行节点并链接依赖项。@{"calib_text": " `[352] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=352>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:66
msgid "To install your launch files and nodes, you can use the ``install()`` macro placed towards the end of the file but before the ``ament_package()`` macro."
msgstr "要安装启动文件和节点，您可以使用位于文件末尾但在``ament_package()``宏之前的``install()``宏。@{"calib_text": " `[353] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=353>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:68
msgid "An example for launch files and nodes:"
msgstr "启动文件和节点示例：@{"calib_text": " `[354] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=354>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:85
msgid "Python Packages"
msgstr "Python包@{"calib_text": " `[355] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=355>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:87
msgid "ROS 2 follows Python's standard module distribution process that uses ``setuptools``. For Python packages, the ``setup.py`` file complements a C++ package's ``CMakeLists.txt``. More details on distribution can be found in the `official documentation <https://docs.python.org/3/distributing/index.html#distributing-index>`_."
msgstr "ROS 2遵循Python的标准模块分发过程，使用``setuptools``。对于Python包，``setup.py``文件与C++包的``CMakeLists.txt``相辅相成。有关分发的更多详细信息，请参阅`官方文档 <https://docs.python.org/3/distributing/index.html#distributing-index>`_。@{"calib_text": " `[356] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=356>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:91
msgid "In your ROS 2 package, you should have a ``setup.cfg`` file which looks like:"
msgstr "在你的ROS 2包中，你应该有一个看起来像这样的``setup.cfg``文件：@{"calib_text": " `[357] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=357>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:100
msgid "and a ``setup.py`` file that looks like:"
msgstr "还有一个看起来像这样的``setup.py``文件：@{"calib_text": " `[358] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=358>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:151
msgid "Combined C++ and Python Packages"
msgstr "结合C++和Python包@{"calib_text": " `[359] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=359>`_ "}@"


#: ../../source/How-To-Guides/Developing-a-ROS-2-Package.rst:153
msgid "When writing a package with both C++ and Python code, the ``setup.py`` file and ``setup.cfg`` file are not used. Instead, use :doc:`ament_cmake_python <./Ament-CMake-Python-Documentation>`."
msgstr "当编写既包含C++代码又包含Python代码的包时，不使用``setup.py``文件和``setup.cfg``文件。而是使用 :doc:`ament_cmake_python <./Ament-CMake-Python-Documentation>`。@{"calib_text": " `[360] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=360>`_ "}@"


#: ../../source/How-To-Guides/Disabling-ZeroCopy-loaned-messages.rst:4
msgid "Disabling Zero Copy Loaned Messages"
msgstr "禁用零拷贝借用消息@{"calib_text": " `[361] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=361>`_ "}@"


#: ../../source/How-To-Guides/Disabling-ZeroCopy-loaned-messages.rst:8 ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:16 ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:8 ../../source/How-To-Guides/Sync-Vs-Async.rst:18 ../../source/How-To-Guides/Topics-Services-Actions.rst:8 ../../source/How-To-Guides/Using-Python-Packages.rst:15
msgid "Contents"
msgstr "内容@{"calib_text": " `[362] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=362>`_ "}@"


#: ../../source/How-To-Guides/Disabling-ZeroCopy-loaned-messages.rst:10
msgid "See the `Loaned Messages <https://design.ros2.org/articles/zero_copy.html>`__ article for details on how loaned messages work."
msgstr "有关借用消息工作原理的详细信息，请参阅`借用消息<https://design.ros2.org/articles/zero_copy.html>`__文章。@{"calib_text": " `[363] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=363>`_ "}@"


#: ../../source/How-To-Guides/Disabling-ZeroCopy-loaned-messages.rst:13
msgid "How to disable Loaned Messages"
msgstr "如何禁用借用消息@{"calib_text": " `[364] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=364>`_ "}@"


#: ../../source/How-To-Guides/Disabling-ZeroCopy-loaned-messages.rst:15
msgid "By default, *Loaned Messages* will try to borrow the memory from underlying middleware if it supports *Loaned Messages*. The ``ROS_DISABLE_LOANED_MESSAGES`` environment variable can be used to disable *Loaned Messages*, and fallback to normal publisher and subscription behavior, without any code changes or middleware configuration. You can set the environment variable with the following command:"
msgstr "默认情况下，*借用消息* 将尝试从底层中间件借用内存，如果它支持*借用消息*。可以使用 ``ROS_DISABLE_LOANED_MESSAGES`` 环境变量来禁用*借用消息*，并回退到正常的发布者和订阅者行为，无需进行任何代码更改或中间件配置。您可以使用以下命令设置环境变量：@{"calib_text": " `[365] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=365>`_ "}@"


#: ../../source/How-To-Guides/Disabling-ZeroCopy-loaned-messages.rst:21 ../../source/How-To-Guides/Installation-Troubleshooting.rst:74 ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:36
msgid "Linux"
msgstr "Linux@{"calib_text": " `[366] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=366>`_ "}@"


#: ../../source/How-To-Guides/Disabling-ZeroCopy-loaned-messages.rst:27 ../../source/How-To-Guides/Disabling-ZeroCopy-loaned-messages.rst:39
msgid "To maintain this setting between shell sessions, you can add the command to your shell startup script:"
msgstr "为了在不同的shell会话之间保持这个设置，可以将该命令添加到shell启动脚本中：@{"calib_text": " `[367] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=367>`_ "}@"


#: ../../source/How-To-Guides/Disabling-ZeroCopy-loaned-messages.rst:33 ../../source/How-To-Guides/Installation-Troubleshooting.rst:109 ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:45
msgid "macOS"
msgstr "macOS@{"calib_text": " `[368] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=368>`_ "}@"


#: ../../source/How-To-Guides/Disabling-ZeroCopy-loaned-messages.rst:45 ../../source/How-To-Guides/Installation-Troubleshooting.rst:262 ../../source/How-To-Guides/RQt-Source-Install.rst:100 ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:54
msgid "Windows"
msgstr "Windows@{"calib_text": " `[369] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=369>`_ "}@"


#: ../../source/How-To-Guides/Disabling-ZeroCopy-loaned-messages.rst:51
msgid "If you want to make this permanent between shell sessions, also run:"
msgstr "如果想要在不同的shell会话之间永久生效，还需要运行以下命令：@{"calib_text": " `[370] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=370>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:7
msgid "Installation troubleshooting"
msgstr "安装故障排除@{"calib_text": " `[371] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=371>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:9
msgid "Troubleshooting techniques for installation are sorted by the platforms they apply to."
msgstr "安装故障排除技巧根据适用的平台进行了分类。@{"calib_text": " `[372] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=372>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:13
msgid "Platforms"
msgstr "平台@{"calib_text": " `[373] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=373>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:16
msgid "General"
msgstr "通用@{"calib_text": " `[374] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=374>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:18
msgid "General troubleshooting techniques apply to all platforms."
msgstr "通用故障排除技巧适用于所有平台。@{"calib_text": " `[375] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=375>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:21
msgid "Enable multicast"
msgstr "启用多播@{"calib_text": " `[376] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=376>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:23
msgid "In order to communicate successfully via DDS, the used network interface has to be multicast enabled. We've seen in past experiences that this might not necessarily be enabled by default (on Ubuntu or OSX) when using the loopback adapter. See the `original issue <https://github.com/ros2/ros2/issues/552>`__ or a `conversation on ros-answers <https://answers.ros.org/question/300370/ros2-talker-cannot-communicate-with-listener/>`__. You can verify that your current setup allows multicast with the ROS 2 tool:"
msgstr "为了通过DDS成功通信，使用的网络接口必须启用组播功能。在过去的经验中，我们发现当使用环回适配器（在Ubuntu或OSX上）时，默认情况下可能未启用组播功能。请参阅 `原始问题 <https://github.com/ros2/ros2/issues/552>`__ 或 `ros-answers 上的讨论 <https://answers.ros.org/question/300370/ros2-talker-cannot-communicate-with-listener/>`__。您可以使用ROS 2工具验证您当前的设置是否允许组播：@{"calib_text": " `[377] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=377>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:28
msgid "In Terminal 1:"
msgstr "在终端1中：@{"calib_text": " `[378] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=378>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:34
msgid "In Terminal 2:"
msgstr "在终端2中：@{"calib_text": " `[379] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=379>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:40
msgid "If the first command did not return a response similar to:"
msgstr "如果第一个命令没有返回类似以下内容的响应@{"calib_text": " `[380] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=380>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:46
msgid "then you will need to update your firewall configuration to allow multicast using `ufw <https://help.ubuntu.com/community/UFW>`__."
msgstr "如果需要使用多播，您需要更新防火墙配置以允许多播，使用 `ufw <https://help.ubuntu.com/community/UFW>`__ 命令。@{"calib_text": " `[381] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=381>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:54
msgid "You can check if the multicast flag is enabled for your network interface using the :code:`ifconfig` tool and looking for :code:`MULITCAST` in the flags section:"
msgstr "您可以使用 :code:`ifconfig` 工具检查您的网络接口是否启用了多播标志，在 flags 部分查找 :code:`MULTICAST`：@{"calib_text": " `[382] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=382>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:62
msgid "Import failing without library present on the system"
msgstr "导入失败，因为系统上没有找到所需的库。@{"calib_text": " `[383] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=383>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:64
msgid "Sometimes ``rclpy`` fails to be imported because the expected C extension libraries are not found. If so, compare the libraries present in the directory with the one mentioned in the error message. Assuming a file with a similar name exists (same prefix like ``_rclpy.`` and same suffix like ``.so`` but a different Python version / architecture) you are using a different Python interpreter than which was used to build the C extension. Be sure to use the same Python interpreter as the one used to build the binary."
msgstr "有时候，``rclpy`` 导入失败是因为找不到预期的 C 扩展库。如果是这样，请将目录中存在的库与错误消息中提到的库进行比较。假设存在一个类似的文件（具有相同的前缀，例如 ``_rclpy.``，和相同的后缀，例如 ``.so``，但使用的是不同的 Python 版本/架构），则表示您正在使用与用于构建 C 扩展的 Python 解释器不同的 Python 解释器。请确保使用与构建二进制文件时相同的 Python 解释器。@{"calib_text": " `[384] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=384>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:69
msgid "For example, such a mismatch can crop up after an update of the OS. Then, rebuilding the workspace may fix the issue."
msgstr "例如，在操作系统更新后可能会出现这样的不匹配问题。然后，重建工作区可能会解决这个问题。@{"calib_text": " `[385] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=385>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:77
msgid "Internal compiler error"
msgstr "内部编译器错误@{"calib_text": " `[386] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=386>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:79
msgid "If you experience an ICE when trying to compile on a memory constrained platform like a Raspberry PI you might want to build single threaded (prefix the build invocation with ``MAKEFLAGS=-j1``)."
msgstr "如果在像树莓派这样的内存受限平台上尝试编译时遇到内部编译器错误（ICE），您可能希望使用单线程构建（在构建命令前加上 ``MAKEFLAGS=-j1``）。@{"calib_text": " `[387] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=387>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:82
msgid "Out of memory"
msgstr "内存不足@{"calib_text": " `[388] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=388>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:84
msgid "The ``ros1_bridge`` in its current form requires 4Gb of free RAM to compile. If you don't have that amount of RAM available it's suggested to use ``COLCON_IGNORE`` in that folder and skip its compilation."
msgstr "目前的 ``ros1_bridge`` 需要4GB的可用内存进行编译。如果您没有足够的可用内存，建议在该文件夹中使用 ``COLCON_IGNORE`` 跳过编译过程。@{"calib_text": " `[389] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=389>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:88
msgid "Multiple host interference"
msgstr "多个主机干扰@{"calib_text": " `[390] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=390>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:90
msgid "If you're running multiple instances on the same network you may get interference. To avoid this you can set the environment variable ``ROS_DOMAIN_ID`` to a different integer, the default is zero. This will define the DDS domain id for your system."
msgstr "如果您在同一网络上运行多个实例，可能会发生干扰。为了避免这种情况，您可以将环境变量 ``ROS_DOMAIN_ID`` 设置为不同的整数值，默认值为零。这将为您的系统定义DDS域ID。@{"calib_text": " `[391] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=391>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:95
msgid "Exception sourcing setup.bash"
msgstr "加载 setup.bash 异常@{"calib_text": " `[392] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=392>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:99
msgid "If you encounter exceptions when trying to source the environment after building from source, try to upgrade ``colcon`` related packages using"
msgstr "如果在构建源码后尝试引用环境时遇到异常，请尝试使用以下命令升级相关的``colcon``软件包@{"calib_text": " `[393] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=393>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:112
msgid "Segmentation fault when using ``pyenv``"
msgstr "使用``pyenv``时出现分段错误@{"calib_text": " `[394] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=394>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:114
msgid "``pyenv`` seems to default to building Python with ``.a`` files, but that causes issues with ``rclpy``, so it's recommended to build Python with Frameworks enabled on macOS when using ``pyenv``:"
msgstr "``pyenv``似乎默认使用``.a``文件构建Python，但这会导致``rclpy``出现问题，因此建议在使用``pyenv``时在macOS上启用Frameworks构建Python：@{"calib_text": " `[395] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=395>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:116
msgid "https://github.com/pyenv/pyenv/wiki#how-to-build-cpython-with-framework-support-on-os-x"
msgstr "https://github.com/pyenv/pyenv/wiki#how-to-build-cpython-with-framework-support-on-os-x@{"calib_text": " `[396] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=396>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:119
msgid "Library not loaded; image not found"
msgstr "无法加载库文件；找不到图像@{"calib_text": " `[397] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=397>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:121
msgid "If you are seeing library loading issues at runtime (either running tests or running nodes), such as the following:"
msgstr "如果您在运行时（无论是运行测试还是运行节点）遇到库加载问题，例如以下情况：@{"calib_text": " `[398] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=398>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:129
msgid "Then you probably have System Integrity Protection enabled. Follow `these instructions <https://developer.apple.com/library/content/documentation/Security/Conceptual/System_Integrity_Protection_Guide/ConfiguringSystemIntegrityProtection/ConfiguringSystemIntegrityProtection.html>`__ to disable System Integrity Protection (SIP)."
msgstr "那么您可能已启用系统完整性保护（System Integrity Protection）。按照 `这些说明 <https://developer.apple.com/library/content/documentation/Security/Conceptual/System_Integrity_Protection_Guide/ConfiguringSystemIntegrityProtection/ConfiguringSystemIntegrityProtection.html>`__ 禁用系统完整性保护（SIP）。@{"calib_text": " `[399] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=399>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:133
msgid "Qt build error: ``unknown type name 'Q_ENUM'``"
msgstr "Qt构建错误：``unknown type name 'Q_ENUM'``@{"calib_text": " `[400] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=400>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:135
msgid "If you see build errors related to Qt, e.g.:"
msgstr "如果您遇到与Qt相关的构建错误，例如：@{"calib_text": " `[401] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=401>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:145
msgid "you may be using qt4 instead of qt5: see https://github.com/ros2/ros2/issues/441"
msgstr "可能是因为您正在使用Qt4而不是Qt5，请参考https://github.com/ros2/ros2/issues/441@{"calib_text": " `[402] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=402>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:148
msgid "Missing symbol when opencv (and therefore libjpeg, libtiff, and libpng) are installed with Homebrew"
msgstr "当使用Homebrew安装opencv（因此也安装了libjpeg、libtiff和libpng）时出现缺少符号的情况@{"calib_text": " `[403] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=403>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:150
msgid "If you have opencv installed you might get this:"
msgstr "如果您已安装opencv，可能会出现以下情况：@{"calib_text": " `[404] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=404>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:160
msgid "If so, to build you'll have to do this:"
msgstr "如果是这样，要构建，你需要执行以下步骤：@{"calib_text": " `[405] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=405>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:166
msgid "But this will break opencv, so you'll also need to update it to continue working:"
msgstr "但这将会破坏OpenCV，所以你还需要更新它以继续工作：@{"calib_text": " `[406] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=406>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:175
msgid "The first command is necessary to avoid things built against the system libjpeg (etc.) from getting the version in /usr/local/lib. The others are updating things built by Homebrew so that they can find the version of libjpeg (etc.) without having them in /usr/local/lib."
msgstr "第一个命令是为了避免使用系统libjpeg（等等）构建的内容获取到/usr/local/lib中的版本。其他命令是为了更新由Homebrew构建的内容，使其能够找到libjpeg（等等）的版本，而不必将它们放在/usr/local/lib中。@{"calib_text": " `[407] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=407>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:179
msgid "Xcode-select error: tool ``xcodebuild`` requires Xcode, but active developer directory is a command line instance"
msgstr "Xcode-select错误：工具``xcodebuild``需要Xcode，但活动开发人员目录是一个命令行实例@{"calib_text": " `[408] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=408>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:183
msgid "If you recently installed Xcode, you may encounter this error:"
msgstr "如果您最近安装了Xcode，可能会遇到此错误：@{"calib_text": " `[409] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=409>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:190
msgid "To resolve this error, you will need to:"
msgstr "要解决此错误，您需要执行以下操作：@{"calib_text": " `[410] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=410>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:192
msgid "Double check that you have the command line tool installed:"
msgstr "请仔细检查是否安装了命令行工具：@{"calib_text": " `[411] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=411>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:198
msgid "Accept the terms and conditions of Xcode by typing in terminal:"
msgstr "在终端中输入以下命令接受Xcode的条款和条件：@{"calib_text": " `[412] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=412>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:204
msgid "Ensure Xcode app is in the ``/Applications`` directory (NOT ``/Users/{user}/Applications``)"
msgstr "确保 Xcode 应用程序位于 ``/Applications`` 目录下（而不是 ``/Users/{user}/Applications``）@{"calib_text": " `[413] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=413>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:206
msgid "Point ``xcode-select`` to the Xcode app Developer directory using the following command:"
msgstr "使用以下命令将 ``xcode-select`` 指向 Xcode 应用程序的开发者目录：@{"calib_text": " `[414] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=414>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:213
msgid "qt_gui_cpp error: SIP binding generator NOT available"
msgstr "qt_gui_cpp 错误：SIP 绑定生成器不可用@{"calib_text": " `[415] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=415>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:217
msgid "When building qt_gui_cpp there may be errors look like the following:"
msgstr "构建 qt_gui_cpp 时可能会出现以下类似的错误：@{"calib_text": " `[416] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=416>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:229
msgid "To fix this issue, follow :doc:`these steps <RQt-Source-Install-MacOS>` to install dependencies for RQt."
msgstr "要解决此问题，请按照 :doc:`这些步骤 <RQt-Source-Install-MacOS>` 安装 RQt 的依赖项。@{"calib_text": " `[417] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=417>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:232
msgid "rosdep install error ``homebrew: Failed to detect successful installation of [qt5]``"
msgstr "rosdep 安装错误 ``homebrew: Failed to detect successful installation of [qt5]``@{"calib_text": " `[418] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=418>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:233
msgid "While following the :doc:`Creating a workspace <../Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>` tutorial, you might encounter the following error stating that ``rosdep`` failes to install Qt5."
msgstr "在遵循 :doc:`创建工作空间 <../Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>` 教程时，您可能会遇到以下错误，指出 ``rosdep`` 无法安装 Qt5。@{"calib_text": " `[419] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=419>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:244
msgid "This error seems to stem from a `linking issue <https://github.com/ros-infrastructure/rosdep/issues/490#issuecomment-334959426>`__ and can be resolved by running the following command."
msgstr "此错误似乎源于 `链接问题 <https://github.com/ros-infrastructure/rosdep/issues/490#issuecomment-334959426>`__，可以通过运行以下命令来解决。@{"calib_text": " `[420] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=420>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:251
msgid "Running the ``rosdep`` command should now execute normally:"
msgstr "现在执行 ``rosdep`` 命令应该正常运行：@{"calib_text": " `[421] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=421>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:265
msgid "Import failing even with library present on the system"
msgstr "即使系统中存在该库，导入仍然失败@{"calib_text": " `[422] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=422>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:267
msgid "Sometimes ``rclpy`` fails to be imported because of some missing DLLs on your system. If so, make sure to install all the dependencies listed in the \"Installing prerequisites\" sections of the :ref:`installation instructions <windows-install-binary-installing-prerequisites>`)."
msgstr "有时候由于系统上缺少某些 DLL 文件，导致无法导入 ``rclpy``。如果出现这种情况，请确保安装了 :ref:`安装指南 <windows-install-binary-installing-prerequisites>` 中“安装先决条件”部分列出的所有依赖项。@{"calib_text": " `[423] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=423>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:270
msgid "If you are installing from binaries, you may need to update your dependencies: they must be the same version as those used to build the binaries."
msgstr "如果您正在使用二进制文件进行安装，则可能需要更新您的依赖项：它们必须与用于构建二进制文件的版本相同。@{"calib_text": " `[424] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=424>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:272
msgid "If you are still having issues, you can use the `Dependencies <https://github.com/lucasg/Dependencies>`_ tool to determine which dependencies are missing on your system. Use the tool to load the corresponding ``.pyd`` file, and it should report unavailable ``DLL`` modules. Be sure that the current workspace is sourced before you execute the tool, otherwise there will be unresolved ROS DLL files. Use this information to install additional dependencies or adjust your path as necessary."
msgstr "如果您仍然遇到问题，您可以使用 `Dependencies <https://github.com/lucasg/Dependencies>`_ 工具来确定您的系统缺少哪些依赖项。使用该工具加载相应的 ``.pyd`` 文件，它将报告不可用的 ``DLL`` 模块。在执行工具之前，请确保当前的工作空间已被激活，否则将出现未解决的 ROS DLL 文件。根据这些信息安装额外的依赖项或根据需要调整您的路径。@{"calib_text": " `[425] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=425>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:278
msgid "CMake error setting modification time"
msgstr "CMake 错误设置修改时间@{"calib_text": " `[426] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=426>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:280
msgid "If you run into the CMake error ``file INSTALL cannot set modification time on ...`` when installing files it is likely that an anti virus software or Windows Defender are interfering with the build. E.g. for Windows Defender you can list the workspace location to be excluded to prevent it from scanning those files."
msgstr "如果在安装文件时遇到 CMake 错误 ``file INSTALL cannot set modification time on ...``，很可能是由于杀毒软件或 Windows Defender 干扰了构建过程。例如，对于 Windows Defender，您可以将工作空间位置列入排除列表，以防止其扫描这些文件。@{"calib_text": " `[427] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=427>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:283
msgid "260 character path limit"
msgstr "260 字符路径限制@{"calib_text": " `[428] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=428>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:290
msgid "Depending on your directory hierarchy, you may see path length limit errors when building ROS 2 from source or your own libraries."
msgstr "根据您的目录层次结构，在从源代码构建ROS 2或您自己的库时，可能会出现路径长度限制错误。@{"calib_text": " `[429] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=429>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:292
msgid "To allow deeper path lengths:"
msgstr "要允许更深的路径长度：@{"calib_text": " `[430] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=430>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:294
msgid "Run ``regedit.exe``, navigate to ``Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem``, and set ``LongPathsEnabled`` to 0x00000001 (1)."
msgstr "运行 ``regedit.exe``，导航至 ``Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem``，并将 ``LongPathsEnabled`` 设置为 0x00000001（1）。@{"calib_text": " `[431] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=431>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:296
msgid "Hit the windows key and type ``Edit Group Policy``. Navigate to Local Computer Policy > Computer Configuration > Administrative Templates > System > Filesystem. Right click ``Enable Win32 long paths``, click Edit. In the dialog, select Enabled and click OK."
msgstr "按下 Windows 键并输入 ``Edit Group Policy``。导航至 Local Computer Policy > Computer Configuration > Administrative Templates > System > Filesystem。右键单击 ``Enable Win32 long paths``，点击编辑。在对话框中，选择已启用并点击确定。@{"calib_text": " `[432] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=432>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:301
msgid "Close and open your terminal to reset the environment and try building again."
msgstr "关闭并重新打开终端以重置环境，并尝试重新构建。@{"calib_text": " `[433] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=433>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:304
msgid "CMake packages unable to find asio, tinyxml2, tinyxml, or eigen"
msgstr "CMake软件包无法找到asio、tinyxml2、tinyxml或eigen。@{"calib_text": " `[434] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=434>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:306
msgid "We've seen that sometimes the chocolatey packages for ``asio``, ``tinyxml2``, etc. do not add important registry entries and CMake will be unable to find them when building ROS 2. We've not yet been able to identify the root cause, but uninstalling the chocolatey packages (with ``-n`` if the uninstall fails the first time), and then reinstalling them will fix the issue."
msgstr "我们发现有时候``asio``、``tinyxml2``等的chocolatey软件包没有添加重要的注册表项，导致在构建ROS 2时CMake无法找到它们。我们还没有找到根本原因，但是卸载chocolatey软件包（如果首次卸载失败，则使用``-n``参数），然后重新安装它们可以解决这个问题。@{"calib_text": " `[435] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=435>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:310
msgid "patch.exe opens a new command window and asks for administrator"
msgstr "patch.exe会打开一个新的命令窗口并要求管理员权限。@{"calib_text": " `[436] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=436>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:312
msgid "This will also cause the build of packages which need to use patch to fail, even you allow it to use administrator rights."
msgstr "即使您允许使用管理员权限，这也会导致需要使用补丁的软件包构建失败。@{"calib_text": " `[437] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=437>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:314
msgid "``choco uninstall patch; colcon build --cmake-clean-cache`` - This is a bug in the `GNU Patch For Windows package <https://chocolatey.org/packages/patch>`_. If this package is not installed, the build process will instead use the version of Patch distributed with git."
msgstr "``choco uninstall patch; colcon build --cmake-clean-cache`` - 这是 `GNU Patch For Windows package <https://chocolatey.org/packages/patch>`_ 中的一个错误。如果未安装此软件包，构建过程将使用与 git 分发的 Patch 版本。@{"calib_text": " `[438] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=438>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:317
msgid "Failed to load Fast RTPS shared library"
msgstr "无法加载 Fast RTPS 共享库@{"calib_text": " `[439] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=439>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:321
msgid "Fast RTPS requires ``msvcr20.dll``, which is part of the ``Visual C++ Redistributable Packages for Visual Studio 2013``. Although it is usually installed by default in Windows 10, we know that some Windows 10-like versions don't have it installed by default (e.g.: Windows Server 2019). In case you don't have it installed, you can download it from `here <https://www.microsoft.com/en-us/download/details.aspx?id=40784>`_."
msgstr "Fast RTPS 需要 ``msvcr20.dll``，它是 ``Visual C++ Redistributable Packages for Visual Studio 201@{"calib_text": " `[440] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=440>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:326
msgid "Failed to create process"
msgstr "无法创建进程@{"calib_text": " `[15649] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15649>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:328
msgid "If running a ROS binary gives the error:"
msgstr "如果运行 ROS 二进制文件出现错误：@{"calib_text": " `[15650] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15650>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:334
msgid "It is likely the Python interpreter was not found. For each executable, the shebang (first line) of the accompanying script is used, so make sure Python is available under the expected path (default: ``C:\\Python38\\``)."
msgstr "很可能找不到 Python 解释器。对于每个可执行文件，将使用伴随脚本的 shebang（第一行）；因此，请确保 Python 在预期路径下可用（默认路径：``C:\\Python38\\``）。@{"calib_text": " `[15651] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15651>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:338
msgid "Binary installation specific"
msgstr "二进制安装特定@{"calib_text": " `[15652] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15652>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:340
msgid "If your example does not start because of missing DLLs, please verify that all libraries from external dependencies such as OpenCV are located inside your ``PATH`` variable."
msgstr "如果由于缺少 DLL 文件而无法启动示例，请验证所有外部依赖库（如 OpenCV）是否位于您的 ``PATH`` 变量中。@{"calib_text": " `[15653] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15653>`_ "}@"


#: ../../source/How-To-Guides/Installation-Troubleshooting.rst:341
msgid "If you forget to call the ``local_setup.bat`` file from your terminal, the demo programs will most likely crash immediately."
msgstr "如果您忘记从终端调用 ``local_setup.bat`` 文件，演示程序很可能会立即崩溃。@{"calib_text": " `[15654] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15654>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:2
msgid "ROS 2 on Raspberry Pi"
msgstr "在 Raspberry Pi 上的 ROS 2@{"calib_text": " `[444] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=444>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:4
msgid "ROS 2 is supported on both 32 bit (arm32) and 64 bit (arm64) ARM processors. However, you can see `here <https://www.ros.org/reps/rep-2000.html>`__ that arm64 receives Tier 1 support, while arm32 is Tier 3. Tier 1 support means distribution specific packages and binary archives are available, while Tier 3 requires the user to compile ROS 2 from source."
msgstr "ROS 2支持32位（arm32）和64位（arm64）ARM处理器。然而，您可以在`这里 <https://www.ros.org/reps/rep-2000.html>`__ 看到arm64是一级支持，而arm32是三级支持。一级支持意味着有特定发行版的软件包和二进制存档可用，而三级支持需要用户从源代码编译ROS 2。@{"calib_text": " `[445] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=445>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:8
msgid "The fastest and simplest way to use ROS 2 is to use a Tier 1 supported configuration."
msgstr "使用一级支持的配置是使用ROS 2的最快和最简单的方法。@{"calib_text": " `[446] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=446>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:10
msgid "This would mean either installing 64 bit Ubuntu on to the Raspberry Pi, or using the 64 bit version of Raspberry Pi OS and running ROS 2 in Docker."
msgstr "这意味着要在树莓派上安装64位Ubuntu，或者使用64位版本的树莓派操作系统并在Docker中运行ROS 2。@{"calib_text": " `[447] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=447>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:13
msgid "Ubuntu Linux on Raspberry Pi with binary ROS 2 install"
msgstr "在树莓派上使用二进制安装的Ubuntu Linux和ROS 2@{"calib_text": " `[448] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=448>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:15
msgid "Ubuntu for Raspberry Pi is available `here <https://ubuntu.com/download/raspberry-pi>`__."
msgstr "Ubuntu for Raspberry Pi is available 在这里 <https://ubuntu.com/download/raspberry-pi>。@{"calib_text": " `[449] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=449>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:17
msgid "Make sure to confirm that you have selected the correct version as described in `REP-2000 <https://www.ros.org/reps/rep-2000.html>`__."
msgstr "请确认您已经选择了正确的版本，如 `REP-2000 <https://www.ros.org/reps/rep-2000.html>`__ 中所述。@{"calib_text": " `[450] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=450>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:19
msgid "You can now install ROS 2 using the normal binary installation instructions for Ubuntu Linux."
msgstr "您现在可以按照 Ubuntu Linux 的常规二进制安装说明来安装 ROS 2。@{"calib_text": " `[451] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=451>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:22
msgid "Raspberry Pi OS with ROS 2 in docker"
msgstr "在 Docker 中使用 ROS 2 的 Raspberry Pi OS@{"calib_text": " `[452] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=452>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:24
msgid "Raspberry Pi OS 64 bit version is `available here <https://www.raspberrypi.com/software/operating-systems/>`__."
msgstr "Raspberry Pi OS 64位版本可以在此处获得: `https://www.raspberrypi.com/software/operating-systems/ <https://www.raspberrypi.com/software/operating-systems/>`__.@{"calib_text": " `[453] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=453>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:26
msgid "Raspberry Pi OS is based on Debian which receives Tier 3 support, but it can run Ubuntu docker containers for Tier 1 support."
msgstr "Raspberry Pi OS基于Debian，Debian获得第三级支持，但可以运行Ubuntu Docker容器以获得第一级支持.@{"calib_text": " `[454] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=454>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:28
msgid "After flashing the OS, `install Docker <https://docs.docker.com/engine/install/debian/#install-using-the-convenience-script>`__."
msgstr "刷写操作系统后，请使用此链接 `https://docs.docker.com/engine/install/debian/#install-using-the-convenience-script <https://docs.docker.com/engine/install/debian/#install-using-the-convenience-script>`__ 安装Docker.@{"calib_text": " `[455] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=455>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:30
msgid "The official OSRF ROS 2 Docker container definitions can be found `here <https://github.com/osrf/docker_images/>`__."
msgstr "官方OSRF ROS 2 Docker容器定义可以在此处找到: `https://github.com/osrf/docker_images/ <https://github.com/osrf/docker_images/>`__.@{"calib_text": " `[456] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=456>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:32
msgid "You may choose from ros-core, ros-base, or ros-desktop. See `here <https://www.ros.org/reps/rep-2001.html>`__ for more information on these variants."
msgstr "您可以选择使用ros-core、ros-base或ros-desktop。有关这些变体的更多信息，请参阅 `这里 <https://www.ros.org/reps/rep-2001.html>`__。@{"calib_text": " `[457] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=457>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:34
msgid "Clone the `docker_images git repo <https://github.com/osrf/docker_images>`__ onto the Raspberry Pi, change in to the directory linked above, then to the directory with your preferred variant."
msgstr "克隆 `docker_images git仓库 <https://github.com/osrf/docker_images>`__ 到Raspberry Pi上，切换到上述链接的目录，然后进入您首选的变体所在的目录。@{"calib_text": " `[458] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=458>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:36
msgid "Inside of the directory, build the container with:"
msgstr "在该目录中，使用以下命令构建容器：@{"calib_text": " `[459] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=459>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:42
msgid "On a supported system it will only take a minute or two to build the docker containers, as the source code is already built in to binaries."
msgstr "在支持的系统上，构建docker容器只需要一两分钟，因为源代码已经构建成二进制文件。@{"calib_text": " `[460] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=460>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:45
msgid "Pre-built Docker container"
msgstr "预构建的 Docker 容器@{"calib_text": " `[461] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=461>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:47
msgid "A pre-built container for the desktop variant is available as well, which only requires a docker pull command."
msgstr "还提供了预构建的桌面变体容器，只需执行 docker pull 命令即可。@{"calib_text": " `[462] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=462>`_ "}@"


#: ../../source/How-To-Guides/Installing-on-Raspberry-Pi.rst:49
msgid "See :doc:`this page <Run-2-nodes-in-single-or-separate-docker-containers>` for more information."
msgstr "有关更多信息，请参阅 :doc:`此页面 <Run-2-nodes-in-single-or-separate-docker-containers>`。@{"calib_text": " `[463] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=463>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:6
msgid "Using Python, XML, and YAML for ROS 2 Launch Files"
msgstr "使用 Python、XML 和 YAML 编写 ROS 2 启动文件@{"calib_text": " `[464] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=464>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:12
msgid "ROS 2 launch files can be written in Python, XML, and YAML. This guide shows how to use these different formats to accomplish the same task, as well as has some discussion on when to use each format."
msgstr "ROS 2启动文件可以使用Python、XML和YAML编写。本指南展示了如何使用这些不同格式来完成相同的任务，并讨论了何时使用每种格式。@{"calib_text": " `[465] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=465>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:16 ../../source/How-To-Guides/Launching-composable-nodes.rst:22
msgid "Launch file examples"
msgstr "启动文件示例@{"calib_text": " `[466] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=466>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:18
msgid "Below is a launch file implemented in Python, XML, and YAML. Each launch file performs the following actions:"
msgstr "下面是用Python、XML和YAML实现的启动文件。每个启动文件执行以下操作：@{"calib_text": " `[467] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=467>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:21
msgid "Setup command line arguments with defaults"
msgstr "设置带有默认值的命令行参数@{"calib_text": " `[468] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=468>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:22
msgid "Include another launch file"
msgstr "包含另一个启动文件@{"calib_text": " `[469] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=469>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:23
msgid "Include another launch file in another namespace"
msgstr "在另一个命名空间中包含另一个启动文件@{"calib_text": " `[470] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=470>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:24
msgid "Start a node and setting its namespace"
msgstr "启动一个节点并设置其命名空间@{"calib_text": " `[471] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=471>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:25
msgid "Start a node, setting its namespace, and setting parameters in that node (using the args)"
msgstr "启动一个节点，设置其命名空间，并在该节点中设置参数（使用 args 参数）@{"calib_text": " `[472] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=472>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:26
msgid "Create a node to remap messages from one topic to another"
msgstr "创建一个节点，将消息从一个话题重新映射到另一个话题@{"calib_text": " `[473] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=473>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:133 ../../source/How-To-Guides/Launching-composable-nodes.rst:69 ../../source/How-To-Guides/Launching-composable-nodes.rst:188
msgid "XML"
msgstr "XML@{"calib_text": " `[474] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=474>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:172 ../../source/How-To-Guides/Launching-composable-nodes.rst:91 ../../source/How-To-Guides/Launching-composable-nodes.rst:212
msgid "YAML"
msgstr "YAML@{"calib_text": " `[475] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=475>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:244
msgid "Using the Launch files from the command line"
msgstr "通过命令行使用启动文件@{"calib_text": " `[476] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=476>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:247
msgid "Launching"
msgstr "启动中@{"calib_text": " `[477] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=477>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:249
msgid "Any of the launch files above can be run with ``ros2 launch``. To try them locally, you can either create a new package and use"
msgstr "上述任意一个启动文件都可以使用``ros2 launch``命令来运行。如果要在本地尝试它们，您可以创建一个新的软件包并使用@{"calib_text": " `[478] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=478>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:256
msgid "or run the file directly by specifying the path to the launch file"
msgstr "或者直接通过指定启动文件的路径来运行该文件@{"calib_text": " `[479] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=479>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:263
msgid "Setting arguments"
msgstr "设置参数@{"calib_text": " `[480] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=480>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:265
msgid "To set the arguments that are passed to the launch file, you should use ``key:=value`` syntax. For example, you can set the value of ``background_r`` in the following way:"
msgstr "要设置传递给启动文件的参数，应该使用 ``key:=value`` 语法。例如，可以按照以下方式设置 ``background_r`` 的值：@{"calib_text": " `[481] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=481>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:272 ../../source/How-To-Guides/Using-callback-groups.rst:532 ../../source/How-To-Guides/Using-callback-groups.rst:539 ../../source/How-To-Guides/Using-callback-groups.rst:546 ../../source/How-To-Guides/Using-callback-groups.rst:560 ../../source/How-To-Guides/Using-callback-groups.rst:567 ../../source/How-To-Guides/Using-callback-groups.rst:574
msgid "or"
msgstr "或@{"calib_text": " `[482] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=482>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:279
msgid "Controlling the turtles"
msgstr "控制海龟@{"calib_text": " `[483] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=483>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:281
msgid "To test that the remapping is working, you can control the turtles by running the following command in another terminal:"
msgstr "为了测试重映射是否起作用，可以在另一个终端中运行以下命令来控制海龟：@{"calib_text": " `[484] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=484>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:289 ../../source/How-To-Guides/Launching-composable-nodes.rst:275
msgid "Python, XML, or YAML: Which should I use?"
msgstr "Python、XML 或 YAML：我应该使用哪个？@{"calib_text": " `[485] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=485>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:293
msgid "Launch files in ROS 1 were written in XML, so XML may be the most familiar to people coming from ROS 1. To see what's changed, you can visit :doc:`Migrating-from-ROS1/Migrating-Launch-Files`."
msgstr "在 ROS 1 中，启动文件是用 XML 编写的，因此对于从 ROS 1 迁移过来的人来说，XML 可能是最熟悉的。要了解发生了什么变化，您可以访问 :doc:`从ROS1迁移/迁移启动文件`。@{"calib_text": " `[15655] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15655>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:296
msgid "For most applications the choice of which ROS 2 launch format comes down to developer preference. However, if your launch file requires flexibility that you cannot achieve with XML or YAML, you can use Python to write your launch file. Using Python for ROS 2 launch is more flexible because of following two reasons:"
msgstr "对于大多数应用程序而言，选择使用哪种 ROS 2 启动文件格式取决于开发人员的偏好。然而，如果您的启动文件需要 XML 或 YAML 无法实现的灵活性，您可以使用 Python 来编写启动文件。使用 Python 进行 ROS 2 启动更加灵活，原因如下：@{"calib_text": " `[487] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=487>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:300
msgid "Python is a scripting language, and thus you can leverage the language and its libraries in your launch files."
msgstr "Python 是一种脚本语言，因此您可以在启动文件中利用该语言及其库。@{"calib_text": " `[488] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=488>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:301
msgid "`ros2/launch <https://github.com/ros2/launch>`_ (general launch features) and `ros2/launch_ros <https://github.com/ros2/launch_ros>`_ (ROS 2 specific launch features) are written in Python and thus you have lower level access to launch features that may not be exposed by XML and YAML."
msgstr "`ros2/launch <https://github.com/ros2/launch>`_（通用的启动功能）和`ros2/launch_ros <https://github.com/ros2/launch_ros>`_（ROS 2特定的启动功能）都是用Python编写的，因此您可以以较低级别访问启动功能，这些功能可能不会通过XML和YAML暴露出来。@{"calib_text": " `[489] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=489>`_ "}@"


#: ../../source/How-To-Guides/Launch-file-different-formats.rst:303
msgid "That being said, a launch file written in Python may be more complex and verbose than one in XML or YAML."
msgstr "话虽如此，用Python编写的启动文件可能比XML或YAML中的启动文件更复杂且冗长。@{"calib_text": " `[490] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=490>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:2
msgid "Using ROS 2 launch to launch composable nodes"
msgstr "使用ROS 2 launch启动可组合节点@{"calib_text": " `[587] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=587>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:8
msgid "In the :doc:`Composition tutorial <../Tutorials/Intermediate/Composition>`, you learned about composable nodes and how to use them from the command-line. In the :doc:`Launch tutorials <../Tutorials/Intermediate/Launch/Launch-Main>`, you learned about launch files and how to use them to manage multiple nodes."
msgstr "在:doc:`组合教程<../Tutorials/Intermediate/Composition>`中，您了解了可组合节点以及如何从命令行中使用它们。在:doc:`启动教程<../Tutorials/Intermediate/Launch/Launch-Main>`中，您了解了启动文件以及如何使用它们来管理多个节点。@{"calib_text": " `[588] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=588>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:11
msgid "This guide will combine the above two topics and teach you how to write launch files for composable nodes."
msgstr "本指南将结合上述两个主题，教您如何为可组合节点编写启动文件。@{"calib_text": " `[589] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=589>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:14
msgid "Setup"
msgstr "设置@{"calib_text": " `[590] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=590>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:16
msgid "See the :doc:`installation instructions <../Installation>` for details on installing ROS 2."
msgstr "有关在安装ROS 2上的详细信息，请参阅:doc:`安装说明 <../Installation>`。@{"calib_text": " `[591] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=591>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:18
msgid "If you've installed ROS 2 from packages, ensure that you have ``ros-humble-image-tools`` installed. If you downloaded the archive or built ROS 2 from source, it will already be part of the installation."
msgstr "如果您从软件包安装了ROS 2，请确保已安装``ros-humble-image-tools``。如果您下载了存档文件或从源代码构建了ROS 2，它已经是安装的一部分。@{"calib_text": " `[592] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=592>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:24
msgid "Below is a launch file that launches composable nodes in Python, XML, and YAML. The launch files all do the following:"
msgstr "下面是一个启动文件，用于在Python、XML和YAML中启动可组合节点。所有的启动文件都执行以下操作：@{"calib_text": " `[593] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=593>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:27
msgid "Instantiate a cam2image composable node with remappings, custom parameters, and extra arguments"
msgstr "实例化一个带有重新映射、自定义参数和额外参数的cam2image可组合节点@{"calib_text": " `[594] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=594>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:28
msgid "Instantiate a showimage composable node with remappings, custom parameters, and extra arguments"
msgstr "实例化一个带有重新映射、自定义参数和额外参数的showimage可组合节点@{"calib_text": " `[595] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=595>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:139
msgid "Loading composable nodes into an existing container"
msgstr "将可组合节点加载到现有容器中@{"calib_text": " `[596] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=596>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:141
msgid "Containers can sometimes be launched by other launch files or from a commandline. In that case, you need to add your components to an existing container. For this, you may use ``LoadComposableNodes`` to load components into a given container. The below example launches the same nodes as above."
msgstr "有时候容器可以由其他启动文件或命令行启动。在这种情况下，您需要将您的组件添加到现有容器中。为此，您可以使用``LoadComposableNodes``将组件加载到给定的容器中。下面的示例启动与上述相同的节点。@{"calib_text": " `[597] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=597>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:259
msgid "Using the Launch files from the command-line"
msgstr "从命令行使用启动文件@{"calib_text": " `[598] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=598>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:261
msgid "Any of the launch files above can be run with ``ros2 launch``. Copy the data into a local file, and then run:"
msgstr "上述任何一个启动文件都可以使用``ros2 launch``命令来运行。将数据复制到一个本地文件中，然后运行：@{"calib_text": " `[599] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=599>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:269
msgid "Intra-process communications"
msgstr "进程内通信@{"calib_text": " `[600] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=600>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:271
msgid "All of the above examples use an extra argument to setup intra-process communication between the nodes. For more information on what intra-process communications are, see the :doc:`intra-process comms tutorial <../Tutorials/Demos/Intra-Process-Communication>`."
msgstr "上述所有示例都使用了额外的参数来设置节点之间的进程内通信。有关进程内通信的更多信息，请参阅:doc:`进程内通信教程<../Tutorials/Demos/Intra-Process-Communication>`。@{"calib_text": " `[601] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=601>`_ "}@"


#: ../../source/How-To-Guides/Launching-composable-nodes.rst:277
msgid "See the discussion in :doc:`Launch-file-different-formats` for more information."
msgstr "有关更多信息，请参阅:doc:`启动文件不同格式的讨论<Launch-file-different-formats>`。@{"calib_text": " `[602] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=602>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1.rst:2
msgid "Migrating from ROS 1 to ROS 2"
msgstr "从ROS 1迁移到ROS 2@{"calib_text": " `[15656] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15656>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1.rst:4
msgid "These guides show how to convert existing ROS 1 packages to ROS 2. If you are new to porting between ROS 1 and ROS 2, it is recommended to read through the guides in order."
msgstr "这些指南展示了如何将现有的ROS 1包转换为ROS 2。如果您对在ROS 1和ROS 2之间进行迁移不熟悉，建议按顺序阅读这些指南。@{"calib_text": " `[15657] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15657>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1.rst:19
msgid "Automatic tools"
msgstr "自动工具@{"calib_text": " `[15658] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15658>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1.rst:21
msgid "There are also some automatic conversion tools that exist, though they are not exhaustive:"
msgstr "还有一些自动转换工具可用，尽管它们不是详尽无遗的：@{"calib_text": " `[15659] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15659>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1.rst:23
msgid "`Magical ROS 2 Conversion Tool <https://github.com/DLu/roscompile/tree/main/magical_ros2_conversion_tool>`_"
msgstr "`神奇的ROS 2转换工具 <https://github.com/DLu/roscompile/tree/main/magical_ros2_conversion_tool>`_@{"calib_text": " `[15660] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15660>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1.rst:24
msgid "Launch File migrator that converts a ROS 1 XML launch file to a ROS 2 Python launch file: https://github.com/aws-robotics/ros2-launch-file-migrator"
msgstr "启动文件迁移器，用于将ROS 1的XML启动文件转换为ROS 2的Python启动文件：https://github.com/aws-robotics/ros2-launch-file-migrator@{"calib_text": " `[15661] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15661>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1.rst:25
msgid "Amazon has made their tools for porting from ROS 1 to ROS 2 available at: https://github.com/awslabs/ros2-migration-tools/tree/master/porting\\_tools"
msgstr "亚马逊已经提供了他们用于从ROS 1迁移到ROS 2的工具，链接如下：https://github.com/awslabs/ros2-migration-tools/tree/master/porting\\_tools@{"calib_text": " `[15662] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15662>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1.rst:26
msgid "`rospy2 <https://github.com/dheera/rospy2>`_ Python project to automatically convert rospy calls to rclpy calls"
msgstr "`rospy2 <https://github.com/dheera/rospy2>`_ Python项目，用于自动将rospy调用转换为rclpy调用@{"calib_text": " `[15663] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15663>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:8
msgid "Migrating C++ Packages"
msgstr "迁移 C++ 包@{"calib_text": " `[15664] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15664>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:15 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:14
msgid "Build tool"
msgstr "构建工具@{"calib_text": " `[15665] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15665>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:17 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:16
msgid "Instead of using ``catkin_make``, ``catkin_make_isolated`` or ``catkin build`` ROS 2 uses the command line tool `colcon <https://design.ros2.org/articles/build_tool.html>`__ to build and install a set of packages. See the :doc:`beginner tutorial <../../Tutorials/Beginner-Client-Libraries/Colcon-Tutorial>` to get started with ``colcon``."
msgstr "在ROS 2中，不再使用 ``catkin_make``、``catkin_make_isolated`` 或 ``catkin build``，而是使用命令行工具 `colcon <https://design.ros2.org/articles/build_tool.html>`__ 来构建和安装一组包。请查看 :doc:`初学者教程 <../../Tutorials/Beginner-Client-Libraries/Colcon-Tutorial>` 以开始使用 ``colcon``。@{"calib_text": " `[15666] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15666>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:21 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:20
msgid "Build system"
msgstr "构建系统@{"calib_text": " `[15667] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15667>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:23
msgid "The build system in ROS 2 is called `ament <https://design.ros2.org/articles/ament.html>`__. Ament is built on CMake: ``ament_cmake`` provides CMake functions to make writing ``CMakeLists.txt`` files easier."
msgstr "ROS 2 中的构建系统称为 `ament <https://design.ros2.org/articles/ament.html>`__。Ament 基于 CMake 构建：``ament_cmake`` 提供了用于更轻松编写 ``CMakeLists.txt`` 文件的 CMake 函数。@{"calib_text": " `[15668] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15668>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:27
msgid "Update the *CMakeLists.txt* to use *ament_cmake*"
msgstr "更新 *CMakeLists.txt* 使用 *ament_cmake*@{"calib_text": " `[15669] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15669>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:29
msgid "Apply the following changes to use ``ament_cmake`` instead of ``catkin``:"
msgstr "将以下更改应用于使用``ament_cmake``而不是``catkin``：@{"calib_text": " `[15670] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15670>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:33
msgid "Set the build type in the ``package.xml`` file export section:"
msgstr "在``package.xml``文件的导出部分中设置构建类型：@{"calib_text": " `[15671] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15671>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:42
msgid "Replace the ``find_package`` invocation with ``catkin`` and the ``COMPONENTS`` with:"
msgstr "将``find_package``调用替换为``catkin``，``COMPONENTS``改为：@{"calib_text": " `[15672] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15672>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:52
msgid "Move and update the ``catkin_package`` invocation with:"
msgstr "移动并更新``catkin_package``调用为：@{"calib_text": " `[15673] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15673>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:56
msgid "Invoke ``ament_package`` instead but **after** all targets have been registered."
msgstr "请改为调用``ament_package``，但是要在所有目标都注册之后调用。@{"calib_text": " `[15674] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15674>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:59
msgid "The only valid argument for `ament_package <https://github.com/ament/ament_cmake/blob/humble/ament_cmake_core/cmake/core/ament_package.cmake>`__ is ``CONFIG_EXTRAS``. All other arguments are covered by separate functions which all need to be invoked *before* ``ament_package``:"
msgstr "``ament_package``的唯一有效参数是``CONFIG_EXTRAS``。所有其他参数都由单独的函数处理，这些函数都需要在``ament_package``之前调用：@{"calib_text": " `[15675] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15675>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:62
msgid "Instead of passing ``CATKIN_DEPENDS ...`` call ``ament_export_dependencies(...)`` before."
msgstr "不要使用``CATKIN_DEPENDS ...``，而是在之前调用``ament_export_dependencies(...)``。@{"calib_text": " `[15676] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15676>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:63
msgid "Instead of passing ``INCLUDE_DIRS ...`` call ``ament_export_include_directories(...)`` before."
msgstr "不要使用``INCLUDE_DIRS ...``，而是在之前调用``ament_export_include_directories(...)``。@{"calib_text": " `[15677] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15677>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:64
msgid "Instead of passing ``LIBRARIES ...`` call ``ament_export_libraries(...)`` before."
msgstr "在调用``LIBRARIES ...``之前，请使用``ament_export_libraries(...)``进行传递。@{"calib_text": " `[15678] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15678>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:67
msgid "Replace the invocation of ``add_message_files``, ``add_service_files`` and ``generate_messages`` with `rosidl_generate_interfaces <https://github.com/ros2/rosidl/blob/humble/rosidl_cmake/cmake/rosidl_generate_interfaces.cmake>`__."
msgstr "将``add_message_files``、``add_service_files``和``generate_messages``的调用替换为`rosidl_generate_interfaces <https://github.com/ros2/rosidl/blob/humble/rosidl_cmake/cmake/rosidl_generate_interfaces.cmake>`__。@{"calib_text": " `[15679] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15679>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:71
msgid "The first argument is the ``target_name``. If you're building just one library it's ``${PROJECT_NAME}``"
msgstr "第一个参数是``target_name``。如果你只构建一个库，那么它是``${PROJECT_NAME}``。@{"calib_text": " `[15680] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15680>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:75
msgid "Followed by the list of message filenames, relative to the package root."
msgstr "接着是相对于软件包根目录的消息文件名列表。@{"calib_text": " `[15681] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15681>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:78
msgid "If you will be using the list of filenames multiple times, it is recommended to compose a list of message files and pass the list to the function for clarity."
msgstr "如果您将多次使用文件名列表，则建议为清晰起见编写一个消息文件列表，并将其传递给函数。@{"calib_text": " `[15682] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15682>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:81
msgid "The final multi-value-keyword argument fpr ``generate_messages`` is ``DEPENDENCIES`` which requires the list of dependent message packages."
msgstr "最后一个多值关键字参数是``generate_messages``的``DEPENDENCIES``，需要依赖消息软件包的列表。@{"calib_text": " `[15683] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15683>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:91
msgid "Remove any occurrences of the *devel space*. Related CMake variables like ``CATKIN_DEVEL_PREFIX`` do not exist anymore."
msgstr "删除所有*devel空间*的出现。相关的CMake变量，如``CATKIN_DEVEL_PREFIX``，已不再存在。@{"calib_text": " `[15684] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15684>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:95
msgid "The ``CATKIN_DEPENDS`` and ``DEPENDS`` arguments are passed to the new function `ament_export_dependencies <https://github.com/ament/ament_cmake/blob/humble/ament_cmake_export_dependencies/cmake/ament_export_dependencies.cmake>`__."
msgstr "``CATKIN_DEPENDS`` 和 ``DEPENDS`` 参数被传递给新的函数 `ament_export_dependencies <https://github.com/ament/ament_cmake/blob/humble/ament_cmake_export_dependencies/cmake/ament_export_dependencies.cmake>`__。@{"calib_text": " `[15685] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15685>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:96
msgid "``CATKIN_GLOBAL_BIN_DESTINATION``: ``bin``"
msgstr "``CATKIN_GLOBAL_BIN_DESTINATION``: ``bin``@{"calib_text": " `[15686] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15686>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:97
msgid "``CATKIN_GLOBAL_INCLUDE_DESTINATION``: ``include``"
msgstr "``CATKIN_GLOBAL_INCLUDE_DESTINATION``: ``include``@{"calib_text": " `[15687] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15687>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:98
msgid "``CATKIN_GLOBAL_LIB_DESTINATION``: ``lib``"
msgstr "``CATKIN_GLOBAL_LIB_DESTINATION``: ``lib``@{"calib_text": " `[15688] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15688>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:99
msgid "``CATKIN_GLOBAL_LIBEXEC_DESTINATION``: ``lib``"
msgstr "``CATKIN_GLOBAL_LIBEXEC_DESTINATION``：``lib``@{"calib_text": " `[15689] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15689>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:100
msgid "``CATKIN_GLOBAL_SHARE_DESTINATION``: ``share``"
msgstr "``CATKIN_GLOBAL_SHARE_DESTINATION``：``share``@{"calib_text": " `[15690] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15690>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:101
msgid "``CATKIN_PACKAGE_BIN_DESTINATION``: ``lib/${PROJECT_NAME}``"
msgstr "``CATKIN_PACKAGE_BIN_DESTINATION``：``lib/${PROJECT_NAME}``@{"calib_text": " `[15691] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15691>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:102
msgid "``CATKIN_PACKAGE_INCLUDE_DESTINATION``: ``include/${PROJECT_NAME}``"
msgstr "``CATKIN_PACKAGE_INCLUDE_DESTINATION``：``include/${PROJECT_NAME}``@{"calib_text": " `[15692] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15692>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:103
msgid "``CATKIN_PACKAGE_LIB_DESTINATION``: ``lib``"
msgstr "``CATKIN_PACKAGE_LIB_DESTINATION``: ``lib``@{"calib_text": " `[15693] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15693>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:104
msgid "``CATKIN_PACKAGE_SHARE_DESTINATION``: ``share/${PROJECT_NAME}``"
msgstr "``CATKIN_PACKAGE_SHARE_DESTINATION``: ``share/${PROJECT_NAME}``@{"calib_text": " `[15694] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15694>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:107
msgid "Unit tests"
msgstr "单元测试@{"calib_text": " `[15695] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15695>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:109
msgid "If you are using gtest:"
msgstr "如果您正在使用 gtest:@{"calib_text": " `[15696] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15696>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:111
msgid "Replace ``CATKIN_ENABLE_TESTING`` with ``BUILD_TESTING``. Replace ``catkin_add_gtest`` with ``ament_add_gtest``."
msgstr "将 ``CATKIN_ENABLE_TESTING`` 替换为 ``BUILD_TESTING``。将 ``catkin_add_gtest`` 替换为 ``ament_add_gtest``。@{"calib_text": " `[15697] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15697>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:135
msgid "Add ``<test_depend>ament_cmake_gtest</test_depend>`` to your ``package.xml``."
msgstr "在你的 ``package.xml`` 中添加 ``<test_depend>ament_cmake_gtest</test_depend>``。@{"calib_text": " `[15698] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15698>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:143
msgid "Linters"
msgstr "代码检查工具@{"calib_text": " `[15699] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15699>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:145
msgid "In ROS 2 we are working to maintain clean code using linters. The styles for different languages are defined in our :doc:`Developer Guide <../../The-ROS2-Project/Contributing/Developer-Guide>`."
msgstr "在 ROS 2 中，我们努力保持干净的代码，并使用代码检查工具。不同语言的代码风格在我们的 :doc:`开发者指南 <../../The-ROS2-Project/Contributing/Developer-Guide>` 中有定义。@{"calib_text": " `[15700] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15700>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:148
msgid "If you are starting a project from scratch it is recommended to follow the style guide and turn on the automatic linter unit tests by adding these lines just below ``if(BUILD_TESTING)``:"
msgstr "如果您要从头开始创建项目，建议遵循代码风格指南，并通过在 ``if(BUILD_TESTING)`` 下方添加以下行来启用自动代码检查单元测试：@{"calib_text": " `[15701] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15701>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:155
msgid "You will also need to add the following dependencies to your ``package.xml``:"
msgstr "您还需要将以下依赖项添加到您的 ``package.xml`` 文件中：@{"calib_text": " `[15702] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15702>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:163 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:48
msgid "Update source code"
msgstr "更新源代码@{"calib_text": " `[15703] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15703>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:166
msgid "Messages, services, and actions"
msgstr "消息、服务和动作@{"calib_text": " `[15704] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15704>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:168
msgid "The namespace of ROS 2 messages, services, and actions use a subnamespace (``msg``, ``srv``, or ``action``, respectively) after the package name. Therefore an include looks like: ``#include <my_interfaces/msg/my_message.hpp>``. The C++ type is then named: ``my_interfaces::msg::MyMessage``."
msgstr "ROS 2的消息、服务和动作的命名空间在包名后使用子命名空间（分别是``msg``、``srv``或``action``）。因此，一个包含语句的形式如下：``#include <my_interfaces/msg/my_message.hpp>``。C++类型的命名为：``my_interfaces::msg::MyMessage``。@{"calib_text": " `[15705] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15705>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:172
msgid "Shared pointer types are provided as typedefs within the message structs: ``my_interfaces::msg::MyMessage::SharedPtr`` as well as ``my_interfaces::msg::MyMessage::ConstSharedPtr``."
msgstr "共享指针类型在消息结构体中作为typedef提供：``my_interfaces::msg::MyMessage::SharedPtr``以及``my_interfaces::msg::MyMessage::ConstSharedPtr``。@{"calib_text": " `[15706] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15706>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:174
msgid "For more details please see the article about the `generated C++ interfaces <https://design.ros2.org/articles/generated_interfaces_cpp.html>`__."
msgstr "更多详细信息请参阅有关`生成的C++接口 <https://design.ros2.org/articles/generated_interfaces_cpp.html>`__的文章。@{"calib_text": " `[15707] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15707>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:176
msgid "The migration requires includes to change by:"
msgstr "迁移需要通过以下方式更改包含：@{"calib_text": " `[15708] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15708>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:179
msgid "inserting the subfolder ``msg`` between the package name and message datatype"
msgstr "在包名称和消息数据类型之间插入子文件夹``msg``@{"calib_text": " `[15709] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15709>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:180
msgid "changing the included filename from CamelCase to underscore separation"
msgstr "将包含的文件名从驼峰式更改为下划线分隔@{"calib_text": " `[15710] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15710>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:181
msgid "changing from ``*.h`` to ``*.hpp``"
msgstr "将``*.h``更改为``*.hpp``@{"calib_text": " `[15711] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15711>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:192
msgid "The migration requires code to insert the ``msg`` namespace into all instances."
msgstr "迁移需要在所有实例中插入``msg``命名空间的代码。@{"calib_text": " `[15712] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15712>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:195
msgid "Use of service objects"
msgstr "使用服务对象@{"calib_text": " `[15713] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15713>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:197
msgid "Service callbacks in ROS 2 do not have boolean return values. Instead of returning false on failures, throwing exceptions is recommended."
msgstr "ROS 2中的服务回调函数不具有布尔返回值。建议在失败时抛出异常，而不是返回false。@{"calib_text": " `[15714] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15714>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:218
msgid "Usages of ros::Time"
msgstr "ros::Time的用法@{"calib_text": " `[15715] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15715>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:220
msgid "For usages of ``ros::Time``:"
msgstr "关于``ros::Time``的用法：@{"calib_text": " `[15716] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15716>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:222
msgid "Replace all instances of ``ros::Time`` with ``rclcpp::Time``"
msgstr "将所有``ros::Time``的实例替换为``rclcpp::Time``@{"calib_text": " `[15717] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15717>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:224
msgid "If your messages or code makes use of std_msgs::Time:"
msgstr "如果您的消息或代码使用了std_msgs::Time：@{"calib_text": " `[15718] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15718>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:226
msgid "Convert all instances of std_msgs::Time to builtin_interfaces::msg::Time"
msgstr "将所有的std_msgs::Time实例转换为builtin_interfaces::msg::Time@{"calib_text": " `[15719] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15719>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:228
msgid "Convert all ``#include \"std_msgs/time.h`` to ``#include \"builtin_interfaces/msg/time.hpp\"``"
msgstr "将所有的#include \"std_msgs/time.h\"转换为#include \"builtin_interfaces/msg/time.hpp\"@{"calib_text": " `[15720] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15720>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:230
msgid "Convert all instances using the std_msgs::Time field ``nsec`` to the builtin_interfaces::msg::Time field ``nanosec``"
msgstr "将所有使用std_msgs::Time字段``nsec``的实例转换为builtin_interfaces::msg::Time字段``nanosec``@{"calib_text": " `[15721] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15721>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:233
msgid "Usages of ros::Rate"
msgstr "ros::Rate的用法@{"calib_text": " `[15722] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15722>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:235
msgid "There is an equivalent type ``rclcpp::Rate`` object which is basically a drop in replacement for ``ros::Rate``."
msgstr "有一个等效的类型 ``rclcpp::Rate`` 对象，基本上可以替换 ``ros::Rate``。@{"calib_text": " `[15723] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15723>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:239
msgid "Boost"
msgstr "Boost@{"calib_text": " `[15724] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15724>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:241
msgid "Much of the functionality previously provided by Boost has been integrated into the C++ standard library. As such we would like to take advantage of the new core features and avoid the dependency on boost where possible."
msgstr "之前由 Boost 提供的许多功能已经集成到 C++ 标准库中。因此，我们希望尽可能利用新的核心功能，并避免对 Boost 的依赖。@{"calib_text": " `[15725] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15725>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:245
msgid "Shared Pointers"
msgstr "共享指针@{"calib_text": " `[15726] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15726>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:247
msgid "To switch shared pointers from boost to standard C++ replace instances of:"
msgstr "将共享指针从 boost 转换为标准 C++，请替换以下实例：@{"calib_text": " `[15727] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15727>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:250
msgid "``#include <boost/shared_ptr.hpp>`` with ``#include <memory>``"
msgstr "``#include <boost/shared_ptr.hpp>`` 替换为 ``#include <memory>``@{"calib_text": " `[15728] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15728>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:251
msgid "``boost::shared_ptr`` with ``std::shared_ptr``"
msgstr "``boost::shared_ptr`` 替换为 ``std::shared_ptr``@{"calib_text": " `[15729] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15729>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:253
msgid "There may also be variants such as ``weak_ptr`` which you want to convert as well."
msgstr "还可能存在诸如 ``weak_ptr`` 的变体，您也希望进行转换。@{"calib_text": " `[15730] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15730>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:255
msgid "Also it is recommended practice to use ``using`` instead of ``typedef``. ``using`` has the ability to work better in templated logic. For details `see here <https://stackoverflow.com/questions/10747810/what-is-the-difference-between-typedef-and-using-in-c11>`__"
msgstr "此外，建议使用 ``using`` 而不是 ``typedef``。``using`` 在模板逻辑中能够更好地发挥作用。有关详细信息，请参阅 `这里 <https://stackoverflow.com/questions/10747810/what-is-the-difference-between-typedef-and-using-in-c11>`__。@{"calib_text": " `[15731] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15731>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:260
msgid "Thread/Mutexes"
msgstr "线程/互斥锁@{"calib_text": " `[15732] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15732>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:262
msgid "Another common part of boost used in ROS codebases are mutexes in ``boost::thread``."
msgstr "在ROS代码库中，``boost::thread`` 中的互斥锁是另一个常见的boost部分。@{"calib_text": " `[15733] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15733>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:265
msgid "Replace ``boost::mutex::scoped_lock`` with ``std::unique_lock<std::mutex>``"
msgstr "将``boost::mutex::scoped_lock``替换为``std::unique_lock<std::mutex>``@{"calib_text": " `[15734] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15734>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:266
msgid "Replace ``boost::mutex`` with ``std::mutex``"
msgstr "将``boost::mutex``替换为``std::mutex``@{"calib_text": " `[15735] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15735>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:267
msgid "Replace ``#include <boost/thread/mutex.hpp>`` with ``#include <mutex>``"
msgstr "将``#include <boost/thread/mutex.hpp>``替换为``#include <mutex>``@{"calib_text": " `[15736] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15736>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:270
msgid "Unordered Map"
msgstr "无序映射@{"calib_text": " `[15737] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15737>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:272 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:281
msgid "Replace:"
msgstr "替换:@{"calib_text": " `[15738] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15738>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:275
msgid "``#include <boost/unordered_map.hpp>`` with ``#include <unordered_map>``"
msgstr "``#include <boost/unordered_map.hpp>`` 为 ``#include <unordered_map>``@{"calib_text": " `[15739] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15739>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:276
msgid "``boost::unordered_map`` with ``std::unordered_map``"
msgstr "``boost::unordered_map`` 为 ``std::unordered_map``@{"calib_text": " `[15740] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15740>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:279
msgid "function"
msgstr "函数@{"calib_text": " `[15741] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15741>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:284
msgid "``#include <boost/function.hpp>``  with ``#include <functional>``"
msgstr "``#include <boost/function.hpp>`` 与 ``#include <functional>``@{"calib_text": " `[15742] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15742>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:285
msgid "``boost::function`` with ``std::function``"
msgstr "``boost::function`` 与 ``std::function``@{"calib_text": " `[15743] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15743>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:288
msgid "Example: Converting an existing ROS 1 package to ROS 2"
msgstr "示例：将现有的ROS 1 包转换为 ROS 2@{"calib_text": " `[15744] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15744>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:290
msgid "Let's say that we have simple ROS 1 package called ``talker`` that uses ``roscpp`` in one node, called ``talker``. This package is in a catkin workspace, located at ``~/ros1_talker``."
msgstr "假设我们有一个名为``talker``的简单ROS 1包，在一个名为``talker``的节点中使用了``roscpp``。该包位于catkin工作空间中，位置为``~/ros1_talker``。@{"calib_text": " `[15745] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15745>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:294
msgid "The ROS 1 code"
msgstr "ROS 1代码@{"calib_text": " `[15746] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15746>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:296
msgid "Here's the directory layout of our catkin workspace:"
msgstr "这是我们的catkin工作空间的目录布局：@{"calib_text": " `[15747] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15747>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:309
msgid "Here is the content of those three files:"
msgstr "以下是这三个文件的内容：@{"calib_text": " `[15748] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15748>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:311
msgid "``src/talker/package.xml``:"
msgstr "``src/talker/package.xml``：@{"calib_text": " `[15749] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15749>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:328
msgid "``src/talker/CMakeLists.txt``:"
msgstr "``src/talker/CMakeLists.txt``：@{"calib_text": " `[15750] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15750>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:342
msgid "``src/talker/talker.cpp``:"
msgstr "``src/talker/talker.cpp``：@{"calib_text": " `[15751] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15751>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:371
msgid "Building the ROS 1 code"
msgstr "构建 ROS 1 代码@{"calib_text": " `[15752] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15752>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:373
msgid "We source an environment setup file (in this case for Noetic using bash), then we build our package using ``catkin_make install``:"
msgstr "我们会源码一个环境设置文件（在此示例中是 Noetic 使用 bash 的情况），然后使用 ``catkin_make install`` 构建我们的包：@{"calib_text": " `[15753] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15753>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:383
msgid "Running the ROS 1 node"
msgstr "运行 ROS 1 节点@{"calib_text": " `[15754] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15754>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:385
msgid "If there's not already one running, we start a ``roscore``, first sourcing the setup file from our ``catkin`` install tree (the system setup file at ``/opt/ros/noetic/setup.bash`` would also work here):"
msgstr "如果还没有运行roscore，我们首先从我们的``catkin``安装目录中的设置文件开始运行``roscore``（系统设置文件位于``/opt/ros/noetic/setup.bash``也可以使用在这里）：@{"calib_text": " `[15755] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15755>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:394
msgid "In another shell, we run the node from the ``catkin`` install space using ``rosrun``, again sourcing the setup file first (in this case it must be the one from our workspace):"
msgstr "在另一个终端中，我们使用 ``rosrun`` 从 ``catkin`` 安装空间运行节点，再次首先获取设置文件（在这种情况下，必须是我们工作空间中的设置文件）：@{"calib_text": " `[15756] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15756>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:404
msgid "Migrating to ROS 2"
msgstr "迁移到ROS 2@{"calib_text": " `[15757] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15757>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:406
msgid "Let's start by creating a new workspace in which to work:"
msgstr "我们首先创建一个新的工作空间来进行工作：@{"calib_text": " `[15758] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15758>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:413
msgid "We'll copy the source tree from our ROS 1 package into that workspace, where we can modify it:"
msgstr "我们将从我们的ROS 1软件包中复制源代码树到该工作空间中，在那里我们可以进行修改:@{"calib_text": " `[15759] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15759>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:420
msgid "Now we'll modify the C++ code in the node. The ROS 2 C++ library, called ``rclcpp``, provides a different API from that provided by ``roscpp``. The concepts are very similar between the two libraries, which makes the changes reasonably straightforward to make."
msgstr "现在我们将修改节点中的C++代码。ROS 2的C++库名为``rclcpp``，其提供的API与``roscpp``提供的API不同。这两个库之间的概念非常相似，这使得修改相对来说相当简单。@{"calib_text": " `[15760] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15760>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:427
msgid "Included headers"
msgstr "包含的头文件@{"calib_text": " `[15761] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15761>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:429
msgid "In place of ``ros/ros.h``, which gave us access to the ``roscpp`` library API, we need to include ``rclcpp/rclcpp.hpp``, which gives us access to the ``rclcpp`` library API:"
msgstr "我们需要包含``rclcpp/rclcpp.hpp``来替代``ros/ros.h``，后者提供了对``roscpp``库API的访问权限，而前者则提供了对``rclcpp``库API的访问权限：@{"calib_text": " `[15762] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15762>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:438
msgid "To get the ``std_msgs/String`` message definition, in place of ``std_msgs/String.h``, we need to include ``std_msgs/msg/string.hpp``:"
msgstr "要获取``std_msgs/String``消息定义，我们需要包含``std_msgs/msg/string.hpp``，而不是``std_msgs/String.h``：@{"calib_text": " `[15763] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15763>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:447
msgid "Changing C++ library calls"
msgstr "更改C++库调用@{"calib_text": " `[15764] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15764>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:449
msgid "Instead of passing the node's name to the library initialization call, we do the initialization, then pass the node name to the creation of the node object:"
msgstr "与将节点名称传递给库初始化调用不同，我们首先进行初始化，然后将节点名称传递给节点对象的创建：@{"calib_text": " `[15765] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15765>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:459
msgid "The creation of the publisher and rate objects looks pretty similar, with some changes to the names of namespace and methods."
msgstr "发布者和速率对象的创建看起来非常相似，只是命名空间和方法的名称有一些变化。@{"calib_text": " `[15766] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15766>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:470
msgid "To further control how message delivery is handled, a quality of service (``QoS``) profile could be passed in. The default profile is ``rmw_qos_profile_default``. For more details, see the `design document <https://design.ros2.org/articles/qos.html>`__ and :doc:`concept overview <../../Concepts/Intermediate/About-Quality-of-Service-Settings>`."
msgstr "为了进一步控制消息传递的处理方式，可以传递一个质量服务（``QoS``）配置文件。默认配置文件是``rmw_qos_profile_default``。更多详细信息，请参阅 `设计文档 <https://design.ros2.org/articles/qos.html>`__ 和 :doc:`概念概述 <../../Concepts/Intermediate/About-Quality-of-Service-Settings>`。@{"calib_text": " `[15767] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15767>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:477
msgid "The creation of the outgoing message is different in the namespace:"
msgstr "在命名空间中，对传出消息的创建方式有所不同：@{"calib_text": " `[15768] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15768>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:484
msgid "In place of ``ros::ok()``, we call ``rclcpp::ok()``:"
msgstr "我们用 ``rclcpp::ok()`` 替代了 ``ros::ok()``：@{"calib_text": " `[15769] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15769>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:491
msgid "Inside the publishing loop, we access the ``data`` field as before:"
msgstr "在发布循环中，我们仍然像之前一样访问 ``data`` 字段：@{"calib_text": " `[15770] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15770>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:497
msgid "To print a console message, instead of using ``ROS_INFO()``, we use ``RCLCPP_INFO()`` and its various cousins. The key difference is that ``RCLCPP_INFO()`` takes a Logger object as the first argument."
msgstr "要打印控制台消息，不再使用``ROS_INFO()``，而是使用``RCLCPP_INFO()``及其各种相关函数。关键区别在于``RCLCPP_INFO()``将Logger对象作为第一个参数。@{"calib_text": " `[15771] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15771>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:507
msgid "Publishing the message is the same as before:"
msgstr "发布消息的方式与之前相同：@{"calib_text": " `[15772] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15772>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:513
msgid "Spinning (i.e., letting the communications system process any pending incoming/outgoing messages) is different in that the call now takes the node as an argument:"
msgstr "循环（即让通信系统处理任何待处理的传入/传出消息）的方式不同，调用现在将节点作为参数：@{"calib_text": " `[15773] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15773>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:522
msgid "Sleeping using the rate object is unchanged."
msgstr "使用rate对象进行休眠的方式保持不变。@{"calib_text": " `[15774] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15774>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:524
msgid "Putting it all together, the new ``talker.cpp`` looks like this:"
msgstr "将所有内容组合在一起，新的 `talker.cpp` 如下所示：@{"calib_text": " `[15775] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15775>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:563
msgid "Changing the ``package.xml``"
msgstr "修改 `package.xml`@{"calib_text": " `[15776] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15776>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:565
msgid "ROS 2 uses a newer version of ``catkin``, called ``ament_cmake``, which we specify in the ``buildtool_depend`` tag:"
msgstr "ROS 2 使用名为 `ament_cmake` 的较新版本 `catkin`，我们在 `buildtool_depend` 标签中进行了指定：@{"calib_text": " `[15777] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15777>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:573
msgid "In our build dependencies, instead of ``roscpp`` we use ``rclcpp``, which provides the C++ API that we use."
msgstr "在我们的构建依赖项中，我们使用``rclcpp``代替了``roscpp``，它提供了我们使用的C++ API。@{"calib_text": " `[15778] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15778>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:580
msgid "We make the same addition in the run dependencies and also update from the ``run_depend`` tag to the ``exec_depend`` tag (part of the upgrade to version 2 of the package format):"
msgstr "在运行时依赖项中，我们进行了相同的修改，并且还将``run_depend``标签更新为``exec_depend``标签（这是升级到软件包格式版本2的一部分）：@{"calib_text": " `[15779] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15779>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:590
msgid "In ROS 1, we use ``<depend>`` to simplify specifying dependencies for both compile-time and runtime. We can do the same in ROS 2:"
msgstr "在ROS 1中，我们使用``<depend>``来简化指定编译时和运行时的依赖关系。在ROS 2中，我们可以做同样的事情：@{"calib_text": " `[15780] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15780>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:599
msgid "We also need to tell the build tool what *kind* of package we are, so that it knows how to build us. Because we're using ``ament`` and CMake, we add the following lines to declare our build type to be ``ament_cmake``:"
msgstr "我们还需要告诉构建工具我们是哪种类型的软件包，以便它知道如何构建我们。因为我们使用``ament``和CMake，所以我们添加以下行来声明我们的构建类型为``ament_cmake``：@{"calib_text": " `[15781] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15781>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:610
msgid "Putting it all together, our ``package.xml`` now looks like this:"
msgstr "将所有内容放在一起，我们的``package.xml``现在看起来像这样：@{"calib_text": " `[15782] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15782>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:635
msgid "Changing the CMake code"
msgstr "修改CMake代码@{"calib_text": " `[15783] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15783>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:637
msgid "ROS 2 relies on a higher version of CMake:"
msgstr "ROS 2依赖于更高版本的CMake：@{"calib_text": " `[15784] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15784>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:644
msgid "ROS 2 relies on the C++17 standard. Depending on what compiler you're using, support for C++17 might not be enabled by default. Enable C++17 support explicitly by adding this line near the top of the file:"
msgstr "ROS 2 依赖于 C++17 标准。取决于您使用的编译器，可能默认情况下未启用对 C++17 的支持。通过在文件顶部附近添加以下行来显式启用对 C++17 的支持：@{"calib_text": " `[15785] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15785>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:652
msgid "The preferred way to work on all platforms is this:"
msgstr "在所有平台上工作的首选方式如下：@{"calib_text": " `[15786] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15786>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:663
msgid "Using ``catkin``, we specify the packages we want to build against by passing them as ``COMPONENTS`` arguments when initially finding ``catkin`` itself. With ``ament_cmake``, we find each package individually, starting with ``ament_cmake``:"
msgstr "使用 ``catkin``，我们通过将要构建的包作为 ``COMPONENTS`` 参数传递给初始查找 ``catkin`` 本身的命令来指定要构建的包。对于 ``ament_cmake``，我们逐个查找每个包，从 ``ament_cmake`` 开始：@{"calib_text": " `[15787] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15787>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:674
msgid "System dependencies can be found as before:"
msgstr "系统依赖项与以前一样可以找到：@{"calib_text": " `[15788] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15788>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:680
msgid "We call ``catkin_package()`` to auto-generate things like CMake configuration files for other packages that use our package. Whereas that call happens *before* specifying targets to build, we now call the analogous ``ament_package()`` *after* the targets:"
msgstr "我们使用 ``catkin_package()`` 来自动生成像 CMake 配置文件这样的东西，以供使用我们包的其他包使用。与构建目标之前的调用相反，现在我们在目标之后调用类似的 ``ament_package()``：@{"calib_text": " `[15789] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15789>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:691
msgid "The only directories that need to be manually included are local directories and dependencies that are not ament packages:"
msgstr "唯一需要手动包含的目录是本地目录和不是 ament 包的依赖项：@{"calib_text": " `[15790] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15790>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:699
msgid "A better alternative is to specify include directories for each target individually, rather than including all the directories for all targets:"
msgstr "更好的选择是为每个目标单独指定包含目录，而不是为所有目标包含所有目录：@{"calib_text": " `[15791] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15791>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:706
msgid "Similar to how we found each dependent package separately, we need to link each one to the build target. To link with dependent packages that are ament packages, instead of using ``target_link_libraries()``, ``ament_target_dependencies()`` is a more concise and more thorough way of handling build flags. It automatically handles both the include directories defined in ``_INCLUDE_DIRS`` and linking libraries defined in ``_LIBRARIES``."
msgstr "类似于我们单独找到每个依赖包的方式，我们需要将每个依赖包链接到构建目标上。对于 ament 包作为依赖包的链接，不使用 ``target_link_libraries()``，而是使用 ``ament_target_dependencies()`` 是处理构建标志更简洁和更彻底的方式。它自动处理 ``_INCLUDE_DIRS`` 中定义的包含目录和 ``_LIBRARIES`` 中定义的链接库。@{"calib_text": " `[15792] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15792>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:721
msgid "To link with packages that are not ament packages, such as system dependencies like ``Boost``, or a library being built in the same ``CMakeLists.txt``, use ``target_link_libraries()``:"
msgstr "要与非ament软件包（例如系统依赖项，如“Boost”或在同一个“CMakeLists.txt”中构建的库）进行链接，请使用“target_link_libraries()”：@{"calib_text": " `[15793] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15793>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:729
msgid "For installation, ``catkin`` defines variables like ``CATKIN_PACKAGE_BIN_DESTINATION``. With ``ament_cmake``, we just give a path relative to the installation root:"
msgstr "对于安装，``catkin`` 定义了变量，如 ``CATKIN_PACKAGE_BIN_DESTINATION``。使用 ``ament_cmake``，我们只需给出相对于安装根目录的路径：@{"calib_text": " `[15794] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15794>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:739
msgid "Optionally, we can install and export the included directories for downstream packages:"
msgstr "可选地，我们可以安装并导出包含的目录给下游软件包：@{"calib_text": " `[15795] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15795>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:747
msgid "Optionally, we can export dependencies for downstream packages:"
msgstr "可选地，我们可以为下游软件包导出依赖项：@{"calib_text": " `[15796] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15796>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:753
msgid "Putting it all together, the new ``CMakeLists.txt`` looks like this:"
msgstr "将所有内容放在一起，新的 ``CMakeLists.txt`` 如下所示：@{"calib_text": " `[15797] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15797>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:789
msgid "Building the ROS 2 code"
msgstr "构建 ROS 2 代码@{"calib_text": " `[15798] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15798>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:791
msgid "We source an environment setup file (in this case the one generated by following the ROS 2 installation tutorial, which builds in ``~/ros2_ws``, then we build our package using ``colcon build``:"
msgstr "我们先引用一个环境设置文件（在这个例子中，我们按照 ROS 2 安装教程生成了一个位于 ``~/ros2_ws`` 的文件），然后使用 ``colcon build`` 构建我们的软件包：@{"calib_text": " `[15799] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15799>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:802
msgid "Running the ROS 2 node"
msgstr "运行ROS 2节点@{"calib_text": " `[15800] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15800>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:804
msgid "Because we installed the ``talker`` executable into the correct directory, after sourcing the setup file, from our install tree, we can invoke it by running:"
msgstr "因为我们将``talker``可执行文件安装到了正确的目录中，所以在从我们的安装目录中的设置文件进行源码后，我们可以通过运行以下命令来调用它：@{"calib_text": " `[15801] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15801>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:2
msgid "Migrating Interfaces"
msgstr "迁移接口@{"calib_text": " `[15802] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15802>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:8
msgid "Messages, services, and actions are collectively called ``interfaces`` in ROS 2."
msgstr "在ROS 2中，消息、服务和动作统称为``接口（interfaces）``。@{"calib_text": " `[15803] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15803>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:11
msgid "Interface definitions"
msgstr "接口定义@{"calib_text": " `[15804] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15804>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:13
msgid "Message files must end in ``.msg`` and must be located in the subfolder ``msg``. Service files must end in ``.srv`` and must be located in the subfolder ``srv``. Actions files must end in ``.action`` and must be located in the subfolder ``action``."
msgstr "消息文件必须以``.msg``结尾，并且必须位于子文件夹``msg``中。服务文件必须以``.srv``结尾，并且必须位于子文件夹``srv``中。动作文件必须以``.action``结尾，并且必须位于子文件夹``action``中。@{"calib_text": " `[15805] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15805>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:17
msgid "These files might need to be updated to comply with the `ROS Interface definition <http://design.ros2.org/articles/legacy_interface_definition.html>`__. Some primitive types have been removed and the types ``duration`` and ``time`` which were builtin types in ROS 1 have been replaced with normal message definitions and must be used from the `builtin_interfaces <https://github.com/ros2/rcl_interfaces/tree/humble/builtin_interfaces>`__ package. Also some naming conventions are stricter than in ROS 1. There is additional information in the :doc:`conceptual article <../../Concepts/Basic/About-Interfaces>`."
msgstr "这些文件可能需要更新，以符合 `ROS接口定义 <http://design.ros2.org/articles/legacy_interface_definition.html>`__。某些原始类型已被移除，而在ROS 1中作为内置类型的 ``duration`` 和 ``time`` 类型已被替换为普通消息定义，必须从 `builtin_interfaces <https://github.com/ros2/rcl_interfaces/tree/humble/builtin_interfaces>`__ 包中使用。此外，一些命名约定比在ROS 1中更为严格。在 :doc:`概念文章 <../../Concepts/Basic/About-Interfaces>` 中有更多信息。@{"calib_text": " `[15806] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15806>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:23
msgid "Building interfaces"
msgstr "构建接口@{"calib_text": " `[15807] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15807>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:25
msgid "The way in which interfaces are built in ROS 2 differs substantially from ROS 1. Interfaces can only be built from packages containing a ``CMakeLists.txt``. If you are developing a pure Python package, then the interfaces should be placed in a different package containing only the interfaces (which is best practice anyway). See the :doc:`custom interfaces tutorial<../../Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces>` for more information."
msgstr "在ROS 2中，构建接口的方式与ROS 1有很大不同。接口只能从包含``CMakeLists.txt``的包中构建。如果您正在开发纯Python包，那么接口应该放在另一个仅包含接口的包中（这也是最佳实践）。有关更多信息，请参阅 :doc:`自定义接口教程<../../Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces>`。@{"calib_text": " `[15808] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15808>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:31
msgid "Migrating interface package to ROS 2"
msgstr "将接口包迁移到ROS 2@{"calib_text": " `[15809] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15809>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:33
msgid "In your ``package.xml``:"
msgstr "在你的 ``package.xml`` 中:@{"calib_text": " `[15810] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15810>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:35
msgid "Add ``<buildtool_depend>rosidl_default_generators</buildtool_depend>``."
msgstr "添加 ``<buildtool_depend>rosidl_default_generators</buildtool_depend>``。@{"calib_text": " `[15811] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15811>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:36
msgid "Add ``<exec_depend>rosidl_default_runtime</exec_depend>``."
msgstr "添加 ``<exec_depend>rosidl_default_runtime</exec_depend>``。@{"calib_text": " `[15812] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15812>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:37
msgid "Add ``<member_of_group>rosidl_interface_packages</member_of_group>``"
msgstr "添加 ``<member_of_group>rosidl_interface_packages</member_of_group>``@{"calib_text": " `[15813] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15813>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:38
msgid "For each dependent message package, add ``<depend>message_package</depend>``."
msgstr "对于每个依赖的消息包，添加 ``<depend>message_package</depend>``。@{"calib_text": " `[15814] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15814>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:40
msgid "In your ``CMakeLists.txt``:"
msgstr "在你的 ``CMakeLists.txt`` 中：@{"calib_text": " `[15815] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15815>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:42
msgid "Enable C++17"
msgstr "启用 C++17@{"calib_text": " `[15816] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15816>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:48
msgid "Add ``find_package(rosidl_default_generators REQUIRED)``"
msgstr "添加 ``find_package(rosidl_default_generators REQUIRED)``@{"calib_text": " `[15817] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15817>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:49
msgid "For each dependent message package, add ``find_package(message_package REQUIRED)`` and replace the CMake function call to ``generate_messages`` with ``rosidl_generate_interfaces``."
msgstr "对于每个依赖的消息包，添加 ``find_package(message_package REQUIRED)``，并将 CMake 函数调用 ``generate_messages`` 替换为 ``rosidl_generate_interfaces``。@{"calib_text": " `[15818] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15818>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst:51
msgid "This will replace ``add_message_files`` and ``add_service_files`` listing of all the message and service files, which can be removed."
msgstr "这将替代所有消息和服务文件的``add_message_files``和``add_service_files``列表，可以将它们删除。@{"calib_text": " `[15819] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15819>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:10
msgid "Migrating Launch Files"
msgstr "迁移启动文件@{"calib_text": " `[15820] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15820>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:16
msgid "While launch files in ROS 1 are always specified using `.xml <https://wiki.ros.org/roslaunch/XML>`__ files, ROS 2 supports Python scripts to enable more flexibility (see `launch package <https://github.com/ros2/launch/tree/humble/launch>`__) as well as XML and YAML files."
msgstr "虽然在ROS 1中，启动文件总是使用 `.xml <https://wiki.ros.org/roslaunch/XML>`__ 文件指定的，但ROS 2支持使用Python脚本以提供更大的灵活性（参见 `launch 包 <https://github.com/ros2/launch/tree/humble/launch>`__ ），同时还支持XML和YAML文件。@{"calib_text": " `[15821] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15821>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:18
msgid "This guide describes how to write ROS 2 XML launch files for an easy migration from ROS 1."
msgstr "本指南描述了如何编写ROS 2 XML启动文件，以便轻松从ROS 1迁移。@{"calib_text": " `[15822] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15822>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:21 ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:19
msgid "Background"
msgstr "背景@{"calib_text": " `[15823] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15823>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:23
msgid "A description of the ROS 2 launch system and its Python API can be found in :doc:`Launch System tutorial <../../../Tutorials/Intermediate/Launch/Launch-system>`."
msgstr "关于ROS 2启动系统及其Python API的详细信息，请参阅 :doc:`启动系统教程 <../../../Tutorials/Intermediate/Launch/Launch-system>`。@{"calib_text": " `[15824] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15824>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:27
msgid "Migrating tags"
msgstr "迁移标签@{"calib_text": " `[15825] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15825>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:30
msgid "launch"
msgstr "启动@{"calib_text": " `[15826] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15826>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:32
msgid "`Available in ROS 1 <https://wiki.ros.org/roslaunch/XML/launch>`__."
msgstr "`在ROS 1中可用 <https://wiki.ros.org/roslaunch/XML/launch>`__。@{"calib_text": " `[15827] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15827>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:33
msgid "``launch`` is the root element of any ROS 2 launch XML file."
msgstr "``launch`` 是任何ROS 2启动XML文件的根元素。@{"calib_text": " `[15828] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15828>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:36
msgid "node"
msgstr "节点@{"calib_text": " `[15829] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15829>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:38
msgid "`Available in ROS 1 <https://wiki.ros.org/roslaunch/XML/node>`__."
msgstr "`在ROS 1中可用 <https://wiki.ros.org/roslaunch/XML/node>`__。@{"calib_text": " `[15830] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15830>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:39
msgid "Launches a new node."
msgstr "启动一个新的节点。@{"calib_text": " `[15831] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15831>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:40 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:180 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:202 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:275
msgid "Differences from ROS 1:"
msgstr "与ROS 1的不同之处：@{"calib_text": " `[15832] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15832>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:42
msgid "``type`` attribute is now ``exec``."
msgstr "``type`` 属性现在为 ``exec``。@{"calib_text": " `[15833] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15833>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:43
msgid "``ns`` attribute is now ``namespace``."
msgstr "``ns`` 属性现在为 ``namespace``。@{"calib_text": " `[15834] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15834>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:44
msgid "The following attributes aren't available: ``machine``, ``respawn_delay``, ``clear_params``."
msgstr "以下属性不可用：``machine``，``respawn_delay``，``clear_params``。@{"calib_text": " `[15835] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15835>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:47 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:67 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:146 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:162 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:210 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:251 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:285 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:358 ../../source/How-To-Guides/Node-arguments.rst:40 ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:68
msgid "Example"
msgstr "示例@{"calib_text": " `[15836] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15836>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:57
msgid "param"
msgstr "param@{"calib_text": " `[15837] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15837>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:59
msgid "`Available in ROS 1 <https://wiki.ros.org/roslaunch/XML/param>`__."
msgstr "`在 ROS 1 中可用 <https://wiki.ros.org/roslaunch/XML/param>`__.@{"calib_text": " `[15838] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15838>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:60
msgid "Used for passing a parameter to a node."
msgstr "用于将参数传递给节点。@{"calib_text": " `[15839] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15839>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:61
msgid "There's no global parameter concept in ROS 2. For that reason, it can only be used nested in a ``node`` tag. Some attributes aren't supported in ROS 2: ``type``, ``textfile``, ``binfile``, ``executable``."
msgstr "在ROS 2中没有全局参数的概念。因此，它只能在 ``node`` 标签中嵌套使用。在ROS 2中不支持某些属性：``type``、``textfile``、``binfile``、``executable``。@{"calib_text": " `[15840] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15840>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:64
msgid "The ``command`` attribute is now ``value=\"$(command '...' )\"``."
msgstr "``command`` 属性现在应为 ``value=\"$(command '...' )\"``。@{"calib_text": " `[15841] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15841>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:78 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:410
msgid "Type inference rules"
msgstr "类型推断规则@{"calib_text": " `[15842] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15842>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:80
msgid "Here are some examples of how to write parameters:"
msgstr "以下是一些编写参数的示例:@{"calib_text": " `[15843] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15843>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:108
msgid "Parameter grouping"
msgstr "参数分组@{"calib_text": " `[15844] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15844>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:110
msgid "In ROS 2, ``param`` tags are allowed to be nested. For example:"
msgstr "在ROS 2中，允许嵌套``param``标签。例如：@{"calib_text": " `[15845] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15845>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:124
msgid "That will create two parameters:"
msgstr "这将创建两个参数：@{"calib_text": " `[15846] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15846>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:126
msgid "A ``group1.group2.my_param`` of value ``1``, hosted by node ``/an_absolute_ns/my_node``."
msgstr "一个值为``1``的``group1.group2.my_param``，由节点``/an_absolute_ns/my_node``托管。@{"calib_text": " `[15847] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15847>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:127
msgid "A ``group1.another_param`` of value ``2`` hosted by node ``/an_absolute_ns/my_node``."
msgstr "节点 ``/an_absolute_ns/my_node`` 托管的 ``group1.another_param`` 的值为 ``2``。@{"calib_text": " `[15848] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15848>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:129
msgid "It's also possible to use full parameter names:"
msgstr "也可以使用完整的参数名称：@{"calib_text": " `[15849] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15849>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:139
msgid "rosparam"
msgstr "rosparam@{"calib_text": " `[15850] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15850>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:141
msgid "`Available in ROS 1 <https://wiki.ros.org/roslaunch/XML/rosparam>`__."
msgstr "在 ROS 1 中可用 <https://wiki.ros.org/roslaunch/XML/rosparam>`__。@{"calib_text": " `[15851] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15851>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:142
msgid "Loads parameters from a yaml file."
msgstr "从yaml文件中加载参数。@{"calib_text": " `[15852] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15852>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:143
msgid "It has been replaced with a ``from`` attribute in ``param`` tags."
msgstr "已被``param``标签中的``from``属性替代。@{"calib_text": " `[15853] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15853>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:155
msgid "remap"
msgstr "remap@{"calib_text": " `[15854] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15854>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:157
msgid "`Available in ROS 1 <https://wiki.ros.org/roslaunch/XML/remap>`__."
msgstr "`在ROS 1中可用<https://wiki.ros.org/roslaunch/XML/remap>`__。@{"calib_text": " `[15855] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15855>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:158
msgid "Used to pass remapping rules to a node."
msgstr "用于将重新映射规则传递给节点。@{"calib_text": " `[15856] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15856>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:159
msgid "It can only be used within ``node`` tags."
msgstr "它只能在``node``标签内使用。@{"calib_text": " `[15857] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15857>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:176
msgid "include"
msgstr "包括@{"calib_text": " `[15858] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15858>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:178
msgid "`Available in ROS 1 <https://wiki.ros.org/roslaunch/XML/include>`__."
msgstr "`在ROS 1中可用 <https://wiki.ros.org/roslaunch/XML/include>`__。@{"calib_text": " `[15859] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15859>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:179
msgid "Allows including another launch file."
msgstr "允许包含另一个启动文件。@{"calib_text": " `[15860] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15860>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:182
msgid "Available in ROS 1, included content was scoped. In ROS 2, it's not. Nest includes in ``group`` tags to scope them."
msgstr "在ROS 1中可用，所包含的内容是有作用域的。在ROS 2中，它没有作用域。使用``group``标签来嵌套包含文件以进行作用域控制。@{"calib_text": " `[15861] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15861>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:185
msgid "``ns`` attribute is not supported. See example of ``push_ros_namespace`` tag for a workaround."
msgstr "不支持``ns``属性。参考``push_ros_namespace``标签的示例以获取解决方法。@{"calib_text": " `[15862] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15862>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:187
msgid "``arg`` tags nested in an ``include`` tag don't support conditionals (``if``, ``unless``) or the ``description`` attribute."
msgstr "在 ``include`` 标签中嵌套的 ``arg`` 标签不支持条件（``if``、``unless``）或 ``description`` 属性。@{"calib_text": " `[15863] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15863>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:188
msgid "There is no support for nested ``env`` tags. ``set_env`` and ``unset_env`` can be used instead."
msgstr "不支持嵌套``env``标签。可以使用``set_env``和``unset_env``代替。@{"calib_text": " `[15864] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15864>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:190
msgid "Both ``clear_params`` and ``pass_all_args`` attributes aren't supported."
msgstr "不支持``clear_params``和``pass_all_args``属性。@{"calib_text": " `[15865] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15865>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:193 ../../source/How-To-Guides/Using-callback-groups.rst:183
msgid "Examples"
msgstr "示例@{"calib_text": " `[15866] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15866>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:195
msgid "See `Replacing an include tag`_."
msgstr "请参阅`替换 include 标签`_。@{"calib_text": " `[15867] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15867>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:198
msgid "arg"
msgstr "arg@{"calib_text": " `[15868] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15868>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:200
msgid "`Available in ROS 1 <https://wiki.ros.org/roslaunch/XML/arg>`__."
msgstr "`在ROS 1中可用 <https://wiki.ros.org/roslaunch/XML/arg>`__。@{"calib_text": " `[15869] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15869>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:201
msgid "``arg`` is used for declaring a launch argument, or to pass an argument when using ``include`` tags."
msgstr "``arg`` 用于声明一个启动参数，或者在使用 ``include`` 标签时传递参数。@{"calib_text": " `[15870] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15870>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:204
msgid "``value`` attribute is not allowed. Use ``let`` tag for this."
msgstr "不允许使用 ``value`` 属性。请使用 ``let`` 标签代替。@{"calib_text": " `[15871] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15871>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:206
msgid "``doc`` is now ``description``."
msgstr "现在，``doc`` 变为 ``description``。@{"calib_text": " `[15872] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15872>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:207
msgid "When nested within an ``include`` tag, ``if``, ``unless``, and ``description`` attributes aren't allowed."
msgstr "在 ``include`` 标签内嵌套时，不允许使用 ``if``、``unless`` 和 ``description`` 属性。@{"calib_text": " `[15873] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15873>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:225
msgid "Passing an argument to the launch file"
msgstr "向启动文件传递参数@{"calib_text": " `[15874] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15874>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:227
msgid "In the XML launch file above, the ``topic_name`` defaults to the name ``chatter``, but can be configured on the command-line. Assuming the above launch configuration is in a file named ``mylaunch.xml``, a different topic name can be used by launching it with the following:"
msgstr "在上述 XML 启动文件中，``topic_name`` 默认为 ``chatter``，但可以通过命令行进行配置。假设上述启动配置保存在名为 ``mylaunch.xml`` 的文件中，可以通过以下命令启动并使用不同的主题名称：@{"calib_text": " `[15875] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15875>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:234
msgid "There is some additional information about passing command-line arguments in :doc:`Using Substitutions <../../../Tutorials/Intermediate/Launch/Using-Substitutions>`."
msgstr "有关如何传递命令行参数的其他信息，请参阅 :doc:`使用替换 <../../../Tutorials/Intermediate/Launch/Using-Substitutions>`。@{"calib_text": " `[15876] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15876>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:237
msgid "env"
msgstr "env@{"calib_text": " `[15877] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15877>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:239
msgid "`Available in ROS 1 <https://wiki.ros.org/roslaunch/XML/env>`__."
msgstr "`在 ROS 1 中可用 <https://wiki.ros.org/roslaunch/XML/env>`__。@{"calib_text": " `[15878] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15878>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:240
msgid "Sets an environment variable."
msgstr "设置环境变量。@{"calib_text": " `[15879] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15879>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:241
msgid "It has been replaced with ``env``, ``set_env`` and ``unset_env``:"
msgstr "已被替换为 ``env``、``set_env`` 和 ``unset_env``：@{"calib_text": " `[15880] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15880>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:243
msgid "``env`` can only be used nested in a ``node`` or ``executable`` tag. ``if`` and ``unless`` tags aren't supported."
msgstr "``env`` 只能嵌套在 ``node`` 或 ``executable`` 标签中。不支持 ``if`` 和 ``unless`` 标签。@{"calib_text": " `[15881] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15881>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:245
msgid "``set_env`` can be nested within the root tag ``launch`` or in ``group`` tags. It accepts the same attributes as ``env``, and also ``if`` and ``unless`` tags."
msgstr "``set_env`` 可以嵌套在根标签 ``launch`` 或 ``group`` 标签中。它接受与 ``env`` 相同的属性，还支持 ``if`` 和 ``unless`` 标签。@{"calib_text": " `[15882] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15882>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:247
msgid "``unset_env`` unsets an environment variable. It accepts a ``name`` attribute and conditionals."
msgstr "``unset_env`` 取消设置环境变量。它接受一个 ``name`` 属性和条件语句。@{"calib_text": " `[15883] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15883>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:270
msgid "group"
msgstr "组@{"calib_text": " `[15884] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15884>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:272
msgid "`Available in ROS 1 <https://wiki.ros.org/roslaunch/XML/group>`__."
msgstr "`在ROS 1中可用 <https://wiki.ros.org/roslaunch/XML/group>`__。@{"calib_text": " `[15885] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15885>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:273
msgid "Allows limiting the scope of launch configurations. Usually used together with ``let``, ``include`` and ``push_ros_namespace`` tags."
msgstr "允许限制启动配置的范围。通常与``let``、``include``和``push_ros_namespace``标签一起使用。@{"calib_text": " `[15886] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15886>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:277
msgid "There is no ``ns`` attribute. See the new ``push_ros_namespace`` tag as a workaround."
msgstr "没有``ns``属性。可以使用新的``push_ros_namespace``标签作为解决方法。@{"calib_text": " `[15887] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15887>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:279
msgid "``clear_params`` attribute isn't available."
msgstr "``clear_params`` 属性不可用。@{"calib_text": " `[15888] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15888>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:280
msgid "It doesn't accept ``remap`` nor ``param`` tags as children."
msgstr "它不接受 ``remap`` 和 ``param`` 标签作为子节点。@{"calib_text": " `[15889] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15889>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:287
msgid "``launch-prefix`` configuration affects both ``executable`` and ``node`` tags' actions. This example will use ``time`` as a prefix if ``use_time_prefix_in_talker`` argument is ``1``, only for the talker."
msgstr "``launch-prefix`` 配置会影响 ``executable`` 和 ``node`` 标签的操作。如果 ``use_time_prefix_in_talker`` 参数为 ``1``，此示例将使用 ``time`` 作为前缀，仅适用于 talker。@{"calib_text": " `[15890] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15890>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:302
msgid "machine"
msgstr "machine@{"calib_text": " `[15891] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15891>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:304 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:309
msgid "It is not supported at the moment."
msgstr "目前不支持。@{"calib_text": " `[15892] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15892>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:307
msgid "test"
msgstr "测试@{"calib_text": " `[15893] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15893>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:312
msgid "New tags in ROS 2"
msgstr "ROS 2中的新标签@{"calib_text": " `[15894] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15894>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:315
msgid "set_env and unset_env"
msgstr "set_env和unset_env@{"calib_text": " `[15895] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15895>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:317
msgid "See `env`_ tag decription."
msgstr "查看 `env`_ 标签说明。@{"calib_text": " `[15896] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15896>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:320
msgid "push_ros_namespace"
msgstr "push_ros_namespace@{"calib_text": " `[15897] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15897>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:322
msgid "``include`` and ``group`` tags don't accept an ``ns`` attribute. This action can be used as a workaround:"
msgstr "``include`` 和 ``group`` 标签不接受 ``ns`` 属性。可以使用以下操作作为解决方法：@{"calib_text": " `[15898] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15898>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:344
msgid "let"
msgstr "let@{"calib_text": " `[15899] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15899>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:346
msgid "It's a replacement of ``arg`` tag with a value attribute."
msgstr "使用`value`属性替代了``arg``标签。@{"calib_text": " `[15900] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15900>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:353
msgid "executable"
msgstr "可执行文件@{"calib_text": " `[15901] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15901>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:355
msgid "It allows running any executable."
msgstr "允许运行任何可执行文件。@{"calib_text": " `[15902] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15902>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:367
msgid "Replacing an include tag"
msgstr "替换了`include`标签@{"calib_text": " `[15903] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15903>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:369
msgid "In order to include a launch file under a **namespace** as in ROS 1 then the ``include`` tags must be nested in a ``group`` tag."
msgstr "为了在ROS 1中像**命名空间**一样包含启动文件，则必须将``include``标签嵌套在``group``标签中。@{"calib_text": " `[15904] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15904>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:377
msgid "Then, instead of using the ``ns`` attribute, add the ``push_ros_namespace`` action tag to specify the namespace:"
msgstr "然后，不再使用``ns``属性，而是添加``push_ros_namespace``操作标签来指定命名空间：@{"calib_text": " `[15905] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15905>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:386
msgid "Nesting ``include`` tags under a ``group`` tag is only required when specifying a namespace"
msgstr "只有在指定命名空间时才需要将``include``标签嵌套在``group``标签下。@{"calib_text": " `[15906] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15906>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:389
msgid "Substitutions"
msgstr "替换@{"calib_text": " `[15907] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15907>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:391
msgid "Documentation about ROS 1's substitutions can be found in `roslaunch XML wiki <https://wiki.ros.org/roslaunch/XML>`__. Substitutions syntax hasn't changed, i.e. it still follows the ``$(substitution-name arg1 arg2 ...)`` pattern. There are, however, some changes w.r.t. ROS 1:"
msgstr "关于ROS 1的替代方案的文档可以在 `roslaunch XML wiki <https://wiki.ros.org/roslaunch/XML>`__ 中找到。替代语法没有改变，仍然遵循 ``$(substitution-name arg1 arg2 ...)`` 的模式。然而，与ROS 1相比，有一些变化：@{"calib_text": " `[15908] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15908>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:395
msgid "``env`` and ``optenv`` tags have been replaced by the ``env`` tag. ``$(env <NAME>)`` will fail if the environment variable doesn't exist. ``$(env <NAME> '')`` does the same as ROS 1's ``$(optenv <NAME>)``. ``$(env <NAME> <DEFAULT>)`` does the same as ROS 1's ``$(env <NAME> <DEFAULT>)`` or ``$(optenv <NAME> <DEFAULT>)``."
msgstr "``env`` 和 ``optenv`` 标签已被 ``env`` 标签替代。如果环境变量不存在，``$(env <NAME>)`` 将失败。``$(env <NAME> '')`` 与ROS 1的 ``$(optenv <NAME>)`` 功能相同。``$(env <NAME> <DEFAULT>)`` 与ROS 1的 ``$(env <NAME> <DEFAULT>)`` 或 ``$(optenv <NAME> <DEFAULT>)`` 功能相同。@{"calib_text": " `[15909] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15909>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:399
msgid "``find`` has been replaced with ``find-pkg-share`` (substituting the share directory of an installed package). Alternatively ``find-pkg-prefix`` will return the root of an installed package."
msgstr "``find`` 被 ``find-pkg-share`` 替代（用于替代已安装包的共享目录）。或者，``find-pkg-prefix`` 将返回已安装包的根目录。@{"calib_text": " `[15910] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15910>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:401
msgid "There is a new ``exec-in-pkg`` substitution. e.g.: ``$(exec-in-pkg <package_name> <exec_name>)``."
msgstr "新增了一个 ``exec-in-pkg`` 替代。例如：``$(exec-in-pkg <package_name> <exec_name>)``。@{"calib_text": " `[15911] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15911>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:403
msgid "There is a new ``find-exec`` substitution."
msgstr "有一个新的 ``find-exec`` 替代方式。@{"calib_text": " `[15912] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15912>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:404
msgid "``arg`` has been replaced with ``var``. It looks at configurations defined either with ``arg`` or ``let`` tag."
msgstr "``arg`` 已被替换为 ``var``。它查看使用 ``arg`` 或 ``let`` 标签定义的配置。@{"calib_text": " `[15913] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15913>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:406
msgid "``eval`` and ``dirname`` substitutions require escape characters for string values, e.g. ``if=\"$(eval '\\'$(var variable)\\' == \\'val1\\'')\"``."
msgstr "``eval`` 和 ``dirname`` 替换需要为字符串值使用转义字符，例如 ``if=\"$(eval '\\'$(var variable)\\' == \\'val1\\'')\"``。@{"calib_text": " `[15914] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15914>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:407
msgid "``anon`` substitution is not supported."
msgstr "不支持 ``anon`` 替代方式。@{"calib_text": " `[15915] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15915>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:412
msgid "The rules that were shown in ``Type inference rules`` subsection of ``param`` tag applies to any attribute. For example:"
msgstr "在``param``标签的``Type inference rules``子节中显示的规则适用于任何属性。例如：@{"calib_text": " `[15916] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15916>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst:430
msgid "Some attributes accept more than a single type, for example ``value`` attribute of ``param`` tag. It's usual that parameters that are of type ``int`` (or ``float``) also accept an ``str``, that will be later substituted and tried to convert to an ``int`` (or ``float``) by the action."
msgstr "有些属性接受多个类型，例如``param``标签的``value``属性。通常情况下，类型为``int``（或``float``）的参数也可以接受``str``，后者将在后续进行替换，并尝试转换为``int``（或``float）``。@{"calib_text": " `[15917] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15917>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:2
msgid "Migrating Packages"
msgstr "迁移包@{"calib_text": " `[15918] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15918>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:8
msgid "There are two different kinds of package migrations:"
msgstr "有两种不同类型的包迁移：@{"calib_text": " `[15919] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15919>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:10
msgid "Migrating the source code of an existing package from ROS 1 to ROS 2 with the intent that a significant part of the source code will stay the same or at least similar. An example for this is `pluginlib <https://github.com/ros/pluginlib>`_ where the source code is maintained in different branches within the same repository and common patches can be ported between those branches when necessary."
msgstr "将现有包的源代码从ROS 1迁移到ROS 2，意味着源代码的重要部分将保持相同或至少相似。一个示例是 `pluginlib <https://github.com/ros/pluginlib>`_，其中源代码在同一个存储库的不同分支中维护，通用补丁可以在必要时在这些分支之间进行移植。@{"calib_text": " `[15920] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15920>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:12
msgid "Implementing the same or similar functionality of a ROS 1 package for ROS 2 but with the assumption that the source code will be significantly different. An example for this is `roscpp <https://github.com/ros/ros_comm/tree/melodic-devel/clients/roscpp>`_ in ROS 1 and `rclcpp <https://github.com/ros2/rclcpp/tree/rolling/rclcpp>`_ in ROS 2 which are separate repositories and don't share any code."
msgstr "在ROS 2中实现与ROS 1包相同或类似的功能，但假设源代码将会有明显的不同。一个示例是ROS 1中的 `roscpp <https://github.com/ros/ros_comm/tree/melodic-devel/clients/roscpp>`_ 和ROS 2中的 `rclcpp <https://github.com/ros2/rclcpp/tree/rolling/rclcpp>`_，它们是分开的存储库，没有共享任何代码。@{"calib_text": " `[15921] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15921>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:18
msgid "Before being able to migrate a ROS 1 package to ROS 2 all of its dependencies must be available in ROS 2."
msgstr "在将ROS 1软件包迁移到ROS 2之前，必须在ROS 2中提供所有依赖项。@{"calib_text": " `[15922] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15922>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:21
msgid "Package format version"
msgstr "包格式版本@{"calib_text": " `[15923] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15923>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:23
msgid "ROS 2 doesn't support format 1 of the package specification but only newer format versions (2 and higher). Therefore the ``package.xml`` file must be updated to at least format 2 if it uses format 1. Since ROS 1 supports all formats it is safe to perform that conversion in the ROS 1 package."
msgstr "ROS 2不支持软件包规范的格式1，而仅支持更新的格式版本（2及更高）。因此，如果软件包使用格式1，则必须将``package.xml``文件更新至至少格式2。由于ROS 1支持所有格式，因此在ROS 1软件包中执行此转换是安全的。@{"calib_text": " `[15924] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15924>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:28
msgid "Migrating from package format 1 to 2+"
msgstr "从包格式1迁移到2+@{"calib_text": " `[15925] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15925>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:30
msgid "The differences between format 1 and format 2 only affect the package.xml with its dependencies. `REP-0140 <https://www.ros.org/reps/rep-0140.html>`__ defines these differences and provides their rationale."
msgstr "格式1和格式2之间的区别仅影响 package.xml 及其依赖关系。`REP-0140 <https://www.ros.org/reps/rep-0140.html>`__ 定义了这些差异并提供了它们的基本原理。@{"calib_text": " `[15926] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15926>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:33
msgid "See :doc:`the rosdep documentation <../../Tutorials/Intermediate/Rosdep>` for more information about the various tags."
msgstr "有关各种标签的更多信息，请参阅 :doc:`rosdep 文档 <../../Tutorials/Intermediate/Rosdep>`。@{"calib_text": " `[15927] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15927>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:36
msgid "**<package>**"
msgstr "**<package>**@{"calib_text": " `[15928] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15928>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:38
msgid "The <package> tag determines which format to use, change it like this:"
msgstr "``<package>`` 标签确定要使用的格式，可按以下方式更改它：@{"calib_text": " `[15929] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15929>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:45
msgid "**<depend>**"
msgstr "**<depend>**@{"calib_text": " `[15930] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15930>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:47
msgid "This is a new tag, intended to reduce unnecessary repetition. If your format 1 package contained:"
msgstr "这是一个新标签，旨在减少不必要的重复。如果您的格式1包含以下内容：@{"calib_text": " `[15931] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15931>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:55
msgid "It should be replaced with:"
msgstr "应该替换为：@{"calib_text": " `[15932] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15932>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:61
msgid "In format 2, that is equivalent to:"
msgstr "在格式2中，这相当于：@{"calib_text": " `[15933] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15933>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:71
msgid "**<run_depend>**"
msgstr "**<run_depend>**@{"calib_text": " `[15934] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15934>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:73
msgid "This tag is no longer allowed. Wherever found, it must be replaced:"
msgstr "不再允许使用此标签。无论在何处找到，都必须替换为：@{"calib_text": " `[15935] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15935>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:80
msgid "In format 2, that is equivalent to these two new tags:"
msgstr "在格式2中，这相当于这两个新标签：@{"calib_text": " `[15936] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15936>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:87
msgid "If the dependency is only used at run-time, only the ``<exec_depend>`` is needed. If it is only exported to satisfy the build dependencies of other packages, use ``<build_export_depend>``. If both are needed, this may be a better choice:"
msgstr "如果依赖项仅在运行时使用，只需使用 ``<exec_depend>``。如果它仅用于导出以满足其他软件包的构建依赖关系，请使用 ``<build_export_depend>``。如果两者都需要，这可能是更好的选择：@{"calib_text": " `[15937] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15937>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:97
msgid "**<test_depend>**"
msgstr "**<test_depend>**@{"calib_text": " `[15938] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15938>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:99
msgid "In format 2, this tag can satisfy build dependencies, not just those needed for executing your tests. Unlike format 1, ``<test_depend>`` may now refer to a package also declared as some other type of dependency."
msgstr "在格式2中，此标签可以满足构建依赖关系，不仅仅是执行测试所需的依赖关系。与格式1不同，``<test_depend>`` 现在可以指代一个同时声明为其他类型依赖项的包。@{"calib_text": " `[15939] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15939>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:102
msgid "Some test-only dependencies that formerly required a ``<build_depend>``, should now be expressed using ``<test_depend>``. For example:"
msgstr "以前需要 ``<build_depend>`` 的某些仅测试依赖项，现在应使用 ``<test_depend>`` 表示。例如：@{"calib_text": " `[15940] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15940>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:109
msgid "becomes:"
msgstr "变成了：@{"calib_text": " `[15941] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15941>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:115
msgid "In your CMakeLists.txt make sure your test dependencies are only referenced within the conditional test block:"
msgstr "在您的 CMakeLists.txt 中，请确保您的测试依赖项只在条件测试块内引用：@{"calib_text": " `[15942] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15942>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:125
msgid "**<doc_depend>**"
msgstr "**<doc_depend>**@{"calib_text": " `[15943] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15943>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:127
msgid "This tag defines dependencies needed for building your documentation:"
msgstr "此标签定义了构建文档所需的依赖项：@{"calib_text": " `[15944] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15944>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:134
msgid "This does not create binary package dependencies, unless they were also declared using some other dependency tag."
msgstr "这不会创建二进制包依赖关系，除非它们还使用其他依赖标签声明。@{"calib_text": " `[15945] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15945>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:137
msgid "Dependency names"
msgstr "依赖项名称@{"calib_text": " `[15946] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15946>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:139
msgid "Dependency names that come from :doc:`rosdep <../../Tutorials/Intermediate/Rosdep>` should not need to change, as those are shared across ROS 1 and ROS 2."
msgstr "来自 :doc:`rosdep <../../Tutorials/Intermediate/Rosdep>` 的依赖项名称不应该需要更改，因为它们在ROS 1和ROS 2之间是共享的。@{"calib_text": " `[15947] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15947>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:141
msgid "Some packages released into ROS might have different names in ROS 2 so the dependencies might need to be updated accordingly."
msgstr "在ROS 2中，一些发布到ROS的软件包可能在ROS 2中具有不同的名称，因此依赖关系可能需要相应更新。@{"calib_text": " `[15948] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15948>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:144
msgid "Metapackages"
msgstr "元软件包@{"calib_text": " `[15949] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15949>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:146
msgid "ROS 2 doesn't have a special package type for metapackages. Metapackages can still exist as regular packages that only contain runtime dependencies. When migrating metapackages from ROS 1, simply remove the ``<metapackage />`` tag in your package manifest. See :doc:`Using variants <../Using-Variants>` for more information on metapackages/variants."
msgstr "ROS 2没有用于元包的特殊包类型。元包仍然可以存在为仅包含运行时依赖项的常规包。从ROS 1迁移元包时，只需在包清单中删除 ``<metapackage />`` 标签。有关元包/变体的更多信息，请参阅 :doc:`使用变体 <../Using-Variants>`。@{"calib_text": " `[15950] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15950>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:152
msgid "Licensing"
msgstr "许可@{"calib_text": " `[15951] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15951>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:154
msgid "In ROS 1 our recommended license was the `3-Clause BSD License <https://opensource.org/licenses/BSD-3-Clause>`__. In ROS 2 our recommended license is the `Apache 2.0 License <https://www.apache.org/licenses/LICENSE-2.0>`__."
msgstr "在ROS 1中，我们推荐的许可证是 `3-Clause BSD 许可证 <https://opensource.org/licenses/BSD-3-Clause>`__。在ROS 2中，我们推荐的许可证是 `Apache 2.0 许可证 <https://www.apache.org/licenses/LICENSE-2.0>`__。@{"calib_text": " `[15952] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15952>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:157
msgid "For any new project we recommend using the Apache 2.0 License, whether ROS 1 or ROS 2."
msgstr "对于任何新项目，我们建议无论是ROS 1还是ROS 2都使用Apache 2.0 License。@{"calib_text": " `[15953] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15953>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:159
msgid "However, when migrating code from ROS 1 to ROS 2 we cannot simply change the license. The existing license must be preserved for any preexisting contributions."
msgstr "然而，当将代码从ROS 1迁移到ROS 2时，我们不能简单地更改许可证。必须保留现有许可证以供任何已有贡献使用。@{"calib_text": " `[15954] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15954>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:162
msgid "To that end if a package is being migrated we recommend keeping the existing license and continuing to contribute to that package under the existing OSI license, which we expect to be the BSD license for core elements."
msgstr "为此，如果正在迁移某个软件包，我们建议保留现有许可证，并继续在现有的OSI许可证下为该软件包做出贡献，我们预计核心元素的许可证将是BSD许可证。@{"calib_text": " `[15955] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15955>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:164
msgid "This will keep things clear and easy to understand."
msgstr "这将使事情清晰易懂。@{"calib_text": " `[15956] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15956>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:167
msgid "Changing the License"
msgstr "更改许可证@{"calib_text": " `[15957] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15957>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Packages.rst:169
msgid "It is possible to change the license, however you will need to contact all the contributors and get permission. For most packages this is likely to be a significant effort and not worth considering. If the package has a small set of contributors then this may be feasible."
msgstr "更改许可证是可能的，但您需要联系所有贡献者并获得许可。对于大多数软件包来说，这可能是一个很大的工作量，并且不值得考虑。如果软件包只有一小部分贡献者，那么这可能是可行的。@{"calib_text": " `[15958] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15958>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:8
msgid "Migrating Parameters"
msgstr "迁移参数@{"calib_text": " `[15959] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15959>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:14
msgid "In ROS 1, parameters are associated with a central server that allowed retrieving parameters at runtime through the use of the network APIs. In ROS 2, parameters are associated per node and are configurable at runtime with ROS services."
msgstr "在ROS 1中，参数与一个中央服务器相关联，允许通过网络API在运行时检索参数。在ROS 2中，参数与每个节点相关联，并且可以在运行时通过ROS服务进行配置。@{"calib_text": " `[15960] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15960>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:17
msgid "See `ROS 2 Parameter design document <https://design.ros2.org/articles/ros_parameters.html>`_ for more details about the system model."
msgstr "请参阅 `ROS 2参数设计文档 <https://design.ros2.org/articles/ros_parameters.html>`_ 了解有关系统模型的更多详细信息。@{"calib_text": " `[15961] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15961>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:19
msgid "See :doc:`ROS 2 CLI usage <../../Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` for a better understanding of how the CLI tools work and its differences with ROS 1 tooling."
msgstr "请参阅 :doc:`ROS 2 CLI用法 <../../Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` 以更好地理解CLI工具的工作原理及其与ROS 1工具的区别。@{"calib_text": " `[15962] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15962>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:22
msgid "Migrating YAML Parameter Files"
msgstr "迁移YAML参数文件@{"calib_text": " `[15963] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15963>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:24
msgid "This guide describes how to adapt ROS 1 parameters files for ROS 2."
msgstr "本指南介绍如何调整ROS 1参数文件以适应ROS 2。@{"calib_text": " `[15964] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15964>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:27
msgid "YAML file example"
msgstr "YAML文件示例@{"calib_text": " `[15965] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15965>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:29
msgid "YAML is used to write parameters files in both ROS 1 and ROS 2. The main difference in ROS 2 is that node names must be used to address parameters. In addition to the fully qualified node name, we use the key \"ros__parameters\" to signal the start of parameters for the node."
msgstr "在ROS 1和ROS 2中都使用YAML编写参数文件。在ROS 2中的主要区别是必须使用节点名称来引用参数。除了完全限定的节点名称外，我们还使用键“ros__parameters”来表示节点参数的起始。@{"calib_text": " `[15966] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15966>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:34
msgid "For example, here is a parameters file in ROS 1:"
msgstr "例如，这是一个在ROS 1中的参数文件示例：@{"calib_text": " `[15967] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15967>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:43
msgid "Let's assume that the first two parameters are for a node named ``/lidar_ns/lidar_node_name``, the next parameter is for a node named ``/imu``, and the last parameter we want to set on both nodes."
msgstr "假设前两个参数是给名为 ``/lidar_ns/lidar_node_name`` 的节点使用的，下一个参数是给名为 ``/imu`` 的节点使用的，最后一个参数我们想要在这两个节点上设置。@{"calib_text": " `[15968] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15968>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:45
msgid "We would construct our ROS 2 parameters file as follows:"
msgstr "我们将按照以下方式构建我们的ROS 2参数文件：@{"calib_text": " `[15969] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15969>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:61
msgid "Note the use of wildcards (``/**``) to indicate that the parameter ``debug`` should be set on any node in any namespace."
msgstr "注意使用通配符（``/**``）来表示参数 ``debug`` 应该在任何命名空间中的任何节点上设置。@{"calib_text": " `[15970] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15970>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:64
msgid "Feature parity"
msgstr "功能对等@{"calib_text": " `[15971] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15971>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:66
msgid "Some features of ROS 1 parameters files do not exist in ROS 2:"
msgstr "ROS 1参数文件的一些功能在ROS 2中不存在:@{"calib_text": " `[15972] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15972>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:68
msgid "Mixed types in a list is not supported yet (`related issue <https://github.com/ros2/rcl/issues/463>`_)"
msgstr "列表中的混合类型尚不支持 (`相关问题 <https://github.com/ros2/rcl/issues/463>`_)@{"calib_text": " `[15973] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15973>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst:69
msgid "``deg`` and ``rad`` substitutions are not supported"
msgstr "不支持``deg``和``rad``的替换@{"calib_text": " `[15974] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15974>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:7
msgid "Migrating Python Packages"
msgstr "迁移Python包@{"calib_text": " `[15975] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15975>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:22
msgid "For pure Python packages, ROS 2 uses the standard ``setup.py`` installation mechanism familiar to Python developers."
msgstr "对于纯Python包，ROS 2使用标准的 ``setup.py`` 安装机制，这对Python开发人员来说是熟悉的。@{"calib_text": " `[15976] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15976>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:25
msgid "Update the files to use *setup.py*"
msgstr "更新文件以使用 *setup.py*@{"calib_text": " `[15977] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15977>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:27
msgid "If the ROS 1 package uses CMake only to invoke the ``setup.py`` file and does not contain anything beside Python code (e.g. no messages, services, etc.) it should be converted into a pure Python package in ROS 2:"
msgstr "如果ROS 1包仅使用CMake来调用 ``setup.py`` 文件，且除了Python代码外没有其他内容（例如没有消息、服务等），则应将其转换为ROS 2中的纯Python包：@{"calib_text": " `[15978] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15978>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:30
msgid "Update or add the build type in the ``package.xml`` file:"
msgstr "更新或在``package.xml``文件中添加构建类型：@{"calib_text": " `[15979] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15979>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:39
msgid "Remove the ``CMakeLists.txt`` file"
msgstr "移除 `CMakeLists.txt` 文件@{"calib_text": " `[15980] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15980>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:42
msgid "Update the ``setup.py`` file to be a standard Python setup script"
msgstr "将 `setup.py` 文件更新为标准的 Python 设置脚本@{"calib_text": " `[15981] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15981>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:44
msgid "ROS 2 supports Python 3 only. While each package can choose to also support Python 2 it must invoke executables with Python 3 if it uses any API provided by other ROS 2 packages."
msgstr "ROS 2 仅支持 Python 3。虽然每个软件包可以选择支持 Python 2，但如果它使用其他 ROS 2 软件包提供的任何 API，则必须使用 Python 3 调用可执行文件。@{"calib_text": " `[15982] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15982>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:51
msgid "Node Initialization"
msgstr "节点初始化@{"calib_text": " `[15983] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15983>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:53 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:73 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:100 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:119 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:138 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:153
msgid "In ROS 1:"
msgstr "在ROS 1中：@{"calib_text": " `[15984] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15984>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:61 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:85 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:108 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:127 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:144 ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:161
msgid "In ROS 2:"
msgstr "在ROS 2中：@{"calib_text": " `[15985] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15985>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:71
msgid "ROS Parameters"
msgstr "ROS参数@{"calib_text": " `[15986] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15986>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:98
msgid "Creating a Publisher"
msgstr "创建发布者@{"calib_text": " `[15987] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15987>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:117
msgid "Creating a Subscriber"
msgstr "创建订阅者@{"calib_text": " `[15988] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15988>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:136
msgid "Creating a Service"
msgstr "创建服务@{"calib_text": " `[15989] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15989>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:151
msgid "Creating a Service Client"
msgstr "创建服务客户端@{"calib_text": " `[15990] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15990>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:2
msgid "Migrating Scripts"
msgstr "迁移脚本@{"calib_text": " `[15991] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15991>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:5
msgid "ROS CLI"
msgstr "ROS CLI@{"calib_text": " `[15992] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15992>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:7
msgid "In ROS 1 there were individual commands for performing various actions, like ``rosrun``, ``rosparam``, etc."
msgstr "在ROS 1中，有各种用于执行不同操作的单独命令，例如 ``rosrun``、``rosparam`` 等。@{"calib_text": " `[15993] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15993>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:9
msgid "In ROS 2, there is a single top-level commands called ``ros2``, and all of the actions are sub-commands of that, like ``ros2 run``, ``ros2 param``, etc."
msgstr "在ROS 2中，存在一个称为 ``ros2`` 的顶级命令，所有操作都是该命令的子命令，例如 ``ros2 run``、``ros2 param`` 等。@{"calib_text": " `[15994] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15994>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:12
msgid "ROS CLI arguments"
msgstr "ROS CLI参数@{"calib_text": " `[15995] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15995>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:14
msgid "In ROS 1, arguments to nodes were provided directly on the command-line."
msgstr "在ROS 1中，节点的参数是直接在命令行上提供的。@{"calib_text": " `[15996] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15996>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:16
msgid "ROS 2 arguments should be scoped with ``--ros-args`` and a trailing ``--`` (the trailing double dash may be elided if no arguments follow it)."
msgstr "ROS 2参数应使用 ``--ros-args`` 和尾随的 ``--`` 进行作用范围限定（如果后面没有参数，尾随的双破折号可以省略）。@{"calib_text": " `[15997] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15997>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:18
msgid "Remapping names is similar to ROS 1, taking on the form ``from:=to``, except that it must be preceded by a ``--remap`` (or ``-r``) flag. For example:"
msgstr "重新映射名称与ROS 1类似，采用 ``from:=to`` 的形式，但必须在之前加上 ``--remap``（或 ``-r``）标志。例如：@{"calib_text": " `[15998] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15998>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:25
msgid "We use a similar syntax for parameters, using the ``--param`` (or ``-p``) flag:"
msgstr "我们对参数使用类似的语法，使用 ``--param``（或 ``-p``）标志：@{"calib_text": " `[15999] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=15999>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:31
msgid "Note, this is different than using a leading underscore in ROS 1."
msgstr "注意，这与在ROS 1中使用前导下划线是不同的。@{"calib_text": " `[16000] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16000>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:33
msgid "To change a node name use ``__node`` (the ROS 1 equivalent is ``__name``):"
msgstr "要更改节点名称，请使用``__node``（ROS 1的等效项为``__name``）：@{"calib_text": " `[16001] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16001>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:39
msgid "Note the use of the ``-r`` flag. The same remap flag is needed for changing the namespace ``__ns``:"
msgstr "请注意使用``-r``标志。更改命名空间``__ns``也需要相同的重映射标志：@{"calib_text": " `[16002] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16002>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:46
msgid "There is no equivalent in ROS 2 for the following ROS 1 keys:"
msgstr "在ROS 2中没有以下ROS 1键的等效项：@{"calib_text": " `[16003] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16003>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:48
msgid "``__log`` (but ``--log-config-file`` can be used to provide a logger configuration file)"
msgstr "``__log``（但可以使用``--log-config-file``来提供日志记录器配置文件）@{"calib_text": " `[16004] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16004>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:49
msgid "``__ip``"
msgstr "``__ip``@{"calib_text": " `[16005] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16005>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:50
msgid "``__hostname``"
msgstr "``__hostname``@{"calib_text": " `[16006] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16006>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:51
msgid "``__master``"
msgstr "``__master``@{"calib_text": " `[16007] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16007>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:53
msgid "For more information, see the `design document <https://design.ros2.org/articles/ros_command_line_arguments.html>`_."
msgstr "了解更多信息，请参阅 `设计文档 <https://design.ros2.org/articles/ros_command_line_arguments.html>`_。@{"calib_text": " `[16008] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16008>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:56
msgid "Quick reference"
msgstr "快速参考@{"calib_text": " `[16009] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16009>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:59
msgid "Feature"
msgstr "特性@{"calib_text": " `[16010] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16010>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:59
msgid "ROS 1"
msgstr "ROS 1@{"calib_text": " `[16011] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16011>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:59
msgid "ROS 2"
msgstr "ROS 2@{"calib_text": " `[16012] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16012>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:61
msgid "remapping"
msgstr "重新映射@{"calib_text": " `[16013] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16013>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:61
msgid "foo:=bar"
msgstr "foo := bar@{"calib_text": " `[16014] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16014>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:61
msgid "-r foo:=bar"
msgstr "-r foo := bar@{"calib_text": " `[16015] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16015>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:63
msgid "parameters"
msgstr "参数@{"calib_text": " `[16016] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16016>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:63
msgid "_foo:=bar"
msgstr "_foo := bar@{"calib_text": " `[16017] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16017>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:63
msgid "-p foo:=bar"
msgstr "-p foo := bar@{"calib_text": " `[16018] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16018>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:65
msgid "node name"
msgstr "节点名称@{"calib_text": " `[16019] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16019>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:65
msgid "__name:=foo"
msgstr "__name := foo@{"calib_text": " `[16020] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16020>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:65
msgid "-r __node:=foo"
msgstr "-r __node:=foo@{"calib_text": " `[16021] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16021>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:67
msgid "namespace"
msgstr "namespace@{"calib_text": " `[16022] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16022>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:67
msgid "__ns:=foo"
msgstr "__ns:=foo@{"calib_text": " `[16023] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16023>`_ "}@"


#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst:67
msgid "-r __ns:=foo"
msgstr "-r __ns:=foo@{"calib_text": " `[16024] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16024>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:8
msgid "Passing ROS arguments to nodes via the command-line"
msgstr "通过命令行向节点传递ROS参数@{"calib_text": " `[603] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=603>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:15
msgid "All ROS nodes take a set of arguments that allow various properties to be reconfigured. Examples include configuring the name/namespace of the node, topic/service names used, and parameters on the node. All ROS-specific arguments have to be specified after a ``--ros-args`` flag:"
msgstr "所有ROS节点都接受一组参数，允许重新配置各种属性。例如，配置节点的名称/命名空间、使用的话题/服务名称和节点上的参数。所有ROS特定的参数都必须在``--ros-args``标志之后指定：@{"calib_text": " `[604] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=604>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:25
msgid "For more details, see `this design doc <https://design.ros2.org/articles/ros_command_line_arguments.html>`__."
msgstr "更多详细信息，请参阅`这个设计文档 <https://design.ros2.org/articles/ros_command_line_arguments.html>`__。@{"calib_text": " `[605] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=605>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:28
msgid "Name remapping"
msgstr "名称重映射@{"calib_text": " `[606] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=606>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:30
msgid "Names within a node (e.g. topics/services) can be remapped using the syntax ``-r <old name>:=<new name>``. The name/namespace of the node itself can be remapped using ``-r __node:=<new node name>`` and ``-r __ns:=<new node namespace>``."
msgstr "可以使用语法``-r <旧名称>:=<新名称>``对节点内的名称（例如：topics/services）进行重映射。节点本身的名称/命名空间可以使用``-r __node:=<新节点名称>``和``-r __ns:=<新节点命名空间>``进行重映射。@{"calib_text": " `[607] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=607>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:34
msgid "Note that these remappings are \"static\" remappings, in that they apply for the lifetime of the node. \"Dynamic\" remapping of names after nodes have been started is not yet supported."
msgstr "请注意，这些重映射是\"静态\"重映射，即它们在节点的生命周期内生效。目前尚不支持在节点启动后动态重映射名称。@{"calib_text": " `[608] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=608>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:37
msgid "See `this design doc <https://design.ros2.org/articles/static_remapping.html>`__ for more details on remapping arguments (not all functionality is available yet)."
msgstr "请参考 `此设计文档 <https://design.ros2.org/articles/static_remapping.html>`__，了解有关重新映射参数的详细信息（并非所有功能都可用）@{"calib_text": " `[609] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=609>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:42
msgid "The following invocation will cause the ``talker`` node to be started under the node name ``my_talker``, publishing on the topic named ``my_topic`` instead of the default of ``chatter``. The namespace, which must start with a forward slash, is set to ``/demo``, which means that topics are created in that namespace (``/demo/my_topic``), as opposed to globally (``/my_topic``)."
msgstr "以下调用将使``talker``节点以节点名称``my_talker``启动，发布到名为``my_topic``的主题，而不是默认的``chatter``。命名空间必须以正斜杠开头，设置为``/demo``，这意味着主题在该命名空间中创建（``/demo/my_topic``），而不是全局（``/my_topic``）@{"calib_text": " `[610] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=610>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:50
msgid "Passing remapping arguments to specific nodes"
msgstr "向特定节点传递重新映射参数@{"calib_text": " `[611] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=611>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:52
msgid "If multiple nodes are being run within a single process (e.g. using :doc:`Composition <../Concepts/Intermediate/About-Composition>`), remapping arguments can be passed to a specific node using its name as a prefix. For example, the following will pass the remapping arguments to the specified nodes:"
msgstr "如果在单个进程中运行多个节点（例如使用 :doc:`Composition <../Concepts/Intermediate/About-Composition>`），可以使用节点名称作为前缀将重映射参数传递给特定节点。例如，以下操作将重映射参数传递给指定的节点：@{"calib_text": " `[16025] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16025>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:60
msgid "The following example will both change the node name and remap a topic (node and namespace changes are always applied *before* topic remapping):"
msgstr "下面的示例将同时更改节点名称和重新映射一个主题（节点和命名空间的更改总是在主题重新映射之前应用）：@{"calib_text": " `[613] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=613>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:68
msgid "Logger configuration"
msgstr "日志记录器配置@{"calib_text": " `[614] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=614>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:70
msgid "See ``--log-level`` argument usage in :doc:`the logging page <../Tutorials/Demos/Logging-and-logger-configuration>`."
msgstr "请参阅 :doc:`日志记录页面中的--log-level参数用法 <../Tutorials/Demos/Logging-and-logger-configuration>`。@{"calib_text": " `[615] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=615>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:73
msgid "Parameters"
msgstr "参数@{"calib_text": " `[616] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=616>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:78
msgid "Setting parameters directly from the command line"
msgstr "直接从命令行设置参数@{"calib_text": " `[617] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=617>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:80
msgid "You can set parameters directly from the command line using the following syntax:"
msgstr "您可以使用以下语法直接从命令行设置参数:@{"calib_text": " `[618] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=618>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:86
msgid "As an example, you can run:"
msgstr "例如，您可以运行:@{"calib_text": " `[619] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=619>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:92 ../../source/How-To-Guides/Node-arguments.rst:135
msgid "Other nodes will be able to retrieve the parameter values, e.g.:"
msgstr "其他节点将能够检索参数值，例如:@{"calib_text": " `[620] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=620>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:108
msgid "Setting parameters from YAML files"
msgstr "从YAML文件中设置参数@{"calib_text": " `[621] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=621>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:110
msgid "Parameters can be set from the command-line in the form of yaml files."
msgstr "参数可以以yaml文件的形式通过命令行设置。@{"calib_text": " `[622] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=622>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:112
msgid "`See here <https://github.com/ros2/rcl/tree/humble/rcl_yaml_param_parser>`__ for examples of the yaml file syntax."
msgstr "有关yaml文件语法的示例，请参阅此处 <https://github.com/ros2/rcl/tree/humble/rcl_yaml_param_parser>。@{"calib_text": " `[623] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=623>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:114
msgid "As an example, save the following as ``demo_params.yaml``:"
msgstr "例如，将以下内容保存为 ``demo_params.yaml`` 文件：@{"calib_text": " `[624] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=624>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:126
msgid "Then either declare the parameters within your node with ``declare_parameter``  or ``declare_parameters`` (see `documentation <https://docs.ros2.org/foxy/api/rclcpp/classrclcpp_1_1Node.html#a095ea977b26e7464d9371efea5f36c42>`__ for function signatures), or `set the node to automatically declare parameters <https://docs.ros2.org/foxy/api/rclcpp/classrclcpp_1_1NodeOptions.html#a094ceb7af7c9b358ec007a4b8e14d40d>`__ if they were passed in via a command line override."
msgstr "然后，您可以在节点内使用 ``declare_parameter`` 或 ``declare_parameters``（请参阅 `文档 <https://docs.ros2.org/foxy/api/rclcpp/classrclcpp_1_1Node.html#a095ea977b26e7464d9371efea5f36c42>`__ 了解函数签名）声明参数，或者如果通过命令行覆盖传递了参数，则可以 `设置节点自动声明参数 <https://docs.ros2.org/foxy/api/rclcpp/classrclcpp_1_1NodeOptions.html#a094ceb7af7c9b358ec007a4b8e14d40d>`__。@{"calib_text": " `[625] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=625>`_ "}@"


#: ../../source/How-To-Guides/Node-arguments.rst:128
msgid "Then run the following:"
msgstr "然后运行以下命令：@{"calib_text": " `[626] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=626>`_ "}@"


#: ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:9
msgid "rosbag2: Overriding QoS Policies"
msgstr "rosbag2：覆盖 QoS 策略@{"calib_text": " `[627] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=627>`_ "}@"


#: ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:11
msgid "**Goal:** Override Ros2Bag QoS profile settings for recording and playback."
msgstr "**目标：**为录制和播放覆盖 Ros2Bag 的 QoS 配置文件设置。@{"calib_text": " `[628] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=628>`_ "}@"


#: ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:21
msgid "With the introduction of DDS in ROS 2, Quality of Service (QoS) compatibility for publisher/subscriber nodes needs to be considered when recording and playing back data. More detail on how QoS works can be found :doc:`here <../Concepts/Intermediate/About-Quality-of-Service-Settings>`. For the purposes of this guide, it is sufficient to know that only the reliability and durability policies affect whether publishers/subscribers are compatible and can receive data from one other."
msgstr "随着DDS在ROS 2中的引入，在记录和回放数据时需要考虑发布者/订阅者节点的服务质量（QoS）兼容性。有关QoS的详细信息可以在 :doc:`这里 <../Concepts/Intermediate/About-Quality-of-Service-Settings>` 找到。对于本指南而言，只需知道可靠性和持久性策略是否会影响发布者/订阅者是否兼容以及它们是否能够接收彼此的数据。@{"calib_text": " `[16026] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16026>`_ "}@"


#: ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:25
msgid "Ros2Bag adapts its requested/offered QoS profile when recording/playing data from a topic to prevent dropped messages. During playback, Ros2bag also attempts to preserve the policy originally offered by the topic. Certain situations may require specifying explicit QoS profile settings so Ros2Bag can record/playback topics. These QoS profile overrides can be specified via the CLI using the ``--qos-profile-overrides-path`` flag."
msgstr "Ros2Bag在记录/播放主题数据时会根据需要调整其请求/提供的QoS配置文件，以防止丢失消息。在回放过程中，Ros2bag还会尝试保持主题最初提供的策略。在某些情况下，可能需要指定显式的QoS配置文件设置，以便Ros2Bag能够记录/播放主题。可以通过使用``--qos-profile-overrides-path``标志在CLI中指定这些QoS配置文件覆盖。@{"calib_text": " `[630] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=630>`_ "}@"


#: ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:31
msgid "Using QoS Overrides"
msgstr "使用QoS配置文件覆盖@{"calib_text": " `[631] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=631>`_ "}@"


#: ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:33
msgid "The YAML schema for the profile overrides is a dictionary of topic names with key/value pairs for each QoS policy:"
msgstr "配置文件覆盖的YAML模式是一个包含主题名称的字典，每个QoS策略都有键值对：@{"calib_text": " `[632] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=632>`_ "}@"


#: ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:44
msgid "If a policy value is not specified, the value will fallback to the default used by Ros2Bag. If you specify a Duration based policy such as ``deadline`` or ``lifespan``, you will need to specify both seconds and nanoseconds. Policy values are determined by the policy’s short keys which can be found using ``ros2topic`` verbs such as ``ros2 topic pub --help``. All values are replicated below for reference."
msgstr "如果未指定策略值，该值将回退到Ros2Bag使用的默认值。如果您指定了基于持续时间的策略，例如``deadline``或``lifespan``，则需要同时指定秒和纳秒。策略值由策略的短键确定，可以使用``ros2topic``命令的动词（如``ros2 topic pub --help``）找到。下面列出了所有值以供参考。@{"calib_text": " `[633] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=633>`_ "}@"


#: ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:70
msgid "Consider a topic ``/talker`` offering a ``transient_local`` Durability policy. ROS 2 publishers by default request ``volatile`` Durability."
msgstr "考虑一个提供``transient_local``持续性策略的主题``/talker``。ROS 2发布者默认情况下请求``volatile``持续性。@{"calib_text": " `[634] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=634>`_ "}@"


#: ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:77
msgid "In order for Ros2Bag to record the data, we would want to override the recording policy for that specific topic like so:"
msgstr "为了让Ros2Bag记录数据，我们需要覆盖该特定主题的记录策略，操作如下：@{"calib_text": " `[635] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=635>`_ "}@"


#: ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:86 ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:101
msgid "And call it from the CLI:"
msgstr "然后从命令行调用它：@{"calib_text": " `[636] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=636>`_ "}@"


#: ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:92
msgid "If we want to playback the bag file but with a different Reliability policy, we can specify one as such;"
msgstr "如果我们想使用不同的可靠性策略回放bag文件，我们可以这样指定；@{"calib_text": " `[637] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=637>`_ "}@"


#: ../../source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst:107
msgid "We can see the results with ``ros2 topic``"
msgstr "我们可以使用``ros2 topic``查看结果@{"calib_text": " `[638] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=638>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:6
msgid "ROS 2 Package Maintainer Guide"
msgstr "ROS 2软件包维护人员指南@{"calib_text": " `[639] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=639>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:8
msgid "Each package in the ROS 2 core has one or more maintainers that are responsibile for the general health of the package. This guide gives some information about the responsibilities of a ROS 2 core package maintainer."
msgstr "ROS 2核心中的每个软件包都有一个或多个维护人员，负责维护软件包的整体健康状况。本指南介绍了ROS 2核心软件包维护人员的责任和一些信息。@{"calib_text": " `[640] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=640>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:15
msgid "Reviews"
msgstr "评论@{"calib_text": " `[641] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=641>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:17
msgid "All incoming code to ROS 2 core repositories must be reviewed. The review is looking for:"
msgstr "所有提交到ROS 2核心仓库的代码都必须进行审核。审核会关注以下方面：@{"calib_text": " `[642] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=642>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:20
msgid "Suitability in the package"
msgstr "适用于该包的合适性@{"calib_text": " `[643] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=643>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:21
msgid "Correct code"
msgstr "正确的代码@{"calib_text": " `[644] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=644>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:22
msgid "Conforms to developer guidelines:"
msgstr "符合开发者指南要求：@{"calib_text": " `[645] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=645>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:24
msgid ":doc:`Developer Guide <../The-ROS2-Project/Contributing/Developer-Guide>`"
msgstr ":doc:`开发者指南 <../The-ROS2-Project/Contributing/Developer-Guide>`@{"calib_text": " `[646] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=646>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:25
msgid ":doc:`Code Style Guide <../The-ROS2-Project/Contributing/Code-Style-Language-Versions>`"
msgstr ":doc:`代码风格指南 <../The-ROS2-Project/Contributing/Code-Style-Language-Versions>`@{"calib_text": " `[647] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=647>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:27
msgid "Adds tests for the bug/feature"
msgstr "为错误/功能添加测试@{"calib_text": " `[648] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=648>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:28
msgid "Adds documentation for new features"
msgstr "增加新功能的文档@{"calib_text": " `[649] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=649>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:29
msgid "Clean Continuous Integration run"
msgstr "清理持续集成运行@{"calib_text": " `[650] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=650>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:30
msgid "Targets default branch (usually \"rolling\")"
msgstr "目标是默认分支（通常是“rolling”）@{"calib_text": " `[651] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=651>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:31
msgid "Has at least one approval from a maintainer that is not the author"
msgstr "至少有一位维护者（非作者）的批准@{"calib_text": " `[652] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=652>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:34
msgid "Continuous Integration"
msgstr "持续集成@{"calib_text": " `[653] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=653>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:36
msgid "All incoming code to ROS 2 core repositories must be run through Continuous Integration. ROS 2 currently has two separate CI systems, and it is required that PRs pass both of them before merging."
msgstr "所有提交到ROS 2核心仓库的代码都必须通过持续集成进行运行。目前ROS 2有两个独立的持续集成系统，要求在合并之前必须通过这两个系统的PR（拉取请求）。@{"calib_text": " `[654] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=654>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:40
msgid "PR builds (https://build.ros2.org/view/Rpr)"
msgstr "PR构建（https://build.ros2.org/view/Rpr）@{"calib_text": " `[655] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=655>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:42
msgid "ROS 2 PR (Pull Request) builds run automatically every time a pull request is opened. These builds run a build and test of this package, and this package only. This means that it does not build any dependencies, and it also does not build any packages that depend upon this package. These builds are good for quick feedback to see if the change passes linters, unit tests, etc. There are two major problems with them:"
msgstr "ROS 2的PR（拉取请求）构建在每次打开拉取请求时会自动运行。这些构建只会构建和测试该软件包本身，不会构建任何依赖项，也不会构建依赖于该软件包的任何其他软件包。这些构建适用于快速反馈，以查看更改是否通过了代码检查、单元测试等。然而，它们存在两个主要问题：@{"calib_text": " `[656] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=656>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:48
msgid "These builds do not work across multiple repositories (so won't work for adding or changing an API, etc)"
msgstr "这些构建不适用于多个代码库（因此不能用于添加或更改 API 等）@{"calib_text": " `[657] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=657>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:49
msgid "These tests only run on Linux (they won't run on macOS or Windows)"
msgstr "这些测试只在 Linux 上运行（它们无法在 macOS 或 Windows 上运行）@{"calib_text": " `[658] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=658>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:51
msgid "To address these two problems, there is also the CI builds."
msgstr "为了解决这两个问题，还有 CI 构建。@{"calib_text": " `[659] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=659>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:54
msgid "CI builds (https://ci.ros2.org)"
msgstr "CI 构建（https://ci.ros2.org）@{"calib_text": " `[660] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=660>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:56
msgid "CI builds do not run automatically when a pull request is opened. One of the maintainers of the package must manually request that a CI build is done by going to https://ci.ros2.org/job/ci_launcher/ ."
msgstr "当打开拉取请求时，CI构建不会自动运行。软件包的维护人员之一必须手动请求执行CI构建，方法是访问https://ci.ros2.org/job/ci_launcher/。@{"calib_text": " `[661] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=661>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:59
msgid "By default, running a job in this way will build and run tests for all packages (> 300 currently) on all platforms (Linux, macOS, and Windows). As a full run can take many hours and tie up the CI machines, it is recommended that all runs here restrict the number of packages that are built and tested. This can be accomplished by using the colcon arguments ``--packages-up-to``, ``--packages-select``, ``--packages-above-and-dependencies``, ``--packages-above``, amongst others. See the `colcon documentation <https://colcon.readthedocs.io/en/released/user/how-to.html#build-only-a-single-package-or-selected-packages>`__ for more examples on the flags that can be used. Further documentation on how to use the CI machinery is available at https://github.com/ros2/ci/blob/master/CI_BUILDERS.md."
msgstr "默认情况下，以这种方式运行作业将在所有平台（Linux、macOS和Windows）上构建和运行所有软件包（>300个当前版本）的测试。由于完整运行可能需要很多小时并占用CI机器的资源，建议在此处的所有运行中限制构建和测试的软件包数量。可以使用colcon参数``--packages-up-to``、``--packages-select``、``--packages-above-and-dependencies``、``--packages-above``等来实现。有关可用标志的更多示例，请参阅`colcon文档<https://colcon.readthedocs.io/en/released/user/how-to.html#build-only-a-single-package-or-selected-packages>`__。有关如何使用CI工具的更多文档，请访问https://github.com/ros2/ci/blob/master/CI_BUILDERS.md。@{"calib_text": " `[662] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=662>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:66
msgid "Merging Pull Requests"
msgstr "合并拉取请求@{"calib_text": " `[663] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=663>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:68
msgid "A pull request can be merged if all of the following are true:"
msgstr "只有满足以下所有条件时，才可以合并拉取请求：@{"calib_text": " `[664] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=664>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:70
msgid "The DCO bot reports a passing result"
msgstr "DCO 机器人报告通过的结果@{"calib_text": " `[665] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=665>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:71
msgid "The PR build reports a passing result"
msgstr "PR 构建报告通过的结果@{"calib_text": " `[666] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=666>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:72
msgid "The CI build reports a passing result on all platforms"
msgstr "CI 构建在所有平台上报告通过的结果@{"calib_text": " `[667] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=667>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:73
msgid "The code has been reviewed and approved by at least one maintainer"
msgstr "代码已被至少一名维护者审查并批准@{"calib_text": " `[668] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=668>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:75
msgid "After a PR is merged, it will automatically get built with the next `nightlies <https://ci.ros2.org/view/nightly>`__. It is highly recommended to check the nightlies after merging pull requests to ensure no regressions have occurred."
msgstr "合并了 PR 后，它将自动与下一个 `夜间构建版本 <https://ci.ros2.org/view/nightly>`__ 一起构建。强烈建议在合并拉取请求后检查夜间构建版本，以确保没有发生回归。@{"calib_text": " `[669] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=669>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:79
msgid "Keeping CI green"
msgstr "保持 CI 绿色@{"calib_text": " `[670] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=670>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:81
msgid "The nightly jobs that run tests are typically much more comprehensive than what is done for individual pull requests. For this reason, there can be regressions that occur in the nightlies that were not seen in the CI jobs. It is a package maintainers responsibility to check for regressions in their packages at the following locations:"
msgstr "运行测试的夜间任务通常比为单个拉取请求执行的任务要全面得多。因此，在夜间构建版本中可能会发生在 CI 任务中未出现的回归。包维护者有责任在以下位置检查其包是否存在回归：@{"calib_text": " `[671] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=671>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:85
msgid "https://ci.ros2.org/view/nightly"
msgstr "https://ci.ros2.org/view/nightly@{"calib_text": " `[672] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=672>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:86
msgid "https://ci.ros2.org/view/packaging"
msgstr "https://ci.ros2.org/view/packaging@{"calib_text": " `[673] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=673>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:87
msgid "https://build.ros2.org/view/Rci"
msgstr "https://build.ros2.org/view/Rci@{"calib_text": " `[674] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=674>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:88
msgid "https://build.ros2.org/view/Rdev"
msgstr "https://build.ros2.org/view/Rdev@{"calib_text": " `[675] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=675>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:90
msgid "For any problems that are found, new issues and/or pull requests on the relevant repositories should be opened."
msgstr "如发现任何问题，请在相关仓库上开启新的问题(issue)和/或拉取请求(pull requests)。@{"calib_text": " `[676] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=676>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:93
msgid "Making releases"
msgstr "发布版本@{"calib_text": " `[677] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=677>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:95
msgid "In order to get new features and bugfixes out to end users, the package maintainers must periodically do a release of the package (a release may also be requested on-demand from other maintainers)."
msgstr "为了将新功能和错误修复传递给最终用户，软件包维护人员必须定期发布软件包（也可以根据其他维护人员的要求按需发布）。@{"calib_text": " `[678] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=678>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:97
msgid "As outlined in the :ref:`developer guide <semver>`, ROS 2 packages follow semver for version numbers."
msgstr "如在开发人员指南的 :ref:`版本号规范 <semver>` 中所述，ROS 2 软件包遵循语义化版本号规范。@{"calib_text": " `[679] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=679>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:99
msgid "A release in ROS terms consists of two distinct steps: making a source release, and then making a binary release."
msgstr "在ROS术语中，发布分为两个不同的步骤：制作源代码版本和制作二进制版本。@{"calib_text": " `[680] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=680>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:102
msgid "Source release"
msgstr "源代码发布@{"calib_text": " `[681] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=681>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:104
msgid "A source release creates a changelog and a tag in the relevant repository."
msgstr "源代码发布会在相关的代码库中创建一个变更日志和一个标签。@{"calib_text": " `[682] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=682>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:106
msgid "The process starts by generating or updating CHANGELOG.rst files with the following command:"
msgstr "该过程从使用以下命令生成或更新 CHANGELOG.rst 文件开始：@{"calib_text": " `[683] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=683>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:112
msgid "If one or more packages in the repository don't have contain CHANGELOG.rst, add the ``--all`` option to populate all of the previous commits for each package. The ``catkin_generate_changelog`` command will simply populate the files with the commit logs from the repository. Since those commit logs aren't always appropriate for a changelog, it is recommended to edit CHANGELOG.rst and edit it to make it more readable. Once editing is done, it is important to commit the updated CHANGELOG.rst file to the repository."
msgstr "如果代码库中的一个或多个软件包不包含 CHANGELOG.rst 文件，则需要添加 ``--all`` 选项，以便为每个软件包填充所有先前的提交。``catkin_generate_changelog`` 命令将简单地使用代码库中的提交日志填充这些文件。由于这些提交日志并不总是适合用作变更日志，建议编辑 CHANGELOG.rst 并将其编辑为更易读的格式。编辑完成后，重要的是将更新的 CHANGELOG.rst 文件提交到代码库中。@{"calib_text": " `[684] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=684>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:117
msgid "The next step is to bump the version in the package.xml and the changelog files with the following command:"
msgstr "下一步是使用以下命令在package.xml和changelog文件中增加版本号：@{"calib_text": " `[685] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=685>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:123
msgid "This command will find all of the packages in the repository, check that the changelogs exist, check that there are no uncommitted local changes, increment the version in the package.xml files, and commit/tag the changes with a bloom-compatible tag. Using this command is the best way to ensure the release versions are consistent and compatible with bloom. By default, ``catkin_prepare_release`` will bump the patch version of the packages, e.g. 0.1.1 -> 0.1.2 . However, it can also bump the minor or major number, or even have an exact version set. See the help output from ``catkin_prepare_release`` for more information."
msgstr "该命令将查找存储库中的所有软件包，检查changelog是否存在，检查是否有未提交的本地更改，增加package.xml文件中的版本号，并使用与bloom兼容的标签提交/标记更改。使用此命令是确保发布版本与bloom一致且兼容的最佳方式。默认情况下，`catkin_prepare_release`会增加软件包的修补版本，例如 0.1.1 -> 0.1.2。然而，它也可以增加次要版本号或主要版本号，甚至可以设置一个精确的版本号。有关更多信息，请参阅`catkin_prepare_release`的帮助输出。@{"calib_text": " `[686] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=686>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:129
msgid "Assuming the above was successful, a source release has been made."
msgstr "假设上述步骤成功，已经进行了源代码的发布。@{"calib_text": " `[687] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=687>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:132
msgid "Binary release"
msgstr "二进制发布@{"calib_text": " `[688] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=688>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:134
msgid "The next step is to use the ``bloom-release`` command to create a binary release. For full instructions on how to use bloom, please see http://wiki.ros.org/bloom. To do a binary release of a package, run:"
msgstr "下一步是使用 ``bloom-release`` 命令创建二进制发布。有关如何使用 bloom 的完整说明，请参阅 http://wiki.ros.org/bloom。要对软件包进行二进制发布，请运行以下命令：@{"calib_text": " `[689] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=689>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:142
msgid "For instance, to release the ``rclcpp`` repository to the Humble distribution, the command would be:"
msgstr "例如，要将 ``rclcpp`` 软件库发布到 Humble 发行版，命令如下：@{"calib_text": " `[690] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=690>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:148
msgid "This command will fetch the release repository, make the necessary changes to make the release, push the changes to the release repository, and finally open a pull request to https://github.com/ros/rosdistro ."
msgstr "此命令将获取发布软件库，进行必要的更改以进行发布，将更改推送到发布软件库，最后会向 https://github.com/ros/rosdistro 发送一个拉取请求。@{"calib_text": " `[691] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=691>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:151
msgid "Backporting to released distributions"
msgstr "向已发布的发行版进行回溯@{"calib_text": " `[692] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=692>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:153
msgid "All incoming changes should first land on the development branch. Once a change has been merged onto the development branch, it can be considered for backporting to released distributions. However, any backported code must not break `API <https://en.wikipedia.org/wiki/API>`__ or `ABI <https://en.wikipedia.org/wiki/Application_binary_interface>`__ in a released distribution. If a change can be backported without breaking API or ABI, then a new pull request targeting the appropriate branch should be created. The new pull request should be added to the appropriate distributions project board at https://github.com/orgs/ros2/projects. The new pull request should have all of the steps run as before, but making sure to target the distribution in question for CI, etc."
msgstr "所有传入的更改应首先落在开发分支上。一旦将更改合并到开发分支上，可以考虑将其回溯到发布的发行版中。然而，任何回溯的代码都不能在发布的发行版中破坏`API <https://en.wikipedia.org/wiki/API>`__或`ABI <https://en.wikipedia.org/wiki/Application_binary_interface>`__。如果可以在不破坏API或ABI的情况下回溯更改，那么应创建一个针对相应分支的新拉取请求。新的拉取请求应添加到 https://github.com/orgs/ros2/projects 上的相应发行版项目板中。新的拉取请求应按照之前的步骤运行，但要确保针对CI等问题的目标分发。@{"calib_text": " `[693] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=693>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:161
msgid "Responding to issues"
msgstr "回应问题@{"calib_text": " `[694] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=694>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:163
msgid "Package maintainers should also look at incoming issues on the repository and triage the problems that users are having."
msgstr "软件包维护者还应查看存储库上的问题，并对用户遇到的问题进行分类。@{"calib_text": " `[695] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=695>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:165
msgid "For issues that look like questions, the issue should be closed and the user redirected to `Robotics Stack Exchange <https://robotics.stackexchange.com/>`__ ."
msgstr "For issues that look like questions, the issue should be closed and the user redirected to `Robotics Stack Exchange <https://robotics.stackexchange.com/>`__ .@{"calib_text": " `[\u6821\u51c6] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16027>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:167
msgid "If an issue looks like a problem, but is not relevant to this particular repository, it should be moved to the appropriate repository with the GitHub \"Transfer issue\" button."
msgstr "如果某个问题看起来像是一个问题，但与该特定存储库无关，则应使用GitHub的“转移问题”按钮将其移至相应的存储库中。@{"calib_text": " `[697] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=697>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:169
msgid "If the reporter has not provided enough information to determine the cause of the problem, more information should be requested from the reporter."
msgstr "如果报告者没有提供足够的信息来确定问题的原因，则应向报告者请求更多信息。@{"calib_text": " `[698] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=698>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:171
msgid "If this is a new feature, tag the issue with \"help-wanted\"."
msgstr "如果这是一个新功能，请使用“help-wanted”标记该问题。@{"calib_text": " `[699] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=699>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:173
msgid "Any remaining issues should be reproduced, and determined if they are truly a bug. If it is a bug, fixes are highly appreciated."
msgstr "应重现任何剩余的问题，并确定它们是否真的是一个错误。如果是错误，请高度欢迎修复。@{"calib_text": " `[700] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=700>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:177
msgid "Getting help"
msgstr "获取帮助@{"calib_text": " `[701] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=701>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:179
msgid "While doing maintenance on a package, questions about general procedures or individual issues may come up."
msgstr "在对软件包进行维护时，可能会遇到关于常规流程或个别问题的疑问。@{"calib_text": " `[702] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=702>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:181
msgid "For general questions, please follow the :doc:`contributing guidelines <../The-ROS2-Project/Contributing>`."
msgstr "如有常规问题，请遵循 :doc:`贡献指南 <../The-ROS2-Project/Contributing>`。@{"calib_text": " `[703] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=703>`_ "}@"


#: ../../source/How-To-Guides/Package-maintainer-guide.rst:183
msgid "For questions on individual issues, please tag the ROS 2 GitHub team (@ros/team), and someone on the team will take a look."
msgstr "如有个别问题，请标记ROS 2 GitHub团队（@ros/team），团队中的成员将会查看。@{"calib_text": " `[704] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=704>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:8
msgid "Porting RQt plugins to Windows"
msgstr "将RQt插件移植到Windows@{"calib_text": " `[717] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=717>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:15
msgid "RQt Porting examples"
msgstr "RQt移植示例@{"calib_text": " `[718] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=718>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:17
msgid "Here is the ROS 2 port of `qt_gui_core <https://github.com/ros-visualization/qt_gui_core/commit/6fb9624033a849f56d1bc1aad0e40d252bf99c2b>`_."
msgstr "这里是`qt_gui_core <https://github.com/ros-visualization/qt_gui_core/commit/6fb9624033a849f56d1bc1aad0e40d252bf99c2b>`_的ROS 2移植版本。@{"calib_text": " `[719] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=719>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:19
msgid "Here is the ROS 2 port of `python_qt_binding <https://github.com/ros-visualization/python_qt_binding/pull/56>`__."
msgstr "这里是`python_qt_binding <https://github.com/ros-visualization/python_qt_binding/pull/56>`__的ROS 2移植版本。@{"calib_text": " `[720] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=720>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:22
msgid "Considerations for Windows 10"
msgstr "Windows 10 的注意事项@{"calib_text": " `[721] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=721>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:25
msgid "Troubles with TinyXML version 1"
msgstr "TinyXML 版本 1 的问题@{"calib_text": " `[722] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=722>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:27
msgid "I could not successfully use TinyXML. I upgraded to TinyXML-2 where needed. It’s a pretty straight forward change."
msgstr "我无法成功使用 TinyXML。在必要时我升级到 TinyXML-2。这是一个相当简单的变更。@{"calib_text": " `[723] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=723>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:31
msgid "Checkout `this PR <https://github.com/ros-visualization/qt_gui_core/pull/147>`__ for an example of porting to TinyXML-2."
msgstr "查看 `此 PR <https://github.com/ros-visualization/qt_gui_core/pull/147>`__ 以获取将代码迁移到 TinyXML-2 的示例。@{"calib_text": " `[724] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=724>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:34
msgid "Code that uses ``__cplusplus`` and code that requires pluginlib"
msgstr "使用``__cplusplus``的代码和需要pluginlib的代码@{"calib_text": " `[725] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=725>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:36
msgid "In some places, notably in the ROS 2 port of pluginlib, there is use of the ``__cplusplus`` flag. Unfortunately on Windows Visual Studio does not set this flag correctly regardless of the C++ standard that is actually being used. See `this page <https://docs.microsoft.com/en-us/cpp/build/reference/zc-cplusplus?view=vs-2017>`__ for more information."
msgstr "在某些地方，尤其是在pluginlib的ROS 2端口中，使用了``__cplusplus``标志。不幸的是，在Windows Visual Studio上，无论实际使用的C++标准是什么，都无法正确设置该标志。有关更多信息，请参阅`此页面<https://docs.microsoft.com/en-us/cpp/build/reference/zc-cplusplus?view=vs-2017>`__。@{"calib_text": " `[726] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=726>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:40
msgid "To set it, you need to add the compile option ``/Zc:__cplusplus``."
msgstr "要设置它，您需要添加编译选项``/Zc:__cplusplus``。@{"calib_text": " `[727] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=727>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:42
msgid "For example, in CMake you could do something like this:"
msgstr "例如，在CMake中，您可以这样做：@{"calib_text": " `[728] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=728>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:49
msgid "Locations of build artifacts (before install)"
msgstr "构建产物的位置（安装前）@{"calib_text": " `[729] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=729>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:51
msgid "This only came up during when building ``qt_gui_cpp``. In that package, a custom command depends on a target library in another part of the package. However, that library isn’t installed until build is complete. Windows builds in a ${configuration} directory. For example:"
msgstr "这个问题只在构建 ``qt_gui_cpp`` 时出现。在这个软件包中，自定义命令依赖于软件包的另一个部分中的目标库。然而，在构建完成之前，该库不会被安装。Windows 构建位于 ${configuration} 目录中。例如：@{"calib_text": " `[730] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=730>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:56
msgid "On Linux, ``qt_gui_cpp.a`` would be built in: <ros2_ws>/build/qt_gui_cpp/src/qt_gui_cpp/"
msgstr "在 Linux 上，``qt_gui_cpp.a`` 将会构建在：<ros2_ws>/build/qt_gui_cpp/src/qt_gui_cpp/@{"calib_text": " `[731] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=731>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:59
msgid "But on Windows ``qt_gui_cpp.lib`` is built in <ros2_ws>/build/qt_gui_cpp/src/qt_gui_cpp/Release"
msgstr "但是在 Windows 上，``qt_gui_cpp.lib`` 将会构建在：<ros2_ws>/build/qt_gui_cpp/src/qt_gui_cpp/Release@{"calib_text": " `[732] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=732>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:62
msgid "For compatibility across platforms in this situation, use `CMake generator expressions <https://cmake.org/cmake/help/v3.5/manual/cmake-generator-expressions.7.html>`__. However, when you need a library to link against be sure to use ``$<TARGET_LINKER_FILE:_target>`` instead of ``$<TARGET_FILE:_target>``. The latter will find ``.dll`` files, which cannot be linked against on Windows. See an `example here <https://github.com/ros-visualization/qt_gui_core/pull/162/files>`__."
msgstr "为了在这种情况下实现跨平台兼容性，请使用 `CMake 生成器表达式 <https://cmake.org/cmake/help/v3.5/manual/cmake-generator-expressions.7.html>`__。然而，在需要链接库时，请确保使用 ``$<TARGET_LINKER_FILE:_target>`` 而不是 ``$<TARGET_FILE:_target>``。后者会找到 ``.dll`` 文件，在Windows上无法链接。参见 `此处的示例 <https://github.com/ros-visualization/qt_gui_core/pull/162/files>`__。@{"calib_text": " `[733] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=733>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:68
msgid "Compiler and linker flags"
msgstr "编译器和链接器标志@{"calib_text": " `[734] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=734>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:70
msgid "In general when porting to Windows, many packages might make use of additional compiler flags. You can find the Windows compiler flags on `Microsoft's documentation <https://docs.microsoft.com/en-us/cpp/build/reference/compiler-options-listed-by-category?view=vs-2017>`__. The C++ compiler is called ``cl.exe``."
msgstr "通常在移植到Windows时，许多软件包可能会使用额外的编译器标志。您可以在 `Microsoft 的文档 <https://docs.microsoft.com/en-us/cpp/build/reference/compiler-options-listed-by-category?view=vs-2017>`__ 中找到Windows编译器标志。C++编译器称为 ``cl.exe``。@{"calib_text": " `[735] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=735>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:74
msgid "For linker flags see `Microsoft's documentation <https://docs.microsoft.com/en-us/cpp/build/reference/linker-options?view=vs-2017>`__. The linker program is called ``link.exe``."
msgstr "有关链接器标志，请参阅 `Microsoft 的文档 <https://docs.microsoft.com/en-us/cpp/build/reference/linker-options?view=vs-2017>`__。链接器程序称为 ``link.exe``。@{"calib_text": " `[736] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=736>`_ "}@"


#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:77
msgid "However, CMake actually provides many of these options in variables. This `StackOverflow page <https://stackoverflow.com/questions/9298278/cmake-print-out-all-accessible-variables-in-a-script>`__ contains a good example of how to see all the CMake variables available in a script."
msgstr "然而，CMake实际上在变量中提供了许多这些选项。这个`StackOverflow页面<https://stackoverflow.com/questions/9298278/cmake-print-out-all-accessible-variables-in-a-script>`__提供了一个很好的示例，可以查看脚本中所有可用的CMake变量。@{"calib_text": " `[737] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=737>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:7
msgid "Building RQt from source"
msgstr "从源代码构建 RQt@{"calib_text": " `[738] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=738>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:9
msgid "We've provided our development setup here to aid future users in easily extending RQt by creating their own plugins. We encourage you to contribute those plugins back to the ``ros-visualization`` GitHub repository!"
msgstr "我们在这里提供了我们的开发设置，以帮助未来的用户通过创建自己的插件来轻松扩展 RQt。我们鼓励您将这些插件贡献回``ros-visualization``的GitHub存储库！@{"calib_text": " `[739] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=739>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-MacOS.rst:13 ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:15 ../../source/How-To-Guides/RQt-Source-Install.rst:13
msgid "System Requirements"
msgstr "系统要求@{"calib_text": " `[740] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=740>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:15
msgid "These instructions are written for the target platforms for Crystal Clemmys (see `REP <https://www.ros.org/reps/rep-2000.html>`__)."
msgstr "这些指令是针对 Crystal Clemmys 的目标平台编写的（请参阅 `REP <https://www.ros.org/reps/rep-2000.html>`__）。@{"calib_text": " `[741] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=741>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:17
msgid "Ubuntu Bionic Beaver 18.04 64-bit"
msgstr "Ubuntu Bionic Beaver 18.04 64 位@{"calib_text": " `[742] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=742>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:18
msgid "Mac OSX Sierra 10.12.x"
msgstr "Mac OSX Sierra 10.12.x@{"calib_text": " `[743] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=743>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:19
msgid "Windows 10 with Visual Studio 2017"
msgstr "Windows 10与Visual Studio 2017@{"calib_text": " `[744] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=744>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:22
msgid "Other Requirements"
msgstr "其他要求@{"calib_text": " `[745] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=745>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:24
msgid "In ROS 2 Crystal the minimum Qt version is ``Qt5``"
msgstr "在ROS 2 Crystal中，最低的Qt版本是``Qt5``@{"calib_text": " `[746] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=746>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:27
msgid "Building From Source"
msgstr "从源代码构建@{"calib_text": " `[747] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=747>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:29
msgid "In order to build RQt from source, first create a ROS 2 workspace at ``~/ros2_ws/``. This is step is already covered in :doc:`building ROS 2 from source instructions <../Installation>`, so we skip it here."
msgstr "为了从源代码构建RQt，首先在``~/ros2_ws/``下创建一个ROS 2工作空间。这一步在 :doc:`从源代码构建ROS 2的说明 <../Installation>`中已经介绍过了，所以我们在这里跳过它。@{"calib_text": " `[748] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=748>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:33
msgid "Download RQt Repositories"
msgstr "下载 RQt 仓库@{"calib_text": " `[749] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=749>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:40
msgid "As an alternative to the hosted ``.repos`` file you can use ``rosinstall_generator`` to generate a custom one:"
msgstr "作为托管的 ``.repos`` 文件的替代，您可以使用 ``rosinstall_generator`` 生成一个自定义的文件：@{"calib_text": " `[750] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=750>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:48
msgid "Install Dependencies"
msgstr "安装依赖项@{"calib_text": " `[751] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=751>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:56
msgid "For non-Linux platforms, see the :doc:`macOS RQt source install page <RQt-Source-Install-MacOS>` or the :doc:`Windows 10 RQt source install page <RQt-Source-Install-Windows10>` before continuing here."
msgstr "对于非 Linux 平台，请参阅 :doc:`macOS RQt 源码安装页面 <RQt-Source-Install-MacOS>` 或 :doc:`Windows 10 RQt 源码安装页面 <RQt-Source-Install-Windows10>`，然后再继续本页。@{"calib_text": " `[752] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=752>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:63
msgid "Build The Workspace"
msgstr "构建工作区@{"calib_text": " `[753] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=753>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:65
msgid "Generally building a workspace is as simple as:"
msgstr "通常构建工作区很简单：@{"calib_text": " `[754] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=754>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:71
msgid "For Windows, it is recommended to use the ``--merge-install`` option."
msgstr "对于Windows系统，建议使用 ``--merge-install`` 选项。@{"calib_text": " `[755] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=755>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:77
msgid "Advanced Colcon usages:"
msgstr "高级Colcon用法：@{"calib_text": " `[756] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=756>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:79
msgid "Show verbose output on the console:"
msgstr "在控制台上显示详细输出：@{"calib_text": " `[757] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=757>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:85
msgid "Only build one package and its dependencies:"
msgstr "仅构建一个软件包及其依赖项：@{"calib_text": " `[758] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=758>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:92
msgid "Source your environment"
msgstr "源激活您的环境@{"calib_text": " `[759] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=759>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:94
msgid "Linux or macOS"
msgstr "适用于 Linux 或 macOS@{"calib_text": " `[760] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=760>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:108
msgid "Using RQt"
msgstr "使用 RQt@{"calib_text": " `[761] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=761>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install.rst:110
msgid "See :doc:`Overview of RQt <../Concepts/Intermediate/About-RQt>`."
msgstr "See :doc:`Overview of RQt <../Concepts/Intermediate/About-RQt>`.@{"calib_text": " `[\u6821\u51c6] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16028>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-MacOS.rst:7
msgid "Building RQt from source on macOS"
msgstr "在 macOS 上从源代码构建 RQt@{"calib_text": " `[763] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=763>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-MacOS.rst:9
msgid "This page provides specific information to building RQt from source on macOS. Follow these instructions before proceeding with :doc:`RQt Source Install <RQt-Source-Install>` page."
msgstr "本页提供了在 macOS 上从源代码构建 RQt 的具体信息。在继续查看 :doc:`RQt 源码安装 <RQt-Source-Install>` 页面之前，请按照这些说明进行操作。@{"calib_text": " `[764] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=764>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-MacOS.rst:15
msgid "RQt is supported on macOS 10.12, but 10.13 also seems to work."
msgstr "RQt 在 macOS 10.12 上受支持，但似乎在 10.13 上也可以工作。@{"calib_text": " `[765] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=765>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-MacOS.rst:18 ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:25
msgid "Dependencies"
msgstr "依赖项@{"calib_text": " `[766] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=766>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-MacOS.rst:20
msgid "The primary dependencies of the RQt package are sip and PyQt5. PySide2 may be supported in the future."
msgstr "RQt 包的主要依赖项是 sip 和 PyQt5。将来可能支持 PySide2。@{"calib_text": " `[767] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=767>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-MacOS.rst:33
msgid "This is the quickest solution but may cause issues when upgrading Qt or if other packages are expecting Qt 4. Another option is to update your ``PATH`` and ``CMAKE_PREFIX_PATH`` to include the Qt install location:"
msgstr "这是最快的解决方案，但在升级 Qt 或其他包需要 Qt 4 的情况下可能会出现问题。另一种选择是更新您的 ``PATH`` 和 ``CMAKE_PREFIX_PATH``，将 Qt 安装位置包括在内：@{"calib_text": " `[768] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=768>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-MacOS.rst:42 ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:92
msgid "Install RQt by source"
msgstr "通过源代码安装 RQt@{"calib_text": " `[769] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=769>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-MacOS.rst:44 ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:94
msgid "Continue with the :doc:`RQt source install page <RQt-Source-Install>`."
msgstr "继续查看 :doc:`RQt 源代码安装页面 <RQt-Source-Install>`。@{"calib_text": " `[770] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=770>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:7
msgid "Building RQt from source on Windows 10"
msgstr "在 Windows 10 上从源代码构建 RQt@{"calib_text": " `[771] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=771>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:9
msgid "This page provides specific information to building RQt from source on Windows. Follow these instructions before proceeding with the :doc:`RQt Source Install <RQt-Source-Install>` page."
msgstr "本页面提供了在 Windows 上从源代码构建 RQt 的特定信息。在继续查看 :doc:`RQt 源代码安装页面 <RQt-Source-Install>` 之前，请按照这些说明进行操作。@{"calib_text": " `[772] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=772>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:12
msgid "If you have not done so, follow the :doc:`ROS 2 Windows Development Setup guide <../Installation/Alternatives/Windows-Development-Setup>` before continuing."
msgstr "如果您还没有这样做，请在继续之前按照 :doc:`ROS 2 Windows Development Setup guide <../Installation/Alternatives/Windows-Development-Setup>` 进行设置。@{"calib_text": " `[773] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=773>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:17
msgid "Windows 10"
msgstr "Windows 10@{"calib_text": " `[774] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=774>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:18
msgid "Visual Studio 15.7.6"
msgstr "Visual Studio 15.7.6@{"calib_text": " `[775] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=775>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:20
msgid "Currently Visual Studio 15.8 fails to build ROS 2 (`see issue <https://github.com/osrf/osrf_testing_tools_cpp/issues/15>`__). Older versions of VS can be found `here <https://docs.microsoft.com/en-us/visualstudio/productinfo/installing-an-earlier-release-of-vs2017>`__."
msgstr "当前的 Visual Studio 15.8 无法构建 ROS 2（`请参阅问题 <https://github.com/osrf/osrf_testing_tools_cpp/issues/15>`__）。可以在 `这里找到 <https://docs.microsoft.com/en-us/visualstudio/productinfo/installing-an-earlier-release-of-vs2017>`__ 较旧版本的 VS。@{"calib_text": " `[776] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=776>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:27
msgid "The primary dependencies of the RQt package are sip and PyQt5. PySide2 may be supported in the future. Even though they are provided through PyPI and chocolatey, you must install them by source to get compatible versions."
msgstr "RQt软件包的主要依赖项是sip和PyQt5。PySide2可能在将来得到支持。尽管它们通过PyPI和chocolatey提供，但您必须通过源代码安装它们以获得兼容的版本。@{"calib_text": " `[777] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=777>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:32
msgid "Install sip by source"
msgstr "通过源代码安装sip@{"calib_text": " `[778] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=778>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:34
msgid "Download from https://www.riverbankcomputing.com/software/sip/download"
msgstr "从https://www.riverbankcomputing.com/software/sip/download下载@{"calib_text": " `[779] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=779>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:36
msgid "Run the x64 Native Tools Command Prompt as Administrator, and ``cd`` to the uncompressed source directory."
msgstr "以管理员身份运行x64本机工具命令提示符，并``cd``到未压缩的源目录。@{"calib_text": " `[780] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=780>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:38
msgid "Run:"
msgstr "运行：@{"calib_text": " `[781] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=781>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:46
msgid "If ``python3`` is installed on your system as ``python``, be sure to use that program name instead."
msgstr "如果您的系统上安装的是 ``python3``，请确保使用该程序名称。@{"calib_text": " `[782] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=782>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:49
msgid "Install PyQt5 by source"
msgstr "通过源码安装 PyQt5@{"calib_text": " `[783] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=783>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:51
msgid "Download from https://www.riverbankcomputing.com/software/pyqt/download5"
msgstr "从 https://www.riverbankcomputing.com/software/pyqt/download5 下载@{"calib_text": " `[784] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=784>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:53
msgid "Run the x64 Native Tools Command Prompt as Administrator, and ``cd`` to the uncompressed source directory. I ran into trouble with Qt 5.11.3 and PyQt5 compiling QtNfc, but it can be easily disabled."
msgstr "以管理员身份运行 x64 本机工具命令提示符，并``cd``到未压缩的源目录。我在编译 QtNfc 时遇到了 Qt 5.11.3 和 PyQt5 的问题，但可以很容易地禁用它。@{"calib_text": " `[785] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=785>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:63
msgid "Test that it works"
msgstr "测试它是否正常工作@{"calib_text": " `[786] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=786>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:65
msgid "If install occurred without failure, try the commands below. They should run without issue and you should see 4.19.13 as your ``sip.exe`` version."
msgstr "如果安装没有出现错误，请尝试以下命令。它们应该能够正常运行，您应该看到您的``sip.exe``版本为 4.19.13。@{"calib_text": " `[787] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=787>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:75
msgid "Other dependencies"
msgstr "其他依赖项@{"calib_text": " `[788] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=788>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:77
msgid "Install GraphViz from https://graphviz.gitlab.io/_pages/Download/Download_windows.html."
msgstr "从 https://graphviz.gitlab.io/_pages/Download/Download_windows.html 安装 GraphViz。@{"calib_text": " `[789] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=789>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:79
msgid "Install ``pydot`` and ``pyparsing``:"
msgstr "安装 ``pydot`` 和 ``pyparsing``：@{"calib_text": " `[790] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=790>`_ "}@"


#: ../../source/How-To-Guides/RQt-Source-Install-Windows10.rst:86
msgid "PyGraphViz is a test dependency of ``qt_dotgraph``, but it is currently unsupported on Windows and building by source is not straight forward. Manually merging this patch is the currently recommended solution (not verified): `pygraphviz patch <https://github.com/Kagami/pygraphviz/commit/fe442dc16accb629c3feaf157af75f67ccabbd6e>`__"
msgstr "PyGraphViz 是 ``qt_dotgraph`` 的一个测试依赖项，但它目前不支持在 Windows 上构建，且通过源代码构建并不直接。手动合并此补丁是当前推荐的解决方案（未经验证）：`pygraphviz 补丁 <https://github.com/Kagami/pygraphviz/commit/fe442dc16accb629c3feaf157af75f67ccabbd6e>`__@{"calib_text": " `[791] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=791>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:2
msgid "First Time Release"
msgstr "首次发布@{"calib_text": " `[792] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=792>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:4
msgid "This guide explains how to release ROS 2 packages that you have not released before. Due to numerous options available when releasing ROS packages, this guide intends to cover the most common scenario and does not cover every corner-case."
msgstr "本指南解释了如何发布尚未发布的ROS 2软件包。由于在发布ROS软件包时有许多选项可用，本指南旨在涵盖最常见的情况，不涵盖每个特例。@{"calib_text": " `[793] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=793>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:12
msgid "Be part of a release team"
msgstr "成为发布团队的一员@{"calib_text": " `[794] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=794>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:14
msgid "You must be part of a :ref:`release team <what-is-a-release-team>`. If you are not part of a release team yet, follow either:"
msgstr "您必须是一个:ref:`发布团队 <what-is-a-release-team>`的成员。如果您还不是发布团队的一员，请按照以下方式之一进行操作：@{"calib_text": " `[795] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=795>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:17
msgid ":ref:`Join a release team <join-a-release-team>`"
msgstr ":ref:`加入发布团队 <join-a-release-team>`@{"calib_text": " `[796] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=796>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:18
msgid ":ref:`Start a new release team <start-a-new-release-team>`"
msgstr "：ref:`启动一个新的发布团队 <start-a-new-release-team>`@{"calib_text": " `[797] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=797>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:21 ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:62
msgid "Create a new release repository"
msgstr "创建一个新的发布仓库@{"calib_text": " `[798] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=798>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:23
msgid "You need a :ref:`release repository <what-is-a-release-repository>` to release a package. Follow :ref:`Create a new release repository <create-a-new-release-repository>`."
msgstr "你需要一个：ref:`发布仓库 <what-is-a-release-repository>`来发布一个软件包。请按照：ref:`创建一个新的发布仓库 <create-a-new-release-repository>`进行操作。@{"calib_text": " `[799] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=799>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Install-Dependencies.rst:1
msgid "Install tools that you will use in the upcoming steps according to your platform:"
msgstr "根据你的平台安装你将在接下来的步骤中使用的工具：@{"calib_text": " `[800] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=800>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Install-Dependencies.rst:5
msgid "Debian (eg. Ubuntu)"
msgstr "Debian（例如 Ubuntu）@{"calib_text": " `[801] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=801>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Install-Dependencies.rst:11
msgid "RPM (eg. RHEL)"
msgstr "RPM（例如 RHEL）@{"calib_text": " `[802] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=802>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Install-Dependencies.rst:17
msgid "Other"
msgstr "其他@{"calib_text": " `[803] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=803>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:32
msgid "Set Up a Personal Access Token"
msgstr "设置个人访问令牌@{"calib_text": " `[804] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=804>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Personal-Access-Token.rst:3
msgid "If the file ``~/.config/bloom`` exists on your computer, it is likely that you have done this before so you should skip this section."
msgstr "如果您的计算机上存在文件 ``~/.config/bloom``，那么您很可能之前已经进行过这个操作，所以您应该跳过此部分。@{"calib_text": " `[805] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=805>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Personal-Access-Token.rst:5
msgid "During the release process, multiple HTTPS Git operations will be performed that require password authentication. To avoid being repeatedly asked for a password, a `Personal Access Token (PAT) <https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token>`_ will be set up. If you have multi-factor authentication setup on your GitHub account, you **must** setup a Personal Access Token."
msgstr "在发布过程中，将执行多个需要密码验证的 HTTPS Git 操作。为了避免反复询问密码，将设置一个 `个人访问令牌 (PAT) <https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token>`_。如果您的 GitHub 帐户已设置了多因素身份验证，**必须** 设置一个个人访问令牌。@{"calib_text": " `[806] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=806>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Personal-Access-Token.rst:9
msgid "Create a Personal Access Token by:"
msgstr "按照以下步骤创建个人访问令牌：@{"calib_text": " `[807] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=807>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Personal-Access-Token.rst:11
msgid "Log in to GitHub and go to `Personal access tokens <https://github.com/settings/tokens>`_."
msgstr "登录 GitHub 并转到 `个人访问令牌 <https://github.com/settings/tokens>`_。@{"calib_text": " `[808] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=808>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Personal-Access-Token.rst:12
msgid "Click the **Generate new token** button."
msgstr "点击 **生成新令牌** 按钮。@{"calib_text": " `[809] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=809>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Personal-Access-Token.rst:13
msgid "Set **Note** to something like ``Bloom token``."
msgstr "将 **Note** 设置为类似于 ``Bloom token`` 的内容。@{"calib_text": " `[810] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=810>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Personal-Access-Token.rst:14
msgid "Set **Expiration** to **No expiration**."
msgstr "将 **Expiration** 设置为 **无过期时间**。@{"calib_text": " `[811] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=811>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Personal-Access-Token.rst:15
msgid "Tick the ``public_repo`` and ``workflow`` checkboxes."
msgstr "选中 ``public_repo`` 和 ``workflow`` 复选框。@{"calib_text": " `[812] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=812>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Personal-Access-Token.rst:16
msgid "Click the **Generate token** button."
msgstr "点击 **生成令牌** 按钮。@{"calib_text": " `[813] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=813>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Personal-Access-Token.rst:18
msgid "After you have created the token, you will end up back at the *Personal access tokens* page. **Copy the alphanumeric token** that is highlighted in green."
msgstr "创建令牌后，您将返回到*个人访问令牌*页面。**复制突出显示的绿色字母数字令牌**。@{"calib_text": " `[814] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=814>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Personal-Access-Token.rst:21
msgid "Save your GitHub username and PAT to a new file called ``~/.config/bloom``, with the format below:"
msgstr "将您的GitHub用户名和PAT保存到名为``~/.config/bloom``的新文件中，格式如下：@{"calib_text": " `[815] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=815>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:37 ../../source/How-To-Guides/Releasing/Subsequent-Releases.rst:26
msgid "Ensure repositories are up-to-date"
msgstr "确保存储库是最新的。@{"calib_text": " `[816] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=816>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Ensure-Repositories-Are-Up-To-Date.rst:1
msgid "Make sure that:"
msgstr "请确保：@{"calib_text": " `[817] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=817>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Ensure-Repositories-Are-Up-To-Date.rst:3
msgid "Your repository is hosted on a remote such as GitHub."
msgstr "您的代码仓库已托管在诸如GitHub之类的远程服务器上。@{"calib_text": " `[818] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=818>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Ensure-Repositories-Are-Up-To-Date.rst:4
msgid "You have a clone of the repository on your computer and are on the right branch."
msgstr "您在计算机上克隆了该代码仓库，并且处于正确的分支上。@{"calib_text": " `[819] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=819>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Ensure-Repositories-Are-Up-To-Date.rst:5
msgid "Both the remote repository and your clone are up-to-date."
msgstr "远程代码仓库和您的克隆版本都是最新的。@{"calib_text": " `[820] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=820>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:42
msgid "Generate Changelog"
msgstr "生成变更日志@{"calib_text": " `[821] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=821>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:44
msgid "Generate a ``CHANGELOG.rst`` file per package in your repo using the following command:"
msgstr "使用以下命令为您的仓库中的每个软件包生成一个 ``CHANGELOG.rst`` 文件：@{"calib_text": " `[822] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=822>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Clean-Up-Changelog.rst:1
msgid "Open all ``CHANGELOG.rst`` files in an editor. You will see that ``catkin_generate_changelog`` has auto-generated a forthcoming section with notes from commit messages:"
msgstr "在编辑器中打开所有的 ``CHANGELOG.rst`` 文件。您会看到 ``catkin_generate_changelog`` 自动生成了一个即将发布的部分，其中包含了提交信息的注释：@{"calib_text": " `[823] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=823>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Clean-Up-Changelog.rst:15
msgid "Clean up the list of commit messages to concisely convey the notable changes that have been made to the packages since the last release, and **commit all the CHANGELOG.rst files.** Do not modify the ``Forthcoming`` header."
msgstr "整理提交信息列表，以简明扼要地传达自上次发布以来软件包所做的重要更改，并**提交所有的 CHANGELOG.rst 文件。**不要修改 ``Forthcoming`` 标题。@{"calib_text": " `[824] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=824>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:53 ../../source/How-To-Guides/Releasing/Subsequent-Releases.rst:42
msgid "Bump the package version"
msgstr "提升软件包版本@{"calib_text": " `[825] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=825>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Bump-Package-Version.rst:1
msgid "Every release of the package must have a unique version number higher than the previous release. Run:"
msgstr "每个软件包的发布版本必须具有比上一个发布版本更高的唯一版本号。运行：@{"calib_text": " `[826] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=826>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Bump-Package-Version.rst:8
msgid "which performs the following:"
msgstr "执行以下操作：@{"calib_text": " `[827] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=827>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Bump-Package-Version.rst:10
msgid "increases the package version in ``package.xml``"
msgstr "在``package.xml``中增加软件包版本@{"calib_text": " `[828] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=828>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Bump-Package-Version.rst:11
msgid "replaces the heading ``Forthcoming`` with ``version (date)`` (eg. ``0.0.1 (2022-01-08)``) in ``CHANGELOG.rst``"
msgstr "在``CHANGELOG.rst``文件中用``版本（日期）``（例如``0.0.1（2022-01-08）``）替换``即将发布``标题@{"calib_text": " `[829] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=829>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Bump-Package-Version.rst:12
msgid "commits those changes"
msgstr "提交这些更改@{"calib_text": " `[830] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=830>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Bump-Package-Version.rst:13
msgid "creates a tag (eg. ``0.0.1``)"
msgstr "创建一个标签（例如``0.0.1``）@{"calib_text": " `[831] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=831>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Bump-Package-Version.rst:14
msgid "pushes the changes and the tag to your remote repository"
msgstr "将更改和标签推送到您的远程存储库@{"calib_text": " `[832] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=832>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Bump-Package-Version.rst:18
msgid "By default the patch version of the package is incremented, such as from ``0.0.0`` to ``0.0.1``. To increment the minor or major version instead, run ``catkin_prepare_release --bump minor`` or ``catkin_prepare_release --bump major``. For more details, see ``catkin_prepare_release --help``."
msgstr "默认情况下，软件包的补丁版本会递增，例如从``0.0.0``增加到``0.0.1``。若要递增次要版本或主要版本，请运行``catkin_prepare_release --bump minor``或``catkin_prepare_release --bump major``命令。有关详细信息，请参阅``catkin_prepare_release --help``。@{"calib_text": " `[833] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=833>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:58 ../../source/How-To-Guides/Releasing/Subsequent-Releases.rst:47
msgid "Bloom Release"
msgstr "Bloom发布@{"calib_text": " `[834] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=834>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:60
msgid "Run the following command, replacing ``my_repo`` with the name of your repository:"
msgstr "运行以下命令，将``my_repo``替换为您的仓库名称：@{"calib_text": " `[835] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=835>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:68
msgid "``--new-track`` tells bloom to create a new :ref:`track <what-is-a-track>` and configure it."
msgstr "``--new-track``指示bloom创建一个新的:ref:`轨道 <what-is-a-track>`并进行配置。@{"calib_text": " `[836] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=836>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:69
msgid "``--rosdistro humble`` indicates that this release is for the ``humble`` distro"
msgstr "``--rosdistro humble`` 表示这个版本适用于 ``humble`` 发行版@{"calib_text": " `[837] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=837>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:70
msgid "``--track humble`` indicates that you want the track name to be ``humble``"
msgstr "``--track humble`` 表示你想要将轨道名称设为 ``humble``@{"calib_text": " `[838] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=838>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:73
msgid "You will be prompted to enter information to configure a new track. In a common scenario such as:"
msgstr "将提示你输入信息以配置一个新的轨道。在常见的场景中，比如：@{"calib_text": " `[839] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=839>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:76
msgid "Your packages are in a repository called ``my_repo``"
msgstr "你的软件包存储在一个名为 ``my_repo`` 的仓库中@{"calib_text": " `[840] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=840>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:77
msgid "You are releasing a branch called ``main``"
msgstr "你正在发布一个名为 ``main`` 的分支@{"calib_text": " `[841] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=841>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:78
msgid "The repository is hosted on GitHub at ``https://github.com/my_organization/my_repo.git``"
msgstr "该代码库托管在 GitHub 上，地址为 ``https://github.com/my_organization/my_repo.git``@{"calib_text": " `[842] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=842>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:79
msgid "Your release repository is at ``https://github.com/ros2-gbp/my_repo-release.git``"
msgstr "你的发布代码库位于 ``https://github.com/ros2-gbp/my_repo-release.git``@{"calib_text": " `[843] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=843>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:81
msgid "You should respond to the prompts as following:"
msgstr "你应按照以下提示进行回答：@{"calib_text": " `[844] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=844>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:87
msgid "Configuration"
msgstr "配置@{"calib_text": " `[845] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=845>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:88
msgid "Value"
msgstr "值@{"calib_text": " `[846] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=846>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:89
msgid ":ref:`Release Repository url <release-repository-url>`"
msgstr ":ref:`发布仓库网址 <release-repository-url>`@{"calib_text": " `[847] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=847>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:90
msgid "``https://github.com/ros2-gbp/my_repo-release.git``"
msgstr "``https://github.com/ros2-gbp/my_repo-release.git``@{"calib_text": " `[848] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=848>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:91
msgid ":ref:`Repository Name <repository-name>`"
msgstr ":ref:`存储库名称 <repository-name>`@{"calib_text": " `[849] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=849>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:92
msgid "``my_repo``"
msgstr "``my_repo``@{"calib_text": " `[850] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=850>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:93
msgid ":ref:`Upstream Repository URI <upstream-repository-uri>`"
msgstr ":ref:`上游存储库URI <upstream-repository-uri>`@{"calib_text": " `[851] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=851>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:94
msgid "``https://github.com/my_organization/my_repo.git``"
msgstr "``https://github.com/my_organization/my_repo.git``@{"calib_text": " `[852] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=852>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:95
msgid ":ref:`Upstream VCS Type <upstream-vcs-type>`"
msgstr ":ref:`上游版本控制系统类型 <upstream-vcs-type>`@{"calib_text": " `[853] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=853>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:97
msgid ":ref:`Version <version>`"
msgstr ":ref:`版本 <version>`@{"calib_text": " `[854] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=854>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:99
msgid ":ref:`Release Tag <release-tag>`"
msgstr ":ref:`发布标签 <release-tag>`@{"calib_text": " `[855] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=855>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:101
msgid ":ref:`Upstream Devel Branch <upstream-devel-branch>`"
msgstr ":ref:`上游开发分支 <upstream-devel-branch>`@{"calib_text": " `[856] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=856>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:102
msgid "``main``"
msgstr "``main``@{"calib_text": " `[857] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=857>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:103
msgid ":ref:`ROS Distro <ros-distro>`"
msgstr ":ref:`ROS发行版 <ros-distro>`@{"calib_text": " `[858] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=858>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:105
msgid ":ref:`Patches Directory <patches-directory>`"
msgstr ":ref:`补丁目录 <patches-directory>`@{"calib_text": " `[859] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=859>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:107
msgid ":ref:`Release Repository Push URL <release-repository-push-url>`"
msgstr ":ref:`发布仓库推送URL <release-repository-push-url>`@{"calib_text": " `[860] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=860>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:112
msgid "An empty cell in the table indicates that the default value should be used. Simply respond to the prompt by pressing Enter."
msgstr "表格中的空单元格表示应使用默认值。只需按Enter键回答提示即可。@{"calib_text": " `[861] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=861>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:115 ../../source/How-To-Guides/Releasing/Subsequent-Releases.rst:55
msgid "Bloom will automatically create a pull request for you against `rosdistro <https://github.com/ros/rosdistro>`_."
msgstr "Bloom将自动为您创建针对`rosdistro <https://github.com/ros/rosdistro>`_的拉取请求。@{"calib_text": " `[862] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=862>`_ "}@"


#: ../../source/How-To-Guides/Releasing/First-Time-Release.rst:118 ../../source/How-To-Guides/Releasing/Subsequent-Releases.rst:58
msgid "Next Steps"
msgstr "下一步@{"calib_text": " `[863] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=863>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Next-Steps.rst:1
msgid "Once your pull request has been submitted, usually within one or two days, one of the maintainers of rosdistro will review and merge your Pull Request. If your package build is successful, in 24-48 hours your packages will become available in the **ros-testing** repository, where you can :doc:`test your pre-release binaries <../../../Installation/Testing>`."
msgstr "一旦您的拉取请求被提交，通常在一两天内，rosdistro的维护人员将会审查并合并您的拉取请求。如果您的软件包构建成功，在24-48小时内，您的软件包将会在**ros-testing**存储库中可用，您可以在那里:doc:`测试预发布的二进制文件 <../../../Installation/Testing>`。@{"calib_text": " `[864] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=864>`_ "}@"


#: ../../source/How-To-Guides/Releasing/_Next-Steps.rst:4
msgid "Approximately every two to four weeks, the distribution's release manager manually synchronizes the contents of ros-testing into the main ROS repository. This is when your packages actually become available to the rest of the ROS community. To get updates on when the next synchronization (sync) is coming, subscribe to the `Packaging and Release Management Category on ROS Discourse <https://discourse.ros.org/c/release/16>`_."
msgstr "大约每两到四周，发行版的发布经理会手动将ros-testing的内容与主要ROS仓库同步。这时候你的软件包才会真正对整个ROS社区可用。要获取下一次同步的更新信息，请订阅ROS Discourse上的“打包和发布管理”分类：<https://discourse.ros.org/c/release/16>。@{"calib_text": " `[865] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=865>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:2
msgid "Release Team / Repository"
msgstr "发布团队/仓库@{"calib_text": " `[866] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=866>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:8
msgid "This page explains the recommended method of hosting your release repositories on `ros2-gbp <https://github.com/ros2-gbp>`_."
msgstr "本页面介绍了在`ros2-gbp <https://github.com/ros2-gbp>`_上托管发布仓库的推荐方法。@{"calib_text": " `[867] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=867>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:11
msgid "What is ROS 2 GBP?"
msgstr "什么是ROS 2 GBP？@{"calib_text": " `[868] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=868>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:13
msgid "`ros2-gbp <https://github.com/ros2-gbp>`_ is a GitHub organization that hosts the release repositories for ROS packages. It also maintains a list of release teams, the list of members per release team and the list of release repositories maintained by the release teams in https://github.com/ros2-gbp/ros2-gbp-github-org. Interactions with ros2-gbp-github-org are done through raising GitHub issues. It is recommended that you request to join a release team and set up a release repository early as it can take some time for the ros2-gbp maintainers to respond to your requests."
msgstr "`ros2-gbp <https://github.com/ros2-gbp>`_ 是一个托管 ROS 软件包发布仓库的 GitHub 组织。它还维护了发布团队的列表，每个发布团队的成员列表以及发布团队维护的发布仓库列表，链接为 https://github.com/ros2-gbp/ros2-gbp-github-org。与 ros2-gbp-github-org 的交互是通过提出 GitHub 问题来完成的。建议您尽早申请加入发布团队并设置发布仓库，因为 ros2-gbp 的维护人员可能需要一些时间来回复您的请求。@{"calib_text": " `[869] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=869>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:21
msgid "What is a release team?"
msgstr "什么是发布团队？@{"calib_text": " `[870] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=870>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:23
msgid "A release team is a `GitHub team <https://docs.github.com/en/organizations/organizing-members-into-teams/about-teams>`_ that consists of a group of people who are responsible for the release process of one or more repositories. Release teams are often made up of an organization, a working group, or even an individual, and are named after the team or group that they represent. The list of release teams and their associated release repositories are maintained at `ros2-gbp-github-org <https://github.com/ros2-gbp/ros2-gbp-github-org>`_."
msgstr "发布团队是由一组人负责一个或多个仓库的发布流程的 `GitHub 团队 <https://docs.github.com/en/organizations/organizing-members-into-teams/about-teams>`_ 。发布团队通常由一个组织、一个工作组甚至一个个人组成，并以他们所代表的团队或组的名称命名。发布团队及其关联的发布仓库列表在 `ros2-gbp-github-org <https://github.com/ros2-gbp/ros2-gbp-github-org>`_ 上进行维护。@{"calib_text": " `[871] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=871>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:27
msgid "**You must be a part of the release team that you are planning on releasing the project for.** If you intend to release the repository under an existing team, follow :ref:`Join a release team <join-a-release-team>`. If you intend to start a new team, follow :ref:`Start a new release team <start-a-new-release-team>`."
msgstr "**您必须是您计划发布项目的发布团队的一部分。** 如果您打算在现有团队下发布仓库，请参考 :ref:`加入发布团队 <join-a-release-team>`。如果您打算启动一个新团队，请参考 :ref:`启动新的发布团队 <start-a-new-release-team>`。@{"calib_text": " `[872] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=872>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:34
msgid "Join a release team"
msgstr "加入一个发布团队@{"calib_text": " `[873] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=873>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:36
msgid "Fill the `Update Release Team Membership issue <https://github.com/ros2-gbp/ros2-gbp-github-org/issues/new?assignees=&labels=&template=update_release_team_membership.md&title=Update+release+team+membership>`_ issue template if a release team already exists for your project but you are not part of it."
msgstr "如果您的项目已经有一个发布团队，但您尚未加入其中，请填写 `更新发布团队成员问题 <https://github.com/ros2-gbp/ros2-gbp-github-org/issues/new?assignees=&labels=&template=update_release_team_membership.md&title=Update+release+team+membership>`_ 问题模板。@{"calib_text": " `[874] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=874>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:42
msgid "Start a new release team"
msgstr "创建一个新的发布团队@{"calib_text": " `[875] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=875>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:44
msgid "Fill the `New Release Team issue <https://github.com/ros2-gbp/ros2-gbp-github-org/issues/new?assignees=&labels=&template=new_release_team.md&title=Add+release+team>`_ issue template if no release team exists for your project yet, request for a new release team to be created."
msgstr "如果您的项目尚未有发布团队，请填写 `新建发布团队问题 <https://github.com/ros2-gbp/ros2-gbp-github-org/issues/new?assignees=&labels=&template=new_release_team.md&title=Add+release+team>`_ 问题模板，请求创建一个新的发布团队。@{"calib_text": " `[876] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=876>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:50
msgid "What is a release repository?"
msgstr "什么是发布仓库？@{"calib_text": " `[877] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=877>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:52
msgid "A release repository is a repository that"
msgstr "发布仓库是一个存储从发布流程生成的文件的仓库，供ROS构建工厂使用。@{"calib_text": " `[878] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=878>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:54
msgid "stores files generated from the release process, for the ROS buildfarm to use"
msgstr "发布仓库存储了发布流程中生成的文件，供ROS构建工厂使用。@{"calib_text": " `[879] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=879>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:55
msgid "caches configurations from the release process to simplify subsequent releases of the repository in the future"
msgstr "发布仓库还缓存了发布流程中的配置，以简化将来对仓库进行的后续发布。@{"calib_text": " `[880] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=880>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:57
msgid "Having a release repository separate from your source code repository is a requirement for making a release in ROS 2."
msgstr "在ROS 2中，将发布仓库与源代码仓库分开是发布的要求。@{"calib_text": " `[881] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=881>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:64
msgid "If your repository is new to the ROS community, you should first open a pull request on `ros/rosdistro <https://github.com/ros/rosdistro>`_ adding a ``source`` entry for your repository. The review process for the rosdistro database will ensure your repository and packages conform to the `REP 144 package naming conventions <https://www.ros.org/reps/rep-0144.html>`_ and other requirements before release. Once your package name has been approved and merged, fill in the `Add New Release Repositories issue <https://github.com/ros2-gbp/ros2-gbp-github-org/issues/new?assignees=&labels=&template=new_release_repository.md&title=Add+new+release+repositories>`_ issue template if you don't have a release repo for your project yet."
msgstr "如果您的仓库对ROS社区是新的，请首先在 `ros/rosdistro <https://github.com/ros/rosdistro>`_ 上开启一个拉取请求，添加一个 ``source`` 条目用于您的仓库。rosdistro数据库的审核过程将确保您的仓库和软件包符合 `REP 144软件包命名约定 <https://www.ros.org/reps/rep-0144.html>`_ 和其他发布要求。一旦您的软件包名称获得批准并合并，如果您的项目还没有发布仓库，请填写 `Add New Release Repositories issue <https://github.com/ros2-gbp/ros2-gbp-github-org/issues/new?assignees=&labels=&template=new_release_repository.md&title=Add+new+release+repositories>`_ 问题模板。@{"calib_text": " `[882] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=882>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:70
msgid "What if my existing release repo isn't on ros2-gbp?"
msgstr "如果我的现有发布仓库不在ros2-gbp上怎么办？@{"calib_text": " `[883] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=883>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:72
msgid "Packages released before ros2-gbp existed may have their release repositories hosted elsewhere. It is now strongly recommended for release repositories to live in this dedicated GitHub organization. If you are porting a ROS 1 package to ROS 2 and planning on releasing your packages into ROS 2 for the first time, follow standard procedure to request for a new release repository for your ROS 2 releases. If you have previously released your packages for ROS 2, when raising the `Add New Release Repositories issue <https://github.com/ros2-gbp/ros2-gbp-github-org/issues/new?assignees=&labels=&template=new_release_repository.md&title=Add+new+release+repositories>`_, **specify your current release repository url**, and follow standard procedure for the rest."
msgstr "在ros2-gbp出现之前发布的软件包可能在其他地方托管其发布仓库。现在强烈建议将发布仓库放在这个专用的GitHub组织中。如果您要将ROS 1软件包移植到ROS 2，并计划首次将您的软件包发布到ROS 2中，请按照标准程序请求为您的ROS 2发布获取新的发布仓库。如果您以前发布过ROS 2的软件包，在提出 `Add New Release Repositories issue <https://github.com/ros2-gbp/ros2-gbp-github-org/issues/new?assignees=&labels=&template=new_release_repository.md&title=Add+new+release+repositories>`_ 时，**指定您当前的发布仓库URL**，并按照其余的标准程序操作。@{"calib_text": " `[884] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=884>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:79
msgid "Release repositories hosted elsewhere are still supported for stable distributions if you are not planning to release the repository into Rolling. Since stable distributions created from Rolling will start with release repositories in the ros2-gbp organization it is recommend that you use the ros2-gbp release repositories for all ROS 2 distributions to avoid fragmenting the release information."
msgstr "如果您不打算将存储库发布为Rolling，那么从其他地方托管的发布存储库仍然支持稳定版本。由于从Rolling创建的稳定版本将从ros2-gbp组织中的发布存储库开始，建议您在所有ROS 2版本中使用ros2-gbp发布存储库，以避免发布信息的分散。@{"calib_text": " `[885] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=885>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Team-Repository.rst:82
msgid "A ros2-gbp release repository may become a hard requirement in the future and maintaining a single release repository for all ROS 2 distributions simplifies the maintenance of releases for both the Rolling distribution maintainers and package maintainers."
msgstr "在未来，ros2-gbp发布存储库可能成为硬性要求，并且为所有ROS 2版本维护单个发布存储库可以简化Rolling版本维护人员和软件包维护人员对发布的维护。@{"calib_text": " `[886] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=886>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:2
msgid "Release Track"
msgstr "发布跟踪@{"calib_text": " `[887] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=887>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:11
msgid "What is a Track?"
msgstr "什么是跟踪？@{"calib_text": " `[888] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=888>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:13
msgid "Bloom requires the user to enter configuration information when releasing packages for the first time. It is beneficial to store such configurations in the release repository so we don't have to manually enter configurations that won't change for subsequent releases."
msgstr "Bloom 在首次发布软件包时需要用户输入配置信息。将这些配置存储在发布仓库中是有益的，这样我们就不必为后续发布手动输入不会更改的配置信息。@{"calib_text": " `[889] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=889>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:16
msgid "Since some of the configurations will differ when releasing the package for different ROS distributions, bloom uses **release tracks to store the configurations for releasing** per distribution. By convention you should create tracks with the same name as the ROS distro you are releasing for."
msgstr "由于在为不同的 ROS 发行版发布软件包时，某些配置会有所不同，bloom 使用**发布轨道来存储每个发行版的发布配置**。按照惯例，应该使用与要发布的 ROS 发行版名称相同的轨道名称来创建轨道。@{"calib_text": " `[890] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=890>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:19
msgid "All release track configurations are stored in ``tracks.yaml`` on the master branch of your release repository."
msgstr "所有发布轨道的配置信息存储在发布仓库的主分支上的 ``tracks.yaml`` 文件中。@{"calib_text": " `[891] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=891>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:22
msgid "Track Configurations"
msgstr "轨道配置@{"calib_text": " `[892] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=892>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:24
msgid "Track configurations are explained in more detail along with the prompts from bloom."
msgstr "更详细地解释了与bloom一起使用的跟踪配置。@{"calib_text": " `[893] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=893>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:29
msgid "Release Repository url"
msgstr "发布存储库网址@{"calib_text": " `[894] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=894>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:31
msgid "This is the url of your release repository, and should be of form ``https://github.com/ros2-gbp/my_repo-release.git`` if your release repository is hosted on ros2-gbp."
msgstr "这是您发布存储库的网址，如果您的发布存储库托管在ros2-gbp上，它应该采用``https://github.com/ros2-gbp/my_repo-release.git``的形式。@{"calib_text": " `[895] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=895>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:38
msgid "Paste your release repository URL and press Enter."
msgstr "粘贴您的发布存储库网址并按Enter键。@{"calib_text": " `[896] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=896>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:40
msgid "Bloom may additionally ask you about initializing the new repository, as following:"
msgstr "此外，Bloom可能会询问您有关初始化新存储库的情况，如下所示：@{"calib_text": " `[897] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=897>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:48
msgid "Simply press Enter to accept the default of yes."
msgstr "只需按回车键接受默认的是。@{"calib_text": " `[898] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=898>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:53
msgid "Repository Name"
msgstr "存储库名称@{"calib_text": " `[899] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=899>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:55
msgid "The repository name is trivial, but it is recommended to set this to the name of your project."
msgstr "存储库名称很简单，但建议将其设置为您的项目名称。@{"calib_text": " `[900] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=900>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:66
msgid "Type the name of your project (eg. ``my_project``) and press Enter."
msgstr "输入项目名称（例如 ``my_project``）并按 Enter 键。@{"calib_text": " `[901] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=901>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:71
msgid "Upstream Repository URI"
msgstr "上游存储库 URI@{"calib_text": " `[902] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=902>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:73
msgid "The **upstream repository** is the repository where your source code is. This is most likely an https link to your project hosted on a git hosting service such as GitHub or GitLab."
msgstr "**上游存储库** 是您的源代码所在的存储库。这很可能是指指向托管在 GitHub 或 GitLab 等 git 托管服务上的项目的 https 链接。@{"calib_text": " `[903] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=903>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:85
msgid "Make sure you **use the https address** (eg. ``https://github.com/my_organization/my_repo.git``) and not the ssh address."
msgstr "确保**使用 https 地址**（例如 ``https://github.com/my_organization/my_repo.git``），而不是 ssh 地址。@{"calib_text": " `[904] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=904>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:90
msgid "Upstream VCS Type"
msgstr "上游版本控制系统类型@{"calib_text": " `[905] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=905>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:92
msgid "This is the `Upstream Repository URI`_'s version control system (VCS) type. You must specify the type of vcs your repository is using, from  ``svn``, ``git``, ``hg`` or ``tar``."
msgstr "这是`上游仓库URI`_的版本控制系统（VCS）类型。您必须指定仓库使用的VCS类型，可以选择``svn``、``git``、``hg``或``tar``。@{"calib_text": " `[906] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=906>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:108
msgid "Most repositories will be using git, but some legacy repositories might be using hg or svn."
msgstr "大多数仓库将使用git，但某些旧版本仓库可能使用hg或svn。@{"calib_text": " `[907] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=907>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:113
msgid "Version"
msgstr "版本@{"calib_text": " `[908] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=908>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:115
msgid "This is the version of the package you are releasing. (eg. ``1.0.3``)"
msgstr "这是您发布的软件包的版本。(例如，``1.0.3``)@{"calib_text": " `[909] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=909>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:132
msgid "Setting this to ``:{auto}`` (the default, and recommended setup) will automatically determine the version from the devel branch's package.xml."
msgstr "将其设置为``:{auto}``（默认设置，推荐使用）将自动从devel分支的package.xml文件中确定版本。@{"calib_text": " `[910] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=910>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:134
msgid "Setting this to ``:{ask}`` will bring up a prompt asking for the version every time you run a release with bloom."
msgstr "将其设置为``:{ask}``将在每次使用bloom进行发布时弹出提示，要求您输入版本号。@{"calib_text": " `[911] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=911>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:139
msgid "Release Tag"
msgstr "发布标签@{"calib_text": " `[912] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=912>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:141
msgid "The Release Tag refers to which tag or branch you want to import the code from."
msgstr "发布标签（Release Tag）是指您要从中导入代码的标签或分支。@{"calib_text": " `[913] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=913>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:162
msgid "Setting this to ``:{version}`` (the default, and recommended setup) will make the release tag match the version tag."
msgstr "将其设置为 ``:{version}``（默认设置，也是推荐设置）将使发布标签与版本标签匹配。@{"calib_text": " `[914] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=914>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:164
msgid "A less common setup is to set this to a branch name to always pull in that branch at the time of release from the upstream project."
msgstr "一种较少见的设置是将其设置为分支名称，以便始终在发布时从上游项目中拉取该分支。@{"calib_text": " `[915] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=915>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:166
msgid "Alternatively, if you want to be prompted to enter a different tag every time you do a release, enter ``:{ask}``. ``:{ask}`` is useful if the upstream project has frequent tagged releases and you want to refer to the new tag every time you're releasing."
msgstr "或者，如果您希望每次发布时都提示输入不同的标签，请输入 ``:{ask}``。``:{ask}`` 在上游项目频繁进行标记发布并且您希望每次发布时引用新的标签时很有用。@{"calib_text": " `[916] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=916>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:172
msgid "Upstream Devel Branch"
msgstr "上游开发分支@{"calib_text": " `[917] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=917>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:174
msgid "The upstream devel branch is the name of the branch in your :ref:`upstream repository <upstream-repository-uri>`. If you use separate branches for each ROS distribution, this field would be different for each release track. It is used to determine the version of the package you are releasing when :ref:`Version` is set to ``:{auto}``."
msgstr "上游开发分支是你的:ref:`上游存储库 <upstream-repository-uri>`中分支的名称。如果你为每个ROS发行版使用单独的分支，那么每个发布跟踪的这个字段都会不同。它用于确定在设置:ref:`版本`为``:{auto}``时你正在发布的软件包的版本。@{"calib_text": " `[918] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=918>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:186
msgid "To release from a branch called ``humble``, enter ``humble``. Leaving this as ``None`` would result in the version being determined from the default branch of your repository (this is not recommended)."
msgstr "要从名为``humble``的分支发布，请输入``humble``。将其保留为``None``将导致版本从存储库的默认分支确定（不建议这样做）。@{"calib_text": " `[919] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=919>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:192
msgid "ROS Distro"
msgstr "ROS发行版@{"calib_text": " `[920] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=920>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:194
msgid "This is the distribution you're planning on releasing the package into."
msgstr "这是你计划发布软件包的发行版。@{"calib_text": " `[921] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=921>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:203
msgid "If you plan on releasing into ROS humble, enter ``humble``."
msgstr "如果你计划发布到ROS humble，请输入``humble``。@{"calib_text": " `[922] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=922>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:208
msgid "Patches Directory"
msgstr "补丁目录@{"calib_text": " `[923] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=923>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:210
msgid "This is the directory where any additional patches to the releases are."
msgstr "这是用于发布版本的任何额外补丁的目录。@{"calib_text": " `[924] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=924>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:225
msgid "Adding additional patches to a release is a rarely used feature. For almost all packages, this should be left as the default ``None``."
msgstr "将额外的补丁添加到发布版本是一个很少使用的功能。对于几乎所有软件包，应该将其保留为默认值 ``None``。@{"calib_text": " `[925] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=925>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:231
msgid "Release Repository Push URL"
msgstr "发布存储库推送 URL@{"calib_text": " `[926] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=926>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Release-Track.rst:245
msgid "Can be left as the default in most cases."
msgstr "在大多数情况下，可以将其保留为默认值。@{"calib_text": " `[927] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=927>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Releasing-a-Package.rst:9
msgid "Releasing a Package"
msgstr "发布软件包@{"calib_text": " `[928] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=928>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Releasing-a-Package.rst:19
msgid "**Releasing a package makes your package available on the public ROS 2 buildfarm.** This will:"
msgstr "**发布软件包会使您的软件包在公共ROS 2构建系统上可用。**这将会：@{"calib_text": " `[929] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=929>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Releasing-a-Package.rst:22
msgid "Make your package available to be installed via package managers (eg. ``apt`` on Ubuntu) for all supported Linux platforms in a ROS distribution as described in `REP 2000 <https://ros.org/reps/rep-2000.html>`_."
msgstr "使您的软件包可通过软件包管理器（例如Ubuntu上的``apt``）在ROS发行版的所有支持的Linux平台上进行安装，具体请参阅`REP 2000 <https://ros.org/reps/rep-2000.html>`_。@{"calib_text": " `[930] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=930>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Releasing-a-Package.rst:23
msgid "Allow your package to have API documentation automatically generated."
msgstr "允许自动生成您的软件包的API文档。@{"calib_text": " `[931] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=931>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Releasing-a-Package.rst:24
msgid "Make your package part of the `ROS Index <https://index.ros.org>`_."
msgstr "使您的软件包成为`ROS Index <https://index.ros.org>`_的一部分。@{"calib_text": " `[932] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=932>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Releasing-a-Package.rst:25
msgid "(Optionally) Allow you to have automatic CI run for pull requests in your repository."
msgstr "（可选）允许您在存储库中的拉取请求上运行自动 CI。@{"calib_text": " `[933] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=933>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Releasing-a-Package.rst:27
msgid "**Follow one of the guides below to get your package released:**"
msgstr "**按照以下指南之一发布您的软件包：**@{"calib_text": " `[934] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=934>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Releasing-a-Package.rst:29
msgid ":doc:`First Time Release <First-Time-Release>` - if this is the first release for the package"
msgstr ":doc:`首次发布 <First-Time-Release>` - 如果这是软件包的首次发布@{"calib_text": " `[935] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=935>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Releasing-a-Package.rst:30
msgid ":doc:`Subsequent Releases <Subsequent-Releases>` - if you are releasing a new version of a package that has already been released"
msgstr ":doc:`后续发布 <Subsequent-Releases>` - 如果您要发布已经发布过的软件包的新版本@{"calib_text": " `[936] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=936>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Releasing-a-Package.rst:32
msgid "After successfully following the instructions, your package will be released into the ROS ecosystem on the next distro synchronization!"
msgstr "成功按照指示操作后，您的软件包将在下一次发行版本同步中被发布到ROS生态系统中！@{"calib_text": " `[937] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=937>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Subsequent-Releases.rst:2
msgid "Subsequent Releases"
msgstr "后续发布@{"calib_text": " `[938] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=938>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Subsequent-Releases.rst:4
msgid "This guide explains how to release new versions of ROS packages that have already been released before."
msgstr "本指南介绍了如何发布已经发布过的ROS软件包的新版本。@{"calib_text": " `[939] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=939>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Subsequent-Releases.rst:11
msgid "Be part of the release team"
msgstr "成为发布团队的一员@{"calib_text": " `[940] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=940>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Subsequent-Releases.rst:13
msgid "If you are not part of the release team that has write access to the release repository, follow :ref:`Join a release team <join-a-release-team>`."
msgstr "如果您不是具有对发布存储库的写入访问权限的发布团队成员，请参阅 :ref:`加入发布团队 <join-a-release-team>`。@{"calib_text": " `[941] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=941>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Subsequent-Releases.rst:21
msgid "Set up a Personal Access Token"
msgstr "设置个人访问令牌@{"calib_text": " `[942] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=942>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Subsequent-Releases.rst:31
msgid "Updating Changelog"
msgstr "更新变更日志@{"calib_text": " `[943] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=943>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Subsequent-Releases.rst:33
msgid "For your users and for the developers, keep the changelog concise and up to date."
msgstr "为了您的用户和开发人员，请确保变更日志简明扼要且保持最新。@{"calib_text": " `[944] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=944>`_ "}@"


#: ../../source/How-To-Guides/Releasing/Subsequent-Releases.rst:49
msgid "Run the following command, replacing ``my_repo`` with the name of your repository with the packages:"
msgstr "运行以下命令，将``my_repo``替换为包含软件包的存储库名称：@{"calib_text": " `[945] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=945>`_ "}@"


#: ../../source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst:8
msgid "Running ROS 2 nodes in Docker [community-contributed]"
msgstr "在 Docker 中运行 ROS 2 节点[社区贡献]@{"calib_text": " `[946] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=946>`_ "}@"


#: ../../source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst:11
msgid "Run two nodes in a single docker container"
msgstr "在单个 Docker 容器中运行两个节点@{"calib_text": " `[947] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=947>`_ "}@"


#: ../../source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst:13
msgid "Pull the ROS docker image with tag \"humble-desktop\"."
msgstr "使用标签为“humble-desktop”的 ROS Docker 镜像拉取镜像。@{"calib_text": " `[948] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=948>`_ "}@"


#: ../../source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst:20
msgid "Run the image in a container in interactive mode."
msgstr "在交互模式下在容器中运行镜像。@{"calib_text": " `[949] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=949>`_ "}@"


#: ../../source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst:28
msgid "Your best friend is the ``ros2`` command line help now."
msgstr "现在您最好的朋友是 ``ros2`` 命令行帮助。@{"calib_text": " `[950] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=950>`_ "}@"


#: ../../source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst:35
msgid "E.g. list all installed packages."
msgstr "例如，列出所有已安装的软件包。@{"calib_text": " `[951] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=951>`_ "}@"


#: ../../source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst:43
msgid "E.g. list all executables:"
msgstr "例如，列出所有可执行文件：@{"calib_text": " `[952] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=952>`_ "}@"


#: ../../source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst:51
msgid "Run a minimal example of 2 C++ nodes (1 topic subscriber ``listener``, 1 topic publisher ``talker``) from the package ``demo_nodes_cpp`` in this container:"
msgstr "在此容器中运行一个名为 ``demo_nodes_cpp`` 的软件包中的两个C++节点（一个主题订阅者 ``listener``，一个主题发布者 ``talker``）的最简示例：@{"calib_text": " `[953] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=953>`_ "}@"


#: ../../source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst:59
msgid "Run two nodes in two separate docker containers"
msgstr "在两个单独的Docker容器中运行两个节点。@{"calib_text": " `[954] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=954>`_ "}@"


#: ../../source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst:61
msgid "Open a terminal. Run the image in a container in interactive mode and launch a topic publisher (executable ``talker`` from the package ``demo_nodes_cpp``) with ``ros2 run``:"
msgstr "打开一个终端。以交互模式在容器中运行图像，并使用 ``ros2 run`` 启动一个主题发布者（软件包 ``demo_nodes_cpp`` 中的可执行文件 ``talker``）：@{"calib_text": " `[955] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=955>`_ "}@"


#: ../../source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst:67
msgid "Open a second terminal. Run the image in a container in interactive mode and launch a topic subscriber (executable ``listener`` from the package ``demo_nodes_cpp``)  with ``ros2 run``:"
msgstr "打开第二个终端。以交互模式在容器中运行图像，并使用 ``ros2 run`` 启动一个主题订阅者（软件包 ``demo_nodes_cpp`` 中的可执行文件 ``listener``）：@{"calib_text": " `[956] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=956>`_ "}@"


#: ../../source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst:73
msgid "As an alternative to the command line invocation, you can create a ``docker-compose.yml`` file (here version 2) with the following (minimal) content:"
msgstr "作为命令行调用的替代方案，您可以创建一个名为``docker-compose.yml``的文件（版本2），其内容如下（最小化）：@{"calib_text": " `[957] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=957>`_ "}@"


#: ../../source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst:89
msgid "To run the containers call ``docker compose up`` in the same directory. You can close the containers with ``Ctrl+C``."
msgstr "要运行容器，请在相同目录中调用``docker compose up``。您可以使用``Ctrl+C``关闭容器。@{"calib_text": " `[958] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=958>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:2
msgid "Setup ROS 2 with VSCode and Docker [community-contributed]"
msgstr "使用VSCode和Docker设置ROS 2 [社区贡献]@{"calib_text": " `[959] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=959>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:11
msgid "Install VS Code and Docker"
msgstr "安装VS Code和Docker@{"calib_text": " `[960] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=960>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:14
msgid "Using Visual Studio Code and Docker Containers will enable you to run your favorite ROS 2 Distribution without the necessity to change your operating system or use a virtual machine. With this tutorial you can set up a docker container, which can be used for your future ROS 2 projects."
msgstr "使用Visual Studio Code和Docker容器，您可以在无需更改操作系统或使用虚拟机的情况下运行您喜爱的ROS 2发行版。通过本教程，您可以设置一个Docker容器，用于您未来的ROS 2项目。@{"calib_text": " `[961] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=961>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:19
msgid "Install Docker"
msgstr "安装Docker@{"calib_text": " `[962] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=962>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:22
msgid "To install docker and set the correct user rights please use the following commands."
msgstr "要安装Docker并设置正确的用户权限，请使用以下命令。@{"calib_text": " `[963] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=963>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:34
msgid "Now you can check if the installation was successful by running the following command:"
msgstr "现在，您可以通过运行以下命令来检查安装是否成功：@{"calib_text": " `[964] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=964>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:40
msgid "You might need to start the Docker Daemon first, if you cannot run hello-world out of the box:"
msgstr "如果您无法直接运行 hello-world，请先启动 Docker 守护进程：@{"calib_text": " `[965] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=965>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:47
msgid "Install VS Code"
msgstr "安装 VS Code@{"calib_text": " `[966] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=966>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:49
msgid "To install VS Code please use the following commands:"
msgstr "请使用以下命令安装 VS Code：@{"calib_text": " `[967] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=967>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:60
msgid "You can run VS Code by typing ``code`` in a terminal."
msgstr "您可以在终端中输入“code”来运行 VS Code。@{"calib_text": " `[968] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=968>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:64
msgid "Install Remote Development Extension"
msgstr "安装远程开发扩展@{"calib_text": " `[969] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=969>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:67
msgid "Within VS Code search in Extensions (CTRL+SHIFT+X) for the \"Remote Development\" Extension and install it."
msgstr "在VS Code中搜索扩展（CTRL+SHIFT+X），找到“远程开发”扩展并安装它。@{"calib_text": " `[970] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=970>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:71
msgid "Configure workspace in Docker and VS Code"
msgstr "配置Docker和VS Code工作区@{"calib_text": " `[971] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=971>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:74
msgid "Add your ROS 2 workspace"
msgstr "添加你的ROS 2工作区@{"calib_text": " `[972] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=972>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:77
msgid "Add a workspace in order to build and open them in a container, e.g.:"
msgstr "添加一个工作空间以便在容器中构建和打开它们，例如：@{"calib_text": " `[973] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=973>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:86
msgid "Now create a .devcontainer folder in the root of your workspace and add a devcontainer.json and Dockerfile to this .devcontainer folder. Additionally, you need to create a cache folder in which you can cache the build and install folders for different ROS 2 distros. The workspace structure should look like this:"
msgstr "现在在工作空间的根目录下创建一个 .devcontainer 文件夹，并在该文件夹中添加 devcontainer.json 和 Dockerfile。此外，您需要创建一个缓存文件夹，用于缓存不同的 ROS 2 发行版的构建和安装文件夹。工作空间的结构应该如下所示：@{"calib_text": " `[974] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=974>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:108
msgid "With ``File->Open Folder...`` or ``Ctrl+K Ctrl+O``, open the ``src`` folder of your workspace in VS Code."
msgstr "使用 ``文件->打开文件夹...`` 或 ``Ctrl+K Ctrl+O``，在 VS Code 中打开您的工作空间的 ``src`` 文件夹。@{"calib_text": " `[975] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=975>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:111
msgid "Edit devcontainer.json for your environment"
msgstr "根据您的环境编辑 devcontainer.json@{"calib_text": " `[976] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=976>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:113
msgid "For the Dev Container to function properly, we have to build it with the correct user. Therefore add the following to ``.devcontainer/devcontainer.json``:"
msgstr "为了使开发容器正常运行，我们必须使用正确的用户构建它。因此，请在 ``.devcontainer/devcontainer.json`` 中添加以下内容：@{"calib_text": " `[977] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=977>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:163
msgid "Use ``Ctrl+F`` to open the search and replace menu. Search for ``USERNAME`` and replace it with your ``Linux username``. If you do not know your username, you can find it by running ``echo $USERNAME`` in the terminal. Also replace ``ROS_DISTRO``, with the ROS 2 distribution that you want to use and added to the cache previously, for example, \"humble\" or \"foxy\"."
msgstr "使用 ``Ctrl+F`` 打开搜索和替换菜单。搜索 ``USERNAME`` 并用您的 ``Linux 用户名`` 进行替换。如果您不知道您的用户名，可以在终端中运行 ``echo $USERNAME`` 来找到它。同时用您想要使用并且已经添加到缓存中的 ROS 2 发行版替换 ``ROS_DISTRO``，例如 \"humble\" 或 \"foxy\"。@{"calib_text": " `[978] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=978>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:171
msgid "Edit Dockerfile"
msgstr "编辑 Dockerfile@{"calib_text": " `[979] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=979>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:173
msgid "Open the Dockerfile and add the following contents:"
msgstr "打开 Dockerfile 并添加以下内容：@{"calib_text": " `[980] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=980>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:204
msgid "Search here also for the ``USERNAME`` and replace it with your ``Linux username`` and the ``ROS_DISTRO`` with the ROS 2 distribution you wish to use and added to the cache previously."
msgstr "在此处搜索``USERNAME``并用您的``Linux用户名``替换，将``ROS_DISTRO``替换为您希望使用的ROS 2发行版，并将其添加到之前的缓存中。@{"calib_text": " `[981] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=981>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:208
msgid "Open and Build Development Container"
msgstr "打开并构建开发容器@{"calib_text": " `[982] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=982>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:210
msgid "Use ``View->Command Palette...`` or ``Ctrl+Shift+P`` to open the command palette. Search for the command ``Dev Containers: (Re-)build and Reopen in Container`` and execute it. This will build your development docker container for your. It will take a while - sit back or go for a coffee."
msgstr "使用``View->Command Palette...``或``Ctrl+Shift+P``打开命令面板。搜索命令``Dev Containers: (Re-)build and Reopen in Container``并执行它。这将为您构建开发 Docker 容器。这需要一些时间，请坐下或去喝杯咖啡。@{"calib_text": " `[983] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=983>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:216
msgid "Test Container"
msgstr "测试容器@{"calib_text": " `[984] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=984>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:218
msgid "To test if everything worked correctly, open a terminal in the container using ``View->Terminal`` or ``Ctrl+Shift+``` and ``New Terminal`` in VS Code. Inside the terminal do the following:"
msgstr "为了测试是否一切正常工作，请在容器中打开一个终端，使用 ``查看->终端`` 或者在VS Code中使用 ``Ctrl+Shift+` `` 并选择 ``新终端``。在终端内执行以下操作：@{"calib_text": " `[985] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=985>`_ "}@"


#: ../../source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst:227
msgid "There might be a problem with displaying RVIZ. If no window pops up, then check the value of ``echo $DISPLAY`` - if the output is 1, you can fix this problem with ``echo \"export DISPLAY=unix:1\" >> /etc/bash.bashrc`` and then test it again. You can also change the DISPLAY value in the devcontainer.json and rebuild it."
msgstr "可能存在显示RVIZ的问题。如果没有弹出窗口，请检查 ``echo $DISPLAY`` 的值——如果输出为1，您可以通过 ``echo \"export DISPLAY=unix:1\" >> /etc/bash.bashrc`` 来解决此问题，然后再次进行测试。您还可以在 devcontainer.json 中更改 DISPLAY 的值并重新构建。@{"calib_text": " `[986] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=986>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:9
msgid "Synchronous vs. asynchronous service clients"
msgstr "同步与异步服务客户端@{"calib_text": " `[987] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=987>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:11
msgid "**Level:** Intermediate"
msgstr "**级别：** 中级@{"calib_text": " `[988] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=988>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:13
msgid "**Time:** 10 minutes"
msgstr "**时间:** 10分钟@{"calib_text": " `[989] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=989>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:21
msgid "Introduction"
msgstr "介绍@{"calib_text": " `[990] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=990>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:23
msgid "This guide is intended to warn users of the risks associated with the Python synchronous service client ``call()`` API. It is very easy to mistakenly cause deadlock when calling services synchronously, so we do not recommend using ``call()``."
msgstr "本指南旨在提醒用户有关与Python同步服务客户端``call()`` API相关的风险。在调用服务时，很容易错误地导致死锁，因此我们不建议使用``call()``。@{"calib_text": " `[991] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=991>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:26
msgid "We provide an example on how to use ``call()`` correctly for experienced users who wish to use synchronous calls and are aware of the pitfalls. We also highlight possible scenarios for deadlock that accompany it."
msgstr "对于希望使用同步调用并且了解其中陷阱的有经验的用户，我们提供了正确使用``call()``的示例。我们还强调了可能导致死锁的情景。@{"calib_text": " `[992] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=992>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:29
msgid "Because we recommend avoiding sync calls, this guide will also address the features and usage of the recommended alternative, async calls (``call_async()``)."
msgstr "因为我们建议避免使用同步调用，所以本指南还将介绍推荐替代方案异步调用（``call_async()``）的功能和用法。@{"calib_text": " `[993] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=993>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:31
msgid "The C++ service call API is only available in async, so the comparisons and examples in this guide pertain to Python services and clients. The definition of async given here generally applies to C++, with some exceptions."
msgstr "C++服务调用API仅支持异步调用，因此本指南中的比较和示例适用于Python服务和客户端。此处给出的异步定义通常也适用于C++，但存在一些例外情况。@{"calib_text": " `[994] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=994>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:35
msgid "1 Synchronous calls"
msgstr "1 同步调用@{"calib_text": " `[995] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=995>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:37
msgid "A synchronous client will block the calling thread when sending a request to a service until a response has been received; nothing else can happen on that thread during the call. The call can take arbitrary amounts of time to complete. Once complete, the response returns directly to the client."
msgstr "在发送请求到服务时，同步客户端会阻塞调用线程，直到接收到响应；在调用过程中该线程无法执行其他任务。调用的完成时间可以是任意长。一旦完成，响应直接返回给客户端。@{"calib_text": " `[996] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=996>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:41
msgid "The following is an example of how to correctly execute a synchronous service call from a client node, similar to the async node in the :doc:`Simple Service and Client <../Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client>` tutorial."
msgstr "以下是一个正确执行同步服务调用的示例，类似于教程中的异步节点（:doc:`简单服务和客户端 </../Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client>`）。@{"calib_text": " `[997] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=997>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:88
msgid "Note inside ``main()`` that the client calls ``rclpy.spin`` in a separate thread. Both ``send_request`` and ``rclpy.spin`` are blocking, so they need to be on separate threads."
msgstr "请注意，在 ``main()`` 中，客户端在单独的线程中调用 ``rclpy.spin``。``send_request`` 和 ``rclpy.spin`` 都是阻塞的，因此它们需要在不同的线程中执行。@{"calib_text": " `[998] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=998>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:92
msgid "1.1 Sync deadlock"
msgstr "1.1 同步死锁@{"calib_text": " `[999] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=999>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:94
msgid "There are several ways that the synchronous ``call()`` API can cause deadlock."
msgstr "同步的 ``call()`` API 可能会导致死锁的几种方式。@{"calib_text": " `[1000] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1000>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:96
msgid "As mentioned in the comments of the example above, failing to create a separate thread to spin ``rclpy`` is one cause of deadlock. When a client is blocking a thread waiting for a response, but the response can only be returned on that same thread, the client will never stop waiting, and nothing else can happen."
msgstr "如上例的评论中提到的，未能创建一个单独的线程来运行 ``rclpy`` 是造成死锁的一个原因。当客户端阻塞一个线程等待响应，但是响应只能在同一线程上返回时，客户端将永远等待，而其他任何操作都无法进行。@{"calib_text": " `[1001] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1001>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:99
msgid "Another cause of deadlock is blocking ``rclpy.spin`` by calling a service synchronously in a subscription, timer callback or service callback. For example, if the synchronous client's ``send_request`` is placed in a callback:"
msgstr "另一个造成死锁的原因是在订阅、定时器回调或服务回调中同步调用服务导致阻塞了 ``rclpy.spin``。例如，如果将同步客户端的 ``send_request`` 放在回调中：@{"calib_text": " `[1002] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1002>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:113
msgid "Deadlock occurs because ``rclpy.spin`` will not preempt the callback with the ``send_request`` call. In general, callbacks should only perform light and fast operations."
msgstr "死锁发生是因为 ``rclpy.spin`` 不会在回调中与 ``send_request`` 调用进行抢占。一般情况下，回调函数应该只执行轻量且快速的操作。@{"calib_text": " `[1003] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1003>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:118
msgid "When deadlock occurs, you will not receive any indication that the service is blocked. There will be no warning or exception thrown, no indication in the stack trace, and the call will not fail."
msgstr "当发生死锁时，你将不会收到任何关于服务被阻塞的指示。不会有警告或异常抛出，堆栈跟踪中也没有指示，调用也不会失败。@{"calib_text": " `[1004] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1004>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:122
msgid "2 Asynchronous calls"
msgstr "2 异步调用@{"calib_text": " `[1005] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1005>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:124
msgid "Async calls in ``rclpy`` are entirely safe and the recommended method of calling services. They can be made from anywhere without running the risk of blocking other ROS and non-ROS processes, unlike sync calls."
msgstr "在 ``rclpy`` 中，异步调用是完全安全且推荐的调用服务的方法。与同步调用不同，它们可以在任何地方进行，而不会阻塞其他ROS和非ROS进程的运行风险。@{"calib_text": " `[1006] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1006>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:127
msgid "An asynchronous client will immediately return ``future``, a value that indicates whether the call and response is finished (not the value of the response itself), after sending a request to a service. The returned ``future`` may be queried for a response at any time."
msgstr "在向服务发送请求后，异步客户端会立即返回一个表示调用和响应是否完成的 ``future`` 值（而不是响应本身的值）。可以随时查询返回的 ``future`` 是否有响应。@{"calib_text": " `[1007] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1007>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:130
msgid "Since sending a request doesn’t block anything, a loop can be used to both spin ``rclpy`` and check ``future`` in the same thread, for example:"
msgstr "由于发送请求不会阻塞任何操作，可以使用循环在同一线程中既运行 ``rclpy`` 又检查 ``future``，例如：@{"calib_text": " `[1008] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1008>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:139
msgid "The :doc:`Simple Service and Client <../Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client>` tutorial for Python illustrates how to perform an async service call and retrieve the ``future`` using a loop."
msgstr "Python的教程 :doc:`简单的服务和客户端 <../Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client>` 展示了如何使用循环执行异步服务调用并检索 ``future``。@{"calib_text": " `[1009] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1009>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:141
msgid "The ``future`` can also be retrieved using a timer or callback, like in `this example <https://github.com/ros2/examples/blob/humble/rclpy/services/minimal_client/examples_rclpy_minimal_client/client_async_callback.py>`_, a dedicated thread, or by another method. It is up to you, as the caller, to decide how to store ``future``, check on its status, and retrieve your response."
msgstr "``future`` 也可以使用定时器或回调来检索，就像在 `这个示例 <https://github.com/ros2/examples/blob/humble/rclpy/services/minimal_client/examples_rclpy_minimal_client/client_async_callback.py>`_ 中一样，可以使用专用线程或其他方法。作为调用者，您可以自行决定如何存储 ``future``，检查其状态并检索响应。@{"calib_text": " `[1010] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1010>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:145
msgid "Summary"
msgstr "总结@{"calib_text": " `[1011] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1011>`_ "}@"


#: ../../source/How-To-Guides/Sync-Vs-Async.rst:147
msgid "It is not recommended to implement a synchronous service client. They are susceptible to deadlock, but will not provide any indication of issue when deadlock occurs. If you must use synchronous calls, the example in section `1 Synchronous calls`_ is a safe method of doing so. You should also be aware of the conditions that cause deadlock outlined in section `1.1 Sync deadlock`_. We recommend using async service clients instead."
msgstr "不推荐实现同步服务客户端。它们容易发生死锁，但当死锁发生时不会提供任何问题指示。如果必须使用同步调用，可以使用 `1 同步调用`_ 部分中的示例来安全地进行。您还应该了解在 `1.1 同步死锁`_ 部分中概述的导致死锁的条件。我们推荐使用异步服务客户端。@{"calib_text": " `[1012] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1012>`_ "}@"


#: ../../source/How-To-Guides/Topics-Services-Actions.rst:4
msgid "Topics vs Services vs Actions"
msgstr "主题 vs 服务 vs 动作@{"calib_text": " `[1013] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1013>`_ "}@"


#: ../../source/How-To-Guides/Topics-Services-Actions.rst:10
msgid "When designing a system there are three primary styles of interfaces. The specifications for the content is in the :doc:`Interfaces Overview <../Concepts/Basic/About-Interfaces>`. This is written to provide the reader with guidelines about when to use each type of interface."
msgstr "When designing a system there are three primary styles of interfaces. The specifications for the content is in the :doc:`Interfaces Overview <../Concepts/Basic/About-Interfaces>`. This is written to provide the reader with guidelines about when to use each type of interface.@{"calib_text": " `[\u6821\u51c6] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16029>`_ "}@"


#: ../../source/How-To-Guides/Topics-Services-Actions.rst:15
msgid "Topics"
msgstr "主题@{"calib_text": " `[1015] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1015>`_ "}@"


#: ../../source/How-To-Guides/Topics-Services-Actions.rst:17
msgid "Should be used for continuous data streams (sensor data, robot state, ...)."
msgstr "应该用于连续的数据流（传感器数据、机器人状态等）。@{"calib_text": " `[1016] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1016>`_ "}@"


#: ../../source/How-To-Guides/Topics-Services-Actions.rst:18
msgid "Are for continuous data flow. Data might be published and subscribed at any time independent of any senders/receivers. Many to many connection. Callbacks receive data once it is available. The publisher decides when data is sent."
msgstr "适用于连续的数据流。数据可以在任何时间发布和订阅，独立于任何发送者/接收者。多对多的连接。回调函数在数据可用时接收数据。发布者决定何时发送数据。@{"calib_text": " `[1017] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1017>`_ "}@"


#: ../../source/How-To-Guides/Topics-Services-Actions.rst:21
msgid "Services"
msgstr "服务@{"calib_text": " `[1018] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1018>`_ "}@"


#: ../../source/How-To-Guides/Topics-Services-Actions.rst:23
msgid "Should be used for remote procedure calls that terminate quickly, e.g. for querying the state of a node or doing a quick calculation such as IK. They should never be used for longer running processes, in particular processes that might be required to preempt if exceptional situations occur and they should never change or depend on state to avoid unwanted side effects for other nodes."
msgstr "应用于快速终止的远程过程调用，例如查询节点状态或进行快速计算，如逆运动学。不应用于较长时间运行的进程，特别是在出现异常情况时可能需要抢占的进程，并且不应根据状态进行更改或依赖状态，以避免对其他节点产生意外的副作用。@{"calib_text": " `[1019] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1019>`_ "}@"


#: ../../source/How-To-Guides/Topics-Services-Actions.rst:24
msgid "Simple blocking call. Mostly used for comparably fast tasks as requesting specific data. Semantically for processing requests."
msgstr "简单的阻塞调用。主要用于相对较快的任务，如请求特定数据。语义上用于处理请求。@{"calib_text": " `[1020] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1020>`_ "}@"


#: ../../source/How-To-Guides/Topics-Services-Actions.rst:27
msgid "Actions"
msgstr "动作@{"calib_text": " `[1021] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1021>`_ "}@"


#: ../../source/How-To-Guides/Topics-Services-Actions.rst:29
msgid "Should be used for any discrete behavior that moves a robot or that runs for a longer time but provides feedback during execution."
msgstr "应该用于任何移动机器人或在执行过程中提供反馈的持续性行为。@{"calib_text": " `[1022] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1022>`_ "}@"


#: ../../source/How-To-Guides/Topics-Services-Actions.rst:30
msgid "The most important property of actions is that they can be preempted and preemption should always be implemented cleanly by action servers."
msgstr "动作的最重要属性是可以被抢占，而且抢占应该始终由动作服务器进行干净地实现。@{"calib_text": " `[1023] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1023>`_ "}@"


#: ../../source/How-To-Guides/Topics-Services-Actions.rst:31
msgid "Actions can keep state for the lifetime of a goal, i.e. if executing two action goals in parallel on the same server, for each client a separate state instance can be kept since the goal is uniquely identified by its id."
msgstr "动作可以在目标的生命周期内保持状态，即在同一个服务器上并行执行两个动作目标时，可以针对每个客户端保持单独的状态实例，因为目标由其 ID 唯一标识。@{"calib_text": " `[1024] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1024>`_ "}@"


#: ../../source/How-To-Guides/Topics-Services-Actions.rst:32
msgid "Slow perception routines which take several seconds to terminate or initiating a lower-level control mode are good use cases for actions."
msgstr "慢的感知例程需要几秒钟才能终止或启动较低级别的控制模式，这是使用动作的好例子。@{"calib_text": " `[1025] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1025>`_ "}@"


#: ../../source/How-To-Guides/Topics-Services-Actions.rst:33
msgid "More complex non-blocking background processing. Used for longer tasks like execution of robot actions. Semantically for real-world actions."
msgstr "更复杂的非阻塞后台处理。用于执行机器人动作等较长时间的任务。在语义上用于真实世界的动作。@{"calib_text": " `[1026] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1026>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:9
msgid "Using Python Packages with ROS 2"
msgstr "在ROS 2中使用Python包@{"calib_text": " `[1027] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1027>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:11
msgid "**Goal:** Explain how to interoperate with other Python packages from the ROS 2 ecosystem."
msgstr "**目标：**解释如何与ROS 2生态系统中的其他Python包进行互操作。@{"calib_text": " `[1028] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1028>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:19
msgid "A cautionary note, if you intended to use pre-packaged binaries (either ``deb`` files, or the “fat” binary distributions), the Python interpreter must match what was used to build the original binaries. If you intend to use something like ``virtualenv`` or ``pipenv``\\, make sure to use the system interpreter. If you use something like ``conda``, it is very likely that the interpreter will not match the system interpreter and will be incompatible with ROS 2 binaries."
msgstr "请注意，如果您打算使用预编译的二进制文件（无论是``deb``文件还是“fat”二进制发行版），Python解释器必须与用于构建原始二进制文件的解释器相匹配。如果您打算使用类似于``virtualenv``或``pipenv``的工具，请确保使用系统解释器。如果您使用类似于``conda``的工具，很可能解释器与系统解释器不匹配，且与ROS 2的二进制文件不兼容。@{"calib_text": " `[1029] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1029>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:24
msgid "Installing via ``rosdep``"
msgstr "通过``rosdep``进行安装@{"calib_text": " `[1030] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1030>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:26
msgid "The fastest way to include third-party python packages is to use their corresponding rosdep keys, if available.  ``rosdep`` keys can be checked via:"
msgstr "包含第三方Python包的最快方法是使用它们对应的``rosdep``键（如果可用）。可以通过以下方式检查``rosdep``键：@{"calib_text": " `[1031] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1031>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:28
msgid "https://github.com/ros/rosdistro/blob/master/rosdep/base.yaml"
msgstr "https://github.com/ros/rosdistro/blob/master/rosdep/base.yaml@{"calib_text": " `[1032] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1032>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:29
msgid "https://github.com/ros/rosdistro/blob/master/rosdep/python.yaml"
msgstr "https://github.com/ros/rosdistro/blob/master/rosdep/python.yaml@{"calib_text": " `[1033] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1033>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:31
msgid "These ``rosdep`` keys can be added to your ``package.xml`` file, which indicates to the build system that your package (and dependent packages) depend on those keys. In a new workspace, you can also quickly install all rosdep keys with:"
msgstr "这些``rosdep``键可以添加到您的``package.xml``文件中，指示构建系统您的软件包（以及依赖软件包）依赖于这些键。在新的工作空间中，您还可以使用以下命令快速安装所有rosdep键：@{"calib_text": " `[1034] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1034>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:38
msgid "If there aren’t currently ``rosdep`` keys for the package that you are interested in, it is possible to add them by following the `rosdep key contribution guide`_."
msgstr "如果您感兴趣的软件包目前没有相应的``rosdep``键，可以按照`rosdep键贡献指南`_进行添加。@{"calib_text": " `[1035] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1035>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:40
msgid "To learn more about the ``rosdep`` tool and how it works, consult the `rosdep documentation`_."
msgstr "要了解更多关于``rosdep``工具及其工作原理的信息，请参阅`rosdep文档`_。@{"calib_text": " `[1036] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1036>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:43
msgid "Installing via a package manager"
msgstr "通过软件包管理器安装@{"calib_text": " `[1037] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1037>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:45
msgid "If you don’t want to make a rosdep key, but the package is available in your system package manager (eg ``apt``), you can install and use the package that way:"
msgstr "如果您不想创建一个 rosdep 键，但是该软件包在系统的软件包管理器中可用（例如 ``apt``），您可以通过以下方式安装和使用该软件包：@{"calib_text": " `[1038] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1038>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:51
msgid "If the package is available on `The Python Package Index (PyPI) <https://pypi.org/>`_ and you want to install globally on your system:"
msgstr "如果该软件包在 `Python Package Index (PyPI) <https://pypi.org/>`_ 上可用，并且您想要在系统上进行全局安装：@{"calib_text": " `[1039] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1039>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:57
msgid "If the package is available on PyPI and you want to install locally to your user:"
msgstr "如果该软件包在 PyPI 上可用，并且您想要在本地安装到您的用户目录下：@{"calib_text": " `[1040] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1040>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:64
msgid "Installing via a virtual environment"
msgstr "通过虚拟环境安装@{"calib_text": " `[1041] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1041>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:66
msgid "First, create a Colcon workspace:"
msgstr "首先，创建一个 Colcon 工作空间：@{"calib_text": " `[1042] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1042>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:73
msgid "Then setup your virtual environment:"
msgstr "然后设置您的虚拟环境：@{"calib_text": " `[1043] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1043>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:83
msgid "Next, install the Python packages that you want in your virtual environment:"
msgstr "接下来，在您的虚拟环境中安装所需的 Python 包：@{"calib_text": " `[1044] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1044>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:89
msgid "Now you can build your workspace and run your python node that depends on packages installed in your virtual environment."
msgstr "现在你可以构建你的工作空间并运行依赖于虚拟环境中安装的包的 Python 节点。@{"calib_text": " `[1045] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1045>`_ "}@"


#: ../../source/How-To-Guides/Using-Python-Packages.rst:99
msgid "If you want to release your package using Bloom, you should add the packages you require to ``rosdep``, see the `rosdep key contribution guide`_."
msgstr "如果你想使用 Bloom 发布你的包，你应该将你所需的包添加到 ``rosdep`` 中，请参阅 `rosdep 关键字贡献指南`_。@{"calib_text": " `[1046] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1046>`_ "}@"


#: ../../source/How-To-Guides/Using-Variants.rst:2
msgid "Using variants"
msgstr "使用变体@{"calib_text": " `[1047] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1047>`_ "}@"


#: ../../source/How-To-Guides/Using-Variants.rst:4
msgid "Metapackages do not provide software directly but depend on a group of other related packages to provide a convienent installation mechanism for the complete group of packages. [#]_ [#]_ Variants are a list of official metapackages for commonly useful groups of ROS packages."
msgstr "元软件包不直接提供软件，而是依赖于一组其他相关软件包，以便为完整的软件包组提供便捷的安装机制。[#]_ [#]_ 变体是一组常用的 ROS 软件包的官方元软件包列表。@{"calib_text": " `[1048] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1048>`_ "}@"


#: ../../source/How-To-Guides/Using-Variants.rst:7
msgid "https://wiki.debian.org/metapackage"
msgstr "https://wiki.debian.org/metapackage@{"calib_text": " `[1049] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1049>`_ "}@"


#: ../../source/How-To-Guides/Using-Variants.rst:8
msgid "https://help.ubuntu.com/community/MetaPackages"
msgstr "https://help.ubuntu.com/community/MetaPackages@{"calib_text": " `[1050] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1050>`_ "}@"


#: ../../source/How-To-Guides/Using-Variants.rst:10
msgid "The different variants in ROS 2 are specified in `REP-2001 <https://ros.org/reps/rep-2001.html>`_."
msgstr "ROS 2中的不同变体在`REP-2001 <https://ros.org/reps/rep-2001.html>`_中有详细说明。@{"calib_text": " `[1051] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1051>`_ "}@"


#: ../../source/How-To-Guides/Using-Variants.rst:12
msgid "In addition to the official variants, there may be metapackages for specific institutions or robots as described in `REP-108 <https://www.ros.org/reps/rep-0108.html#institution-specific>`_."
msgstr "除了官方的变体外，还可能存在针对特定机构或机器人的元包，如`REP-108 <https://www.ros.org/reps/rep-0108.html#institution-specific>`_中所述。@{"calib_text": " `[1052] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1052>`_ "}@"


#: ../../source/How-To-Guides/Using-Variants.rst:15
msgid "Adding variants"
msgstr "添加变体@{"calib_text": " `[1053] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1053>`_ "}@"


#: ../../source/How-To-Guides/Using-Variants.rst:17
msgid "Additional variants that are of general use to the ROS community can be proposed by contributing an update to `REP-2001 via pull request <https://github.com/ros-infrastructure/rep/blob/master/rep-2001.rst>`_ describing the packages included in the new variant. Institution and robot specific variants can be published directly by their respective maintainers and no update to REP-2001 is required."
msgstr "对于ROS社区有用的其他变体可以通过向`REP-2001提出更新的方式 <https://github.com/ros-infrastructure/rep/blob/master/rep-2001.rst>`_ 来提议。在更新中描述所包含的新变体中的软件包。机构和机器人特定的变体可以直接由各自的维护者发布，不需要对REP-2001进行更新。@{"calib_text": " `[1054] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1054>`_ "}@"


#: ../../source/How-To-Guides/Using-Variants.rst:21
msgid "Creating project-specific variants"
msgstr "创建项目特定的变体@{"calib_text": " `[1055] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1055>`_ "}@"


#: ../../source/How-To-Guides/Using-Variants.rst:23
msgid "If you are creating ROS packages to use privately in your own projects, you can create variants specific to your projects using the official variants as examples. To do so you need only create two files:"
msgstr "如果您在自己的项目中创建ROS软件包供私人使用，您可以使用官方的变体作为示例来创建特定于您的项目的变体。要做到这一点，您只需要创建两个文件：@{"calib_text": " `[1056] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1056>`_ "}@"


#: ../../source/How-To-Guides/Using-Variants.rst:26
msgid "A minimal variant package is created as a package with the ``ament_cmake`` build type, a ``buildtool_depend`` on ``ament_cmake`` and ``exec_depend`` entries for each package you want to include in the variant."
msgstr "创建一个最小化变体包作为具有 ``ament_cmake`` 构建类型的包，其中 ``ament_cmake`` 有一个 ``buildtool_depend``，并为每个要包含在变体中的包添加 ``exec_depend`` 条目。@{"calib_text": " `[1057] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1057>`_ "}@"


#: ../../source/How-To-Guides/Using-Variants.rst:49
msgid "A minimal ament_cmake package includes a ``CMakeLists.txt`` which registers the package.xml as an ament package for use in ROS 2."
msgstr "一个最小化的 ament_cmake 包包括一个 ``CMakeLists.txt`` 文件，将 package.xml 注册为 ament 包，以便在 ROS 2 中使用。@{"calib_text": " `[1058] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1058>`_ "}@"


#: ../../source/How-To-Guides/Using-Variants.rst:59
msgid "You can then build and install your variant package alongside your other private packages."
msgstr "然后，您可以将您的变体包与其他私有包一起构建和安装。@{"calib_text": " `[1059] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1059>`_ "}@"


#: ../../source/How-To-Guides/Using-Variants.rst:62
msgid "Creating custom variants with platform-specific tools"
msgstr "使用特定于平台的工具创建自定义变体。@{"calib_text": " `[1060] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1060>`_ "}@"


#: ../../source/How-To-Guides/Using-Variants.rst:64
msgid "Some platforms have tools for creating basic packages that do not require a full ROS build farm environment or equivalent infrastructure. It is possible to use these tools to create platform-dependent variants. This approach does not include support for ROS packaging tools and is platform dependent but requires much less infrastructure to produce if you are creating collections of existing packages rather than a mix of public and private ROS packages. For example, on Debian or Ubuntu systems you can use the ``equivs`` utilities. The Debian Administrator's handbook has a `Section on meta-packages <https://www.debian.org/doc/manuals/debian-handbook/sect.building-first-package.en.html#id-1.18.5.2>`_."
msgstr "有些平台提供了创建基本包的工具，不需要完整的ROS构建环境或等效基础设施。可以使用这些工具创建平台相关的变体。这种方法不包括对ROS打包工具的支持，且是平台相关的，但如果您创建的是一组现有软件包而不是公共和私有ROS软件包的混合物，则所需的基础设施要少得多。例如，在Debian或Ubuntu系统上，您可以使用 ``equivs`` 实用工具。Debian管理员手册中有一节关于 `元软件包 <https://www.debian.org/doc/manuals/debian-handbook/sect.building-first-package.en.html#id-1.18.5.2>`_。@{"calib_text": " `[1061] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1061>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:2
msgid "Using Callback Groups"
msgstr "使用回调组@{"calib_text": " `[1062] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1062>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:4
msgid "When running a node in a Multi-Threaded Executor, ROS 2 offers callback groups as a tool for controlling the execution of different callbacks. This page is meant as a guide on how to use callback groups efficiently. It is assumed that the reader has a basic understanding about the concept of :doc:`executors <../Concepts/Intermediate/About-Executors>`."
msgstr "When running a node in a Multi-Threaded Executor, ROS 2 offers callback groups as a tool for controlling the execution of different callbacks. This page is meant as a guide on how to use callback groups efficiently. It is assumed that the reader has a basic understanding about the concept of :doc:`executors <../Concepts/Intermediate/About-Executors>`.@{"calib_text": " `[\u6821\u51c6] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16030>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:14
msgid "Basics of callback groups"
msgstr "回调组的基础知识@{"calib_text": " `[1064] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1064>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:16
msgid "When running a node in a Multi-Threaded Executor, ROS 2 offers two different types of callback groups for controlling execution of callbacks:"
msgstr "在使用多线程执行器（Multi-Threaded Executor）运行节点时，ROS 2 提供了两种不同类型的回调组（callback groups）来控制回调函数的执行：@{"calib_text": " `[1065] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1065>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:20
msgid "Mutually Exclusive Callback Group"
msgstr "互斥回调组（Mutually Exclusive Callback Group）@{"calib_text": " `[1066] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1066>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:21
msgid "Reentrant Callback Group"
msgstr "可重入回调组（Reentrant Callback Group）@{"calib_text": " `[1067] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1067>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:23
msgid "These callback groups restrict the execution of their callbacks in different ways. In short:"
msgstr "这些回调组以不同的方式限制其回调函数的执行。简而言之@{"calib_text": " `[1068] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1068>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:27
msgid "Mutually Exclusive Callback Group prevents its callbacks from being executed in parallel - essentially making it as if the callbacks in the group were executed by a SingleThreadedExecutor."
msgstr "互斥回调组阻止其回调并行执行 - 实际上使得回调组中的回调像由单线程执行器执行一样。@{"calib_text": " `[1069] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1069>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:30
msgid "Reentrant Callback Group allows the executor to schedule and execute the group's callbacks in any way it sees fit, without restrictions. This means that, in addition to different callbacks being run parallel to each other, different instances of the same callback may also be executed concurrently."
msgstr "可重入回调组允许执行器按照任意方式调度和执行组中的回调，没有任何限制。这意味着，除了不同的回调之间可以并行运行外，同一个回调的不同实例也可以同时执行。@{"calib_text": " `[1070] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1070>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:35
msgid "Callbacks belonging to different callback groups (of any type) can always be executed parallel to each other."
msgstr "属于不同回调组（任何类型）的回调始终可以并行执行。@{"calib_text": " `[1071] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1071>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:38
msgid "It is also important to keep in mind that different ROS 2 entities relay their callback group to all callbacks they spawn. For example, if one assigns a callback group to an action client, all callbacks created by the client will be assigned to that callback group."
msgstr "还要注意的是，不同的ROS 2实体将其回调组传递给它们生成的所有回调。例如，如果将回调组分配给一个动作客户端，客户端创建的所有回调都将分配给该回调组。@{"calib_text": " `[1072] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1072>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:43
msgid "Callback groups can be created by a node's ``create_callback_group`` function in rclcpp and by calling the constructor of the group in rclpy. The callback group can then be passed as argument/option when creating a subscription, timer, etc."
msgstr "回调组可以通过节点的 ``create_callback_group`` 函数在 rclcpp 中创建，并通过在 rclpy 中调用组的构造函数进行创建。当创建订阅、定时器等时，可以将回调组作为参数/选项进行传递。@{"calib_text": " `[1073] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1073>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:69
msgid "If the user does not specify any callback group when creating a subscription, timer, etc., this entity will be assigned to the node's default callback group. The default callback group is a Mutually Exclusive Callback Group and it can be queried via ``NodeBaseInterface::get_default_callback_group()`` in rclcpp and via ``Node.default_callback_group`` in rclpy."
msgstr "如果用户在创建订阅、定时器等时未指定任何回调组，则该实体将被分配给节点的默认回调组。默认回调组是一个互斥回调组，可以通过 ``NodeBaseInterface::get_default_callback_group()`` 在 rclcpp 中查询，并通过 ``Node.default_callback_group`` 在 rclpy 中查询。@{"calib_text": " `[1074] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1074>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:76
msgid "About callbacks"
msgstr "关于回调@{"calib_text": " `[1075] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1075>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:78
msgid "In the context of ROS 2 and executors, a callback means a function whose scheduling and execution is handled by an executor. Examples of callbacks in this context are"
msgstr "在 ROS 2 和执行器的上下文中，回调是指由执行器处理调度和执行的函数。在这个上下文中，回调的例子有：@{"calib_text": " `[1076] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1076>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:82
msgid "subscription callbacks (receiving and handling data from a topic),"
msgstr "订阅回调（从主题接收和处理数据），@{"calib_text": " `[1077] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1077>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:83
msgid "timer callbacks,"
msgstr "定时器回调，@{"calib_text": " `[1078] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1078>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:84
msgid "service callbacks (for executing service requests in a server),"
msgstr "服务回调（用于在服务器中执行服务请求），@{"calib_text": " `[1079] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1079>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:85
msgid "different callbacks in action servers and clients,"
msgstr "动作服务器和客户端中的不同回调，@{"calib_text": " `[1080] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1080>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:86
msgid "done-callbacks of Futures."
msgstr "Futures的完成回调。@{"calib_text": " `[1081] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1081>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:88
msgid "Below are a couple important points about callbacks that should be kept in mind when working with callback groups."
msgstr "以下是在使用回调组时需要记住的一些重要要点。@{"calib_text": " `[1082] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1082>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:91
msgid "Almost everything in ROS 2 is a callback! Every function that is run by an executor is, by definition, a callback. The non-callback functions in a ROS 2 system are found mainly at the edge of the system (user and sensor inputs etc)."
msgstr "在ROS 2中，几乎所有的东西都是回调！每个由执行器运行的函数都是回调的定义。在ROS 2系统中，非回调函数主要位于系统的边缘（用户和传感器输入等）。@{"calib_text": " `[1083] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1083>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:95
msgid "Sometimes the callbacks are hidden and their presence may not be obvious from the user/developer API. This is the case especially with any kind of “synchronous” call to a service or an action (in rclpy). For example, the synchronous call ``Client.call(request)`` to a service adds a Future's done-callback that needs to be executed during the execution of the function call, but this callback is not directly visible to the user."
msgstr "有时，回调是隐藏的，从用户/开发者API来看可能并不明显。这尤其适用于对服务或操作进行任何类型的“同步”调用（在rclpy中）。例如，对服务进行同步调用``Client.call(request)``会添加一个Future的完成回调，该回调需要在函数调用期间执行，但此回调对用户来说不直接可见。@{"calib_text": " `[1084] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1084>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:106
msgid "Controlling execution"
msgstr "控制执行@{"calib_text": " `[1085] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1085>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:108
msgid "In order to control execution with callback groups, one can consider the following guidelines."
msgstr "为了使用回调组来控制执行，可以考虑以下准则。@{"calib_text": " `[1086] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1086>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:111
msgid "For the interaction of an individual callback with itself:"
msgstr "对于一个回调函数与其自身的交互：@{"calib_text": " `[1087] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1087>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:113
msgid "Register it to a Reentrant Callback Group if it should be executed in parallel to itself. An example case could be an action/service server that needs to be able to process several action calls in parallel to each other."
msgstr "如果希望它能够与自身并行执行，将其注册到一个可重入回调组中。例如，一个需要能够并行处理多个动作调用的动作/服务服务器。@{"calib_text": " `[1088] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1088>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:117
msgid "Register it to a Mutually Exclusive Callback Group if it should **never** be executed in parallel to itself. An example case could be a timer callback that runs a control loop that publishes control commands."
msgstr "如果它**永远不应**与自身并行执行，请将其注册到一个互斥回调组中。一个示例情况可能是一个定时器回调，它运行一个控制循环以发布控制命令。@{"calib_text": " `[1089] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1089>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:120
msgid "For the interaction of different callbacks with each other:"
msgstr "对于不同回调之间的相互作用：@{"calib_text": " `[1090] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1090>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:122
msgid "Register them to the same Mutually Exclusive Callback Group if they should **never** be executed in parallel. An example case could be that the callbacks are accessing shared critical and non-thread-safe resources."
msgstr "如果它们**永远不应**并行执行，请将它们注册到同一个互斥回调组中。一个示例情况可能是这些回调正在访问共享的关键资源和非线程安全资源。@{"calib_text": " `[1091] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1091>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:125
msgid "If they should be executed in parallel, you have two options, depending on whether the individual callbacks should be able to overlap themselves or not:"
msgstr "如果它们应该并行执行，根据个别回调是否可以重叠，您有两个选择：@{"calib_text": " `[1092] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1092>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:128
msgid "Register them to different Mutually Exclusive Callback Groups (no overlap of the individual callbacks)"
msgstr "将它们注册到不同的互斥回调组（个别回调之间不重叠）@{"calib_text": " `[1093] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1093>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:130
msgid "Register them to a Reentrant Callback Group (overlap of the individual callbacks)"
msgstr "将它们注册到可重入回调组（个别回调之间有重叠）@{"calib_text": " `[1094] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1094>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:132
msgid "An example case of running different callbacks in parallel is a Node that has a synchronous service client and a timer calling this service. See the detailed example below."
msgstr "并行运行不同回调函数的一个示例情况是一个具有同步服务客户端和定时器调用该服务的节点。请参考下面的详细示例。@{"calib_text": " `[1095] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1095>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:137
msgid "Avoiding deadlocks"
msgstr "避免死锁@{"calib_text": " `[1096] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1096>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:139
msgid "Setting up callback groups of a node incorrectly can lead to deadlocks (or other unwanted behavior), especially if one desires to use synchronous calls to services or actions. Indeed, even the API documentation of ROS 2 mentions that synchronous calls to actions or services should not be done in callbacks, because it can lead to deadlocks. While using asynchronous calls is indeed safer in this regard, synchronous calls can also be made to work. On the other hand, synchronous calls also have their advantages, such as making the code simpler and easier to understand. Hence, this section provides some guidelines on how to set up a node's callback groups correctly in order to avoid deadlocks."
msgstr "设置节点的回调组不正确可能会导致死锁（或其他不希望的行为），特别是如果希望在回调中使用同步调用服务或动作。事实上，ROS 2 的 API 文档甚至提到在回调中不应该进行同步调用动作或服务，因为这可能会导致死锁。虽然在这方面使用异步调用确实更安全，但同步调用也可以正常工作。另一方面，同步调用也有其优点，例如使代码更简单易懂。因此，本节提供了一些关于如何正确设置节点的回调组以避免死锁的指南。@{"calib_text": " `[1097] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1097>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:152
msgid "First thing to note here is that every node's default callback group is a Mutually Exclusive Callback Group. If the user does not specify any other callback group when creating a timer, subscription, client etc., any callbacks created then or later by these entities will use the node's default callback group. Furthermore, if everything in a node uses the same Mutually Exclusive Callback Group, that node essentially acts as if it was handled by a Single-Threaded Executor, even if a multi-threaded one is specified! Thus, whenever one decides to use a Multi-Threaded Executor, some callback group(s) should always be specified in order for the executor choice to make sense."
msgstr "这里需要注意的第一点是，每个节点的默认回调组是互斥的回调组（Mutually Exclusive Callback Group）。如果用户在创建定时器、订阅、客户端等时没有指定其他回调组，那么这些实体创建的任何回调都将使用节点的默认回调组。此外，如果节点中的所有内容都使用相同的互斥回调组，即使指定了多线程执行器，该节点实际上也会像单线程执行器一样处理！因此，当决定使用多线程执行器时，应始终指定一个或多个回调组，以使执行器的选择有意义。@{"calib_text": " `[1098] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1098>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:164
msgid "With the above in mind, here are a couple guidelines to help avoid deadlocks:"
msgstr "在上述内容的基础上，以下是一些指南，可帮助避免死锁：@{"calib_text": " `[1099] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1099>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:166
msgid "If you make a synchronous call in any type of a callback, this callback and the client making the call need to belong to"
msgstr "如果在任何类型的回调中进行同步调用，该回调和进行调用的客户端需要属于@{"calib_text": " `[1100] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1100>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:169
msgid "different callback groups (of any type), or"
msgstr "不同的回调组（任意类型），或者@{"calib_text": " `[1101] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1101>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:170
msgid "a Reentrant Callback Group."
msgstr "一个可重入回调组。@{"calib_text": " `[1102] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1102>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:172
msgid "If the above configuration is not possible due to other requirements - such as thread-safety and/or blocking of other callbacks while waiting for the result (or if you want to make absolutely sure that there is never a possibility of a deadlock), use asynchronous calls."
msgstr "如果由于其他要求（如线程安全和/或在等待结果时阻塞其他回调）而无法满足上述配置要求，或者您希望确保绝对不会发生死锁的可能性，请使用异步调用。@{"calib_text": " `[1103] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1103>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:177
msgid "Failing the first point will always cause a deadlock. An example of such a case would be making a synchronous service call in a timer callback (see the next section for an example)."
msgstr "不满足第一个要点将始终导致死锁。这种情况的一个示例是在定时器回调中进行同步服务调用（请参阅下一节的示例）。@{"calib_text": " `[1104] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1104>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:185
msgid "Let us look at some simple examples of different callback group setups. The following demo code considers calling a service synchronously in a timer callback."
msgstr "让我们来看一些不同回调组设置的简单示例。下面的演示代码考虑在计时器回调中同步调用一个服务。@{"calib_text": " `[1105] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1105>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:190
msgid "Demo code"
msgstr "演示代码@{"calib_text": " `[1106] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1106>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:192
msgid "We have two nodes - one providing a simple service:"
msgstr "我们有两个节点 - 一个提供简单服务：@{"calib_text": " `[1107] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1107>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:277
msgid "and another containing a client to the service along with a timer for making service calls:"
msgstr "另一个包含一个客户端和一个用于进行服务调用的计时器：@{"calib_text": " `[1108] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1108>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:284
msgid "*Note:* The API of service client in rclcpp does not offer a synchronous call method similar to the one in rclpy, so we wait on the future object to simulate the effect of a synchronous call."
msgstr "*注意:* rclcpp 中的服务客户端 API 不提供类似于 rclpy 中的同步调用方法，因此我们等待 future 对象来模拟同步调用的效果。@{"calib_text": " `[1109] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1109>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:387
msgid "The client node's constructor contains options for setting the callback groups of the service client and the timer. With the default setting above (both being ``nullptr`` / ``None``), both the timer and the client will use the node's default Mutually Exclusive Callback Group."
msgstr "客户端节点的构造函数包含设置服务客户端和定时器的回调组的选项。在上述默认设置中（都为 ``nullptr`` / ``None``），定时器和客户端都将使用节点的默认互斥回调组。@{"calib_text": " `[1110] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1110>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:394
msgid "The problem"
msgstr "问题@{"calib_text": " `[1111] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1111>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:396
msgid "Since we are making service calls with a 1 second timer, the expected outcome is that the service gets called once a second, the client always gets a response and prints ``Received response``. If we try running the server and client nodes in terminals, we get the following outputs."
msgstr "由于我们使用 1 秒定时器进行服务调用，预期的结果是服务每秒调用一次，客户端始终收到响应并打印 ``Received response``。如果我们尝试在终端中运行服务器和客户端节点，则会得到以下输出。@{"calib_text": " `[1112] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1112>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:404 ../../source/How-To-Guides/Using-callback-groups.rst:467
msgid "Client"
msgstr "客户端@{"calib_text": " `[1113] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1113>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:412 ../../source/How-To-Guides/Using-callback-groups.rst:482
msgid "Server"
msgstr "服务器@{"calib_text": " `[1114] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1114>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:420
msgid "So, it turns out that instead of the service being called repeatedly, the response of the first call is never received, after which the client node seemingly gets stuck and does not make further calls. That is, the execution stopped at a deadlock!"
msgstr "所以，事实证明，服务被反复调用，但是第一次调用的响应从未接收到，之后客户端节点似乎陷入了困境，并且不再进行进一步的调用。也就是说，执行在一个僵局中停止了！@{"calib_text": " `[1115] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1115>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:425
msgid "The reason for this is that the timer callback and the client are using the same Mutually Exclusive Callback Group (the node's default). When the service call is made, the client then passes its callback group to the Future object (hidden inside the call-method in the Python version) whose done-callback needs to execute for the result of the service call to be available. But because this done-callback and the timer callback are in the same Mutually Exclusive group and the timer callback is still executing (waiting for the result of the service call), the done-callback never gets to execute. The stuck timer callback also blocks any other executions of itself, so the timer does not fire for a second time."
msgstr "导致这种情况的原因是计时器回调和客户端使用了相同的互斥回调组（节点的默认组）。当进行服务调用时，客户端将其回调组传递给了Future对象（在Python版本中隐藏在调用方法内部），而该回调需要执行以便使服务调用的结果可用。但是，由于该回调和计时器回调位于相同的互斥组中，并且计时器回调仍在执行（等待服务调用的结果），因此该回调永远不会执行。卡住的计时器回调还会阻止它本身的任何其他执行，因此计时器不会第二次触发。@{"calib_text": " `[1116] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1116>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:439
msgid "Solution"
msgstr "解决方案@{"calib_text": " `[1117] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1117>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:441
msgid "We can fix this easily - for example - by assigning the timer and client to different callback groups. Thus, let us change the first two lines of the client node's constructor to be as follows (everything else shall stay the same):"
msgstr "我们可以很容易地解决这个问题 - 例如 - 通过将定时器和客户端分配给不同的回调组。因此，让我们将客户端节点构造函数的前两行更改为如下（其他所有内容保持不变）：@{"calib_text": " `[1118] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1118>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:462
msgid "Now we get the expected result, i.e. the timer fires repeatedly and each service call gets the result as it should:"
msgstr "现在我们得到了预期的结果，即定时器重复触发，并且每个服务调用都按照应有的方式得到结果：@{"calib_text": " `[1119] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1119>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:493
msgid "One might consider if just avoiding the node's default callback group is enough. This is not the case: replacing the default group by a different Mutually Exclusive group changes nothing. Thus, the following configuration also leads to the previously discovered deadlock."
msgstr "有人可能会考虑是否仅仅避免使用节点的默认回调组就足够了。但事实并非如此：用不同的互斥组替换默认组并没有改变什么。因此，以下配置也会导致之前发现的死锁问题。@{"calib_text": " `[1120] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1120>`_ "}@"


#: ../../source/How-To-Guides/Using-callback-groups.rst:516
msgid "In fact, the exact condition with which everything works in this case is that the timer and client must not belong to the same Mutually Exclusive group. Hence, all of the following configurations (and some others as well) produce the desired outcome where the timer fires repeatedly and service calls are completed."
msgstr "事实上，在这种情况下，一切正常工作的确切条件是计时器和客户端不能属于同一互斥组。因此，以下所有配置（以及其他一些配置）都会产生所需的结果，即计时器重复触发并完成服务调用。@{"calib_text": " `[1121] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1121>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:2
msgid "Using ``ros1_bridge`` with upstream ROS on Ubuntu 22.04"
msgstr "在Ubuntu 22.04上使用``ros1_bridge``和上游ROS@{"calib_text": " `[1122] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1122>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:8
msgid "The release of ROS 2 Humble (and Rolling) on Ubuntu 22.04 Jammy Jellyfish marks the first ROS 2 release on a platform with no official ROS 1 release. While ROS 1 Noetic will continue to be supported through the duration of its `long term support window <https://www.ros.org/reps/rep-0003.html#noetic-ninjemys-may-2020-may-2025>`__, it will only target Ubuntu 20.04. Alternatively, there are `upstream variants of ROS 1 packages <https://packages.ubuntu.com/jammy/ros-desktop>`__ in Debian and Ubuntu that are not maintained as an official distribution by the ROS maintainers."
msgstr "在Ubuntu 22.04 Jammy Jellyfish上发布的ROS 2 Humble（和Rolling）标志着首个在没有官方ROS 1版本的平台上发布的ROS 2版本。虽然ROS 1 Noetic将在其`长期支持窗口 <https://www.ros.org/reps/rep-0003.html#noetic-ninjemys-may-2020-may-2025>`__ 内继续得到支持，但它只针对Ubuntu 20.04。或者，Debian和Ubuntu中存在一些`ROS 1软件包的上游变体 <https://packages.ubuntu.com/jammy/ros-desktop>`__，它们不作为ROS维护者的官方发行版进行维护。@{"calib_text": " `[1123] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1123>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:12
msgid "This guide outlines the current mechanism for bridging ROS 2 releases with these upstream packages on Ubuntu 22.04 Jammy Jellyfish. This provides a migration path for users who still depend on ROS 1, but desire moving to newer ROS 2 and Ubuntu releases."
msgstr "本指南概述了在Ubuntu 22.04 Jammy Jellyfish上使用这些上游软件包进行ROS 2版本桥接的当前机制。这为仍然依赖ROS 1但希望迁移到更新的ROS 2和Ubuntu版本的用户提供了一条迁移路径。@{"calib_text": " `[1124] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1124>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:16
msgid "ROS 2 via Debian packages"
msgstr "通过Debian软件包使用ROS 2@{"calib_text": " `[1125] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1125>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:18
msgid "Installing :doc:`ROS 2 from Debian packages <../Installation/Ubuntu-Install-Debians>` currently does not work for ROS 2 on Ubuntu Jammy. The version of ``catkin-pkg-modules`` available in the Ubuntu repository conflicts with that in the ROS 2 package repository."
msgstr "目前无法在Ubuntu Jammy上通过Debian软件包安装ROS 2。Ubuntu软件仓库中可用的``catkin-pkg-modules``版本与ROS 2软件包仓库中的版本存在冲突。@{"calib_text": " `[1126] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1126>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:21
msgid "If the ROS 2 apt repository is in the available apt repositories (``/etc/apt/sources.list.d``), no ROS 1 packages will be installable. The error will be:"
msgstr "如果ROS 2的apt仓库在可用的apt仓库（``/etc/apt/sources.list.d``）中，将无法安装任何ROS 1软件包。错误信息如下：@{"calib_text": " `[1127] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1127>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:40
msgid "To correct this, remove packages.ros.org from your ``sources.list``. If you were following the ROS 2 installation guide, simply remove ``/etc/apt/sources.list.d/ros2.list``"
msgstr "要修正此问题，请从您的``sources.list``文件中移除packages.ros.org。如果您遵循了ROS 2安装指南，只需移除``/etc/apt/sources.list.d/ros2.list``文件即可。@{"calib_text": " `[1128] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1128>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:43
msgid "For now, to support ``ros1_bridge``, follow the instructions below for building ROS 2 from source."
msgstr "目前，为了支持 ``ros1_bridge``，请按照下面的说明从源代码构建ROS 2。@{"calib_text": " `[1129] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1129>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:46
msgid "ROS 2 from source"
msgstr "ROS 2 源代码构建@{"calib_text": " `[1130] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1130>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:48
msgid "Installing :doc:`ROS 2 from Source <../Installation/Alternatives/Ubuntu-Development-Setup>` is the only configuration that works for ROS 2 on Ubuntu Jammy."
msgstr "只有通过 :doc:`ROS 2 源代码构建 <../Installation/Alternatives/Ubuntu-Development-Setup>` 的方式才能在 Ubuntu Jammy 上使用 ROS 2。@{"calib_text": " `[1131] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1131>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:50
msgid "Below is a summary of the necessary instructions from the source build instructions. The substantial deviation is that we skip using the ROS 2 apt repositories because of conflicting packages."
msgstr "下面是源代码构建说明中必要的指令摘要。与原指南有较大差异的是，我们跳过使用 ROS 2 的apt存储库，因为存在冲突的软件包。@{"calib_text": " `[1132] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1132>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:54
msgid "Install development tools and ROS tools"
msgstr "安装开发工具和ROS工具@{"calib_text": " `[1133] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1133>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:56
msgid "Since we aren't using the ROS 2 apt repositories, ``colcon`` must be installed via ``pip``."
msgstr "由于我们不使用ROS 2的apt存储库，必须通过pip安装``colcon``。@{"calib_text": " `[1134] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1134>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:85
msgid "From here, continue with the :doc:`source install guide <../Installation/Alternatives/Ubuntu-Development-Setup>` to build ROS 2."
msgstr "从这里开始，继续阅读 :doc:`源码安装指南 <../Installation/Alternatives/Ubuntu-Development-Setup>` 来构建ROS 2。@{"calib_text": " `[1135] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1135>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:88
msgid "Install ROS 1 from Ubuntu packages"
msgstr "从Ubuntu软件包中安装ROS 1。@{"calib_text": " `[1136] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1136>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:96
msgid "Build ``ros1_bridge``"
msgstr "构建``ros1_bridge``@{"calib_text": " `[1137] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1137>`_ "}@"


#: ../../source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst:112
msgid "After building all of ``ros1_bridge``, the remainder of the `ros1_bridge examples <https://github.com/ros2/ros1_bridge#example-1-run-the-bridge-and-the-example-talker-and-listener>`__ should work with your new installation"
msgstr "在构建完所有``ros1_bridge``之后，`ros1_bridge示例 <https://github.com/ros2/ros1_bridge#example-1-run-the-bridge-and-the-example-talker-and-listener>`__ 的其余部分应该可以在新安装的环境下正常工作@{"calib_text": " `[1138] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1138>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:2
msgid "Using the ``ros2 param`` command-line tool"
msgstr "使用``ros2 param``命令行工具@{"calib_text": " `[1139] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1139>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:8
msgid "Parameters in ROS 2 can be get, set, listed, and described through a set of services as described in :doc:`the concept document <../Concepts/Basic/About-Parameters>`. The ``ros2 param`` command-line tool is a wrapper around these service calls that makes it easy to manipulate parameters from the command-line."
msgstr "Parameters in ROS 2 can be get, set, listed, and described through a set of services as described in :doc:`the concept document <../Concepts/Basic/About-Parameters>`. The ``ros2 param`` command-line tool is a wrapper around these service calls that makes it easy to manipulate parameters from the command-line.@{"calib_text": " `[\u6821\u51c6] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16031>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:12
msgid "``ros2 param list``"
msgstr "``ros2 param list``@{"calib_text": " `[1141] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1141>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:14
msgid "This command will list all of the available parameters on a given node, or on all discoverable nodes if no node is given."
msgstr "此命令将列出给定节点上的所有可用参数，如果未指定节点，则列出所有可发现的节点的参数。@{"calib_text": " `[1142] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1142>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:16
msgid "To get all of the parameters on a given node:"
msgstr "要获取给定节点上的所有参数：@{"calib_text": " `[1143] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1143>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:22
msgid "To get all of the parameters on all nodes in the system (this can take a long time on a complicated network):"
msgstr "要获取系统中所有节点的所有参数（在复杂网络上可能需要很长时间）：@{"calib_text": " `[1144] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1144>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:29
msgid "``ros2 param get``"
msgstr "``ros2 param get``@{"calib_text": " `[1145] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1145>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:31
msgid "This command will get the value of a particular parameter on a particular node."
msgstr "该命令将获取特定节点上特定参数的值。@{"calib_text": " `[1146] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1146>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:33
msgid "To get the value of a parameter on a node:"
msgstr "要获取节点上参数的值：@{"calib_text": " `[1147] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1147>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:40
msgid "``ros2 param set``"
msgstr "``ros2 param set``@{"calib_text": " `[1148] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1148>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:42
msgid "This command will set the value of a particular parameter on a particular node. For most parameters, the type of the new value must be the same as the existing type."
msgstr "此命令将在特定节点上设置特定参数的值。对于大多数参数而言，新值的类型必须与现有类型相同。@{"calib_text": " `[1149] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1149>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:45
msgid "To set the value of a parameter on a node:"
msgstr "要在节点上设置参数的值：@{"calib_text": " `[1150] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1150>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:51
msgid "The value that is passed on the command-line is in YAML, which allows arbitrary YAML expressions to be used. However, it also means that certain expressions will be interpreted differently than might be expected. For instance, if the parameter ``my_string`` on node ``my_node`` is of type string, the following will not work:"
msgstr "在命令行中传递的值采用YAML格式，允许使用任意的YAML表达式。然而，这也意味着某些表达式的解释可能与预期不同。例如，如果节点``my_node``上的参数``my_string``是字符串类型，以下操作将不起作用：@{"calib_text": " `[1151] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1151>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:59
msgid "That's because YAML is interpreting \"off\" as a boolean, and ``my_string`` is a string type. This can be worked around by using the YAML syntax for explicitly setting strings, e.g.:"
msgstr "这是因为YAML将\"off\"解释为布尔值，而``my_string``是字符串类型。可以通过使用YAML语法来显式设置字符串来解决这个问题，例如：@{"calib_text": " `[1152] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1152>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:66
msgid "Additionally, YAML supports heterogeneous lists, containing (say) a string, a boolean, and an integer. However, ROS 2 parameters do not support heterogenous lists, so any YAML list that has multiple types will be interpreted as a string. Assuming that the parameter ``my_int_array`` on node ``my_node`` is of type integer array, the following will not work:"
msgstr "此外，YAML支持包含（比如说）字符串、布尔值和整数的异构列表。然而，ROS 2参数不支持异构列表，所以任何包含多种类型的YAML列表都会被解释为字符串。假设节点``my_node``上的参数``my_int_array``是整数数组类型，下面的示例将无法工作：@{"calib_text": " `[1153] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1153>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:74
msgid "The following string typed parameter would work:"
msgstr "下面的字符串类型参数可以工作：@{"calib_text": " `[1154] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1154>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:81
msgid "``ros2 param delete``"
msgstr "``ros2 param delete``@{"calib_text": " `[1155] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1155>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:83
msgid "This command will remove a parameter from a particular node. However, note that this can only remove dynamic parameters (not declared parameters). See :doc:`the concept document <../Concepts/Basic/About-Parameters>` for more information."
msgstr "This command will remove a parameter from a particular node. However, note that this can only remove dynamic parameters (not declared parameters). See :doc:`the concept document <../Concepts/Basic/About-Parameters>` for more information.@{"calib_text": " `[\u6821\u51c6] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16032>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:92
msgid "``ros2 param describe``"
msgstr "``ros2 param describe``@{"calib_text": " `[1157] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1157>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:94
msgid "This command will provide a textual description of a particular parameter on a particular node:"
msgstr "该命令将提供有关特定节点上特定参数的文本描述：@{"calib_text": " `[1158] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1158>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:101
msgid "``ros2 param dump``"
msgstr "``ros2 param dump``@{"calib_text": " `[1159] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1159>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:103
msgid "This command will print out all of the parameters on a particular node in a YAML file format. The output of this command can then be used to re-run the node with the same parameters later:"
msgstr "该命令将以 YAML 文件格式打印出特定节点上的所有参数。该命令的输出可以用于以相同参数重新运行节点：@{"calib_text": " `[1160] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1160>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:111
msgid "``ros2 param load``"
msgstr "``ros2 param load``@{"calib_text": " `[1161] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1161>`_ "}@"


#: ../../source/How-To-Guides/Using-ros2-param.rst:113
msgid "This command will load the values of the parameters from a YAML file into a particular node. That is, this command can reload values at runtime that were dumped out by ``ros2 param dump``:"
msgstr "这个命令将从一个YAML文件中加载参数的值到特定的节点。也就是说，这个命令可以在运行时重新加载通过``ros2 param dump``导出的值：@{"calib_text": " `[1162] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1162>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:2
msgid "Visualizing ROS 2 data with Foxglove Studio"
msgstr "使用Foxglove Studio可视化ROS 2数据@{"calib_text": " `[1163] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1163>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:4
msgid "`Foxglove Studio <https://foxglove.dev/studio>`__ is an open source visualization and debugging tool for your robotics data."
msgstr "`Foxglove Studio <https://foxglove.dev/studio>`__ 是一个开源的可视化和调试工具，用于处理你的机器人数据。@{"calib_text": " `[1164] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1164>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:6
msgid "It is available in a variety of ways to make development as convenient as possible – it can be run as a standalone desktop app, accessed via your browser, or even self-hosted on your own domain."
msgstr "它提供了多种方式，以使开发尽可能便捷 - 可以作为独立的桌面应用程序运行，通过浏览器访问，甚至可以在您自己的域上自行托管。@{"calib_text": " `[1165] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1165>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:8
msgid "View the source code on `GitHub <https://www.github.com/foxglove/studio>`__."
msgstr "在`GitHub <https://www.github.com/foxglove/studio>`__上查看源代码。@{"calib_text": " `[1166] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1166>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:11
msgid "Installation"
msgstr "安装@{"calib_text": " `[] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1167>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:13
msgid "To use the web app, simply open Google Chrome and navigate to `studio.foxglove.dev <https://studio.foxglove.dev>`__."
msgstr "要使用Web应用程序，只需打开Google Chrome并导航到`studio.foxglove.dev <https://studio.foxglove.dev>`__。@{"calib_text": " `[1168] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1168>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:15
msgid "To use the desktop app for Linux, macOS, or Windows, download it directly from the `Foxglove Studio website <https://foxglove.dev/download>`__."
msgstr "要在Linux、macOS或Windows上使用桌面应用程序，请直接从`Foxglove Studio网站<https://foxglove.dev/download>`__下载。@{"calib_text": " `[1169] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1169>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:18
msgid "Connect to a data source"
msgstr "连接到数据源@{"calib_text": " `[1170] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1170>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:20
msgid "On opening Foxglove Studio, you will see a dialog with a list of `all possible data sources <https://foxglove.dev/docs/studio/connection/data-sources>`__."
msgstr "打开Foxglove Studio后，您将看到一个对话框，其中列出了`所有可能的数据源<https://foxglove.dev/docs/studio/connection/data-sources>`__。@{"calib_text": " `[1171] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1171>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:22
msgid "To connect to your ROS 2 stack, click \"Open connection\", select the \"Rosbridge (ROS 1 & 2)\" tab, and configure your \"WebSocket URL\"."
msgstr "要连接到您的ROS 2堆栈，请点击“打开连接”，选择“Rosbridge（ROS 1和2）”选项卡，并配置您的“WebSocket URL”。@{"calib_text": " `[1172] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1172>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:24
msgid "You could also drag-and-drop any local ROS 2 ``.db3`` files directly into the application to load them for playback."
msgstr "您还可以直接将任何本地 ROS 2 ``.db3`` 文件拖放到应用程序中以加载它们进行回放。@{"calib_text": " `[1173] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1173>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:28
msgid "In order to `load custom message definitions in your ROS 2 files <https://github.com/ros2/rosbag2/issues/782>`__, try converting them to the `MCAP file format <https://mcap.dev>`__."
msgstr "要在 ROS 2 文件中加载自定义消息定义，请尝试将其转换为 `MCAP 文件格式 <https://mcap.dev>`__。@{"calib_text": " `[1174] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1174>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:30
msgid "Check out the `Foxglove Studio docs <https://foxglove.dev/docs/studio/connection/native>`__ for more detailed instructions."
msgstr "查看 `Foxglove Studio 文档 <https://foxglove.dev/docs/studio/connection/native>`__ 获取更详细的说明。@{"calib_text": " `[1175] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1175>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:33
msgid "Building layouts with panels"
msgstr "使用面板构建布局@{"calib_text": " `[1176] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1176>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:35
msgid "`Panels <https://foxglove.dev/docs/studio/panels/introduction>`__ are modular visualization interfaces that can be configured and arranged into Studio `layouts <https://foxglove.dev/docs/studio/layouts>`__. You can also save your layouts for future use, for your own personal reference or with your larger robotics team."
msgstr "`面板 <https://foxglove.dev/docs/studio/panels/introduction>`__ 是可以配置和排列成`布局 <https://foxglove.dev/docs/studio/layouts>`__的模块化可视化界面。您还可以保存您的布局，以供将来使用，供个人参考或与您的大型机器人团队共享。@{"calib_text": " `[1177] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1177>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:38
msgid "Find the full list of available panels in the sidebar's \"Add panel\" tab."
msgstr "在侧边栏的“添加面板”选项卡中找到可用面板的完整列表。@{"calib_text": " `[1178] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1178>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:40
msgid "We've highlighted some particularly useful ones below:"
msgstr "我们特别强调以下一些特别有用的面板：@{"calib_text": " `[1179] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1179>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:43
msgid "1 3D: Display visualization markers in a 3D scene"
msgstr "1 3D：在三维场景中显示可视化标记@{"calib_text": " `[1180] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1180>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:45
msgid "Publish marker messages to add primitive shapes (arrows, spheres, etc.) and more complex visualizations (occupancy grids, point clouds, etc.) to your 3D panel's scene."
msgstr "向您的3D面板场景中添加基本形状（箭头、球体等）和更复杂的可视化（占用网格、点云等），请发布标记消息。@{"calib_text": " `[1181] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1181>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:47
msgid "Choose the topics you want to display via the topic picker on the left, and configure each topic's visualization settings in the \"Edit topic settings\" menu."
msgstr "通过左侧的主题选择器选择要显示的主题，并在“编辑主题设置”菜单中配置每个主题的可视化设置。@{"calib_text": " `[1182] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1182>`_ "}@"


msgid "Foxglove Studio's 3D panel"
msgstr "Foxglove Studio的3D面板@{"calib_text": " `[1183] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1183>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:53
msgid "Reference the `docs <https://foxglove.dev/docs/studio/panels/3d>`__ for a full list of `supported message types <https://foxglove.dev/docs/studio/panels/3d#supported-messages>`__ and some useful `user interactions <https://foxglove.dev/docs/studio/panels/3d#user-interactions>`__."
msgstr "请参考 `文档 <https://foxglove.dev/docs/studio/panels/3d>`__ 获取完整的 `支持的消息类型列表 <https://foxglove.dev/docs/studio/panels/3d#supported-messages>`__ 和一些有用的 `用户交互 <https://foxglove.dev/docs/studio/panels/3d#user-interactions>`__。@{"calib_text": " `[1184] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1184>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:56
msgid "2 Diagnostics: Filter and sort diagnostics messages"
msgstr "2 诊断：过滤和排序诊断消息@{"calib_text": " `[1185] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1185>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:58
msgid "Display the status of seen nodes (i.e. stale, error, warn, or OK) from topics with a ``diagnostic_msgs/msg/DiagnosticArray`` datatype in a running feed, and display the diagnostics data for a given ``diagnostic_name/hardware_id``."
msgstr "在运行的反馈中从具有``diagnostic_msgs/msg/DiagnosticArray``数据类型的主题中显示已观察到的节点的状态（即陈旧、错误、警告或正常），并显示给定``diagnostic_name/hardware_id``的诊断数据。@{"calib_text": " `[1186] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1186>`_ "}@"


msgid "Foxglove Studio's Diagnostics panel"
msgstr "Foxglove Studio的诊断面板@{"calib_text": " `[1187] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1187>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:64
msgid "Reference the `docs <https://foxglove.dev/docs/studio/panels/diagnostics>`__ for more details."
msgstr "更多详细信息，请参考`文档 <https://foxglove.dev/docs/studio/panels/diagnostics>`__。@{"calib_text": " `[1188] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1188>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:67
msgid "3 Image: View camera feed images"
msgstr "3 图片: 查看相机图像@{"calib_text": " `[1189] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1189>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:69
msgid "Select a ``sensor_msgs/msg/Image`` or ``sensor_msgs/msg/CompressedImage`` topic to display."
msgstr "选择一个 ``sensor_msgs/msg/Image`` 或 ``sensor_msgs/msg/CompressedImage`` 话题以显示。@{"calib_text": " `[1190] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1190>`_ "}@"


msgid "Foxglove Studio's Image panel"
msgstr "Foxglove Studio 的图像面板@{"calib_text": " `[1191] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1191>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:75
msgid "Reference the `docs <https://foxglove.dev/docs/studio/panels/image>`__ for more details."
msgstr "有关更多详细信息，请参考 `文档 <https://foxglove.dev/docs/studio/panels/image>`__。@{"calib_text": " `[1192] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1192>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:78
msgid "4 Log: View log messages"
msgstr "4 日志：查看日志消息@{"calib_text": " `[1193] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1193>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:80
msgid "To view ``rcl_interfaces/msg/Log`` messages live, use the desktop app to `connect <https://foxglove.dev/docs/studio/connection/native>`__ to your running ROS stack. To view ``rcl_interfaces/msg/Log`` messages from a pre-recorded data file, you can drag-and-drop your file into either the `web <https://studio.foxglove.dev>`__ or desktop app."
msgstr "要实时查看``rcl_interfaces/msg/Log``消息，请使用桌面应用程序连接到正在运行的ROS堆栈。要查看来自预录制数据文件的``rcl_interfaces/msg/Log``消息，您可以将文件拖放到`web <https://studio.foxglove.dev>`__ 或桌面应用程序中。@{"calib_text": " `[1194] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1194>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:83
msgid "Next, add a `Log <https://foxglove.dev/docs/studio/panels/log>`__ panel to your layout. If you've connected to your ROS stack correctly, you should now see a list of your log messages, with the ability to filter them by node name or severity level."
msgstr "接下来，将`日志 <https://foxglove.dev/docs/studio/panels/log>`__ 面板添加到您的布局中。如果您已正确连接到ROS堆栈，则现在应该看到您的日志消息列表，并能够按节点名称或严重级别进行筛选。@{"calib_text": " `[1195] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1195>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:86
msgid "Reference the `docs <https://foxglove.dev/docs/studio/panels/log>`__ for more details."
msgstr "有关更多详细信息，请参阅`文档 <https://foxglove.dev/docs/studio/panels/log>`__。@{"calib_text": " `[1196] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1196>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:89
msgid "5 Plot: Plot arbitrary values over time"
msgstr "5 Plot: 在时间轴上绘制任意值@{"calib_text": " `[1197] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1197>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:91
msgid "Plot arbitrary values from your topics' message paths over playback time."
msgstr "在播放时间轴上绘制主题消息路径上的任意值。@{"calib_text": " `[1198] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1198>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:93
msgid "Specify the topic values you want to plot along the y-axis. For the x-axis, choose between plotting the y-axis value's timestamp, element index, or another custom topic message path."
msgstr "指定您想在 y 轴上绘制的主题值。对于 x 轴，可以选择绘制 y 轴值的时间戳、元素索引或另一个自定义主题消息路径。@{"calib_text": " `[1199] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1199>`_ "}@"


msgid "Foxglove Studio's Plot panel"
msgstr "Foxglove Studio 的绘图面板@{"calib_text": " `[1200] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1200>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:100
msgid "Reference the `docs <https://foxglove.dev/docs/studio/panels/plot>`__ for more details."
msgstr "参考 `docs <https://foxglove.dev/docs/studio/panels/plot>`__ 获取更多详细信息。@{"calib_text": " `[1201] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1201>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:103
msgid "6 Raw Messages: View incoming topic messages"
msgstr "6 条原始消息：查看传入主题消息@{"calib_text": " `[1202] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1202>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:105
msgid "Display incoming topic data in an easy-to-read collapsible JSON tree format."
msgstr "以易于阅读的可折叠 JSON 树形格式显示传入主题数据。@{"calib_text": " `[1203] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1203>`_ "}@"


msgid "Foxglove Studio's Raw Messages panel"
msgstr "Foxglove Studio 的原始消息面板@{"calib_text": " `[1204] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1204>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:111
msgid "Reference the `docs <https://foxglove.dev/docs/studio/panels/raw-messages>`__ for more details."
msgstr "请参考 `文档 <https://foxglove.dev/docs/studio/panels/raw-messages>`__ 获取更多详细信息。@{"calib_text": " `[1205] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1205>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:114
msgid "7 Teleop: Teleoperate your robot"
msgstr "7 远程操作：对机器人进行远程操作@{"calib_text": " `[1206] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1206>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:116
msgid "Teleoperate your physical robot by publishing ``geometry_msgs/msg/Twist`` messages on a given topic back to your live ROS stack."
msgstr "通过在给定的主题上发布 ``geometry_msgs/msg/Twist`` 消息，将实际机器人远程操作回您的实时 ROS 栈。@{"calib_text": " `[1207] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1207>`_ "}@"


msgid "Foxglove Studio's URDF Viewer panel"
msgstr "Foxglove Studio 的 URDF 视图面板@{"calib_text": " `[1208] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1208>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:122
msgid "Reference the `docs <https://foxglove.dev/docs/studio/panels/teleop>`__ for more details."
msgstr "请参考 `文档 <https://foxglove.dev/docs/studio/panels/teleop>`__ 获取更多详细信息。@{"calib_text": " `[1209] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1209>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:125
msgid "8 URDF Viewer: View and manipulate your URDF model"
msgstr "8 URDF Viewer: 查看和操作您的URDF模型@{"calib_text": " `[1210] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1210>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:127
msgid "To visualize and control your robot model in Foxglove Studio, open the web or desktop application and add a `URDF Viewer <https://foxglove.dev/docs/studio/panels/urdf-viewer>`__ panel to your layout. Then, drag and drop your URDF file into that panel to visualize your robot model."
msgstr "要在Foxglove Studio中可视化和控制您的机器人模型，请打开Web或桌面应用程序，并将 `URDF Viewer <https://foxglove.dev/docs/studio/panels/urdf-viewer>`__ 面板添加到您的布局中。然后，将您的URDF文件拖放到该面板中以可视化您的机器人模型。@{"calib_text": " `[1211] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1211>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:134
msgid "Select any topic publishing a ``JointState`` message to update the visualization based on the published joint states (defaults to ``/joint_states``)."
msgstr "选择任何发布 ``JointState`` 消息的主题，以根据发布的关节状态更新可视化（默认为 ``/joint_states``）。@{"calib_text": " `[1212] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1212>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:136
msgid "Toggle to \"Manual joint control\" to set joint positions using the provided controls."
msgstr "切换到\"手动关节控制\"模式，使用提供的控制器设置关节位置。@{"calib_text": " `[1213] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1213>`_ "}@"


msgid "Foxglove Studio's URDF Viewer panel with editable joint positions"
msgstr "Foxglove Studio的URDF查看器面板，可编辑关节位置。@{"calib_text": " `[1214] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1214>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:142
msgid "Reference the `docs <https://foxglove.dev/docs/studio/panels/urdf-viewer>`__ for more details."
msgstr "详细信息请参考`文档 <https://foxglove.dev/docs/studio/panels/urdf-viewer>`__。@{"calib_text": " `[1215] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1215>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:145
msgid "Other basic actions"
msgstr "其他基本操作。@{"calib_text": " `[1216] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1216>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:148
msgid "1 View your ROS graph"
msgstr "1 查看ROS图@{"calib_text": " `[1217] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1217>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:150
msgid "`Using the desktop app <https://foxglove.dev/download>`__, `connect <https://foxglove.dev/docs/studio/connection/native>`__ to your running ROS stack. Next, add a `Topic Graph <https://foxglove.dev/docs/studio/panels/topic-graph>`__ panel to your layout. If you've connected to your ROS stack correctly, you should now see a computational graph of your ROS nodes, topics, and services in that panel. Use the controls on the right side of the panel to select which topics to display or to toggle services."
msgstr "通过`桌面应用程序<https://foxglove.dev/download>`__，`连接<https://foxglove.dev/docs/studio/connection/native>`__到正在运行的ROS堆栈。接下来，在布局中添加一个`主题图<https://foxglove.dev/docs/studio/panels/topic-graph>`__面板。如果已成功连接到ROS堆栈，则应该在该面板中看到ROS节点、主题和服务的计算图。使用面板右侧的控件选择要显示的主题或切换服务。@{"calib_text": " `[1218] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1218>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:156
msgid "2 View and edit your ROS params"
msgstr "2 查看和编辑ROS参数@{"calib_text": " `[1219] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1219>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:158
msgid "`Using the desktop app <https://foxglove.dev/download>`__, `connect <https://foxglove.dev/docs/studio/connection/native>`__ to your running ROS stack. Next, add a `Parameters <https://foxglove.dev/docs/studio/panels/parameters>`__ panel to your layout. If you've connected to your ROS stack correctly, you should now see a live view of your current ``rosparams``. You can edit these parameter values to publish ``rosparam`` updates back to your ROS stack."
msgstr "通过`桌面应用程序<https://foxglove.dev/download>`__，`连接<https://foxglove.dev/docs/studio/connection/native>`__到正在运行的ROS堆栈。接下来，在布局中添加一个`参数<https://foxglove.dev/docs/studio/panels/parameters>`__面板。如果已成功连接到ROS堆栈，则应该实时查看当前的``rosparams``。您可以编辑这些参数值，将``rosparam``更新发布回ROS堆栈。@{"calib_text": " `[1220] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1220>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:164
msgid "3 Publish messages back to your live ROS stack"
msgstr "3 将消息发布回您的实时ROS堆栈@{"calib_text": " `[1221] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1221>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:166
msgid "`Using the desktop app <https://foxglove.dev/download>`__, `connect <https://foxglove.dev/docs/studio/connection/native>`__ to your running ROS stack. Next, add a `Publish <https://foxglove.dev/docs/studio/panels/publish>`__ panel to your layout."
msgstr "使用桌面应用程序 <https://foxglove.dev/download>，`connect <https://foxglove.dev/docs/studio/connection/native>`__ 到正在运行的ROS堆栈。接下来，在您的布局中添加一个 `Publish <https://foxglove.dev/docs/studio/panels/publish>`__ 面板。@{"calib_text": " `[1222] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1222>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:169
msgid "Specify the topic you want to publish on to infer its datatype and populate the text field with a JSON message template."
msgstr "指定您要发布的主题，以推断其数据类型，并使用JSON消息模板填充文本字段。@{"calib_text": " `[1223] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1223>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:171
msgid "Selecting a datatype in the dropdown of common ROS datatypes will also populate the text field with a JSON message template."
msgstr "在常见ROS数据类型的下拉菜单中选择数据类型，还将使用JSON消息模板填充文本字段。@{"calib_text": " `[1224] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1224>`_ "}@"


#: ../../source/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.rst:173
msgid "Edit the template to customize your message before hitting \"Publish\"."
msgstr "在点击“发布”之前，编辑模板以自定义您的消息。@{"calib_text": " `[1225] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1225>`_ "}@"


msgid "Foxglove Studio's Publish panel"
msgstr "Foxglove Studio的发布面板@{"calib_text": " `[1226] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1226>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:8
msgid "Working with multiple ROS 2 middleware implementations"
msgstr "使用多个ROS 2中间件实现@{"calib_text": " `[1227] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1227>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:14
msgid "This page explains the default RMW implementation and how to specify an alternative."
msgstr "本页面介绍了默认的RMW实现以及如何指定替代实现。@{"calib_text": " `[1228] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1228>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:19
msgid "You should have already read the :doc:`DDS and ROS middleware implementations page <../Concepts/Intermediate/About-Different-Middleware-Vendors>`."
msgstr "You should have already read the :doc:`DDS and ROS middleware implementations page <../Concepts/Intermediate/About-Different-Middleware-Vendors>`.@{"calib_text": " `[\u6821\u51c6] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=16033>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:22
msgid "Specifying RMW implementations"
msgstr "指定RMW实现@{"calib_text": " `[1230] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1230>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:24
msgid "To have multiple RMW implementations available for use you must have installed the ROS 2 binaries and any additional dependencies for specific RMW implementations, or built ROS 2 from source with multiple RMW implementations in the workspace (the RMW implementations are included in the build by default if their compile-time dependencies are met). See :doc:`Install DDS implementations <../Installation/DDS-Implementations>`."
msgstr "要使用多个RMW实现，您必须安装ROS 2二进制文件和特定RMW实现的任何附加依赖项，或者从源代码构建ROS 2并在工作空间中使用多个RMW实现（如果编译时依赖项满足，则默认包括RMW实现在构建中）。参见:doc:`安装DDS实现 <../Installation/DDS-Implementations>`。@{"calib_text": " `[1231] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1231>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:28
msgid "Both C++ and Python nodes support an environment variable ``RMW_IMPLEMENTATION`` that allows the user to select the RMW implementation to use when running ROS 2 applications."
msgstr "C++和Python节点都支持一个环境变量``RMW_IMPLEMENTATION``，允许用户在运行ROS 2应用程序时选择要使用的RMW实现。@{"calib_text": " `[1232] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1232>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:30
msgid "The user may set this variable to a specific implementation identifier, such as ``rmw_cyclonedds_cpp``, ``rmw_fastrtps_cpp``, ``rmw_connextdds``, or ``rmw_gurumdds_cpp``."
msgstr "用户可以将此变量设置为特定的实现标识符，例如 ``rmw_cyclonedds_cpp``、``rmw_fastrtps_cpp``、``rmw_connextdds`` 或 ``rmw_gurumdds_cpp``。@{"calib_text": " `[1233] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1233>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:32
msgid "For example, to run the talker demo using the C++ talker and Python listener with the Connext RMW implementation:"
msgstr "例如，要使用C++ talker 和 Python listener 以 Connext RMW 实现运行 talker 示例：@{"calib_text": " `[1234] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1234>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:66
msgid "Adding RMW implementations to your workspace"
msgstr "将 RMW 实现添加到您的工作空间中@{"calib_text": " `[1235] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1235>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:68
msgid "Suppose that you have built your ROS 2 workspace with only Fast DDS installed and therefore only the Fast DDS RMW implementation built. The last time your workspace was built, any other RMW implementation packages, ``rmw_connextdds`` for example, were probably unable to find installations of the relevant DDS implementations. If you then install an additional DDS implementation, Connext for example, you will need to re-trigger the check for a Connext installation that occurs when the Connext RMW implementation is being built. You can do this by specifying the ``--cmake-clean-cache`` flag on your next workspace build, and you should see that the RMW implementation package then gets built for the newly installed DDS implementation."
msgstr "假设您已经构建了只安装了 Fast DDS 的 ROS 2 工作空间，因此只有 Fast DDS RMW 实现被构建。上次构建工作空间时，其他任何 RMW 实现包（例如 ``rmw_connextdds``）可能都无法找到相关 DDS 实现的安装。如果您随后安装了额外的 DDS 实现，例如 Connext，您将需要重新触发构建 Connext RMW 实现时的 Connext 安装检查。您可以在下一个工作空间构建中指定 ``--cmake-clean-cache`` 标志来执行此操作，并且您应该看到 RMW 实现包将为新安装的 DDS 实现进行构建。@{"calib_text": " `[1236] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1236>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:73
msgid "It is possible to run into a problem when \"rebuilding\" the workspace with an additional RMW implementation using the ``--cmake-clean-cache`` option where the build complains about the default RMW implementation changing. To resolve this, you can either set the default implementation to what is was before with the ``RMW_IMPLEMENTATION`` CMake argument or you can delete the build folder for packages that complain and continue the build with ``--packages-start <package name>``."
msgstr "使用``--cmake-clean-cache``选项在添加额外的RMW实现时，重新构建工作空间可能会遇到问题，构建时会报告默认的RMW实现发生了变化。要解决这个问题，您可以通过``RMW_IMPLEMENTATION`` CMake参数将默认实现设置为之前的值，或者可以删除报错的包的构建文件夹，并使用``--packages-start <package name>``继续构建。@{"calib_text": " `[1237] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1237>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:77
msgid "Troubleshooting"
msgstr "故障排除@{"calib_text": " `[1238] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1238>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:80
msgid "Checking the Current RMW"
msgstr "检查当前的RMW@{"calib_text": " `[1239] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1239>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:82
msgid "To check the RMW that is currently in use you simply check the ``RMW_IMPLEMENTATION`` environment variable. On Linux systems ``printenv`` prints the full list of environment variables. Other operating systems will have other procedures for viewing environment variables. If ``RMW_IMPLEMENTATION`` is not in the environment it is safe to assume you are using the default for your ROS distro, otherwise the current RMW is the value listed. The default RMW for each ROS Distro can be found in `REP-2000 <https://www.ros.org/reps/rep-2000.html#platforms-by-distribution>`_."
msgstr "要检查当前使用的RMW，只需检查``RMW_IMPLEMENTATION``环境变量。在Linux系统上，``printenv``打印出完整的环境变量列表。其他操作系统将有其他查看环境变量的方法。如果环境中不存在``RMW_IMPLEMENTATION``，则可以安全地假设您正在使用ROS发行版的默认值，否则当前的RMW是所列值。每个ROS发行版的默认RMW可以在`REP-2000 <https://www.ros.org/reps/rep-2000.html#platforms-by-distribution>`_中找到。@{"calib_text": " `[1240] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1240>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:88
msgid "Ensuring use of a particular RMW implementation"
msgstr "确保使用特定的RMW实现@{"calib_text": " `[1241] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1241>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:90
msgid "If the ``RMW_IMPLEMENTATION`` environment variable is set to an RMW implementation for which support is not installed, you will see an error message similar to the following if you have only one implementation installed:"
msgstr "如果``RMW_IMPLEMENTATION``环境变量设置为未安装支持的RMW实现，且你只安装了一个实现，则会看到类似以下错误消息：@{"calib_text": " `[1242] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1242>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:96
msgid "If you have support for multiple RMW implementations installed and you request use of one that is not installed, you will see something similar to:"
msgstr "如果你安装了多个RMW实现并请求使用未安装的实现，则会看到类似的消息：@{"calib_text": " `[1243] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1243>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:102
msgid "If this occurs, double check that your ROS 2 installation includes support for the RMW implementation that you have specified in the ``RMW_IMPLEMENTATION`` environment variable."
msgstr "如果出现这种情况，请仔细检查你的ROS 2安装是否包含你在``RMW_IMPLEMENTATION``环境变量中指定的RMW实现的支持。@{"calib_text": " `[1244] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1244>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:104
msgid "If you want to switch between RMW implementations, verify that the ROS 2 daemon process is not running with the previous RMW implementation to avoid any issues between nodes and command line tools such as ``ros2 node``. For example, if you run:"
msgstr "如果您想在不同的RMW实现之间切换，请验证ROS 2守护进程未使用先前的RMW实现运行，以避免节点和命令行工具（如``ros2 node``）之间出现任何问题。例如，如果您运行以下命令：@{"calib_text": " `[1245] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1245>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:111
msgid "and"
msgstr "并且@{"calib_text": " `[1246] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1246>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:117
msgid "it will generate a daemon with a Fast DDS implementation:"
msgstr "将生成一个使用Fast DDS实现的守护进程：@{"calib_text": " `[1247] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1247>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:123
msgid "Even if you run the command line tool again with the correct RMW implementation, the daemon's RMW implementation will not change and the ROS 2 command line tools will fail."
msgstr "即使您再次使用正确的RMW实现运行命令行工具，守护进程的RMW实现也不会更改，从而导致ROS 2命令行工具失败。@{"calib_text": " `[1248] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1248>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:125
msgid "To solve this, simply stop the daemon process:"
msgstr "为解决此问题，请简单地停止守护进程：@{"calib_text": " `[1249] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1249>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:131
msgid "and rerun the ROS 2 command line tool with the correct RMW implementation."
msgstr "然后使用正确的RMW实现重新运行ROS 2命令行工具。@{"calib_text": " `[1250] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1250>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:134
msgid "RTI Connext on OSX: Failure due to insufficient shared memory kernel settings"
msgstr "RTI Connext在OSX上的故障是由于内核设置的共享内存不足引起的。@{"calib_text": " `[1251] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1251>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:136
msgid "If you receive an error message similar to below when running RTI Connext on OSX:"
msgstr "如果在OSX上运行RTI Connext时收到类似下面的错误消息@{"calib_text": " `[1252] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1252>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:143
msgid "This error is caused by an insufficient number or size of shared memory segments allowed by the operating system. As a result, the ``DomainParticipant`` is unable to allocate enough resources and calculate its participant index which causes the error."
msgstr "此错误是由操作系统允许的共享内存段数目或大小不足引起的。因此，``DomainParticipant`` 无法分配足够的资源并计算其参与者索引，从而导致错误。@{"calib_text": " `[1253] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1253>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:145
msgid "You can increase the shared memory resources of your machine either temporarily or permanently."
msgstr "您可以临时或永久增加机器的共享内存资源。@{"calib_text": " `[1254] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1254>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:147
msgid "To increase the settings temporarily, you can run the following commands as user root:"
msgstr "要临时增加设置，您可以以 root 用户身份运行以下命令：@{"calib_text": " `[1255] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1255>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:157
msgid "To increase the settings permanently, you will need to edit or create the file ``/etc/sysctl.conf``. Creating or editing this file will require root permissions. Either add to your existing ``etc/sysctl.conf`` file or create ``/etc/sysctl.conf`` with the following lines:"
msgstr "要永久增加设置，您需要编辑或创建文件 ``/etc/sysctl.conf``。创建或编辑此文件将需要 root 权限。可以将以下行添加到现有的 ``etc/sysctl.conf`` 文件中，或者创建新的 ``/etc/sysctl.conf`` 文件：@{"calib_text": " `[1256] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1256>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:167
msgid "You will need to reboot the machine after modifying this file to have the changes take effect."
msgstr "在修改此文件后，您需要重新启动机器以使更改生效。@{"calib_text": " `[1257] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1257>`_ "}@"


#: ../../source/How-To-Guides/Working-with-multiple-RMW-implementations.rst:169
msgid "This solution is edited from the RTI Connext community forum. See the `original post <https://community.rti.com/kb/osx510>`__ for more detailed explanation."
msgstr "此解决方案是从RTI Connext社区论坛编辑而来。有关更详细的解释，请参阅`原始帖子 <https://community.rti.com/kb/osx510>`__。@{"calib_text": " `[1258] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=1258>`_ "}@"

