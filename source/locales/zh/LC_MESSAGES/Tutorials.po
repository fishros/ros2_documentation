# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 Documentation: Humble package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 Documentation: Humble \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-15 19:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh\n"
"Language-Team: zh <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"


#: ../../source/Tutorials.rst:4
msgid "Tutorials"
msgstr "教程@{"calib_text": " `[3059] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3059>`_ "}@"


#: ../../source/Tutorials.rst:6
msgid "The tutorials are a collection of step-by-step instructions meant to steadily build skills in ROS 2."
msgstr "这些教程是一系列逐步说明的指导，旨在逐渐培养ROS 2的技能。@{"calib_text": " `[3060] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3060>`_ "}@"


#: ../../source/Tutorials.rst:8
msgid "The best way to approach the tutorials is to walk through them for the first time in order, as they build off of each other and are not meant to be comprehensive documentation."
msgstr "最好的学习方法是按顺序首次逐个进行教程，因为它们是相互构建的，不旨在成为全面的文档。@{"calib_text": " `[3061] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3061>`_ "}@"


#: ../../source/Tutorials.rst:10
msgid "For quick solutions to more specific questions, see the :doc:`How-To-Guides`."
msgstr "如果需要快速解决更具体的问题，请参阅：doc:`如何指南`。@{"calib_text": " `[3062] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3062>`_ "}@"


#: ../../source/Tutorials.rst:23
msgid "Examples"
msgstr "示例@{"calib_text": " `[3063] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3063>`_ "}@"


#: ../../source/Tutorials.rst:25
msgid "`Python and C++ minimal examples <https://github.com/ros2/examples>`__."
msgstr "`Python 和 C++ 最小示例 <https://github.com/ros2/examples>`__。@{"calib_text": " `[3064] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3064>`_ "}@"


#: ../../source/Tutorials/Advanced.rst:2
msgid "Advanced"
msgstr "高级@{"calib_text": " `[3065] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3065>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:7
msgid "Implementing a custom memory allocator"
msgstr "实现自定义内存分配器@{"calib_text": " `[3066] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3066>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:9
msgid "**Goal:** This tutorial will show how to use a custom memory allocator when writing ROS 2 C++ code."
msgstr "**目标：** 本教程将展示如何在编写 ROS 2 C++ 代码时使用自定义内存分配器。@{"calib_text": " `[3067] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3067>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:11 ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:11 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:11 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:12 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:12 ../../source/Tutorials/Advanced/Security/Access-Controls.rst:12 ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:6 ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:12 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:13 ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:12 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:12 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:12 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:6 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:6 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:6 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:6 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:11 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:11 ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:10
msgid "**Tutorial level:** Advanced"
msgstr "**教程级别：**高级@{"calib_text": " `[3068] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3068>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:13 ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:13 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:13 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:14 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:14 ../../source/Tutorials/Advanced/Security/Access-Controls.rst:14 ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:8 ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:14 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:14 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:8 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:19 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:14 ../../source/Tutorials/Intermediate/Composition.rst:17 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:15 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:12 ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:14 ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:14
msgid "**Time:** 20 minutes"
msgstr "**时间：**20分钟@{"calib_text": " `[3069] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3069>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:17 ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:17 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:17 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:16 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:13 ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:16 ../../source/Tutorials/Demos/Intra-Process-Communication.rst:11 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:11 ../../source/Tutorials/Demos/Quality-of-Service.rst:11 ../../source/Tutorials/Demos/Real-Time-Programming.rst:11 ../../source/Tutorials/Intermediate/Composition.rst:11 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:17 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:17 ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:12 ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:11
msgid "Table of Contents"
msgstr "目录@{"calib_text": " `[] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3070>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:19
msgid "This tutorial will teach you how to integrate a custom allocator for publishers and subscribers so that the default heap allocator is never called while your ROS nodes are executing. The code for this tutorial is available `here <https://github.com/ros2/demos/blob/humble/demo_nodes_cpp/src/topics/allocator_tutorial.cpp>`__."
msgstr "本教程将教你如何为发布者和订阅者集成自定义分配器，以便在你的ROS节点执行时永远不会调用默认的堆分配器。该教程的代码可在`此处<https://github.com/ros2/demos/blob/humble/demo_nodes_cpp/src/topics/allocator_tutorial.cpp>`__获取。@{"calib_text": " `[3071] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3071>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:23 ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:20 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:20 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:21 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:21 ../../source/Tutorials/Advanced/Security/Access-Controls.rst:22 ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:16 ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:22 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:23 ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:22 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:22 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:15 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:15 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:15 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:15 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:20 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:19 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:25 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:19 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:22 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:21 ../../source/Tutorials/Demos/Intra-Process-Communication.rst:14 ../../source/Tutorials/Demos/Quality-of-Service.rst:14 ../../source/Tutorials/Demos/Real-Time-Programming.rst:14 ../../source/Tutorials/Intermediate/Composition.rst:20 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:21 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:29 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:28 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:20 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:22 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:20 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:21 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:21 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:21 ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:21 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:21 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:21 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:21 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:21 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:21 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:21 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:21 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:21 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:21 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:21 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:21 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:21 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:21 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:21 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:21
msgid "Background"
msgstr "背景@{"calib_text": " `[3072] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3072>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:25
msgid "Suppose you want to write real-time safe code, and you've heard about the many dangers of calling \"new\" during the real-time critical section, because the default heap allocator on most platforms is nondeterministic."
msgstr "假设您想编写实时安全的代码，并且听说在实时关键部分调用\"new\"存在许多危险，因为大多数平台上的默认堆分配器是不确定的。@{"calib_text": " `[3073] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3073>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:27
msgid "By default, many C++ standard library structures will implicitly allocate memory as they grow, such as ``std::vector``. However, these data structures also accept an \"Allocator\" template argument. If you specify a custom allocator to one of these data structures, it will use that allocator for you instead of the system allocator to grow or shrink the data structure. Your custom allocator could have a pool of memory preallocated on the stack, which might be better suited to real-time applications."
msgstr "默认情况下，许多C++标准库的结构在增长时会隐式分配内存，比如``std::vector``。然而，这些数据结构还接受一个\"Allocator\"模板参数。如果您为这些数据结构指定了自定义分配器，它将使用该分配器来代替系统分配器来增长或缩小数据结构。您的自定义分配器可以在堆栈上预分配一块内存池，这可能更适合实时应用程序。@{"calib_text": " `[3074] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3074>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:29
msgid "In the ROS 2 C++ client library (rclcpp), we are following a similar philosophy to the C++ standard library. Publishers, subscribers, and the Executor accept an Allocator template parameter that controls allocations made by that entity during execution."
msgstr "在ROS 2的C++客户端库（rclcpp）中，我们遵循与C++标准库类似的理念。发布者、订阅者和执行器（Executor）接受一个Allocator模板参数，用于控制实体在执行期间进行的分配。@{"calib_text": " `[3075] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3075>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:32
msgid "Writing an allocator"
msgstr "编写一个分配器@{"calib_text": " `[3076] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3076>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:34
msgid "To write an allocator compatible with ROS 2's allocator interface, your allocator must be compatible with the C++ standard library allocator interface."
msgstr "要编写与ROS 2的分配器接口兼容的分配器，您的分配器必须与C++标准库的分配器接口兼容。@{"calib_text": " `[3077] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3077>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:36
msgid "The C++11 library provides something called ``allocator_traits``. The C++11 standard specifies that a custom allocator only needs to fulfil a minimal set of requirements to be used to allocate and deallocate memory in a standard way. ``allocator_traits`` is a generic structure that fills out other qualities of an allocator based on an allocator written with the minimal requirements."
msgstr "C++11库提供了一种称为“allocator_traits”的东西。C++11标准规定，自定义分配器只需要满足一组最小要求，就可以按照标准方式分配和释放内存。``allocator_traits``是一个通用的结构，它根据满足最小要求的分配器填充其他属性。@{"calib_text": " `[3078] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3078>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:38
msgid "For example, the following declaration for a custom allocator would satisfy ``allocator_traits`` (of course, you would still need to implement the declared functions in this struct):"
msgstr "例如，下面这个自定义分配器的声明将满足``allocator_traits``（当然，您仍然需要在该结构中实现声明的函数）：@{"calib_text": " `[3079] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3079>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:57
msgid "You could then access other functions and members of the allocator filled in by ``allocator_traits`` like so: ``std::allocator_traits<custom_allocator<T>>::construct(...)``"
msgstr "然后，您可以通过``allocator_traits``填充的其他函数和成员来访问分配器，如下所示：``std::allocator_traits<custom_allocator<T>>::construct(...)``@{"calib_text": " `[3080] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3080>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:59
msgid "To learn about the full capabilities of ``allocator_traits``, see https://en.cppreference.com/w/cpp/memory/allocator_traits ."
msgstr "要了解``allocator_traits``的全部功能，请参阅 https://en.cppreference.com/w/cpp/memory/allocator_traits 。@{"calib_text": " `[3081] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3081>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:61
msgid "However, some compilers that only have partial C++11 support, such as GCC 4.8, still require allocators to implement a lot of boilerplate code to work with standard library structures such as vectors and strings, because these structures do not use ``allocator_traits`` internally. Therefore, if you're using a compiler with partial C++11 support, your allocator will need to look more like this:"
msgstr "然而，一些只支持部分C++11的编译器（如GCC 4.8）仍然需要分配器实现大量样板代码，以便与标准库结构（如向量和字符串）一起工作，因为这些结构在内部不使用``allocator_traits``。因此，如果您正在使用支持部分C++11的编译器，则您的分配器需要更像这样：@{"calib_text": " `[3082] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3082>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:111
msgid "Writing an example main"
msgstr "编写一个示例主函数@{"calib_text": " `[3083] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3083>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:113
msgid "Once you have written a valid C++ allocator, you must pass it as a shared pointer to your publisher, subscriber, and executor."
msgstr "一旦您编写了一个有效的C++分配器，您必须将其作为共享指针传递给您的发布者、订阅者和执行器。@{"calib_text": " `[3084] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3084>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:137
msgid "You will also need to use your allocator to allocate any messages that you pass along the execution codepath."
msgstr "你还需要使用你的分配器来分配通过执行代码路径传递的任何消息。@{"calib_text": " `[3085] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3085>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:143
msgid "Once you've instantiated the node and added the executor to the node, it's time to spin:"
msgstr "一旦你实例化了节点并将执行器添加到节点中，就可以开始运行了：@{"calib_text": " `[3086] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3086>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:157
msgid "Passing an allocator to the intra-process pipeline"
msgstr "将分配器传递给进程内管道@{"calib_text": " `[3087] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3087>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:159
msgid "Even though we instantiated a publisher and subscriber in the same process, we aren't using the intra-process pipeline yet."
msgstr "即使我们在同一个进程中实例化了发布者和订阅者，但我们还没有使用进程内管道。@{"calib_text": " `[3088] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3088>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:161
msgid "The IntraProcessManager is a class that is usually hidden from the user, but in order to pass a custom allocator to it we need to expose it by getting it from the rclcpp Context. The IntraProcessManager makes use of several standard library structures, so without a custom allocator it will call the default new."
msgstr "IntraProcessManager是一个通常对用户隐藏的类，但是为了向其传递自定义分配器，我们需要通过从rclcpp Context中获取它来公开它。IntraProcessManager使用了几个标准库结构，因此如果没有自定义分配器，它将调用默认的new函数。@{"calib_text": " `[3089] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3089>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:171
msgid "Make sure to instantiate publishers and subscribers AFTER constructing the node in this way."
msgstr "请确保在以此方式构建节点后实例化发布者和订阅者。@{"calib_text": " `[3090] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3090>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:174
msgid "Testing and verifying the code"
msgstr "对代码进行测试和验证。@{"calib_text": " `[3091] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3091>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:176
msgid "How do you know that your custom allocator is actually getting called?"
msgstr "您如何知道自定义分配器实际上被调用了？@{"calib_text": " `[3092] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3092>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:178
msgid "The obvious thing to do would be to count the calls made to your custom allocator's ``allocate`` and ``deallocate`` functions and compare that to the calls to ``new`` and ``delete``."
msgstr "显而易见的做法是统计自定义分配器的``allocate``和``deallocate``函数的调用次数，并将其与``new``和``delete``的调用次数进行比较。@{"calib_text": " `[3093] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3093>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:180
msgid "Adding counting to the custom allocator is easy:"
msgstr "在自定义分配器中添加计数很简单：@{"calib_text": " `[3094] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3094>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:196
msgid "You can also override the global new and delete operators:"
msgstr "您还可以重载全局的``new``和``delete``运算符：@{"calib_text": " `[3095] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3095>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:220
msgid "where the variables we are incrementing are just global static integers, and ``is_running`` is a global static boolean that gets toggled right before the call to ``spin``."
msgstr "其中我们递增的变量只是全局静态整数，而``is_running``是一个全局静态布尔值，在调用``spin``之前切换。@{"calib_text": " `[3096] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3096>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:222
msgid "The `example executable <https://github.com/ros2/demos/blob/humble/demo_nodes_cpp/src/topics/allocator_tutorial.cpp>`__ prints the value of the variables. To run the example executable, use:"
msgstr "这个 `示例可执行文件 <https://github.com/ros2/demos/blob/humble/demo_nodes_cpp/src/topics/allocator_tutorial.cpp>`__ 打印变量的值。要运行示例可执行文件，请使用：@{"calib_text": " `[3097] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3097>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:228
msgid "or, to run the example with the intra-process pipeline on:"
msgstr "或者，要在进程内管道上运行示例：@{"calib_text": " `[3098] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3098>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:234
msgid "You should get numbers like:"
msgstr "你应该会得到如下的数字：@{"calib_text": " `[3099] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3099>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:243
msgid "We've caught about 2/3 of the allocations/deallocations that happen on the execution path, but where do the remaining 1/3 come from?"
msgstr "我们捕获到了大约三分之二发生在执行路径上的分配/释放，但是剩下的三分之一从哪里来？@{"calib_text": " `[3100] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3100>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:245
msgid "As a matter of fact, these allocations/deallocations originate in the underlying DDS implementation used in this example."
msgstr "事实上，这些分配/释放操作源于在本示例中使用的底层DDS实现。@{"calib_text": " `[3101] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3101>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:247
msgid "Proving this is out of the scope of this tutorial, but you can check out the test for the allocation path that gets run as part of the ROS 2 continuous integration testing, which backtraces through the code and figures out whether certain function calls originate in the rmw implementation or in a DDS implementation:"
msgstr "证明这一点超出了本教程的范围，但您可以查看作为ROS 2持续集成测试的一部分运行的分配路径测试，该测试通过代码回溯并确定某些函数调用是在rmw实现中还是在DDS实现中发起的：@{"calib_text": " `[3102] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3102>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:249
msgid "https://github.com/ros2/realtime_support/blob/humble/tlsf_cpp/test/test_tlsf.cpp#L41"
msgstr "https://github.com/ros2/realtime_support/blob/humble/tlsf_cpp/test/test_tlsf.cpp#L41@{"calib_text": " `[3103] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3103>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:251
msgid "Note that this test is not using the custom allocator we just created, but the TLSF allocator (see below)."
msgstr "请注意，该测试未使用刚刚创建的自定义分配器，而是使用了TLSF分配器（请参阅下文）。@{"calib_text": " `[3104] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3104>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:254
msgid "The TLSF allocator"
msgstr "TLSF 分配器@{"calib_text": " `[3105] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3105>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:256
msgid "ROS 2 offers support for the TLSF (Two Level Segregate Fit) allocator, which was designed to meet real-time requirements:"
msgstr "ROS 2 提供对 TLSF（Two Level Segregate Fit）分配器的支持，该分配器旨在满足实时要求：@{"calib_text": " `[3106] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3106>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:258
msgid "https://github.com/ros2/realtime_support/tree/humble/tlsf_cpp"
msgstr "https://github.com/ros2/realtime_support/tree/humble/tlsf_cpp@{"calib_text": " `[3107] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3107>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:260
msgid "For more information about TLSF, see http://www.gii.upv.es/tlsf/"
msgstr "有关 TLSF 的更多信息，请参阅 http://www.gii.upv.es/tlsf/@{"calib_text": " `[3108] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3108>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:262
msgid "Note that the TLSF allocator is licensed under a dual-GPL/LGPL license."
msgstr "请注意，TLSF分配器使用双重GPL/LGPL许可证授权。@{"calib_text": " `[3109] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3109>`_ "}@"


#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:264
msgid "A full working example using the TLSF allocator is here: https://github.com/ros2/realtime_support/blob/humble/tlsf_cpp/example/allocator_example.cpp"
msgstr "这里有一个使用TLSF分配器的完整工作示例：https://github.com/ros2/realtime_support/blob/humble/tlsf_cpp/example/allocator_example.cpp@{"calib_text": " `[3110] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3110>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:7
msgid "Using Fast DDS Discovery Server as discovery protocol [community-contributed]"
msgstr "使用Fast DDS Discovery Server作为发现协议[社区贡献]@{"calib_text": " `[3111] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3111>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:9
msgid "**Goal:** This tutorial will show how to launch ROS 2 Nodes using the **Fast DDS Discovery Server** discovery protocol."
msgstr "**目标：**本教程将展示如何使用**Fast DDS Discovery Server**发现协议来启动ROS 2节点。@{"calib_text": " `[3112] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3112>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:22
msgid "Starting from ROS 2 Eloquent Elusor, the **Fast DDS Discovery Server** protocol is a feature that offers a centralized dynamic discovery mechanism, as opposed to the distributed mechanism used in DDS by default. This tutorial explains how to run some ROS 2 examples using the Fast DDS Discovery Server feature as discovery communication."
msgstr "从ROS 2 Eloquent Elusor开始，**Fast DDS Discovery Server**协议是一种提供集中式动态发现机制的功能，与DDS默认使用的分布式机制相对。本教程将说明如何使用Fast DDS Discovery Server功能作为发现通信运行一些ROS 2示例。@{"calib_text": " `[3113] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3113>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:25
msgid "In order to get more information about the available discovery configuration, please check the `following documentation <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/discovery.html>`_ or read the `Fast DDS Discovery Server specific documentation <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/discovery_server.html#discovery-server>`__."
msgstr "为了获取有关可用发现配置的更多信息，请查看`以下文档<https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/discovery.html>`_或阅读`Fast DDS Discovery Server特定文档<https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/discovery_server.html#discovery-server>`__。@{"calib_text": " `[3114] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3114>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:27
msgid "The `Simple Discovery Protocol <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/simple.html>`__ is the standard protocol defined in the `DDS standard <https://www.omg.org/omg-dds-portal/>`__. However, it has known disadvantages in some scenarios."
msgstr "`简单发现协议<https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/simple.html>`__是DDS标准中定义的标准协议。然而，在某些场景中，它具有已知的缺点。@{"calib_text": " `[3115] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3115>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:30
msgid "It does not **Scale** efficiently, as the number of exchanged packets increases significantly as new nodes are added."
msgstr "随着新增节点数量的增加，它**不能有效地扩展**，因为交换的数据包数量显著增加。@{"calib_text": " `[3116] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3116>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:31
msgid "It requires **multicasting** capabilities that may not work reliably in some scenarios, e.g. WiFi."
msgstr "在某些情况下，例如 WiFi，它需要具备可靠的**组播**功能。@{"calib_text": " `[3117] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3117>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:33
msgid "The **Fast DDS Discovery Server** provides a Client-Server Architecture that allows nodes to connect with each other using an intermediate server. Each node functions as a *discovery client*, sharing its info with one or more *discovery servers* and receiving discovery information from it. This reduces discovery-related network traffic and it does not require multicasting capabilities."
msgstr "Fast DDS Discovery Server 提供了一种客户端-服务器架构，允许节点使用中间服务器互相连接。每个节点都作为一个*发现客户端*，与一个或多个*发现服务器*共享信息，并从中接收发现信息。这减少了与发现相关的网络流量，并且不需要组播功能。@{"calib_text": " `[3118] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3118>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:40
msgid "These discovery servers can be independent, duplicated or connected with each other in order to create redundancy over the network and avoid having a single point of failure."
msgstr "这些发现服务器可以是独立的、复制的，或者彼此连接，以在网络上创建冗余并避免单点故障。@{"calib_text": " `[3119] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3119>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:43
msgid "Fast DDS Discovery Server v2"
msgstr "Fast DDS Discovery Server v2@{"calib_text": " `[3120] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3120>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:45
msgid "The latest ROS 2 Foxy Fitzroy release (December 2020) included a new version, version 2 of the Fast DDS Discovery Server. This version includes a new filter feature that further reduces the number of discovery messages sent. This version uses the topic of the different nodes to decide if two nodes wish to communicate, or if they can be left unmatched (i.e. not discovering each other). The following figure shows the decrease in discovery messages:"
msgstr "最新的ROS 2 Foxy Fitzroy发布（2020年12月）包括了一个新版本，Fast DDS Discovery Server的第2版。这个版本包括一个新的过滤器功能，进一步减少了发送的发现消息数量。这个版本根据不同节点的主题来决定两个节点是否希望进行通信，或者它们是否可以不匹配（即不互相发现）。下图显示了发现消息数量的减少情况：@{"calib_text": " `[3121] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3121>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:53
msgid "This architecture reduces the number of messages sent between the server and clients dramatically. In the following graph, the reduction in network traffic over the discovery phase for the `RMF Clinic demonstration <https://github.com/open-rmf/rmf_demos#Clinic-World>`__ is shown:"
msgstr "这种架构大大减少了服务器和客户端之间发送的消息数量。下图显示了在“RMF Clinic演示”（<https://github.com/open-rmf/rmf_demos#Clinic-World>）的发现阶段中网络流量的减少：@{"calib_text": " `[3122] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3122>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:60
msgid "In order to use this functionality, the discovery server can be configured using the `XML configuration for Participants <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/discovery_server.html#discovery-server>`__. It is also possible to configure the discovery server using the ``fastdds`` `tool <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastddscli/cli/cli.html#discovery>`__ and an `environment variable <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/env_vars/env_vars.html>`__, which is the approach used in this tutorial. For a more detailed explanation about the configuration of the discovery server, visit `the Fast DDS Discovery Server documentation <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/discovery_server.html#discovery-server>`__."
msgstr "为了使用这个功能，可以使用“XML配置参与者”（<https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/discovery_server.html#discovery-server>）来配置发现服务器。还可以使用“fastdds”工具（<https://fast-dds.docs.eprosima.com/en/v2.1.0/fastddscli/cli/cli.html#discovery>）和一个环境变量（<https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/env_vars/env_vars.html>）来配置发现服务器，在本教程中采用了这种方法。有关配置发现服务器的更详细说明，请访问“Fast DDS Discovery Server文档”（<https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/discovery_server.html#discovery-server>）。@{"calib_text": " `[3123] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3123>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:66 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:34 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:28 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:31 ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:28 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:21 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:23 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:24 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:23 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:22 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:30 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:32 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:37 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:38 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:31 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:30 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:36 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:43 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:30 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:32 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:36 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:31 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:33 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:34 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:118 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:30 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:28 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:29 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:35 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:28 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:28 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:30 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:30 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:30 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:29 ../../source/Tutorials/Demos/Quality-of-Service.rst:23 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:30 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:20 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:21 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:31 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:29 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:30 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:28 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:33 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:27 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:27 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:28 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:28 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:34 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:34 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:31 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:28 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:28
msgid "Prerequisites"
msgstr "先决条件@{"calib_text": " `[3124] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3124>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:68
msgid "This tutorial assumes you have a ROS 2 Foxy (or newer) :doc:`installation <../../../Installation>`. If your installation is using a ROS 2 version lower than Foxy, you cannot use the ``fastdds`` tool. Thus, in order to use the Discovery Server, you can update your repository to use a different Fast DDS version, or configure the discovery server using the `Fast DDS XML QoS configuration <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/discovery_server.html#discovery-server>`__."
msgstr "本教程假设您已经安装@{"calib_text": " `[3125] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3125>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:74
msgid "Run this tutorial"
msgstr "运行本教程@{"calib_text": " `[3126] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3126>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:76
msgid "The ``talker-listener`` ROS 2 demo creates a ``talker`` node that publishes a \"hello world\" message every second, and a ``listener`` node that listens to these messages."
msgstr "``talker-listener`` ROS 2演示创建了一个``talker``节点，它每秒发布一条\"hello world\"消息，以及一个``listener``节点，它监听这些消息。@{"calib_text": " `[3127] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3127>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:78
msgid "By :doc:`sourcing ROS 2 <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>` you will get access to the CLI tool ``fastdds``. This tool gives access to the `discovery tool <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastddscli/cli/cli.html#discovery>`__, which can be used to launch a discovery server. This server will manage the discovery process for the nodes that connect to it."
msgstr "通过:doc:`配置ROS 2环境 <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>`，您将获得访问CLI工具``fastdds``的权限。该工具提供了访问`discovery工具 <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastddscli/cli/cli.html#discovery>`__的功能，该工具可用于启动一个发现服务器。该服务器将管理连接到它的节点的发现过程。@{"calib_text": " `[3128] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3128>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:83
msgid "Do not forget to :doc:`source ROS 2 <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>` in every new terminal opened."
msgstr "在每个新打开的终端中，不要忘记:doc:`配置ROS 2环境 <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>`。@{"calib_text": " `[3129] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3129>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:87
msgid "Setup Discovery Server"
msgstr "设置发现服务器@{"calib_text": " `[3130] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3130>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:89
msgid "Start by launching a discovery server with id 0, port 11811 (default port) and listening on all available interfaces."
msgstr "首先启动一个ID为0、端口为11811（默认端口）且监听所有可用接口的发现服务器。@{"calib_text": " `[3131] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3131>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:91 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:47 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:54 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:52 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:44 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:47 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:50
msgid "Open a new terminal and run:"
msgstr "打开一个新的终端并运行：@{"calib_text": " `[3132] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3132>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:99
msgid "Launch listener node"
msgstr "启动监听节点@{"calib_text": " `[3133] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3133>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:101
msgid "Execute the listener demo, to listen to the ``/chatter`` topic."
msgstr "执行监听器演示，以监听``/chatter``主题。@{"calib_text": " `[3134] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3134>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:103
msgid "In a new terminal, set the environment variable ``ROS_DISCOVERY_SERVER`` to the location of the discovery server. (Do not forget to source ROS 2 in every new terminal)"
msgstr "在一个新的终端中，将环境变量``ROS_DISCOVERY_SERVER``设置为发现服务器的位置。（不要忘记在每个新的终端中使用source命令加载ROS 2）@{"calib_text": " `[3135] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3135>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:110
msgid "Launch the listener node. Use the argument ``--remap __node:=listener_discovery_server`` to change the node's name for this tutorial."
msgstr "启动监听器节点。使用参数``--remap __node:=listener_discovery_server``来更改节点在本教程中的名称。@{"calib_text": " `[3136] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3136>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:116
msgid "This will create a ROS 2 node, that will automatically create a client for the discovery server and connect to the server created previously to perform discovery, rather than using multicast."
msgstr "这将创建一个ROS 2节点，该节点将自动为发现服务器创建一个客户端，并连接到之前创建的服务器进行发现，而不是使用组播。@{"calib_text": " `[3137] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3137>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:120
msgid "Launch talker node"
msgstr "启动对话节点@{"calib_text": " `[3138] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3138>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:122
msgid "Open a new terminal and set the ``ROS_DISCOVERY_SERVER`` environment variable as before so that the node starts a discovery client."
msgstr "打开一个新的终端，并像之前一样设置``ROS_DISCOVERY_SERVER``环境变量，以便节点启动一个发现客户端。@{"calib_text": " `[3139] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3139>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:129
msgid "You should now see the talker publishing \"hello world\" messages, and the listener receiving these messages."
msgstr "现在您应该看到对话节点发布\"hello world\"消息，以及监听器接收这些消息。@{"calib_text": " `[3140] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3140>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:133
msgid "Demonstrate Discovery Server execution"
msgstr "演示发现服务器的执行@{"calib_text": " `[3141] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3141>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:135
msgid "So far, there is no evidence that this example and the standard talker-listener example are running differently. To clearly demonstrate this, run another node that is not connected to the discovery server. Run a new listener (listening in ``/chatter`` topic by default) in a new terminal and check that it is not connected to the talker already running."
msgstr "到目前为止，没有证据表明这个示例和标准的说话者-监听者示例运行方式不同。为了明确证明这一点，在另一个未连接到发现服务器的节点上运行。在新的终端中运行一个新的监听者（默认监听``/chatter``话题），并检查它是否没有连接到已经在运行的说话者。@{"calib_text": " `[3142] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3142>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:143
msgid "The new listener node should not be receiving the \"hello world\" messages."
msgstr "新的监听者节点不应该接收到“hello world”消息。@{"calib_text": " `[3143] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3143>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:145
msgid "To finally verify that everything is running correctly, a new talker can be created using the simple discovery protocol (the default DDS distributed discovery mechanism) for discovery."
msgstr "为了最终验证一切是否正常运行，可以使用简单的发现协议（默认的DDS分布式发现机制）创建一个新的说话者进行发现。@{"calib_text": " `[3144] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3144>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:151
msgid "Now you should see the ``simple_listener`` node receiving the \"hello world\" messages from ``simple_talker`` but not the other messages from ``talker_discovery_server``."
msgstr "现在，你应该看到``simple_listener``节点从``simple_talker``接收到“hello world”消息，但不会接收到来自``talker_discovery_server``的其他消息。@{"calib_text": " `[3145] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3145>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:155
msgid "Visualization tool ``rqt_graph``"
msgstr "可视化工具 ``rqt_graph``@{"calib_text": " `[3146] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3146>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:157
msgid "The ``rqt_graph`` tool can be used to verify the nodes and structure of this example. Remember, in order to use ``rqt_graph`` with the discovery server protocol (i.e., to see the ``listener_discovery_server`` and ``talker_discovery_server`` nodes) the ``ROS_DISCOVERY_SERVER`` environment variable must be set before launching it."
msgstr "``rqt_graph`` 工具可用于验证此示例的节点和结构。请记住，为了使用 ``rqt_graph`` 与发现服务器协议（即查看 ``listener_discovery_server`` 和 ``talker_discovery_server`` 节点），在启动之前必须设置 ``ROS_DISCOVERY_SERVER`` 环境变量。@{"calib_text": " `[3147] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3147>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:162
msgid "Advance use cases"
msgstr "高级用例@{"calib_text": " `[3148] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3148>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:164
msgid "The following sections show different features of the discovery server that allow you to build a robust discovery server over the network."
msgstr "以下部分展示了发现服务器的不同功能，使您能够在网络上构建一个强大的发现服务器。@{"calib_text": " `[3149] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3149>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:167
msgid "Server Redundancy"
msgstr "服务器冗余@{"calib_text": " `[3150] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3150>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:169
msgid "By using ``fastdds`` tool, multiple discovery servers can be created. Discovery clients (ROS nodes) can connect to as many servers as desired. This allows to have a redundant network that will work even if some servers or nodes shut down unexpectedly. The figure below shows a simple architecture that provides server redundancy."
msgstr "通过使用 ``fastdds`` 工具，可以创建多个发现服务器。发现客户端（ROS节点）可以连接到任意数量的服务器。这样可以构建一个冗余网络，即使某些服务器或节点意外关闭也能正常工作。下图显示了一个提供服务器冗余的简单架构。@{"calib_text": " `[3151] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3151>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:177
msgid "In several terminals, run the following code to establish a communication with redundant servers."
msgstr "在几个终端中运行以下代码与冗余服务器建立通信。@{"calib_text": " `[3152] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3152>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:187
msgid "``--server-id N`` means server with id N. When referencing the servers with ``ROS_DISCOVERY_SERVER``, server ``0`` must be in first place and server ``1`` in second place."
msgstr "``--server-id N`` 表示 ID 为 N 的服务器。在使用 ``ROS_DISCOVERY_SERVER`` 引用服务器时，服务器 ``0`` 必须排在第一位，服务器 ``1`` 排在第二位。@{"calib_text": " `[3153] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3153>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:199
msgid "Now, if one of these servers fails, there will still be discovery capability available and nodes will still discover each other."
msgstr "现在，如果其中一个服务器出现故障，仍然会有可用的发现功能，节点仍然可以相互发现。@{"calib_text": " `[3154] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3154>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:203
msgid "Backup Server"
msgstr "备份服务器@{"calib_text": " `[3155] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3155>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:205
msgid "The Fast DDS Discovery Server allows creating a server with backup functionality. This allows the server to restore the last state it saved in case of a shutdown."
msgstr "Fast DDS发现服务器允许创建具备备份功能的服务器。这使得服务器能够在关闭情况下恢复到上次保存的状态。@{"calib_text": " `[3156] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3156>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:211
msgid "In different terminals, run the following code to establish a communication with a backed-up server."
msgstr "在不同的终端中运行以下代码，与备份服务器建立通信。@{"calib_text": " `[3157] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3157>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:227
msgid "Several backup files are created in the discovery server's working directory (the directory it was launched in). The two ``SQLite`` files and two ``json`` files contain the information required to start a new server and restore the failed server's state in case of failure, avoiding the need for the discovery process to happen again, and without losing information."
msgstr "在发现服务器的工作目录中（即启动该服务器的目录），创建了几个备份文件。这两个 ``SQLite`` 文件和两个 ``json`` 文件包含了启动新服务器和在发生故障时恢复失败服务器状态所需的信息，避免了需要再次进行发现过程，并且不会丢失信息。@{"calib_text": " `[3158] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3158>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:232
msgid "Discovery partitions"
msgstr "发现分区@{"calib_text": " `[3159] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3159>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:234
msgid "Communication with discovery servers can be split to create virtual partitions in the discovery information. This means that two endpoints will only know about each other if there is a shared discovery server or a network of discovery servers between them. We are going to execute an example with two independent servers. The following figure shows the architecture."
msgstr "与发现服务器的通信可以分割，以在发现信息中创建虚拟分区。这意味着仅当两个端点之间存在共享的发现服务器或一组发现服务器时，它们才会彼此了解。我们将执行一个包含两个独立服务器的示例。下图显示了架构。@{"calib_text": " `[3160] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3160>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:242
msgid "With this schema ``Listener 1`` will be connected to ``Talker 1`` and ``Talker 2``, as they share ``Server 1``. ``Listener 2`` will connect with ``Talker 1`` as they share ``Server 2``. But ``Listener 2`` will not hear the messages from ``Talker 2`` because they do not share any discovery server or discovery servers, including indirectly via connections between redundant discovery servers."
msgstr "按照这个架构，``Listener 1``将连接到``Talker 1``和``Talker 2``，因为它们共享``Server 1``。``Listener 2``将连接到``Talker 1``，因为它们共享``Server 2``。但是``Listener 2``将无法接收来自``Talker 2``的消息，因为它们不共享任何发现服务器，包括通过冗余发现服务器之间的连接间接共享的情况。@{"calib_text": " `[3161] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3161>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:246
msgid "Run the first server listening on localhost with the default port of 11811."
msgstr "在本地主机上运行第一个服务器，使用默认端口号11811。@{"calib_text": " `[3162] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3162>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:252
msgid "In another terminal run the second server listening on localhost using another port, in this case port 11888."
msgstr "在另一个终端上运行第二个服务器，使用本地主机和另一个端口号，例如11888。@{"calib_text": " `[3163] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3163>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:258
msgid "Now, run each node in a different terminal. Use ``ROS_DISCOVERY_SERVER`` environment variable to decide which server they are connected to. Be aware that the `ids must match <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/env_vars/env_vars.html>`__."
msgstr "现在，在不同的终端上运行每个节点。使用``ROS_DISCOVERY_SERVER``环境变量来决定它们连接到哪个服务器。请注意，`ids必须匹配<https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/env_vars/env_vars.html>`__。@{"calib_text": " `[3164] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3164>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:280
msgid "We should see how ``Listener 1`` is receiving messages from both talker nodes, while ``Listener 2`` is in a different partition from ``Talker 2`` and so does not receive messages from it."
msgstr "我们应该看到``Listener 1``从两个talker节点接收消息，而``Listener 2``与``Talker 2``处于不同的分区，因此不会接收来自它的消息。@{"calib_text": " `[3165] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3165>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:284
msgid "Once two endpoints (ROS nodes) have discovered each other, they do not need the discovery server network between them to listen to each other's messages."
msgstr "一旦两个端点（ROS节点）相互发现，它们在彼此之间不需要发现服务器网络来监听彼此的消息。@{"calib_text": " `[3166] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3166>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:289
msgid "ROS 2 Introspection"
msgstr "ROS 2内省@{"calib_text": " `[3167] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3167>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:291
msgid "The `ROS 2 Command Line Interface <https://github.com/ros2/ros2cli>`__ supports several introspection tools to analyze the behavior of a ROS 2 network. These tools (i.e. ``ros2 bag record``, ``ros2 topic list``, etc.) are very helpful to understand a ROS 2 working network."
msgstr "`ROS 2命令行界面<https://github.com/ros2/ros2cli>`__支持多种内省工具，用于分析ROS 2网络的行为。这些工具（例如``ros2 bag record``、``ros2 topic list``等）非常有助于理解ROS 2的工作网络。@{"calib_text": " `[3168] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3168>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:294
msgid "Most of these tools use DDS simple discovery to exchange topic information with every existing participant (using simple discovery, every participant in the network is connected with each other). However, the new Discovery Server v2 implements a network traffic reduction scheme that limits the discovery data between participants that do not share a topic. This means that nodes will only receive topic's discovery data if it has a writer or a reader for that topic. As most ROS 2 CLIs need a node in the network (some of them rely on a running ROS 2 daemon, and some create their own nodes), using the Discovery Server v2 these nodes will not have all the network information, and thus their functionality will be limited."
msgstr "大多数这些工具使用DDS简单发现机制与每个现有的参与者交换主题信息（使用简单发现，网络中的每个参与者彼此连接）。然而，新的Discovery Server v2实现了一种网络流量减少方案，限制了不共享主题的参与者之间的发现数据。这意味着只有当节点对该主题拥有写入者或读取者时，它才会接收到主题的发现数据。由于大多数ROS 2 CLIs需要一个节点在网络中（其中一些依赖于运行中的ROS 2守护程序，而一些则创建自己的节点），使用Discovery Server v2，这些节点将无法获取到所有的网络信息，因此它们的功能将受到限制。@{"calib_text": " `[3169] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3169>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:299
msgid "The Discovery Server v2 functionality allows every Participant to run as a **Super Client**, a kind of **Client** that connects to a **Server**, from which it receives all the available discovery information (instead of just what it needs). In this sense, ROS 2 introspection tools can be configured as **Super Client**, thus being able to discover every entity that is using the Discovery Server protocol within the network."
msgstr "Discovery Server v2功能允许每个参与者作为**超级客户端**（Super Client）运行，这是一种连接到**服务器**的**客户端**（Client），从服务器接收所有可用的发现信息（而不仅仅是它所需的）。在这个意义上，ROS 2内省工具可以被配置为**超级客户端**，因此能够发现网络中使用Discovery Server协议的每个实体。@{"calib_text": " `[3170] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3170>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:304
msgid "In this section we use the term *Participant* as a DDS entity. Each DDS *Participant* corresponds with a ROS 2 *Context*, a ROS 2 abstraction over DDS. `Nodes <ROS2Nodes>` are ROS 2 entities that rely on DDS communication interfaces: ``DataWriter`` and ``DataReader``. Each *Participant* can hold multiple ROS 2 Nodes. For further details about these concepts, please visit the `Node to Participant mapping design document <http://design.ros2.org/articles/Node_to_Participant_mapping.html>`__"
msgstr "在本节中，我们使用术语*参与者*表示DDS实体。每个DDS *参与者*对应于ROS 2 *上下文*（Context），ROS 2是对DDS的抽象。`节点（Nodes）<ROS2Nodes>`是依赖于DDS通信接口（``DataWriter``和``DataReader``）的ROS 2实体。每个*参与者*可以持有多个ROS 2节点。有关这些概念的更多详细信息，请访问`节点到参与者映射设计文档<http://design.ros2.org/articles/Node_to_Participant_mapping.html>`__。@{"calib_text": " `[3171] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3171>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:311
msgid "Daemon's related tools"
msgstr "守护程序相关工具@{"calib_text": " `[3172] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3172>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:313
msgid "The ROS 2 Daemon is used in several ROS 2 CLI introspection tools. It creates its own Participant to add a ROS 2 Node to the network graph, in order to receive all the data sent. In order for the ROS 2 CLI to work when using Discovery Server mechanism, the ROS 2 Daemon needs to be configured as **Super Client**. Therefore, this section is devoted to explain how to use ROS 2 CLI with ROS 2 Daemon running as a **Super Client**. This will allow the Daemon to discover the entire Node graph, and to receive all topic and endpoint information. To do so, a Fast DDS XML configuration file is used to configure the ROS 2 Daemon and CLI tools."
msgstr "ROS 2守护程序在几个ROS 2 CLI内省工具中使用。它创建自己的参与者，将ROS 2节点添加到网络图中，以接收发送的所有数据。当使用Discovery Server机制时，为了使ROS 2 CLI正常工作，ROS 2守护程序需要配置为**超级客户端**。因此，本节旨在解释如何使用运行为**超级客户端**的ROS 2守护程序来使用ROS 2 CLI。这将允许守护程序发现整个节点图，并接收所有主题和端点信息。为此，使用Fast DDS XML配置文件来配置ROS 2守护程序和CLI工具。@{"calib_text": " `[3173] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3173>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:321
msgid "Below you can find a XML configuration profile, which for this tutorial should be saved in the working directory as ```super_client_configuration_file.xml``` file. This file will configure every new participant using it, as a **Super Client**."
msgstr "在下面，您可以找到一个XML配置文件，对于本教程，它应该被保存在工作目录中，命名为```super_client_configuration_file.xml```。该文件将配置使用它的每个新参与者为**超级客户端**。@{"calib_text": " `[3174] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3174>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:356
msgid "Under the *RemoteServer* tag, the *prefix* attribute value should be updated according to the server ID passed on the CLI (see `Fast DDS CLI <https://fast-dds.docs.eprosima.com/en/latest/fastddscli/cli/cli.html#discovery>`__). The value specified in the shown XML snippet corresponds to an ID of value 0."
msgstr "在*RemoteServer*标签下，*prefix*属性值应根据传递给CLI的服务器ID进行更新（请参阅`Fast DDS CLI <https://fast-dds.docs.eprosima.com/en/latest/fastddscli/cli/cli.html#discovery>`__）。在所示的XML片段中指定的值对应于值为0的ID。@{"calib_text": " `[3175] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3175>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:359
msgid "First of all, instantiate a Discovery Server using `Fast DDS CLI <https://fast-dds.docs.eprosima.com/en/latest/fastddscli/cli/cli.html#discovery>`__ specifying an ID of value 0."
msgstr "首先，使用`Fast DDS CLI <https://fast-dds.docs.eprosima.com/en/latest/fastddscli/cli/cli.html#discovery>`__实例化一个Discovery Server，指定一个值为0的ID。@{"calib_text": " `[3176] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3176>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:365
msgid "Run a talker and a listener that will discover each other through the Server (notice that ``ROS_DISCOVERY_SERVER`` configuration is the same as the one in ``super_client_configuration_file.xml``)."
msgstr "运行一个talker和一个listener，它们将通过服务器相互发现（请注意，``ROS_DISCOVERY_SERVER``配置与``super_client_configuration_file.xml``中的配置相同）。@{"calib_text": " `[3177] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3177>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:377
msgid "Then, instantiate a ROS 2 Daemon using the **Super Client** configuration (remember to source ROS 2 installation in every new terminal)."
msgstr "然后，使用**Super Client**配置实例化一个ROS 2 Daemon（记得在每个新终端中运行ROS 2安装文件）。@{"calib_text": " `[3178] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3178>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:389
msgid "We can also see the Node's Graph using the ROS 2 tool ``rqt_graph`` as follows (you may need to press the refresh button):"
msgstr "我们还可以使用ROS 2工具``rqt_graph``查看节点图，如下所示（你可能需要按下刷新按钮）：@{"calib_text": " `[3179] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3179>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:398
msgid "No Daemon tools"
msgstr "没有守护进程工具@{"calib_text": " `[3180] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3180>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:400
msgid "Some ROS 2 CLI tools do not use the ROS 2 Daemon. In order for these tools to connect with a Discovery Server and receive all the topics information they need to be instantiated as a **Super Client** that connects to the **Server**."
msgstr "一些ROS 2 CLI工具不使用ROS 2守护进程。为了使这些工具能够与发现服务器连接并接收所有主题信息，它们需要被实例化为一个连接到**服务器**的**超级客户端**。@{"calib_text": " `[3181] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3181>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:403
msgid "Following the previous configuration, build a simple system with a talker and a listener. First, run a **Server**:"
msgstr "按照先前的配置，构建一个包含一个讲话者和一个监听者的简单系统。首先，运行一个**服务器**：@{"calib_text": " `[3182] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3182>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:410
msgid "Then, run the talker and listener in separate terminals:"
msgstr "然后，在不同的终端中运行讲话者和监听者：@{"calib_text": " `[3183] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3183>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:422
msgid "Continue using the ROS 2 CLI with ``--no-daemon`` option with the new configuration. New nodes will connect with the existing Server and will know every topic. Exporting ``ROS_DISCOVERY_SERVER`` is not needed as the ROS 2 tools will be configured through the ``FASTRTPS_DEFAULT_PROFILES_FILE``."
msgstr "继续使用带有``--no-daemon``选项的ROS 2 CLI和新配置。新节点将连接到现有的服务器并了解每个主题。不需要导出``ROS_DISCOVERY_SERVER``，因为ROS 2工具将通过``FASTRTPS_DEFAULT_PROFILES_FILE``进行配置。@{"calib_text": " `[3184] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3184>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:434
msgid "Compare Fast DDS Discovery Server with Simple Discovery Protocol"
msgstr "将Fast DDS Discovery Server与Simple Discovery Protocol进行比较@{"calib_text": " `[3185] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3185>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:436
msgid "In order to compare executing nodes using the *Simple Discovery* Protocol (the default DDS mechanism for distributed discovery) or the *Discovery Server*, two scripts that execute a talker and many listeners and analyze the network traffic during this time are provided. For this experiment, ``tshark`` is required to be installed on your system. The configuration file is mandatory in order to avoid using intraprocess mode."
msgstr "为了比较使用“Simple Discovery”协议（作为分布式发现的默认DDS机制）或“Discovery Server”的执行节点，提供了两个脚本来执行一个讲话者和多个侦听者，并在此期间分析网络流量。在进行此实验时，需要在您的系统上安装“tshark”。配置文件是强制性的，以避免使用进程内模式。@{"calib_text": " `[3186] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3186>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:442
msgid "These scripts require a discovery server closure feature that is only available from versions newer than the version provided in ROS 2 Foxy. In order to use this functionality, compile ROS 2 with Fast DDS v2.1.0 or higher."
msgstr "这些脚本需要一个关闭发现服务器功能，该功能仅在ROS 2 Foxy提供的版本更新版本中可用。为了使用此功能，需使用Fast DDS v2.1.0或更高版本编译ROS 2。@{"calib_text": " `[3187] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3187>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:445
msgid "These scripts' features are references for advanced purposes and their study is left to the user."
msgstr "这些脚本的功能是为高级用途提供参考，其研究留给用户自行完成。@{"calib_text": " `[3188] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3188>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:447
msgid ":download:`bash network traffic generator <scripts/generate_discovery_packages.bash>`"
msgstr ":download:`bash网络流量生成器 <scripts/generate_discovery_packages.bash>`@{"calib_text": " `[3189] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3189>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:449
msgid ":download:`python3 graph generator <scripts/discovery_packets.py>`"
msgstr ":download:`python3图形生成器 <scripts/discovery_packets.py>`@{"calib_text": " `[3190] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3190>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:451
msgid ":download:`XML configuration <scripts/no_intraprocess_configuration.xml>`"
msgstr ":download:`XML配置文件 <scripts/no_intraprocess_configuration.xml>`@{"calib_text": " `[3191] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3191>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:453
msgid "Run the bash script with the path to ``setup.bash`` file to source ROS 2 as an argument. This will generate the traffic trace for simple discovery. Execute the same script with second argument ``SERVER``. It will generate the trace for using the discovery server."
msgstr "使用路径``setup.bash``文件作为参数运行bash脚本，以源化ROS 2。这将生成用于简单发现的流量跟踪。使用第二个参数``SERVER``执行相同的脚本。它将生成使用发现服务器的跟踪。@{"calib_text": " `[3192] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3192>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:460
msgid "Depending on your configuration of ``tcpdump``, this script may require ``sudo`` privileges to read traffic across your network device."
msgstr "根据您的``tcpdump``配置，该脚本可能需要``sudo``特权以读取您的网络设备上的流量。@{"calib_text": " `[3193] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3193>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:462
msgid "After both executions are done, run the Python script to generate a graph similar to the one below."
msgstr "在两次执行完成后，运行Python脚本生成类似下面的图形。@{"calib_text": " `[3194] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3194>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:474
msgid "This graph is the result of a specific run of the experiment. The reader can execute the scripts and generate their own results for comparison. It can easily be seen that network traffic is reduced when using discovery service."
msgstr "这个图形是特定实验运行的结果。读者可以执行脚本并生成自己的结果进行比较。很容易看出，在使用发现服务时，网络流量减少了。@{"calib_text": " `[3195] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3195>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:478
msgid "The reduction in traffic is a result of avoiding every node announcing itself and waiting a response from every other node on the network. This creates a huge amount of traffic in large architectures. The reduction from this method increases with the number of nodes, making this architecture more scalable than the Simple Discovery Protocol approach."
msgstr "流量的减少是因为避免了每个节点宣告自己并等待网络中的每个其他节点的响应。在大型架构中，这会产生大量的流量。这种方法的减少量随节点数量增加而增加，使得这种架构比简单发现协议方法更具可扩展性。@{"calib_text": " `[3196] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3196>`_ "}@"


#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:482
msgid "The new Fast DDS Discovery Server v2 is available since *Fast DDS* v2.0.2, replacing the old discovery server. In this new version, those nodes that do not share topics will automatically not discover each other, saving the whole discovery data required to connect them and their endpoints. The experiment above does not show this case, but even so the massive reduction in traffic can be appreciated due to the hidden infrastructure topics of ROS 2 nodes."
msgstr "新的Fast DDS Discovery Server v2自*Fast DDS* v2.0.2起可用，取代了旧的发现服务器。在这个新版本中，那些不共享主题的节点将自动不会相互发现，从而节省了连接它们及其端点所需的整个发现数据。上面的实验并未显示这种情况，但即使如此，由于ROS 2节点的隐藏基础设施主题，仍然可以看到大规模的流量显著减少。@{"calib_text": " `[3197] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3197>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:7
msgid "Unlocking the potential of Fast DDS middleware [community-contributed]"
msgstr "发挥Fast DDS中间件的潜力 [社区贡献]@{"calib_text": " `[3198] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3198>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:9
msgid "**Goal:** This tutorial will show how to use the extended configuration capabilities of Fast DDS in ROS 2."
msgstr "**目标：**本教程将展示如何在ROS 2中使用Fast DDS的扩展配置功能。@{"calib_text": " `[3199] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3199>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:22
msgid "The interface between the ROS 2 stack and *Fast DDS* is provided by the ROS 2 middleware implementation `rmw_fastrtps <https://github.com/ros2/rmw_fastrtps>`_. This implementation is available in all ROS 2 distributions, both from binaries and from sources."
msgstr "ROS 2栈与Fast DDS之间的接口由ROS 2中间件实现`rmw_fastrtps <https://github.com/ros2/rmw_fastrtps>`_提供。此实现在所有ROS 2发行版中都可用，包括二进制和源代码。@{"calib_text": " `[3200] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3200>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:25
msgid "ROS 2 RMW only allows for the configuration of certain middleware QoS (see :doc:`ROS 2 QoS policies <../../Concepts/About-Quality-of-Service-Settings>`). However, ``rmw_fastrtps`` offers extended configuration capabilities to take full advantage of the features in *Fast DDS*. This tutorial will guide you through a series of examples explaining how to use XML files to unlock this extended configuration."
msgstr "ROS 2 RMW只允许配置特定中间件的QoS（参见:doc:`ROS 2 QoS策略<../../Concepts/About-Quality-of-Service-Settings>`）。然而，``rmw_fastrtps``提供了扩展配置功能，以充分利用Fast DDS的功能。本教程将通过一系列示例指导您如何使用XML文件来解锁此扩展配置。@{"calib_text": " `[3201] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3201>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:30
msgid "In order to get more information about using *Fast DDS* on ROS 2, please check the `following documentation <https://fast-dds.docs.eprosima.com/en/latest/fastdds/ros2/ros2.html>`__."
msgstr "为了获取有关在ROS 2上使用*Fast DDS*的更多信息，请查看以下文档 <https://fast-dds.docs.eprosima.com/en/latest/fastdds/ros2/ros2.html>`__。@{"calib_text": " `[3202] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3202>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:36
msgid "This tutorial assumes that you know how to :doc:`create a package <../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`. It also assumes you know how to write a :doc:`simple publisher and subscriber<../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber>` and a :doc:`simple service and client <../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client>`. Although the examples are implemented in C++, the same concepts apply to Python packages."
msgstr "本教程假设您知道如何 :doc:`创建一个包 <../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`。它还假设您知道如何编写一个 :doc:`简单的发布者和订阅者 <../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber>` 和一个 :doc:`简单的服务和客户端 <../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client>`。尽管示例是用C++实现的，但相同的概念也适用于Python包。@{"calib_text": " `[3203] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3203>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:42
msgid "Mixing synchronous and asynchronous publications in the same node"
msgstr "在同一节点中混合同步和异步发布@{"calib_text": " `[3204] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3204>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:44
msgid "In this first example, a node with two publishers, one of them with synchronous publication mode and the other one with asynchronous publication mode, will be created."
msgstr "在这个第一个示例中，将创建一个具有两个发布者的节点，其中一个使用同步发布模式，另一个使用异步发布模式。@{"calib_text": " `[3205] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3205>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:46
msgid "``rmw_fastrtps`` uses asynchronous publication mode by default. When the publisher invokes the write operation, the data is copied into a queue, a background thread (asynchronous thread) is notified about the addition to the queue, and control of the thread is returned to the user before the data is actually sent. The background thread is in charge of consuming the queue and sending the data to every matched reader."
msgstr "``rmw_fastrtps`` 默认使用异步发布模式。当发布者调用写操作时，数据会被复制到一个队列中，然后通知后台线程（异步线程）有数据添加到队列中，并在实际发送数据之前将线程控制返回给用户。后台线程负责消费队列并将数据发送给每个匹配的读取器。@{"calib_text": " `[3206] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3206>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:51
msgid "On the other hand, with synchronous publication mode the data is sent directly within the context of the user thread. This entails that any blocking call occurring during the write operation would block the user thread, thus preventing the application from continuing its operation. However, this mode typically yields higher throughput rates at lower latencies, since there is no notification nor context switching between threads."
msgstr "另一方面，同步发布模式下，数据直接在用户线程的上下文中发送。这意味着在写操作期间发生的任何阻塞调用都会阻塞用户线程，从而阻止应用程序继续运行。然而，这种模式通常具有更高的吞吐量和更低的延迟，因为线程之间没有通知或上下文切换。@{"calib_text": " `[3207] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3207>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:57
msgid "Create the node with the publishers"
msgstr "使用发布者创建节点@{"calib_text": " `[3208] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3208>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:59
msgid "First, create a new package named ``sync_async_node_example_cpp`` on a new workspace:"
msgstr "首先，在新的工作空间上创建一个名为``sync_async_node_example_cpp``的新软件包：@{"calib_text": " `[3209] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3209>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:278 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:296 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:325 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:598 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:616 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:638 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:45 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:340 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:358 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:380 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:45 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:361 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:379 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:401 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:44 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:334 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:352 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:374 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:44 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:287 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:305 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:327 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:65 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:291 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:309 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:331 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:65 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:310 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:328 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:350 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:49 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:86 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:202 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:224 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:302
msgid "Linux"
msgstr "Linux@{"calib_text": " `[3210] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3210>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:385 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:407 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:50 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:340 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:358 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:380 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:50 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:293 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:311 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:333 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:71 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:297 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:315 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:337 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:71 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:316 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:334 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:356 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:56 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:92 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:208 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:230 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:308
msgid "macOS"
msgstr "macOS@{"calib_text": " `[3211] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3211>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:650 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:57 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:350 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:370 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:392 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:57 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:371 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:391 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:413 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:56 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:344 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:364 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:386 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:56 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:297 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:317 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:339 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:77 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:301 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:321 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:343 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:77 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:320 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:340 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:362 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:63 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:98 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:214 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:236 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:314
msgid "Windows"
msgstr "Windows@{"calib_text": " `[3212] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3212>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:88
msgid "Then, add a file named ``src/sync_async_writer.cpp`` to the package, with the following content. Note that the synchronous publisher will be publishing on topic ``sync_topic``, while the asynchronous one will be publishing on topic ``async_topic``."
msgstr "然后，在包中添加一个名为``src/sync_async_writer.cpp``的文件，其内容如下。请注意，同步发布者将在主题``sync_topic``上发布，而异步发布者将在主题``async_topic``上发布。@{"calib_text": " `[3213] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3213>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:171
msgid "Now open the ``CMakeLists.txt`` file and add a new executable and name it ``SyncAsyncWriter`` so you can run your node using ``ros2 run``:"
msgstr "现在打开``CMakeLists.txt``文件，添加一个新的可执行文件并命名为``SyncAsyncWriter``，这样你就可以使用``ros2 run``运行你的节点：@{"calib_text": " `[3214] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3214>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:178 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:176 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:465 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:238 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:265 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:276
msgid "Finally, add the ``install(TARGETS…)`` section so ``ros2 run`` can find your executable:"
msgstr "最后，添加``install(TARGETS...)``部分，以便``ros2 run``可以找到你的可执行文件：@{"calib_text": " `[3215] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3215>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:186 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:271
msgid "You can clean up your ``CMakeLists.txt`` by removing some unnecessary sections and comments, so it looks like this:"
msgstr "你可以通过删除一些不必要的部分和注释来简化你的``CMakeLists.txt``，使其看起来像这样：@{"calib_text": " `[3216] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3216>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:215
msgid "If this node is built and run now, both publishers will behave the same, publishing asynchronously in both topics, because this is the default publication mode. The default publication mode configuration can be changed in runtime during the node launching, using an XML file."
msgstr "如果此节点现在构建并运行，两个发布者将表现相同，在两个主题中都进行异步发布，因为这是默认的发布模式。默认的发布模式配置可以在节点启动期间通过使用 XML 文件进行更改。@{"calib_text": " `[3217] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3217>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:219
msgid "Create the XML file with the profile configuration"
msgstr "创建具有配置文件的 XML 文件。@{"calib_text": " `[3218] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3218>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:221
msgid "Create a file with name ``SyncAsync.xml`` and the following content:"
msgstr "创建名为“SyncAsync.xml”的文件，并包含以下内容：@{"calib_text": " `[3219] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3219>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:260
msgid "Note that several profiles for publisher and subscriber are defined. Two default profiles which are defined setting the ``is_default_profile`` to ``true``, and two profiles with names that coincide with those of the previously defined topics: ``sync_topic`` and another one for ``async_topic``. These last two profiles set the publication mode to ``SYNCHRONOUS`` or ``ASYNCHRONOUS`` accordingly. Note also that all profiles specify a ``historyMemoryPolicy`` value, which is needed for the example to work, and the reason will be explained later on this tutorial."
msgstr "请注意，定义了多个发布者和订阅者的配置文件。有两个默认配置文件，将“is_default_profile”设置为“true”，还有两个与先前定义的主题名称相匹配的配置文件：“sync_topic”和“async_topic”。这两个配置文件将发布模式分别设置为“同步”或“异步”。还请注意，所有配置文件都指定了“historyMemoryPolicy”值，这对于示例的运行是必需的，稍后在本教程中将进行解释。@{"calib_text": " `[3220] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3220>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:266
msgid "Execute the publisher node"
msgstr "执行发布者节点@{"calib_text": " `[3221] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3221>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:268
msgid "You will need to export the following environment variables for the XML to be loaded:"
msgstr "您需要导出以下环境变量以加载XML文件:@{"calib_text": " `[3222] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3222>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:296 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:420
msgid "Finally, ensure you have sourced your setup files and run the node:"
msgstr "最后，确保您已经加载了设置文件并运行了节点:@{"calib_text": " `[3223] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3223>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:303
msgid "You should see the publishers sending the data from the publishing node, like so:"
msgstr "您应该看到发布者从发布节点发送数据，如下所示:@{"calib_text": " `[3224] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3224>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:314
msgid "Now you have a synchronous publisher and an asynchronous publisher running inside the same node."
msgstr "现在你有一个同步发布者和一个异步发布者在同一个节点中运行。@{"calib_text": " `[3225] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3225>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:318
msgid "Create a node with the subscribers"
msgstr "创建一个带有订阅者的节点。@{"calib_text": " `[3226] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3226>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:320
msgid "Next, a new node with the subscribers that will listen to the ``sync_topic`` and ``async_topic`` publications is going to be created. In a new source file named ``src/sync_async_reader.cpp`` write the following content:"
msgstr "接下来，将创建一个新的节点，并添加订阅者，这些订阅者将监听 ``sync_topic`` 和 ``async_topic`` 的发布。在一个名为 ``src/sync_async_reader.cpp`` 的新源文件中写入以下内容：@{"calib_text": " `[3227] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3227>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:377
msgid "Open the ``CMakeLists.txt`` file and add a new executable and name it ``SyncAsyncReader`` under the previous ``SyncAsyncWriter``:"
msgstr "打开 ``CMakeLists.txt`` 文件，并添加一个新的可执行文件，命名为 ``SyncAsyncReader``，位于之前的 ``SyncAsyncWriter`` 下面：@{"calib_text": " `[3228] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3228>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:390
msgid "Execute the subscriber node"
msgstr "执行订阅者节点@{"calib_text": " `[3229] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3229>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:392
msgid "With the publisher node running in one terminal, open another one and export the required environment variables for the XML to be loaded:"
msgstr "在一个终端中运行发布者节点后，打开另一个终端并导出所需的环境变量以加载XML文件：@{"calib_text": " `[3230] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3230>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:427
msgid "You should see the subscribers receiving the data from the publishing node, like so:"
msgstr "您应该看到订阅者节点接收来自发布者节点的数据，如下所示：@{"calib_text": " `[3231] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3231>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:440
msgid "Analysis of the example"
msgstr "示例的分析@{"calib_text": " `[3232] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3232>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:443
msgid "Configuration profiles XML"
msgstr "配置文件XML@{"calib_text": " `[3233] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3233>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:445
msgid "The XML file defines several configurations for publishers and subscribers. You can have a default publisher configuration profile and several topic-specific publisher profiles. The only requirement is that all publisher profiles have a different name and that there is only a single default profile. The same goes for subscribers."
msgstr "XML文件定义了发布者和订阅者的多个配置。您可以有一个默认的发布者配置文件和多个特定主题的发布者配置文件。唯一的要求是所有的发布者配置文件必须具有不同的名称，并且只能有一个默认配置文件。订阅者也是如此。@{"calib_text": " `[3234] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3234>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:450
msgid "In order to define a configuration for a specific topic, just name the profile after the the ROS 2 topic name (like ``/sync_topic`` and ``/async_topic`` in the example), and ``rmw_fastrtps`` will apply this profile to all publishers and subscribers for that topic. The default configuration profile is identified by the attribute ``is_default_profile`` set to ``true``, and acts as a fallback profile when there is no other one with a name matching the topic name."
msgstr "为了为特定的主题定义配置，只需将配置文件命名为ROS 2主题名称（例如示例中的``/sync_topic``和``/async_topic``），``rmw_fastrtps``将为该主题的所有发布者和订阅者应用该配置文件。默认配置文件由属性``is_default_profile``设置为``true``来标识，并且在没有其他与主题名称匹配的配置文件时充当回退配置文件。@{"calib_text": " `[3235] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3235>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:454
msgid "The environment variable ``FASTRTPS_DEFAULT_PROFILES_FILE`` is used to inform *Fast DDS* the path to the XML file with the configuration profiles to load."
msgstr "环境变量``FASTRTPS_DEFAULT_PROFILES_FILE``用于通知*Fast DDS*加载配置文件的XML文件路径。@{"calib_text": " `[3236] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3236>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:457
msgid "RMW_FASTRTPS_USE_QOS_FROM_XML"
msgstr "RMW_FASTRTPS_USE_QOS_FROM_XML@{"calib_text": " `[3237] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3237>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:459
msgid "Among all the configurable attributes, ``rmw_fastrtps`` treats ``publishMode`` and ``historyMemoryPolicy`` differently. By default, these values are set to ``ASYNCHRONOUS`` and ``PREALLOCATED_WITH_REALLOC`` within the ``rmw_fastrtps`` implementation, and the values set on the XML file are ignored. In order to use the values in the XML file, the environment variable ``RMW_FASTRTPS_USE_QOS_FROM_XML`` must be set to ``1``."
msgstr "在所有可配置属性中，``rmw_fastrtps`` 对待 ``publishMode`` 和 ``historyMemoryPolicy`` 有所不同。默认情况下，这些值在 ``rmw_fastrtps`` 实现中被设置为 ``ASYNCHRONOUS`` 和 ``PREALLOCATED_WITH_REALLOC``，并且忽略了 XML 文件中设置的值。要使用 XML 文件中的值，必须将环境变量 ``RMW_FASTRTPS_USE_QOS_FROM_XML`` 设置为 ``1``。@{"calib_text": " `[3238] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3238>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:463
msgid "However, this entails **another caveat**: If ``RMW_FASTRTPS_USE_QOS_FROM_XML`` is set, but the XML file does not define ``publishMode`` or ``historyMemoryPolicy``, these attributes take the *Fast DDS* default value instead of the ``rmw_fastrtps`` default value. This is important, especially for ``historyMemoryPolicy``, because the *Fast DDS* deafult value is ``PREALLOCATED`` which does not work with ROS2 topic data types. Therefore, in the example, a valid value for this policy has been explicitly set (``DYNAMIC``)."
msgstr "然而，这带来了**另一个注意事项**：如果设置了 ``RMW_FASTRTPS_USE_QOS_FROM_XML``，但 XML 文件没有定义 ``publishMode`` 或 ``historyMemoryPolicy``，这些属性会取代 ``rmw_fastrtps`` 的默认值而使用 *Fast DDS* 的默认值。这一点非常重要，特别是对于 ``historyMemoryPolicy``，因为 *Fast DDS* 的默认值是 ``PREALLOCATED``，而这与 ROS2 主题数据类型不兼容。因此，在示例中，明确设置了此策略的有效值（``DYNAMIC``）。@{"calib_text": " `[3239] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3239>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:470
msgid "Prioritization of rmw_qos_profile_t"
msgstr "rmw_qos_profile_t 的优先级排序@{"calib_text": " `[3240] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3240>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:472
msgid "ROS 2 QoS contained in `rmw_qos_profile_t <http://docs.ros2.org/latest/api/rmw/structrmw__qos__profile__t.html>`_ are always honored, unless set to ``*_SYSTEM_DEFAULT``. In that case, XML values (or *Fast DDS* default values in the absence of XML ones) are applied. This means that if any QoS in ``rmw_qos_profile_t`` is set to something other than ``*_SYSTEM_DEFAULT``, the corresponding value in the XML is ignored."
msgstr "除非设置为``*_SYSTEM_DEFAULT``，否则始终会遵守包含在`rmw_qos_profile_t <http://docs.ros2.org/latest/api/rmw/structrmw__qos__profile__t.html>`_中的ROS 2 QoS。在这种情况下，将应用XML值（或在没有XML值的情况下使用*Fast DDS*的默认值）。这意味着如果``rmw_qos_profile_t``中的任何QoS设置为与``*_SYSTEM_DEFAULT``不同的其他值，则会忽略XML中的相应值。@{"calib_text": " `[3241] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3241>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:478
msgid "Using other FastDDS capabilities with XML"
msgstr "使用XML配置其他FastDDS功能@{"calib_text": " `[3242] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3242>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:480
msgid "Although we have created a node with two publishers with different configuration, it is not easy to check that they are behaving differently. Now that the basics of XML profiles have been covered, let us use them to configure something which has some visual effect on the nodes. Specifically, a maximum number of matching subscribers on one of the publishers and a partition definition on the other will be set. Note that these are only very simple examples among all the configuration attributes that can be tuned on ``rmw_fastrtps`` through XML files. Please refer to `*Fast DDS* documentation <https://fast-dds.docs.eprosima.com/en/latest/fastdds/xml_configuration/xml_configuration.html#xml-profiles>`__ to  see the whole list of attributes that can be configured through XML files."
msgstr "尽管我们已经创建了一个具有不同配置的节点的两个发布者，但很难检查它们是否表现不同。现在已经介绍了XML配置文件的基础知识，让我们使用它们来配置对节点具有一些可视效果的内容。具体来说，将设置一个发布者的最大匹配订阅者数量，并在另一个发布者上设置一个分区定义。请注意，这些只是在``rmw_fastrtps``上可以通过XML文件调整的所有配置属性中的非常简单的示例。请参考`*Fast DDS*文档<https://fast-dds.docs.eprosima.com/en/latest/fastdds/xml_configuration/xml_configuration.html#xml-profiles>`__以查看可以通过XML文件配置的属性的完整列表。@{"calib_text": " `[3243] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3243>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:487
msgid "Limiting the number of matching subscribers"
msgstr "限制匹配订阅者的数量@{"calib_text": " `[3244] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3244>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:489
msgid "Add a maximum number of matched subscribers to the ``/async_topic`` publisher profile. It should look like this:"
msgstr "在``/async_topic``发布者配置文件中添加最大匹配订阅者数。它应该是这样的：@{"calib_text": " `[3245] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3245>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:509
msgid "The number of matching subscribers is being limited to one."
msgstr "匹配的订阅者数量被限制为一个。@{"calib_text": " `[3246] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3246>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:511
msgid "Now open three terminals and do not forget to source the setup files and to set the required environment variables. On the first terminal run the publisher node, and the subscriber node on the other two. You should see that only the first subscriber node receives the messages from both topics. The second one could not complete the matching process in the ``/async_topic`` because the publisher prevented it, as it had already reached its maximum of matched publishers. Consequently, only the messages from the ``/sync_topic`` are going to be received in this third terminal:"
msgstr "现在打开三个终端，并且不要忘记加载设置文件和设置所需的环境变量。在第一个终端中运行发布者节点，在其他两个终端中运行订阅者节点。你会发现只有第一个订阅者节点从两个主题接收到消息。第二个订阅者节点无法在``/async_topic``中完成匹配过程，因为发布者已经阻止了它，由于已经达到了最大匹配订阅者数。因此，这第三个终端只会接收到``/sync_topic``的消息：@{"calib_text": " `[3247] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3247>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:525
msgid "Using partitions within the topic"
msgstr "在主题中使用分区@{"calib_text": " `[3248] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3248>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:527
msgid "The partitions feature can be used to control which publishers and subscribers exchange information within the same topic."
msgstr "分区功能可以用于控制在同一主题下发布者和订阅者之间的信息交换。@{"calib_text": " `[3249] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3249>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:529
msgid "Partitions introduce a logical entity isolation level concept inside the physical isolation induced by a Domain ID. For a publisher to communicate with a subscriber, they have to belong at least to one common partition. Partitions represent another level to separate publishers and subscribers beyond domain and topic. Unlike domain and topic, an endpoint can belong to several partitions at the same time. For certain data to be shared over different domains or topics, there must be a different publisher for each, sharing its own history of changes. However, a single publisher can share the same data sample over different partitions using a single topic data change, thus reducing network overload."
msgstr "分区引入了一个逻辑实体隔离级别的概念，它在由域ID引起的物理隔离内部。要使发布者与订阅者进行通信，它们必须至少属于一个公共分区。分区代表了在域和主题之外进一步分离发布者和订阅者的另一级别。与域和主题不同，一个端点可以同时属于多个分区。为了将某些数据共享到不同的域或主题，每个域或主题必须有一个不同的发布者，共享其自己的更改历史。然而，一个单独的发布者可以使用单个主题数据更改将相同的数据样本共享到不同的分区，从而减少网络负载。@{"calib_text": " `[3250] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3250>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:536
msgid "Let us change the ``/sync_topic`` publisher to partition ``part1`` and create a new ``/sync_topic`` subscriber which uses partition ``part2``. Their profiles should now look like this:"
msgstr "让我们将``/sync_topic``发布者更改为分区``part1``，并创建一个使用分区``part2``的新``/sync_topic``订阅者。它们的配置文件现在应该如下所示：@{"calib_text": " `[3251] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3251>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:568
msgid "Open two terminals. Do not forget to source the setup files and to set the required environment variables. On the first terminal run the publisher node, and the subscriber node on the other one. You should see that only the ``/async_topic`` messages are reaching the subscriber. The ``/sync_topic`` subscriber is not receiving the data as it is in a different partition from the corresponding publisher."
msgstr "打开两个终端。不要忘记源化设置文件并设置所需的环境变量。在第一个终端上运行发布者节点，在另一个终端上运行订阅者节点。您应该注意到只有``/async_topic``的消息到达订阅者。由于``/sync_topic``的发布者与其所在的分区不同，因此``/sync_topic``订阅者无法接收到数据。@{"calib_text": " `[3252] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3252>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:582
msgid "Configuring a service and a client"
msgstr "配置服务和客户端@{"calib_text": " `[3253] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3253>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:584
msgid "Services and clients have a publisher and a subscriber each, that communicate through two different topics. For example, for a service named ``ping`` there is:"
msgstr "服务和客户端各自具有一个发布者和一个订阅者，它们通过两个不同的主题进行通信。例如，对于一个名为``ping``的服务，有以下情况：@{"calib_text": " `[3254] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3254>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:587
msgid "A service subscriber listening to requests on ``/rq/ping``."
msgstr "一个服务的订阅者监听来自``/rq/ping``的请求。@{"calib_text": " `[3255] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3255>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:588
msgid "A service publisher sending responses on ``/rr/ping``."
msgstr "一个服务的发布者在``/rr/ping``上发送响应。@{"calib_text": " `[3256] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3256>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:589
msgid "A client publisher sending requests on ``/rq/ping``."
msgstr "一个客户端发布者在``/rq/ping``上发送请求。@{"calib_text": " `[3257] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3257>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:590
msgid "A client subscriber listening to responses on ``/rr/ping``."
msgstr "一个客户端订阅者监听``/rr/ping``上的响应。@{"calib_text": " `[3258] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3258>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:592
msgid "Although you can use these topic names to set the configuration profiles on the XML, sometimes you may wish to apply the same profile to all services or clients on a node. Instead of copying the same profile with all topic names generated for all services, you can just create a publisher and subscriber profile pair named ``service``. The same can be done for clients creating a pair named ``client``."
msgstr "虽然您可以使用这些主题名称在XML上设置配置文件，但有时您可能希望将同一配置文件应用于节点上的所有服务或客户端。您可以只创建一个名为``service``的发布者和订阅者配置文件对，而不是为所有服务生成所有主题名称的相同配置文件。对于客户端，也可以创建一个名为``client``的配对。@{"calib_text": " `[3259] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3259>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:598
msgid "Create the nodes with the service and client"
msgstr "使用服务和客户端创建节点。@{"calib_text": " `[3260] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3260>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:600
msgid "Start creating the node with the service. Add a new source file named ``src/ping_service.cpp`` on your package with the following content:"
msgstr "开始创建带有服务的节点。在您的软件包中添加一个名为``src/ping_service.cpp``的新源文件，并使用以下内容：@{"calib_text": " `[3261] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3261>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:644
msgid "Create the client in a file named ``src/ping_client.cpp`` with the following content:"
msgstr "创建一个名为``src/ping_client.cpp``的文件，其中包含以下内容：@{"calib_text": " `[3262] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3262>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:694
msgid "Open the ``CMakeLists.txt`` file and add two new executables ``ping_service`` and ``ping_client``:"
msgstr "打开``CMakeLists.txt``文件，并添加两个新的可执行文件``ping_service``和``ping_client``：@{"calib_text": " `[3263] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3263>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:714
msgid "Finally, build the package."
msgstr "最后，构建软件包。@{"calib_text": " `[3264] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3264>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:718
msgid "Create the XML profiles for the service and client"
msgstr "为服务和客户端创建XML配置文件@{"calib_text": " `[3265] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3265>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:720
msgid "Create a file with name ``ping.xml`` with the following content:"
msgstr "创建一个名为 `ping.xml` 的文件，并使用以下内容填充：@{"calib_text": " `[3266] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3266>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:760
msgid "This configuration file sets the publication mode to ``SYNCHRONOUS`` on the service and to ``ASYNCHRONOUS`` on the client. Note that we are only defining the publisher profiles for both the service and the client, but subscriber profiles could be provided too."
msgstr "此配置文件将服务端的发布模式设置为 `SYNCHRONOUS`，客户端的发布模式设置为 `ASYNCHRONOUS`。请注意，我们仅定义了服务和客户端的发布者配置文件，但也可以提供订阅者配置文件。@{"calib_text": " `[3267] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3267>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:765
msgid "Execute the nodes"
msgstr "执行节点操作@{"calib_text": " `[3268] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3268>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:767
msgid "Open two terminals and source the setup files on each one. Then set the required environment variables for the XML to be loaded:"
msgstr "打开两个终端并在每个终端上加载设置文件。然后设置所需的环境变量以加载 XML：@{"calib_text": " `[3269] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3269>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:797
msgid "On the first terminal run the service node."
msgstr "在第一个终端上运行服务节点。@{"calib_text": " `[3270] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3270>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:803
msgid "You should see the service waiting for requests:"
msgstr "您应该看到服务正在等待请求：@{"calib_text": " `[3271] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3271>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:809
msgid "On the second terminal, run the client node."
msgstr "在第二个终端上运行客户端节点。@{"calib_text": " `[3272] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3272>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:816
msgid "You should see the client sending the request and receiving the response:"
msgstr "您应该看到客户端发送请求并接收响应：@{"calib_text": " `[3273] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3273>`_ "}@"


#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:823
msgid "At the same time, the output in the server console has been updated:"
msgstr "同时，服务器控制台中的输出已被更新：@{"calib_text": " `[3274] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3274>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:8
msgid "Recording a bag from a node (C++)"
msgstr "从节点（C++）录制一个包@{"calib_text": " `[3275] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3275>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:10
msgid "**Goal:** Record data from your own C++ node to a bag."
msgstr "**目标：**将您自己的C++节点的数据记录到包中。@{"calib_text": " `[3276] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3276>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:18 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:18 ../../source/Tutorials/Advanced/Security/Access-Controls.rst:19 ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:13 ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:19 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:20 ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:19 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:19 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:18 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:12 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:12 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:12 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:12 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:17 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:16 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:19 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:18 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:18 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:17 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:18 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:19 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:18 ../../source/Tutorials/Intermediate/Rosdep.rst:18 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:18 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:18 ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:18 ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:18 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:18 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:18 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:18 ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:16 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:18 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:18 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:18 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:18 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:18 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:18 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:18 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:18 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:18 ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:18 ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:18 ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:18 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:18 ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:18 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:18 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:18
msgid "Contents"
msgstr "内容@{"calib_text": " `[3277] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3277>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:23
msgid "``rosbag2`` doesn't just provide the ``ros2 bag`` command line tool. It also provides a C++ API for reading from and writing to a bag from your own source code. This allows you to subscribe to a topic and save the received data to a bag at the same time as performing any other processing of your choice on that data."
msgstr "``rosbag2`` 不仅仅提供了 ``ros2 bag`` 命令行工具，还提供了一个 C++ API，可以从你自己的源代码中读取和写入 bag 文件。这允许你订阅一个话题并同时将接收到的数据保存到 bag 文件中，同时对该数据进行任何其他处理。@{"calib_text": " `[3278] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3278>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:30 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:33
msgid "You should have the ``rosbag2`` packages installed as part of your regular ROS 2 setup."
msgstr "你应该在常规的 ROS 2 配置中安装了 ``rosbag2`` 包。@{"calib_text": " `[3279] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3279>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:32 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:35
msgid "If you've installed from Debian packages on Linux, it may be installed by default. If it is not, you can install it using this command."
msgstr "如果你是通过在 Linux 上安装 Debian 包进行安装的，它可能是默认安装的。如果没有安装，可以使用以下命令安装：@{"calib_text": " `[3280] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3280>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:39 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:42
msgid "This tutorial discusses using ROS 2 bags, including from the terminal. You should have already completed the :doc:`basic ROS 2 bag tutorial <../Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data>`."
msgstr "本教程讨论了如何使用 ROS 2 bags，包括在终端上的使用。你应该已经完成了 :doc:`基本 ROS 2 bag 教程 <../Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data>`。@{"calib_text": " `[3281] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3281>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:43 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:46 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:33 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:32 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:46 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:45 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:28 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:53 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:42 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:48 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:43 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:42 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:48 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:45 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:50 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:37 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:41 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:43 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:39 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:45 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:125 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:37 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:36 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:39 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:44 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:34 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:34 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:35 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:35 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:37 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:34 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:65 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:42 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:34 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:38 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:44 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:44 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:30 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:30 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:39 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:34 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:34 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:34 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:34 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:39 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:39 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:38 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:34 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:34
msgid "Tasks"
msgstr "任务@{"calib_text": " `[3282] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3282>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:46 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:49 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:128 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:47 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:37 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:37 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:38 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:38 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:40 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:37 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:37 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:44 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:42 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:42 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:41
msgid "1 Create a package"
msgstr "1 创建一个包@{"calib_text": " `[3283] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3283>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:48 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:51 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:39 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:39 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:40 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:40 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:42 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:39
msgid "Open a new terminal and :doc:`source your ROS 2 installation <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` so that ``ros2`` commands will work."
msgstr "在一个新的终端中 :doc:`源化你的 ROS 2 安装 <../Beginner-CLI-Tools/Configuring-ROS2-Environment>`，这样 ``ros2`` 命令才能正常工作。@{"calib_text": " `[3284] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3284>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:50
msgid "Navigate into the ``ros2_ws`` directory created in a :ref:`previous tutorial <new-directory>`. Navigate into the ``ros2_ws/src`` directory and create a new package:"
msgstr "进入在 :ref:`之前的教程 <new-directory>` 中创建的 ``ros2_ws`` 目录。进入 ``ros2_ws/src`` 目录并创建一个新的包：@{"calib_text": " `[3285] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3285>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:57
msgid "Your terminal will return a message verifying the creation of your package ``bag_recorder_nodes`` and all its necessary files and folders. The ``--dependencies`` argument will automatically add the necessary dependency lines to ``package.xml`` and ``CMakeLists.txt``. In this case, the package will use the ``rosbag2_cpp`` package as well as the ``rclcpp`` package. A dependency on the ``example_interfaces`` package is also required for later parts of this tutorial."
msgstr "您的终端将返回一条消息，验证您的软件包 ``bag_recorder_nodes`` 及其所有必要的文件和文件夹的创建情况。``--dependencies`` 参数将自动向 ``package.xml`` 和 ``CMakeLists.txt`` 添加必要的依赖项。在本例中，该软件包将使用 ``rosbag2_cpp`` 软件包和 ``rclcpp`` 软件包。还需要在本教程的后续部分中依赖于 ``example_interfaces`` 软件包。@{"calib_text": " `[3286] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3286>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:63 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:55 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:55 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:66 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:65 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:62
msgid "1.1 Update ``package.xml``"
msgstr "1.1 更新 ``package.xml``@{"calib_text": " `[3287] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3287>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:65
msgid "Because you used the ``--dependencies`` option during package creation, you don't have to manually add dependencies to ``package.xml`` or ``CMakeLists.txt``. As always, though, make sure to add the description, maintainer email and name, and license information to ``package.xml``."
msgstr "由于您在软件包创建过程中使用了 ``--dependencies`` 选项，因此您无需手动向 ``package.xml`` 或 ``CMakeLists.txt`` 添加依赖项。但请确保向 ``package.xml`` 添加描述、维护者电子邮件和姓名以及许可信息。@{"calib_text": " `[3288] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3288>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:75 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:68 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:74
msgid "2 Write the C++ node"
msgstr "2 编写 C++ 节点@{"calib_text": " `[3289] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3289>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:77
msgid "Inside the ``ros2_ws/src/bag_recorder_nodes/src`` directory, create a new file called ``simple_bag_recorder.cpp`` and paste the following code into it."
msgstr "在 ``ros2_ws/src/bag_recorder_nodes/src`` 目录下创建一个名为 ``simple_bag_recorder.cpp`` 的新文件，并将以下代码粘贴到其中。@{"calib_text": " `[3290] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3290>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:124 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:143 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:117 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:109 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:141 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:116 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:139 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:129 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:122 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:437 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:405 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:438 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:276 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:287 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:170 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:194
msgid "2.1 Examine the code"
msgstr "2.1 检查代码@{"calib_text": " `[3291] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3291>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:126
msgid "The ``#include`` statements at the top are the package dependencies. Note the inclusion of headers from the ``rosbag2_cpp`` package for the functions and structures necessary to work with bag files."
msgstr "顶部的 ``#include`` 语句是包的依赖项。注意包含了来自 ``rosbag2_cpp`` 包的头文件，用于处理袋文件所需的函数和结构。@{"calib_text": " `[3292] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3292>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:129
msgid "In the class constructor we begin by creating the writer object we will use to write to the bag."
msgstr "在类的构造函数中，我们首先创建一个用于写入袋文件的写入器对象。@{"calib_text": " `[3293] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3293>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:135
msgid "Now that we have a writer object, we can open the bag using it. We specify just the URI of the bag to create, leaving other options at their defaults. The default storage options are used, which means that an ``sqlite3``-format bag will be created. The default conversion options are used, too, which will perform no conversion, instead storing messages in the serialisation format they are received in."
msgstr "现在我们有了一个writer对象，我们可以使用它来打开bag。我们只需指定要创建的bag的URI，将其他选项保持默认。使用默认的存储选项，这意味着将创建一个``sqlite3``格式的bag。默认的转换选项也会被使用，这将不进行任何转换，而是将消息以接收时的序列化格式存储起来。@{"calib_text": " `[3294] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3294>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:144 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:180
msgid "With the writer now set up to record data we pass to it, we create a subscription and specify a callback for it. We will write data to the bag in the callback."
msgstr "现在设置好了writer以记录我们传递给它的数据，我们创建一个订阅并为其指定一个回调函数。我们将在回调函数中向bag写入数据。@{"calib_text": " `[3295] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3295>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:152
msgid "The callback itself is different from a typical callback. Rather than receiving an instance of the data type of the topic, we instead receive a ``rclcpp::SerializedMessage``. We do this for two reasons."
msgstr "回调函数本身与典型的回调函数不同。我们不会接收主题数据类型的实例，而是接收一个``rclcpp::SerializedMessage``。我们这样做有两个原因。@{"calib_text": " `[3296] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3296>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:156
msgid "The message data will need to be serialised by ``rosbag2`` before being written to the bag, so rather than unserialising it when receiving the data and then re-serialising it, we ask ROS to just give us the serialised message as-is."
msgstr "消息数据在被写入bag之前需要被``rosbag2``进行序列化，因此我们不会在接收数据时进行反序列化，然后再进行序列化，而是要求ROS直接将序列化的消息给我们。@{"calib_text": " `[3297] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3297>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:157
msgid "The writer API can accept a serialised message."
msgstr "写入API可以接受序列化的消息。@{"calib_text": " `[3298] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3298>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:164
msgid "Within the subscription callback, the first thing to do is determine the time stamp to use for the stored message. This can be anything appropriate to your data, but two common values are the time at which the data was produced, if known, and the time it is received. The second option, the time of reception, is used here."
msgstr "在订阅回调中，首先要确定用于存储消息的时间戳。这可以是与您的数据相关的任何适当的值，但通常有两个常见值可选：数据生成时的时间（如果已知），以及接收到数据的时间。在这里使用的是第二个选项，即接收时间。@{"calib_text": " `[3299] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3299>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:172
msgid "We can then write the message into the bag. Because we have not yet registered any topics with the bag, we must specify the full topic information with the message. This is why we pass in the topic name and the topic type."
msgstr "然后，我们可以将消息写入包中。因为我们还没有向包注册任何主题，所以必须使用消息的完整主题信息来指定。这就是为什么我们传入主题名称和主题类型的原因。@{"calib_text": " `[3300] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3300>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:180
msgid "The class contains two member variables."
msgstr "该类包含两个成员变量。@{"calib_text": " `[3301] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3301>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:182
msgid "The subscription object. Note that the template parameter is the type of the callback, not the type of the topic. In this case the callback receives a ``rclcpp::SerializedMessage`` shared pointer, so this is what the template parameter must be."
msgstr "订阅对象。注意，模板参数是回调函数的类型，而不是主题的类型。在这种情况下，回调函数接收一个``rclcpp::SerializedMessage``的共享指针，所以模板参数必须是这个类型。@{"calib_text": " `[3302] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3302>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:185
msgid "A managed pointer to the writer object used to write to the bag. Note the type of writer used here is the ``rosbag2_cpp::Writer``, the generic writer interface. Other writers may be available with different behaviours."
msgstr "一个指向用于向包中写入数据的写入器对象的管理指针。请注意，在这里使用的写入器类型是``rosbag2_cpp::Writer``，即通用的写入器接口。可能会有其他具有不同行为的写入器可用。@{"calib_text": " `[3303] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3303>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:194 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:205
msgid "The file finishes with the ``main`` function used to create an instance of the node and start ROS processing it."
msgstr "文件以``main``函数结束，用于创建一个节点实例并启动ROS处理。@{"calib_text": " `[3304] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3304>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:207 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:206 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:167 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:172
msgid "2.2 Add executable"
msgstr "2.2 添加可执行文件@{"calib_text": " `[3305] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3305>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:209 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:161
msgid "Now open the ``CMakeLists.txt`` file."
msgstr "现在打开 ``CMakeLists.txt`` 文件。@{"calib_text": " `[3306] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3306>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:211
msgid "Near the top of the file, change ``CMAKE_CXX_STANDARD`` from ``14`` to ``17``."
msgstr "在文件的顶部附近，将 ``CMAKE_CXX_STANDARD`` 从 ``14`` 改为 ``17``。@{"calib_text": " `[3307] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3307>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:220
msgid "Below the dependencies block, which contains ``find_package(rosbag2_cpp REQUIRED)``, add the following lines of code."
msgstr "在包含 ``find_package(rosbag2_cpp REQUIRED)`` 的依赖项块下面，添加以下代码行。@{"calib_text": " `[3308] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3308>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:233 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:230 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:222 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:213 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:187
msgid "3 Build and run"
msgstr "3. 构建和运行@{"calib_text": " `[3309] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3309>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:235 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:232
msgid "Navigate back to the root of your workspace, ``ros2_ws``, and build your new package."
msgstr "返回到你的工作空间的根目录，``ros2_ws``，并构建你的新包。@{"calib_text": " `[3310] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3310>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:257 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:457 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:254 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:453
msgid "Open a new terminal, navigate to ``ros2_ws``, and source the setup files."
msgstr "打开一个新终端，进入``ros2_ws``目录，并源化设置文件。@{"calib_text": " `[3311] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3311>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:279 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:481 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:276 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:477 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:306 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:286 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:277 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:235
msgid "Now run the node:"
msgstr "现在运行节点：@{"calib_text": " `[3312] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3312>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:285 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:282
msgid "Open a second terminal and run the ``talker`` example node."
msgstr "打开第二个终端并运行``talker``示例节点。@{"calib_text": " `[3313] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3313>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:291
msgid "This will start publishing data on the ``chatter`` topic. As the bag-writing node receives this data, it will write it to the ``my_bag`` bag."
msgstr "这将开始在 ``chatter`` 话题上发布数据。当写入包的节点接收到这些数据时，它将把它写入到 ``my_bag`` 包中。@{"calib_text": " `[3314] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3314>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:294 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:293
msgid "Terminate both nodes. Then, in one terminal start the ``listener`` example node."
msgstr "终止这两个节点。然后，在一个终端中启动 ``listener`` 示例节点。@{"calib_text": " `[3315] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3315>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:301 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:300
msgid "In the other terminal, use ``ros2 bag`` to play the bag recorded by your node."
msgstr "在另一个终端中，使用 ``ros2 bag`` 命令来播放由你的节点记录的包。@{"calib_text": " `[3316] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3316>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:307 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:306
msgid "You will see the messages from the bag being received by the ``listener`` node."
msgstr "你将看到包中的消息被 ``listener`` 节点接收到。@{"calib_text": " `[3317] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3317>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:309 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:308
msgid "If you wish to run the bag-writing node again, you will first need to delete the ``my_bag`` directory."
msgstr "如果您希望再次运行写入包节点，则首先需要删除``my_bag``目录。@{"calib_text": " `[3318] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3318>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:312 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:311
msgid "4 Record synthetic data from a node"
msgstr "4 从节点记录合成数据@{"calib_text": " `[3319] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3319>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:314 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:313
msgid "Any data can be recorded into a bag, not just data received over a topic. A common use case for writing to a bag from your own node is to generate and store synthetic data. In this section you will learn how to write a node that generates some data and stores it in a bag. We will demonstrate two approaches for doing this. The first uses a node with a timer; this is the approach that you would use if your data generation is external to the node, such as reading data directly from hardware (e.g. a camera). The second approach does not use a node; this is the approach you can use when you do not need to use any functionality from the ROS infrastructure."
msgstr "任何数据都可以记录到包中，不仅限于通过主题接收到的数据。从自己的节点写入包的常见用例是生成并存储合成数据。在本节中，您将学习如何编写一个生成数据并将其存储在包中的节点。我们将演示两种实现方法。第一种方法使用定时器的节点；这是您在数据生成与节点外部的情况下使用的方法，例如直接从硬件（如相机）读取数据。第二种方法不使用节点；这是您在不需要使用ROS基础设施的任何功能时可以使用的方法。@{"calib_text": " `[3320] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3320>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:322
msgid "4.1 Write a C++ node"
msgstr "4.1 编写一个 C++ 节点@{"calib_text": " `[3321] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3321>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:324
msgid "Inside the ``ros2_ws/src/bag_recorder_nodes/src`` directory, create a new file called ``data_generator_node.cpp`` and paste the following code into it."
msgstr "在 ``ros2_ws/src/bag_recorder_nodes/src`` 目录下，创建一个名为 ``data_generator_node.cpp`` 的新文件，并将以下代码粘贴到其中。@{"calib_text": " `[3322] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3322>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:379 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:374
msgid "4.2 Examine the code"
msgstr "4.2 检查代码@{"calib_text": " `[3323] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3323>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:381 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:376
msgid "Much of this code is the same as the first example. The important differences are described here."
msgstr "大部分代码与第一个示例相同。以下是重要的区别描述。@{"calib_text": " `[3324] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3324>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:384 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:379
msgid "First, the name of the bag is changed."
msgstr "首先，更改了包的名称。@{"calib_text": " `[3325] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3325>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:390
msgid "In this example we are registering the topic with the bag in advance. This is optional in most cases, but it must be done when passing in a serialised message without topic information."
msgstr "在这个例子中，我们提前在包中注册了话题。在大多数情况下，这是可选的，但是当传入没有话题信息的序列化消息时，必须执行此操作。@{"calib_text": " `[3326] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3326>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:401 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:397
msgid "Rather than a subscription to a topic, this node has a timer. The timer fires with a one-second period, and calls the given member function when it does."
msgstr "这个节点不是订阅某个话题，而是具有一个定时器。定时器以1秒的周期触发，并在触发时调用给定的成员函数。@{"calib_text": " `[3327] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3327>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:408
msgid "Within the timer callback, we generate (or otherwise obtain, e.g. read from a serial port connected to some hardware) the data we wish to store in the bag. The important difference between this and the previous sample is that the data is not yet serialised. Instead we are passing a ROS message data type to the writer object, in this case an instance of ``example_interfaces/msg/Int32``. The writer will serialise the data for us before writing it into the bag."
msgstr "在定时器回调函数中，我们生成（或以其他方式获取，例如从连接到某个硬件的串口读取）希望存储在包中的数据。与上一个示例的重要区别在于，数据尚未序列化。相反，我们将一个ROS消息数据类型传递给写入器对象，在这种情况下是``example_interfaces/msg/Int32``的一个实例。写入器会在将数据写入包之前为我们序列化数据。@{"calib_text": " `[3328] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3328>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:418 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:415
msgid "4.3 Add executable"
msgstr "4.3 添加可执行文件@{"calib_text": " `[3329] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3329>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:420
msgid "Open the ``CMakeLists.txt`` file and add the following lines after the previously-added lines (specifically, after the ``install(TARGETS ...)`` macro call)."
msgstr "打开``CMakeLists.txt``文件，并在之前添加的行后面添加以下行（特别是在``install(TARGETS ...)``宏调用之后）。@{"calib_text": " `[3330] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3330>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:433 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:429
msgid "4.4 Build and run"
msgstr "4.4 构建和运行@{"calib_text": " `[3331] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3331>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:435 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:591 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:431 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:589
msgid "Navigate back to the root of your workspace, ``ros2_ws``, and build your package."
msgstr "返回到你的工作空间根目录``ros2_ws``，并构建你的包。@{"calib_text": " `[3332] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3332>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:479
msgid "(If the ``timed_synthetic_bag`` directory already exists, you must first delete it before running the node.)"
msgstr "（如果``timed_synthetic_bag``目录已经存在，你必须在运行节点之前先将其删除。）@{"calib_text": " `[3333] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3333>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:487 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:483
msgid "Wait for 30 seconds or so, then terminate the node with :kbd:`ctrl-c`. Next, play back the created bag."
msgstr "等待大约30秒，然后使用 :kbd:`ctrl-c` 终止节点。接下来，播放已创建的 bag 文件。@{"calib_text": " `[3334] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3334>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:494 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:651 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:490 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:649
msgid "Open a second terminal and echo the ``/synthetic`` topic."
msgstr "打开第二个终端并回显 ``/synthetic`` 话题。@{"calib_text": " `[3335] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3335>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:500 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:496
msgid "You will see the data that was generated and stored in the bag printed to the console at a rate of one message per second."
msgstr "您将在控制台上以每秒一条消息的速度看到生成并存储在 bag 文件中的数据被打印出来。@{"calib_text": " `[3336] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3336>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:503 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:499
msgid "5 Record synthetic data from an executable"
msgstr "5 使用可执行文件记录合成数据。@{"calib_text": " `[3337] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3337>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:505 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:501
msgid "Now that you can create a bag that stores data from a source other than a topic, you will learn how to generate and record synthetic data from a non-node executable. The advantage of this approach is simpler code and rapid creation of a large quantity of data."
msgstr "现在你可以创建一个能够存储来自话题以外数据的袋子了，接下来你将学习如何从非节点可执行文件生成和记录合成数据。这种方法的优点是代码更简单，可以快速创建大量数据。@{"calib_text": " `[3338] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3338>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:509
msgid "5.1 Write a C++ executable"
msgstr "5.1 编写一个 C++ 可执行文件@{"calib_text": " `[3339] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3339>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:511
msgid "Inside the ``ros2_ws/src/bag_recorder_nodes/src`` directory, create a new file called ``data_generator_executable.cpp`` and paste the following code into it."
msgstr "在 ``ros2_ws/src/bag_recorder_nodes/src`` 目录下创建一个名为 ``data_generator_executable.cpp`` 的新文件，并将以下代码粘贴进去。@{"calib_text": " `[3340] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3340>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:552 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:548
msgid "5.2 Examine the code"
msgstr "5.2 检查代码@{"calib_text": " `[3341] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3341>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:554 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:550
msgid "A comparison of this sample and the previous sample will reveal that they are not that different. The only significant difference is the use of a for loop to drive the data generation rather than a timer."
msgstr "通过比较这个示例和之前的示例，我们会发现它们并没有那么不同。唯一的显著差异是使用了for循环来驱动数据生成，而不是使用定时器。@{"calib_text": " `[3342] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3342>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:557 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:553
msgid "Notice that we are also now generating time stamps for the data rather than relying on the current system time for each sample. The time stamp can be any value you need it to be. The data will be played back at the rate given by these time stamps, so this is a useful way to control the default playback speed of the samples. Notice also that while the gap between each sample is a full second in time, this executable does not need to wait a second between each sample. This allows us to generate a lot of data covering a wide span of time in much less time than playback will take."
msgstr "请注意，我们现在还为数据生成时间戳，而不是依赖于当前系统时间为每个样本生成时间戳。时间戳可以是任何您需要的值。数据将按照这些时间戳给出的速度进行播放，因此这是控制样本默认播放速度的一种有用方式。还要注意，虽然每个样本之间的间隔是一秒钟，但这个可执行文件不需要在每个样本之间等待一秒钟。这样我们就能够在比播放所需的时间少得多的时间内生成大量跨越很长时间范围的数据。@{"calib_text": " `[3343] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3343>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:574 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:572
msgid "5.3 Add executable"
msgstr "5.3 添加可执行文件@{"calib_text": " `[3344] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3344>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:576
msgid "Open the ``CMakeLists.txt`` file and add the following lines after the previously-added lines."
msgstr "打开``CMakeLists.txt``文件，在之前添加的行后面添加以下行。@{"calib_text": " `[3345] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3345>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:589 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:587
msgid "5.4 Build and run"
msgstr "5.4 构建和运行@{"calib_text": " `[3346] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3346>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:613 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:611
msgid "Open a terminal, navigate to ``ros2_ws``, and source the setup files."
msgstr "打开终端，进入 ``ros2_ws`` 目录，并加载设置文件。@{"calib_text": " `[3347] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3347>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:635
msgid "(If the ``big_synthetic_bag`` directory already exists, you must first delete it before running the executable.)"
msgstr "(如果 ``big_synthetic_bag`` 目录已经存在，您必须先删除它，然后再运行可执行文件。)@{"calib_text": " `[3348] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3348>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:637 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:635
msgid "Now run the executable:"
msgstr "现在运行可执行文件：@{"calib_text": " `[3349] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3349>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:643 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:641
msgid "Note that the executable runs and finishes very quickly."
msgstr "注意可执行文件的运行和完成非常快速。@{"calib_text": " `[3350] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3350>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:645 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:643
msgid "Now play back the created bag."
msgstr "现在播放创建的包。@{"calib_text": " `[3351] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3351>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:657 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:655
msgid "You will see the data that was generated and stored in the bag printed to the console at a rate of one message per second. Even though the bag was generated rapidly it is still played back at the rate the time stamps indicate."
msgstr "您将会看到以每秒一条消息的速率在控制台打印在包中生成并存储的数据。即使包生成速度很快，回放仍按照时间戳指示的速率进行。@{"calib_text": " `[3352] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3352>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:661 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:659 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:237 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:216 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:514 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:325 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:254 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:265 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:105 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:253 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:347 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:184 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:241 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:260 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:323 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:126 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:367 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:524 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:822 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:187 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:320 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:487 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:429 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:430 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:536 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:410 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:517 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:338 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:183 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:351 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:310 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:529 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:396 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:346 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:592 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:547 ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:310 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:119 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:97 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:230 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:115 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:114 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:739 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:450 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:471 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:415 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:368 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:431 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:450 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:273 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:385 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:352
msgid "Summary"
msgstr "总结@{"calib_text": " `[3353] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3353>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:663
msgid "You created a node that records data it receives on a topic into a bag. You tested recording a bag using the node, and verified the data was recorded by playing back the bag. You then went on to create a node and an executable to generate synthetic data and store it in a bag."
msgstr "你创建了一个节点，它将接收到的数据记录到一个包（bag）中。你测试了使用该节点录制包，并通过回放包来验证数据是否已记录。然后，你继续创建了一个节点和一个可执行文件，用于生成合成数据并将其存储在包中。@{"calib_text": " `[3354] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3354>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:8
msgid "Recording a bag from a node (Python)"
msgstr "从节点录制包（Python）@{"calib_text": " `[3355] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3355>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:10
msgid "**Goal:** Record data from your own Python node to a bag."
msgstr "**目标：** 将自己的 Python 节点数据录制到一个包中。@{"calib_text": " `[3356] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3356>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:23
msgid "``rosbag2`` doesn't just provide the ``ros2 bag`` command line tool. It also provides a Python API for reading from and writing to a bag from your own source code. This allows you to subscribe to a topic and save the received data to a bag at the same time as performing any other processing of your choice on that data. You may do this, for example, to save data from a topic and the result of processing that data without needing to send the processed data over a topic just to record it. Because any data can be recorded in a bag, it is also possible to save data generated by another source than a topic, such as synthetic data for training sets. This is useful, for example, for quickly generating a bag that contains a large number of samples spread over a long playback time."
msgstr "``rosbag2`` 不仅提供了 ``ros2 bag`` 命令行工具，还提供了一个 Python API，用于从你自己的源代码中读取和写入包。这使得你可以订阅一个话题并将接收到的数据同时保存到一个包中，同时对数据进行任何其他处理。例如，你可以保存话题的数据和处理结果，而无需将处理后的数据发送到另一个话题只为了记录它。由于任何数据都可以记录在包中，因此也可以保存由话题以外的其他源生成的数据，例如用于训练集的合成数据。这对于快速生成包含大量样本且播放时间较长的包非常有用。@{"calib_text": " `[3357] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3357>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:53 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:41 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:41 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:48
msgid "Follow :ref:`these instructions <new-directory>` to create a new workspace named ``ros2_ws``."
msgstr "按照:ref:`这些指示 <new-directory>` 创建名为``ros2_ws``的新工作空间。@{"calib_text": " `[3358] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3358>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:55
msgid "Navigate into the ``ros2_ws/src`` directory and create a new package:"
msgstr "进入``ros2_ws/src``目录并创建一个新包：@{"calib_text": " `[3359] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3359>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:61
msgid "Your terminal will return a message verifying the creation of your package ``bag_recorder_nodes_py`` and all its necessary files and folders. The ``--dependencies`` argument will automatically add the necessary dependency lines to the ``package.xml``. In this case, the package will use the ``rosbag2_py`` package as well as the ``rclpy`` package. A dependency on the ``example_interfaces`` package is also required for message definitions."
msgstr "终端将返回一条消息，验证您的``bag_recorder_nodes_py``包及其所有必要的文件和文件夹已创建。``--dependencies``参数将自动将必要的依赖行添加到``package.xml``中。在此情况下，该包将使用``rosbag2_py``包和``rclpy``包。还需要对``example_interfaces``包进行依赖，以获取消息定义。@{"calib_text": " `[3360] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3360>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:67
msgid "1.1 Update ``package.xml`` and ``setup.py``"
msgstr "1.1 更新``package.xml``和``setup.py``文件@{"calib_text": " `[3361] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3361>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:69
msgid "Because you used the ``--dependencies`` option during package creation, you don't have to manually add dependencies to ``package.xml``. As always, though, make sure to add the description, maintainer email and name, and license information to ``package.xml``."
msgstr "因为您在包创建过程中使用了``--dependencies``选项，所以您不必手动添加依赖项到``package.xml``中。然而，仍然要确保将描述、维护者电子邮件和名称以及许可证信息添加到``package.xml``中。@{"calib_text": " `[3362] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3362>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:78
msgid "Also be sure to add this information to the ``setup.py`` file as well."
msgstr "还要确保将这些信息添加到``setup.py``文件中。@{"calib_text": " `[3363] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3363>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:88 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:68
msgid "2 Write the Python node"
msgstr "2 编写Python节点@{"calib_text": " `[3364] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3364>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:90
msgid "Inside the ``ros2_ws/src/bag_recorder_nodes_py/bag_recorder_nodes_py`` directory, create a new file called ``simple_bag_recorder.py`` and paste the following code into it."
msgstr "在``ros2_ws/src/bag_recorder_nodes_py/bag_recorder_nodes_py``目录中，创建一个名为``simple_bag_recorder.py``的新文件，并将以下代码粘贴到其中。@{"calib_text": " `[3365] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3365>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:145
msgid "The ``import`` statements at the top are the package dependencies. Note the importation of the ``rosbag2_py`` package for the functions and structures necessary to work with bag files."
msgstr "顶部的``import``语句是包的依赖项。注意导入``rosbag2_py``包，用于处理bag文件所需的函数和结构。@{"calib_text": " `[3366] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3366>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:148
msgid "In the class constructor, we begin by creating the writer object that we will use to write to the bag. We are creating a ``SequentialWriter``, which writes messages into the bag in the order they are received. Other writers with different behaviours may be available in `rosbag2 <https://github.com/ros2/rosbag2/tree/humble/rosbag2_cpp/include/rosbag2_cpp/writers>`__."
msgstr "在类构造函数中，我们首先创建一个写入器对象，用于将数据写入bag文件。我们创建了一个``SequentialWriter``，它按照接收到的顺序将消息写入bag文件。`rosbag2 <https://github.com/ros2/rosbag2/tree/humble/rosbag2_cpp/include/rosbag2_cpp/writers>`__中可能还提供了其他具有不同行为的写入器。@{"calib_text": " `[3367] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3367>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:156
msgid "Now that we have a writer object, we can open the bag using it. We specify the URI of the bag to create and the format (``sqlite3``), leaving other options at their defaults. The default conversion options are used, which will perform no conversion and store the messages in the serialization format they are received in."
msgstr "现在我们有了一个写入器对象，我们可以使用它打开bag文件。我们指定要创建的bag文件的URI和格式（``sqlite3``），将其他选项保持默认。使用默认的转换选项，不进行转换，将消息以接收到的序列化格式存储。@{"calib_text": " `[3368] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3368>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:168
msgid "Next, we need to tell the writer about the topics we wish to store. This is done by creating a ``TopicMetadata`` object and registering it with the writer. This object specifies the topic name, topic data type, and serialization format used."
msgstr "接下来，我们需要告诉写入器我们希望存储的话题。这是通过创建一个``TopicMetadata``对象并将其注册到写入器中来完成的。该对象指定了话题名称、话题数据类型和使用的序列化格式。@{"calib_text": " `[3369] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3369>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:192
msgid "The callback receives the message in unserialized form (as is standard for the ``rclpy`` API) and passes the message to the writer, specifying the topic that the data is for and the timestamp to record with the message. However, the writer requires serialised messages to store in the bag. This means that we need to serialise the data before passing it to the writer. For this reason, we call ``serialize_message()`` and pass the result of that to the writer, rather than passing in the message directly."
msgstr "回调函数以未序列化的形式接收消息（这是``rclpy`` API的标准方式），并将消息传递给写入器，指定数据所属的主题和要记录的时间戳。然而，写入器需要序列化的消息来存储在包中。这意味着我们在将数据传递给写入器之前需要对其进行序列化。因此，我们调用``serialize_message()``并将其结果传递给写入器，而不是直接传递消息。@{"calib_text": " `[3370] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3370>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:216
msgid "2.2 Add entry point"
msgstr "2.2 添加入口点@{"calib_text": " `[3371] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3371>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:218 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:417 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:574
msgid "Open the ``setup.py`` file in the ``bag_recorder_nodes_py`` package and add an entry point for your node."
msgstr "打开``bag_recorder_nodes_py``包中的``setup.py``文件，并为您的节点添加一个入口点。@{"calib_text": " `[3372] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3372>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:288
msgid "This will start publishing data on the ``chatter`` topic. As the bag-writing node receives this data, it will write it to the ``my_bag`` bag. If the ``my_bag`` directory already exists, you must first delete it before running the ``simple_bag_recorder`` node. This is because ``rosbag2`` will not overwrite existing bags by default, and so the destination directory cannot exist."
msgstr "这将开始在``chatter``主题上发布数据。当包写入节点接收到此数据时，它将将其写入``my_bag``包中。如果``my_bag``目录已经存在，则在运行``simple_bag_recorder``节点之前必须首先删除它。这是因为``rosbag2``默认不会覆盖现有的包，因此目标目录不能存在。@{"calib_text": " `[3373] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3373>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:321
msgid "4.1 Write a Python node"
msgstr "4.1 编写一个Python节点@{"calib_text": " `[3374] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3374>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:323
msgid "Inside the ``ros2_ws/src/bag_recorder_nodes_py/bag_recorder_nodes_py`` directory, create a new file called ``data_generator_node.py`` and paste the following code into it."
msgstr "在 ``ros2_ws/src/bag_recorder_nodes_py/bag_recorder_nodes_py`` 目录下，创建一个名为 ``data_generator_node.py`` 的新文件，并将以下代码粘贴到其中。@{"calib_text": " `[3375] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3375>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:387
msgid "The name of the topic is also changed, as is the data type stored."
msgstr "主题的名称也已更改，存储的数据类型也已更改。@{"calib_text": " `[3376] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3376>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:404
msgid "Within the timer callback, we generate (or otherwise obtain, e.g. read from a serial port connected to some hardware) the data we wish to store in the bag. As with the previous example, the data is not yet serialised, so we must serialise it before passing it to the writer."
msgstr "在定时器回调中，我们生成（或以其他方式获取，例如从连接到某些硬件的串口读取）希望存储在包中的数据。与之前的示例一样，数据尚未序列化，因此我们在将其传递给写入器之前必须对其进行序列化。@{"calib_text": " `[3377] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3377>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:475
msgid "If the ``timed_synthetic_bag`` directory already exists, you must first delete it before running the node."
msgstr "如果 ``timed_synthetic_bag`` 目录已经存在，在运行节点之前必须先删除它。@{"calib_text": " `[3378] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3378>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:505
msgid "5.1 Write a Python executable"
msgstr "5.1 编写一个 Python 可执行文件@{"calib_text": " `[3379] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3379>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:507
msgid "Inside the ``ros2_ws/src/bag_recorder_nodes_py/bag_recorder_nodes_py`` directory, create a new file called ``data_generator_executable.py`` and paste the following code into it."
msgstr "在 ``ros2_ws/src/bag_recorder_nodes_py/bag_recorder_nodes_py`` 目录下，创建一个名为 ``data_generator_executable.py`` 的新文件，并将以下代码粘贴到其中。@{"calib_text": " `[3380] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3380>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:633
msgid "If the ``big_synthetic_bag`` directory already exists, you must first delete it before running the executable."
msgstr "如果 ``big_synthetic_bag`` 目录已经存在，在运行可执行文件之前必须先删除它。@{"calib_text": " `[3381] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3381>`_ "}@"


#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:661
msgid "You created a node that records data it receives on a topic into a bag. You tested recording a bag using the node, and verified the data was recorded by playing back the bag. This approach can be used to record a bag with additional data than it received over a topic, for example with results obtained from processing the received data. You then went on to create a node and an executable to generate synthetic data and store it in a bag. The latter approaches are useful especially for generating synthetic data that can be used, for example, as training sets."
msgstr "您创建了一个节点，用于将其接收到的数据记录到一个包中。您通过使用该节点进行包记录测试，并通过回放包来验证数据已记录。这种方法可用于记录包含比通过主题接收到的数据更多的附加数据，例如通过处理接收到的数据获得的结果。然后，您继续创建了一个节点和一个可执行文件，用于生成合成数据并将其存储在包中。后一种方法特别适用于生成可用作训练集的合成数据。@{"calib_text": " `[3382] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3382>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:8
msgid "Setting access controls"
msgstr "设置访问控制@{"calib_text": " `[3383] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3383>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:10
msgid "**Goal:** Limit the topics a node can use."
msgstr "**目标：**限制节点可以使用的主题。@{"calib_text": " `[3384] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3384>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:24
msgid "Permissions are quite flexible and can be used to control many behaviors within the ROS graph."
msgstr "权限非常灵活，可用于控制ROS图中的许多行为。@{"calib_text": " `[3385] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3385>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:26
msgid "For this tutorial, we demonstrate a policy which only allows publishing messages on the default ``chatter`` topic. This would prevent, for instance, remapping the topic when launching the listener or using the same security enclaves for another purpose."
msgstr "对于本教程，我们演示了一种只允许在默认“chatter”主题上发布消息的策略。这将防止例如在启动监听器时重新映射主题或将相同的安全隔离用于其他目的。@{"calib_text": " `[3386] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3386>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:29
msgid "In order to enforce this policy, we need to update the ``permissions.xml`` file and re-sign it before launching the node. This can be done by modifying the permissions file by hand, or by using XML templates."
msgstr "为了执行此策略，在启动节点之前，我们需要更新“permissions.xml”文件并重新签名。可以通过手动修改权限文件或使用XML模板来完成此操作。@{"calib_text": " `[3387] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3387>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:34
msgid "Modify ``permissions.xml``"
msgstr "修改“permissions.xml”@{"calib_text": " `[3388] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3388>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:36
msgid "Begin by making a backup of your permissions files, and open ``permissions.xml`` for editing:"
msgstr "首先，备份您的权限文件，并打开“permissions.xml”以进行编辑：@{"calib_text": " `[3389] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3389>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:45
msgid "We will be modifying the ``<allow_rule>`` for ``<publish>`` and ``<subscribe>``. The topics in this XML file use the DDS naming format, not the ROS name. Find details on mapping topic names between ROS and DDS in the `Topic and Service Names design document <https://design.ros2.org/articles/topic_and_service_names.html#mapping-of-ros-2-topic-and-service-names-to-dds-concepts>`_."
msgstr "我们将修改``<allow_rule>``中的``<publish>``和``<subscribe>``。此XML文件中的主题使用DDS命名格式，而不是ROS名称。有关在ROS和DDS之间映射主题名称的详细信息，请参阅`Topic and Service Names设计文档 <https://design.ros2.org/articles/topic_and_service_names.html#mapping-of-ros-2-topic-and-service-names-to-dds-concepts>`_。@{"calib_text": " `[3390] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3390>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:49
msgid "Paste the following XML content into ``permission.xml``, save the file and exit the text editor. This shows the ``chatter`` and ``rosout`` ROS topics renamed to the DDS ``rt/chatter`` and ``rt/rosout`` topics, respectively:"
msgstr "将以下XML内容粘贴到``permission.xml``中，保存文件并退出文本编辑器。这将显示``chatter``和``rosout`` ROS主题分别重命名为DDS的``rt/chatter``和``rt/rosout``主题：@{"calib_text": " `[3391] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3391>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:102
msgid "This policy allows the talker to publish on the ``chatter`` and the ``rosout`` topics. It also allows includes publish and subscribe permissions needed for the talker node to manage parameters (a requirement for all nodes). Discovery permissions remain unchanged from the original template."
msgstr "此策略允许talker在``chatter``和``rosout``主题上进行发布。它还包括talker节点管理参数所需的发布和订阅权限（所有节点的要求）。与原始模板相比，发现权限保持不变。@{"calib_text": " `[3392] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3392>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:108
msgid "Sign the policy file"
msgstr "签署策略文件@{"calib_text": " `[3393] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3393>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:110
msgid "This next command creates the new S/MIME signed policy file ``permissions.p7s`` from the updated XML file ``permissions.xml``. The file must be signed with the Permissions CA certificate, **which requires access to the Permission CA private key**. If the private key has been protected, additional steps may be required to unlock and use it accoring to your security plan."
msgstr "下一个命令从更新的XML文件 ``permissions.xml`` 创建新的S/MIME签名策略文件 ``permissions.p7s``。该文件必须使用权限CA证书进行签名，**这需要访问权限CA私钥**。如果私钥已经受保护，根据您的安全计划可能需要额外的步骤来解锁和使用它。@{"calib_text": " `[3394] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3394>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:122
msgid "Launch the node"
msgstr "启动节点@{"calib_text": " `[3395] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3395>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:124
msgid "With the updated permissions in place, we can launch the node successfully using the same command used in prior tutorials:"
msgstr "在更新的权限设置生效后，我们可以使用之前教程中相同的命令成功启动节点：@{"calib_text": " `[3396] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3396>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:130
msgid "However, attempting to remap the ``chatter`` topic prevents the node from launching (note that this requires the ``ROS_SECURITY_STRATEGY`` set to ``Enforce``)."
msgstr "但是，尝试重新映射 ``chatter`` 主题将阻止节点启动（请注意，这需要将 ``ROS_SECURITY_STRATEGY`` 设置为 ``Enforce``）。@{"calib_text": " `[3397] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3397>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:139
msgid "Use the templates"
msgstr "使用模板@{"calib_text": " `[3398] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3398>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:141
msgid "Security policies can quickly become confusing, so the ``sros2`` utilities add the ability to create policies from templates. Do this by using the `sample policy file <https://github.com/ros2/sros2/blob/humble/sros2/test/policies/sample.policy.xml#L1>`_ provided in the ``sros2`` repository. Let's creates a policy for both the ``talker`` and the ``listener`` to only use the ``chatter`` topic."
msgstr "安全策略很容易变得混乱，因此``sros2``工具添加了从模板创建策略的功能。可以通过使用``sros2``仓库中提供的`样例策略文件<https://github.com/ros2/sros2/blob/humble/sros2/test/policies/sample.policy.xml#L1>`_来实现。让我们为``talker``和``listener``创建一个策略，限制它们仅使用``chatter``主题。@{"calib_text": " `[3399] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3399>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:145
msgid "Begin by downloading the ``sros2`` repository with the sample policy files:"
msgstr "首先下载包含样例策略文件的``sros2``仓库：@{"calib_text": " `[3400] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3400>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:151
msgid "Then use the ``create_permission`` verb while pointing to the sample policy to generate the XML permission files:"
msgstr "然后使用``create_permission``命令，并指向样例策略文件以生成XML权限文件：@{"calib_text": " `[3401] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3401>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:162
msgid "These permission files allow nodes to only publish or subscribe to the ``chatter`` topic, and enable communications required for parameters."
msgstr "这些权限文件允许节点仅发布或订阅``chatter``主题，并启用参数所需的通信。@{"calib_text": " `[3402] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3402>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:164
msgid "In one terminal with security enabled as in previous security tutorials, run the ``talker`` demo program:"
msgstr "在一个启用了安全性的终端中，运行之前安全教程中的``talker``演示程序：@{"calib_text": " `[3403] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3403>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:170
msgid "In another terminal do the same with the ``listener`` program:"
msgstr "在另一个终端中，使用``listener``程序执行相同的操作：@{"calib_text": " `[3404] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3404>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:176
msgid "At this point, your ``talker`` and ``listener`` nodes will be communicating securely using explicit access control lists. However, the following attempt for the ``listener`` node to subscribe to a topic other than ``chatter`` will fail:"
msgstr "此时，您的``talker``和``listener``节点将使用显式访问控制列表进行安全通信。然而，``listener``节点尝试订阅``chatter``以外的主题将失败：@{"calib_text": " `[3405] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3405>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:2
msgid "Deployment Guidelines"
msgstr "部署指南@{"calib_text": " `[3406] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3406>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:4
msgid "**Goal:** Understand the best practices when deploying security artifacts into production systems."
msgstr "**目标:** 了解在将安全工件部署到生产系统时的最佳实践。@{"calib_text": " `[3407] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3407>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:18
msgid "Typical deployment scenarios often involve shipping containerized applications, or packages, into remote systems. Special attention should be payed when deploying security enabled applications, requiring users to reason about the sensitivity of packaged files."
msgstr "典型的部署场景通常涉及将容器化应用程序或软件包发送到远程系统。在部署安全启用的应用程序时，需要特别注意，用户需要考虑打包文件的敏感性。@{"calib_text": " `[3408] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3408>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:21
msgid "Complying with the `DDS Security standard <https://www.omg.org/spec/DDS-SECURITY/1.1/About-DDS-SECURITY/>`_, the ``sros2`` package provides a collection of utilities for managing security under ROS 2 environments in a highly modular and flexible fashion."
msgstr "符合 `DDS Security 标准 <https://www.omg.org/spec/DDS-SECURITY/1.1/About-DDS-SECURITY/>`_，``sros2`` 软件包以高度模块化和灵活的方式提供了一套用于在 ROS 2 环境中管理安全性的实用工具。@{"calib_text": " `[3409] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3409>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:24
msgid "Basic core guidelines on how to organize the different certificates, keys and directories remains a critical factor to avoid compromising the security of the system. This includes protection-awareness and criteria for selecting the minimum set of necessary files to be deployed upon remote production systems for minimizing security exposure."
msgstr "基本的核心指南是如何组织不同的证书、密钥和目录，这仍然是避免危害系统安全的关键因素。这包括保护意识和选择最小必要文件集合以在远程生产系统上部署，以减少安全风险的标准。@{"calib_text": " `[3410] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3410>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:30
msgid "A docker installation with the compose plugin. Please refer to the installation steps detailed in `Docker installation <https://docs.docker.com/engine/install/>`_ and `Compose Plugin <https://docs.docker.com/compose/install>`_."
msgstr "带有Compose插件的Docker安装。请参考`Docker安装步骤<https://docs.docker.com/engine/install/>`_和`Compose插件<https://docs.docker.com/compose/install>`_。@{"calib_text": " `[3411] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3411>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:32
msgid "(Recommended) A basic understanding on `ROS 2 Security design <https://design.ros2.org/articles/ros2_dds_security.html>`_."
msgstr "（推荐）对`ROS 2安全设计<https://design.ros2.org/articles/ros2_dds_security.html>`_有基本的了解。@{"calib_text": " `[3412] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3412>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:33
msgid "(Recommended) Previous security tutorials completion. In particular:"
msgstr "（推荐）完成之前的安全教程。特别是：@{"calib_text": " `[3413] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3413>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:35
msgid ":doc:`Introducing-ros2-security`"
msgstr ":doc:`介绍-ros2-安全性`@{"calib_text": " `[3414] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3414>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:36
msgid ":doc:`The-Keystore`"
msgstr ":doc:`密钥存储`@{"calib_text": " `[3415] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3415>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:37
msgid ":doc:`Access-Controls`"
msgstr ":doc:`访问控制`@{"calib_text": " `[3416] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3416>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:40
msgid "General Guidelines"
msgstr "一般指南@{"calib_text": " `[3417] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3417>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:42
msgid "ROS 2 leverages DDS Security extensions to ensure security on message exchanges within the same enclave. The different signed files and certificates within an enclave are generated from the private keys and certificates of a `Certificate Authority (CA) <https://en.wikipedia.org/wiki/Certificate_authority>`_ trusted entity. In fact, two different CA's can be selected for identity and permissions, per enclave. Those CA artifacts are stored inside ``private/`` and ``public/`` sub-directories of a `Keystore <https://design.ros2.org/articles/ros2_security_enclaves.html>`_ with the following folder structure:"
msgstr "ROS 2利用DDS安全扩展确保同一封闭环境内的消息交换的安全性。封闭环境中的不同签名文件和证书是由受信任的`证书颁发机构（Certificate Authority，CA）<https://en.wikipedia.org/wiki/Certificate_authority>`_的私钥和证书生成的。实际上，可以为每个封闭环境选择两个不同的CA来进行身份验证和权限控制。这些CA的相关文件存储在`Keystore <https://design.ros2.org/articles/ros2_security_enclaves.html>`_的``private/``和``public/``子目录中，具有以下文件夹结构：@{"calib_text": " `[3418] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3418>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:58
msgid "A good practice for the creation and usage of a certain Certificate Authority on a typical deployment for a production system, is to:"
msgstr "对于生产系统的典型部署，使用和创建特定证书颁发机构的一个良好实践是：@{"calib_text": " `[3419] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3419>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:60
msgid "Create it within the organization system intended for internal use only."
msgstr "将其创建在仅用于内部使用的组织系统内。@{"calib_text": " `[3420] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3420>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:61
msgid "Generate/modify desired enclaves bearing in mind that:"
msgstr "在生成/修改所需的封闭环境时要注意以下事项：@{"calib_text": " `[3421] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3421>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:63
msgid "Not all the generated enclaves should be deployed to all target devices."
msgstr "并非所有生成的enclave都应该部署到所有目标设备。@{"calib_text": " `[3422] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3422>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:64
msgid "A reasonable way to proceed would be having one enclave per application, allowing for a separation of concerns."
msgstr "一个合理的方法是每个应用程序都有一个enclave，以实现关注点的分离。@{"calib_text": " `[3423] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3423>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:66
msgid "Ship ``public/`` alongside with corresponding ``enclaves/`` into the different remote production devices during setup."
msgstr "在设置过程中，将``public/``与相应的``enclaves/``一起发送到不同的远程生产设备。@{"calib_text": " `[3424] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3424>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:67
msgid "Keep and protect ``private/`` keys and/or certification requests in the organization."
msgstr "在组织中保留和保护``private/``密钥和/或证书请求。@{"calib_text": " `[3425] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3425>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:69
msgid "It is important to note that if ``private/`` files are lost, it won't be possible to change access permissions, add or modify security profiles anymore."
msgstr "需要注意的是，如果``private/``文件丢失，将无法再更改访问权限、添加或修改安全配置文件。@{"calib_text": " `[3426] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3426>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:71
msgid "In addition, further practices may be taken into consideration:"
msgstr "此外，还可以考虑采取以下进一步措施：@{"calib_text": " `[3427] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3427>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:73
msgid "Granting read-only permissions to the ``enclaves/`` directory contents."
msgstr "将``enclaves/``目录内容授予只读权限。@{"calib_text": " `[3428] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3428>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:74
msgid "If a PKCS#11 compliant URI is given for generating enclave's private keys, a `Hardware Security Module (HSM) <https://en.wikipedia.org/wiki/Hardware_security_module>`_ could be used to store them."
msgstr "如果为生成enclave私钥提供了符合PKCS#11标准的URI，则可以使用`硬件安全模块 (HSM) <https://en.wikipedia.org/wiki/Hardware_security_module>`_ 来存储它们。@{"calib_text": " `[3429] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3429>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:76
msgid "The following table depicts a summary of the previous statements relating the Keystore directory with the Recommended location:"
msgstr "下表概述了之前关于密钥库目录与推荐位置的陈述：@{"calib_text": " `[3430] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3430>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:79
msgid "Directory / Location"
msgstr "目录 / 位置@{"calib_text": " `[3431] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3431>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:79
msgid "Organization"
msgstr "组织@{"calib_text": " `[3432] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3432>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:79
msgid "Target Device"
msgstr "目标设备@{"calib_text": " `[3433] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3433>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:79
msgid "Material Sensitivity"
msgstr "材料敏感性@{"calib_text": " `[3434] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3434>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:81
msgid "public"
msgstr "公开@{"calib_text": " `[3435] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3435>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:81 ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:83 ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:85
msgid "✓"
msgstr "✓@{"calib_text": " `[3436] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3436>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:81
msgid "Low"
msgstr "低@{"calib_text": " `[3437] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3437>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:83
msgid "private"
msgstr "私有@{"calib_text": " `[3438] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3438>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:83
msgid "✕"
msgstr "✕@{"calib_text": " `[3439] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3439>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:83
msgid "High"
msgstr "高@{"calib_text": " `[3440] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3440>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:85
msgid "enclaves"
msgstr "隔离区@{"calib_text": " `[3441] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3441>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:85
msgid "Medium"
msgstr "中等@{"calib_text": " `[3442] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3442>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:90
msgid "Building a deployment scenario"
msgstr "构建部署方案@{"calib_text": " `[3443] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3443>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:92
msgid "To illustrate a simple deployment scenario, a new docker image will be built on top of the one provided by ``ros:<DISTRO>``. Starting from the image, three containers will be created with the aim of:"
msgstr "为了演示一个简单的部署方案，将在提供的``ros:<DISTRO>``镜像之上构建一个新的Docker镜像。从该镜像开始，将创建三个容器，目标是：@{"calib_text": " `[3444] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3444>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:95
msgid "Initializing the keystore in a local host's shared volume."
msgstr "在本地主机的共享卷中初始化密钥库。@{"calib_text": " `[3445] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3445>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:96
msgid "Simulating two deployed remote devices that interact with each other in a secure way."
msgstr "模拟两个已部署的远程设备，以安全方式相互交互。@{"calib_text": " `[3446] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3446>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:98
msgid "In this example, the local host serves as the organization's system. Let us start by creating a workspace folder:"
msgstr "在这个例子中，本地主机作为组织的系统。让我们从创建一个工作空间文件夹开始：@{"calib_text": " `[3447] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3447>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:107
msgid "Generating the Docker Image"
msgstr "生成 Docker 镜像@{"calib_text": " `[3448] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3448>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:109
msgid "In order to build a new docker image, a Dockerfile is required. The one proposed for this tutorial can be retrieved with the following command:"
msgstr "为了构建一个新的 Docker 镜像，需要一个 Dockerfile。可以使用以下命令获取本教程中提供的 Dockerfile：@{"calib_text": " `[3449] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3449>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:117
msgid "Now, build the docker image with the command:"
msgstr "现在，使用以下命令构建 Docker 镜像：@{"calib_text": " `[3450] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3450>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:125
msgid "Understanding the compose file"
msgstr "理解compose文件@{"calib_text": " `[3451] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3451>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:127
msgid "A compose configration file takes an image to create containers as services. In this tutorial, three services are defined within the configuration:"
msgstr "一个compose配置文件会使用镜像创建容器作为服务。在本教程中，配置文件中定义了三个服务：@{"calib_text": " `[3452] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3452>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:130
msgid "*keystore-creator*: That, similarly to previous tutorials, it internally initializes a new keystore tree directory. This will create *enclaves/* *public/* and *private/*, which are explained in more detail in `ROS 2 Security enclaves <https://design.ros2.org/articles/ros2_security_enclaves.html>`_. The ``keystore`` directory is configured to be a shared volume across containers."
msgstr "*keystore-creator*：与之前的教程类似，它内部初始化一个新的keystore树目录。这将创建 *enclaves/*、*public/* 和 *private/* 目录，详细说明请参考 `ROS 2 Security enclaves <https://design.ros2.org/articles/ros2_security_enclaves.html>`_。``keystore`` 目录被配置为容器之间的共享卷。@{"calib_text": " `[3453] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3453>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:134
msgid "*listener* and *talker*: Act as the remote device actors in this tutorial. Required ``Security`` environment variables are sourced as well as the necessary keystore files from the shared volume."
msgstr "*listener* 和 *talker*：在本教程中充当远程设备的角色。还会从共享卷中获取所需的``Security``环境变量和必要的keystore文件。@{"calib_text": " `[3454] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3454>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:137
msgid "The compose configuration yaml file can be downloaded with:"
msgstr "可以通过以下命令下载compose配置的yaml文件：@{"calib_text": " `[3455] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3455>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:145
msgid "Running the example"
msgstr "运行示例：@{"calib_text": " `[3456] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3456>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:147
msgid "In the same working directory ``~/security_gd_tutorial``, run:"
msgstr "在相同的工作目录 ``~/security_gd_tutorial`` 下运行：@{"calib_text": " `[3457] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3457>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:154
msgid "This should result in the following output:"
msgstr "预期的输出结果如下所示：@{"calib_text": " `[3458] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3458>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:156
msgid "*tutorial-listener-1*: ``Found security directory: /keystore/enclaves/talker_listener/listener``"
msgstr "*教程-监听者1*: `发现安全目录: /keystore/enclaves/talker_listener/listener`@{"calib_text": " `[3459] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3459>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:157
msgid "*tutorial-talker-1*: ``Found security directory: /keystore/enclaves/talker_listener/talker``"
msgstr "*教程-对话者1*: `发现安全目录: /keystore/enclaves/talker_listener/talker`@{"calib_text": " `[3460] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3460>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:158
msgid "*tutorial-listener-1*: ``Publishing: 'Hello World: <number>'``"
msgstr "*教程-监听者1*: `发布: '你好世界: <number>'`@{"calib_text": " `[3461] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3461>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:159
msgid "*tutorial-talker-1*: ``I heard: [Hello World: <number>]``"
msgstr "*教程-对话者1*: `我听到了: [你好世界: <number>]`@{"calib_text": " `[3462] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3462>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:162
msgid "Examining the containers"
msgstr "检查容器@{"calib_text": " `[3463] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3463>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:164
msgid "While having the containers running that simulate the two remote devices for this tutorial, attach to each of them by opening two different terminals and enter:"
msgstr "在模拟本教程的两个远程设备的容器运行时，通过打开两个不同的终端并输入以下命令来连接到每个容器：@{"calib_text": " `[3464] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3464>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:178
msgid "A similar output to the one depicted below should be obtained:"
msgstr "应该获得类似于下面所示的输出：@{"calib_text": " `[3465] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3465>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:220
msgid "Note that:"
msgstr "请注意：@{"calib_text": " `[3466] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3466>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:222
msgid "*private/* folder is not moved but left in the local host (organization)."
msgstr "*private/* 文件夹未被移动，而是留在本地主机（组织）中。@{"calib_text": " `[3467] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3467>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:223
msgid "Each one of the deployed devices contain its own minimum enclave required for its application."
msgstr "每个部署设备都包含其所需的最小隔离环境，以供其应用程序使用。@{"calib_text": " `[3468] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3468>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:227
msgid "For the sake of simplicity, the same CA is used within this enclave for both identity and permissions."
msgstr "为简单起见，同一证书颁发机构（CA）在此隔离环境中同时用于身份和权限。@{"calib_text": " `[3469] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3469>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:8
msgid "Examining network traffic"
msgstr "检查网络流量@{"calib_text": " `[3470] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3470>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:10
msgid "**Goal:** Capture and examine raw ROS 2 network traffic."
msgstr "**目标：** 捕获并检查原始的ROS 2网络流量。@{"calib_text": " `[3471] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3471>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:24
msgid "ROS 2 communications security is all about protecting communications between nodes. Prior tutorials enabled security, but how can you **really** tell if traffic is being encrypted? In this tutorial we'll take a look at capturing live network traffic to show the difference between encrypted and unencrypted traffic."
msgstr "ROS 2通信安全关乎保护节点之间的通信。之前的教程启用了安全性，但是如何**真正**判断流量是否被加密呢？在本教程中，我们将捕获实时网络流量，以展示加密和未加密流量之间的区别。@{"calib_text": " `[3472] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3472>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:30
msgid "``rmw_fastrtps_cpp`` uses `Shared Memory Transport <https://fast-dds.docs.eprosima.com/en/latest/fastdds/transport/shared_memory/shared_memory.html>`_ by default to improve the performance in the transport layer when the endpoints are in the same host system. Security enclaves are still applied, and data will be encrypted. However, you cannot capture live network traffic since the data will not be on the network interface. If you are using  ``rmw_fastrtps_cpp``, you need to either go through this tutorial and use a different host system between the publisher and subscriber, or disable shared memory transport with `Enabling UDP Transport <https://fast-dds.docs.eprosima.com/en/latest/fastdds/transport/udp/udp.html#enabling-udp-transport>`_ and `How to set Fast-DDS XML configuration <https://github.com/ros2/rmw_fastrtps#full-qos-configuration>`_."
msgstr "``rmw_fastrtps_cpp`` 默认使用 `共享内存传输 <https://fast-dds.docs.eprosima.com/en/latest/fastdds/transport/shared_memory/shared_memory.html>`_ 来提高在传输层上的性能，当端点位于同一主机系统上时。仍然应用了安全隔离，并且数据将被加密。然而，由于数据不会出现在网络接口上，您无法捕获实时的网络流量。如果您正在使用 ``rmw_fastrtps_cpp``，您需要在发布者和订阅者之间通过本教程进行操作，并使用不同的主机系统，或者使用 `启用UDP传输 <https://fast-dds.docs.eprosima.com/en/latest/fastdds/transport/udp/udp.html#enabling-udp-transport>`_ 和 `如何设置Fast-DDS XML配置 <https://github.com/ros2/rmw_fastrtps#full-qos-configuration>`_ 来禁用共享内存传输。@{"calib_text": " `[3473] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3473>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:36 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:91 ../../source/Tutorials/Demos/Quality-of-Service.rst:45
msgid "Run the demo"
msgstr "运行演示@{"calib_text": " `[3474] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3474>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:39
msgid "Install ``tcpdump``"
msgstr "安装 `tcpdump <https://www.tcpdump.org/manpages/tcpdump.1.html>`_。@{"calib_text": " `[3475] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3475>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:41
msgid "Begin in a new terminal window by installing `tcpdump <https://www.tcpdump.org/manpages/tcpdump.1.html>`_, a command-line tool for capturing and displaying network traffic. Although this tutorial describes ``tcpdump`` commands, you can also use `Wireshark <https://www.wireshark.org/>`_, a similar graphical tool for capturing and analyzing traffic."
msgstr "在新的终端窗口中开始安装 `tcpdump <https://www.tcpdump.org/manpages/tcpdump.1.html>`_，它是一个用于捕获和显示网络流量的命令行工具。尽管本教程描述了 ``tcpdump`` 命令，你也可以使用类似的图形工具 `Wireshark <https://www.wireshark.org/>`_ 来捕获和分析流量。@{"calib_text": " `[3476] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3476>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:49
msgid "Run following commands on a single machine through multiple ``ssh`` sessions."
msgstr "通过多个 ``ssh`` 会话在单台机器上运行以下命令。@{"calib_text": " `[3477] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3477>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:52
msgid "Start the talker and listener"
msgstr "启动 talker 和 listener。@{"calib_text": " `[3478] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3478>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:54
msgid "Start both the talker and the listener again, each in its own terminal. The security environment variables are not set so security is not enabled for these sessions."
msgstr "在各自的终端中重新启动讲话者和侦听者。安全环境变量未设置，因此这些会话未启用安全性。@{"calib_text": " `[3479] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3479>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:70
msgid "Display unencrypted discovery packets"
msgstr "显示未加密的发现数据包。@{"calib_text": " `[3480] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3480>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:72
msgid "With the talker and listener running, open another terminal and start ``tcpdump`` to look at the network traffic. You need to use ``sudo`` since reading raw network traffic is a privileged operation."
msgstr "在运行讲话者和侦听者的同时，打开另一个终端并启动“tcpdump”以查看网络流量。由于读取原始网络流量是特权操作，因此您需要使用“sudo”。@{"calib_text": " `[3481] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3481>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:75
msgid "The command below uses the ``-X`` option to print packet contents, the ``-i`` option to listen for packets on any interface, and captures only `UDP <https://en.wikipedia.org/wiki/User_Datagram_Protocol>`_ port 7400 traffic."
msgstr "下面的命令使用“-X”选项打印数据包内容，使用“-i”选项在任何接口上监听数据包，并仅捕获“UDP <https://en.wikipedia.org/wiki/User_Datagram_Protocol>`_端口7400的流量。@{"calib_text": " `[3482] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3482>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:81
msgid "You should see packets like the following::"
msgstr "您应该看到如下的数据包::@{"calib_text": " `[3483] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3483>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:94
msgid "This is a discovery datagram--the talker looking for subscribers. As you can see, the node name (``/talker_listener/talker``) and the enclave (also ``/talker_listener/talker``) are passed in plain text. You should also see similar discovery datagrams from the ``listener`` node. Some other features of a typical discovery packet:"
msgstr "这是一个发现数据报文，表示发话者正在寻找订阅者。正如您所见，节点名称（``/talker_listener/talker``）和 enclave（也是 ``/talker_listener/talker``）以明文形式传递。您还应该看到类似的发现数据报文来自 ``listener`` 节点。一些典型发现数据包的其他特征包括：@{"calib_text": " `[3484] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3484>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:99
msgid "The destination address is 239.255.0.1, which is a multicast IP address; ROS 2 uses multicast traffic for discovery by default."
msgstr "目标地址为 239.255.0.1，这是一个组播（multicast）IP 地址；ROS 2 默认使用组播流量进行发现。@{"calib_text": " `[3485] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3485>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:100
msgid "UDP 7400 is the destination port, as per the `DDS-RTPS specification <https://www.omg.org/spec/DDSI-RTPS/About-DDSI-RTPS/>`_."
msgstr "UDP 7400 是目标端口，根据 `DDS-RTPS 规范 <https://www.omg.org/spec/DDSI-RTPS/About-DDSI-RTPS/>`_ 的要求。@{"calib_text": " `[3486] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3486>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:101
msgid "The packet contains the \"RTPS\" tag, also as defined to the DDS-RTPS specification."
msgstr "数据包中包含\"RTPS\"标记，如DDS-RTPS规范所定义。@{"calib_text": " `[3487] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3487>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:105
msgid "Display unencrypted data packets"
msgstr "显示未加密的数据包@{"calib_text": " `[3488] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3488>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:107
msgid "Use ``tcpdump`` to capture non-discovery RTPS packets by filtering on UDP ports above 7400:"
msgstr "使用``tcpdump``来捕获非发现性的RTPS数据包，通过过滤UDP端口大于7400的数据包:@{"calib_text": " `[3489] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3489>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:113
msgid "You will see few different types of packets, but watch for something like the following which is obviously data being sent from a talker to a listener::"
msgstr "你会看到几种不同类型的数据包，但要注意像下面这样的明显是从一个讲话者发送给一个听众的数据：@{"calib_text": " `[3490] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3490>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:124
msgid "Some features to note about this packet:"
msgstr "关于此数据包的一些要注意的功能：@{"calib_text": " `[3491] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3491>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:126
msgid "The message contents, \"Hello World: 2135\", are sent in clear text"
msgstr "消息内容“Hello World: 2135”以明文形式发送。@{"calib_text": " `[3492] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3492>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:127
msgid "The source and destination IP address is ``localhost``: since both nodes are running on the same machine, the nodes discovered each other on the ``localhost`` interface"
msgstr "源IP地址和目标IP地址为``localhost``：由于两个节点在同一台计算机上运行，节点通过``localhost``接口相互发现。@{"calib_text": " `[3493] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3493>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:131
msgid "Enable encryption"
msgstr "启用加密功能。@{"calib_text": " `[3494] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3494>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:133
msgid "Stop both the talker and the listener nodes. Enable encryption for both by setting the security environment variables and run them again."
msgstr "停止讲话者和听话者节点。通过设置安全环境变量为两者启用加密，并重新运行它们。@{"calib_text": " `[3495] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3495>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:152
msgid "Display encrypted discovery packets"
msgstr "显示加密的发现数据包@{"calib_text": " `[3496] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3496>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:154
msgid "Run the same ``tcpdump`` command used earlier to examine the output of discovery traffic with encryption enabled:"
msgstr "运行与之前相同的``tcpdump``命令，以查看启用加密后的发现流量的输出：@{"calib_text": " `[3497] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3497>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:160
msgid "The typical discovery packet looks somewhat like the following::"
msgstr "典型的发现数据包的外观类似于以下内容：@{"calib_text": " `[3498] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3498>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:181
msgid "This packet is much larger and includes information which can be used to set up encryption among ROS nodes. As we will see shortly, this actually includes some of the security configuration files that were created when we enabled security. Interested in learning more? Take a look at the excellent paper `Network Reconnaissance and Vulnerability Excavation of Secure DDS Systems <https://arxiv.org/abs/1908.05310>`_ to understand why this matters."
msgstr "这个数据包要大得多，其中包含可用于在ROS节点之间建立加密的信息。很快我们会看到，实际上这些信息包括了在启用安全性时创建的一些安全配置文件。想了解更多吗？可以查看优秀论文《网络侦察和漏洞挖掘安全DDS系统》<https://arxiv.org/abs/1908.05310>，以了解为什么这很重要。@{"calib_text": " `[3499] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3499>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:187
msgid "Display encrypted data packets"
msgstr "显示加密的数据包@{"calib_text": " `[3500] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3500>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:189
msgid "Now use ``tcpdump`` to capture data packets:"
msgstr "现在使用``tcpdump``来捕获数据包：@{"calib_text": " `[3501] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3501>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:195
msgid "A typical data packet looks like the following::"
msgstr "一个典型的数据包如下所示：@{"calib_text": " `[3502] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3502>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:210
msgid "The data in this RTPS packet is all encrypted."
msgstr "此RTPS数据包中的所有数据均已加密。@{"calib_text": " `[3503] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3503>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:212
msgid "In addition to this data packet, you should see additional packets with node and enclave names; these support other ROS features such as parameters and services. Encryption options for these packets can also be controlled by security policy."
msgstr "除了此数据包外，您还应该看到包含节点和飞地名称的其他数据包；这些支持其他ROS功能，如参数和服务。这些数据包的加密选项也可以通过安全策略进行控制。@{"calib_text": " `[3504] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3504>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:9
msgid "Setting up security"
msgstr "设置安全性@{"calib_text": " `[3505] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3505>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:11
msgid "**Goal:** Set up security with ``sros2``."
msgstr "**目标：** 使用``sros2``设置安全性。@{"calib_text": " `[3506] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3506>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:15 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:15 ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:12 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:13 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:13 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:14 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:14 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:14 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:14 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:14 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:14 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:14 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:14 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:14
msgid "**Time:** 15 minutes"
msgstr "**时间：** 15分钟@{"calib_text": " `[3507] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3507>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:25
msgid "The ``sros2`` package provides the tools and instructions to use ROS2 on top of DDS-Security. The security features have been tested across platforms (Linux, macOS, and Windows) as well as across different languages (C++ and Python). The SROS2 has been designed to work with any secure middleware, although not all middleware is open source and support varies depending on the ROS distribution in use. Please reach out to the :ref:`ROS 2 Security Working Group <Security Working Group>` if you encounter any support issues."
msgstr "``sros2``软件包提供了使用DDS-Security在ROS2上运行的工具和说明。安全功能已在不同平台（Linux、macOS和Windows）以及不同语言（C++和Python）上进行了测试。SROS2已经设计成可以与任何安全中间件配合使用，尽管并非所有中间件都是开源的，并且支持程度取决于所使用的ROS发行版。如果遇到任何支持问题，请联系:ref:`ROS 2安全工作组 <Security Working Group>`。@{"calib_text": " `[3508] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3508>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:32
msgid "Installation"
msgstr "安装@{"calib_text": " `[] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3509>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:34
msgid "Typically security is available following installation using the :doc:`ROS 2 Installation Guide <../../../Installation>` and the :doc:`configuration guide <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>`. However, if you intend to install from source or switch middleware implementations, consider the following caveats:"
msgstr "通常情况下，安装后可以使用:doc:`ROS 2安装指南 <../../../Installation>`和:doc:`配置指南 <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>`来获得安全功能。然而，如果您打算从源代码进行安装或切换中间件实现，请考虑以下注意事项：@{"calib_text": " `[3510] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3510>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:39
msgid "Installing from source"
msgstr "从源代码安装@{"calib_text": " `[3511] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3511>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:41
msgid "Before installing from source, you will need to have a recent version openssl (1.0.2g or later) installed:"
msgstr "在从源代码安装之前，您需要安装最新版本的openssl（1.0.2g或更高版本）：@{"calib_text": " `[3512] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3512>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:52 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:105 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:132 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:162 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:202 ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:46 ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:78
msgid "MacOS"
msgstr "MacOS@{"calib_text": " `[3513] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3513>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:58
msgid "You will need to have OpenSSL on your library path to run DDS-Security demos. Run the following command, and consider adding to your ``~/.bash_profile``:"
msgstr "您需要将OpenSSL添加到库路径中才能运行DDS-Security演示。运行以下命令，并考虑将其添加到您的``~/.bash_profile``文件中：@{"calib_text": " `[3514] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3514>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:69
msgid "If you don't have OpenSSL installed, please follow :ref:`these instructions <windows-install-binary-installing-prerequisites>`"
msgstr "如果您没有安装OpenSSL，请按照 :ref:`这些说明 <windows-install-binary-installing-prerequisites>` 进行安装@{"calib_text": " `[3515] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3515>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:71
msgid "Fast DDS requires an additional CMake flag to build the security plugins, so the colcon invocation needs to be modified to pass:"
msgstr "Fast DDS需要一个额外的CMake标志来构建安全插件，因此需要修改colcon调用以传递以下内容:@{"calib_text": " `[3516] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3516>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:79
msgid "Selecting an alternate middleware"
msgstr "选择替代的中间件@{"calib_text": " `[3517] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3517>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:81
msgid "If you choose not to use the default middleware implementation, be sure to :doc:`change your DDS implementation <../../../Installation/DDS-Implementations/>` before proceeding."
msgstr "如果您选择不使用默认的中间件实现，请务必在继续之前 :doc:`更改您的DDS实现 <../../../Installation/DDS-Implementations/>`。@{"calib_text": " `[3518] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3518>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:83
msgid "ROS2 allows you to change the DDS implementation at runtime. See `how to work with mulitple RMW implementations <../../../How-To-Guides/Working-with-multiple-RMW-implementations>` to explore different middleware implementations."
msgstr "ROS2 允许您在运行时更改 DDS 实现。请参阅 `如何使用多个 RMW 实现 <../../../How-To-Guides/Working-with-multiple-RMW-implementations>` 来探索不同的中间件实现方式。@{"calib_text": " `[3519] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3519>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:86
msgid "Note that secure communication between vendors is not supported."
msgstr "请注意，不支持供应商之间的安全通信。@{"calib_text": " `[3520] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3520>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:94
msgid "1\\. Create a folder for the security files"
msgstr "1\. 为安全文件创建一个文件夹。@{"calib_text": " `[3521] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3521>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:95
msgid "Begin by creating folder to store all the files necessary for this demo:"
msgstr "首先创建一个文件夹，用于存储此演示所需的所有文件：@{"calib_text": " `[3522] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3522>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:118
msgid "2\\. Generate a keystore"
msgstr "2. 生成密钥库@{"calib_text": " `[3523] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3523>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:120
msgid "Use the ``sros2`` utilities to create the keystore. Files in the keystore will be used to enable security for all the participants in the ROS 2 graph."
msgstr "使用``sros2``实用程序创建密钥库。密钥库中的文件将用于为ROS 2图中的所有参与者启用安全性。@{"calib_text": " `[3524] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3524>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:147
msgid "3\\. Generate keys and certificates"
msgstr "3. 生成密钥和证书@{"calib_text": " `[3525] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3525>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:149
msgid "Once the keystore is created, create keys and certificates for each node with security enabled. For our demo, that includes the talker and listener nodes. This command uses the ``create_enclave`` feature which is covered in more detail in the next tutorial."
msgstr "创建启用安全性的每个节点的密钥和证书，一旦密钥库创建完成。对于我们的演示，这包括了talker和listener节点。此命令使用了``create_enclave``功能，在下一个教程中会更详细介绍。@{"calib_text": " `[3526] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3526>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:177
msgid "If ``unable to write 'random state'`` appears then set the environment variable ``RANDFILE``."
msgstr "如果出现 ``无法写入 'random state'`` 的错误，请设置环境变量 ``RANDFILE``。@{"calib_text": " `[3527] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3527>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:183
msgid "Then re-run the commands above."
msgstr "然后重新运行上述命令。@{"calib_text": " `[3528] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3528>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:187
msgid "4\\. Configure environment variables"
msgstr "4\. 配置环境变量@{"calib_text": " `[3529] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3529>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:189
msgid "Three environment variables allow the middleware to locate encryption materials and enable (and possibly enforce) security. These and other security-related environment variables are described in the `ROS 2 DDS-Security Integration design document <https://design.ros2.org/articles/ros2_dds_security.html>`_."
msgstr "三个环境变量允许中间件定位加密材料并启用（可能强制执行）安全性。这些和其他与安全相关的环境变量在 `ROS 2 DDS-Security Integration 设计文档 <https://design.ros2.org/articles/ros2_dds_security.html>`_ 中有描述。@{"calib_text": " `[3530] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3530>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:218
msgid "These variables need to be defined in each terminal used for the demo. For convenience you can add them to your boot environment."
msgstr "在每个用于演示的终端中需要定义这些变量。为了方便起见，您可以将它们添加到您的引导环境中。@{"calib_text": " `[3531] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3531>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:223
msgid "5\\. Run the ``talker/listener`` demo"
msgstr "5\. 运行 ``talker/listener`` 演示@{"calib_text": " `[3532] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3532>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:225
msgid "Begin the demo by launching the talker node."
msgstr "通过启动 talker 节点开始演示。@{"calib_text": " `[3533] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3533>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:231
msgid "In another terminal, do the same to launch the ``listener`` node. The environment variables in this terminal must be properly set as described in step 4 above."
msgstr "在另一个终端中，执行相同的操作来启动 ``listener`` 节点。该终端中的环境变量必须正确设置，如上述第4步所述。@{"calib_text": " `[3534] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3534>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:238
msgid "These nodes will be communicating using authentication and encryption! If you look at the packet contents (for example, using ``tcpdump`` or ``Wireshark`` as covered in another tutorial), you can see that the messages are encrypted."
msgstr "这些节点将使用身份验证和加密进行通信！如果查看数据包内容（例如使用另一个教程中介绍的``tcpdump``或``Wireshark``），您可以看到消息是加密的。@{"calib_text": " `[3535] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3535>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:241
msgid "Note: You can switch between the C++ (demo_nodes_cpp) and Python (demo_nodes_py) packages arbitrarily."
msgstr "注意：您可以随意在C++（demo_nodes_cpp）和Python（demo_nodes_py）包之间切换。@{"calib_text": " `[3536] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3536>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:243
msgid "These nodes are able to communicate because we have created the appropriate keys and certificates for them."
msgstr "这些节点能够通信，是因为我们为它们创建了适当的密钥和证书。@{"calib_text": " `[3537] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3537>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:245
msgid "Leave both nodes running as you answer the questions below."
msgstr "请在回答以下问题时保持这两个节点运行。@{"calib_text": " `[3538] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3538>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:249
msgid "Take the Quiz!"
msgstr "开始测验！@{"calib_text": " `[3539] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3539>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:253 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:220
msgid "Question 1"
msgstr "问题1@{"calib_text": " `[3540] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3540>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:255
msgid "Open another terminal session, but **do not** set the environment variables so that security is not enabled. Start the listener. What do you expect to happen?"
msgstr "打开另一个终端会话，但**不要**设置环境变量以禁用安全性。启动监听器。你期望会发生什么？@{"calib_text": " `[3541] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3541>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:259 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:239
msgid "Answer 1"
msgstr "答案1@{"calib_text": " `[3542] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3542>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:261
msgid "The listener launches but does not receive any messages. All traffic is encrypted, and without security enabled the listener does not receive anything."
msgstr "监听器启动，但不接收任何消息。所有流量都是加密的，没有启用安全性，监听器将不会接收到任何内容。@{"calib_text": " `[3543] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3543>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:267 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:250
msgid "Question 2"
msgstr "问题2@{"calib_text": " `[3544] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3544>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:269
msgid "Stop the listener, set the environment variable ``ROS_SECURITY_ENABLE`` to ``true`` and start the listener again. What results do you expect this time?"
msgstr "停止监听器，将环境变量 ``ROS_SECURITY_ENABLE`` 设置为 ``true``，然后再次启动监听器。这次你期望会得到什么结果？@{"calib_text": " `[3545] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3545>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:272 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:254
msgid "Answer 2"
msgstr "回答2@{"calib_text": " `[3546] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3546>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:274
msgid "The listener still launches but does not receive messages. Although security has now been enabled, it is not been configured properly since ROS is unable to locate the key files. The listener launches, but in non-secure mode since security is not enforced, which means that although the properly configured talker is sending encrypted messages, this listener is unable to decrypt them."
msgstr "监听器仍然启动，但无法接收消息。虽然安全性已启用，但由于ROS无法找到密钥文件，安全性未被正确配置。监听器以非安全模式启动，因为安全性未被强制执行，这意味着虽然正确配置的对话者正在发送加密消息，但该监听器无法解密这些消息。@{"calib_text": " `[3547] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3547>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:280
msgid "Question 3"
msgstr "问题3@{"calib_text": " `[3548] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3548>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:282
msgid "Stop the listener and set ``ROS_SECURITY_STRATEGY`` to ``Enforce``. What happens now?"
msgstr "停止监听器并将 ``ROS_SECURITY_STRATEGY`` 设置为 ``Enforce``。现在会发生什么？@{"calib_text": " `[3549] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3549>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:285
msgid "Answer 3"
msgstr "回答3@{"calib_text": " `[3550] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3550>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:287
msgid "The listener fails to launch. Security has been enabled and is being enforced. Since it still is not properly configured, an error is thrown rather than launching in non-secure mode."
msgstr "监听器无法启动。已启用并正在执行安全性措施。由于其配置不正确，因此在非安全模式下无法启动，而是会抛出错误。@{"calib_text": " `[3551] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3551>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:293
msgid "Learn More!"
msgstr "了解更多！@{"calib_text": " `[3552] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3552>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:295
msgid "Are you ready to go further with ROS Security? Take a look at the `Secure Turtlebot2 Demo <https://github.com/ros-swg/turtlebot3_demo>`_. You'll find a functioning and complex implementation of ROS 2 security, ready to try out your own custom scenarios. Be sure to create pull requests and issues here so we can continue improving security support in ROS!"
msgstr "您准备好进一步了解ROS安全性了吗？请查看`安全的Turtlebot2演示 <https://github.com/ros-swg/turtlebot3_demo>`_。您将找到一个功能齐全且复杂的ROS 2安全性实现，可以尝试您自己的定制场景。请务必在此处创建拉取请求和问题，以便我们可以继续改进ROS的安全支持！@{"calib_text": " `[3553] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3553>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-Main.rst:2
msgid "Security"
msgstr "安全性@{"calib_text": " `[3554] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3554>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:8
msgid "Ensuring security across machines"
msgstr "确保跨机器的安全性@{"calib_text": " `[3555] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3555>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:10
msgid "**Goal:** Make two different machines communicate securely."
msgstr "**目标：** 确保两台不同的机器之间的安全通信。@{"calib_text": " `[3556] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3556>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:14 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:14 ../../source/Tutorials/Intermediate/Rosdep.rst:14
msgid "**Time:** 5 minutes"
msgstr "**时间：** 5分钟@{"calib_text": " `[3557] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3557>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:24
msgid "The previous tutorials have used two ROS nodes on the same machine sending all network communications over the localhost interface. Let's extend that scenario to involve multiple machines, since the benefits of authentication and encryption then become more obvious."
msgstr "之前的教程都是在同一台机器上使用两个ROS节点，将所有的网络通信都发送到本地主机接口。现在我们将扩展这个场景，涉及多台机器，因为认证和加密的好处变得更加明显。@{"calib_text": " `[3558] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3558>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:27
msgid "Suppose that the machine with the keystore created in the previous demo has a hostname ``Alice``, and that we want to also use another machine with hostname ``Bob`` for our multi-machine ``talker/listener`` demo. We need to move some keys from ``Alice`` to ``Bob`` to allow SROS 2 to authenticate and encrypt the transmissions."
msgstr "假设在上一个演示中创建的密钥库的机器名为 ``Alice``，我们还想在另一台名为 ``Bob`` 的机器上进行多机器的 ``talker/listener`` 演示。我们需要将一些密钥从 ``Alice`` 移动到 ``Bob``，以允许 SROS 2 对传输进行身份验证和加密。@{"calib_text": " `[3559] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3559>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:32
msgid "Create the second keystore"
msgstr "创建第二个密钥库@{"calib_text": " `[3560] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3560>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:34
msgid "Begin by creating an empty keystore on ``Bob``; the keystore is actually just an empty directory:"
msgstr "首先在 ``Bob`` 上创建一个空的密钥库；实际上，密钥库只是一个空目录：@{"calib_text": " `[3561] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3561>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:64
msgid "Copy files"
msgstr "复制文件@{"calib_text": " `[3562] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3562>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:66
msgid "Next copy the keys and certificates for the ``talker`` program from ``Alice`` to ``Bob``. Since the keys are just text files, we can use ``scp`` to copy them."
msgstr "接下来，从“Alice”复制“talker”程序的密钥和证书到“Bob”。由于密钥只是文本文件，我们可以使用“scp”将它们复制过来。@{"calib_text": " `[3563] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3563>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:94
msgid "Note that in this case the entire keystore is shared across the different machines which may not be the desired behavior, as it may result in a security risk. Please refer to :doc:`Deployment-Guidelines` for more information in this regard."
msgstr "请注意，在这种情况下，整个密钥库在不同的机器之间共享，这可能不是期望的行为，因为这可能会导致安全风险。有关更多信息，请参阅:doc:`Deployment-Guidelines`。@{"calib_text": " `[3564] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3564>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:97
msgid "That will be very quick, since it's just copying some very small text files. Now, we're ready to run a multi-machine talker/listener demo!"
msgstr "这将非常快，因为只需复制一些非常小的文本文件。现在，我们已经准备好运行多机器人交谈者/侦听者演示了！@{"calib_text": " `[3565] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3565>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:102
msgid "Launch the nodes"
msgstr "启动节点@{"calib_text": " `[3566] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3566>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:104
msgid "Once the environment is set up, run the talker on ``Bob``:"
msgstr "环境设置完成后，在 ``Bob`` 上运行对话器：@{"calib_text": " `[3567] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3567>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:110
msgid "and launch the listener on ``Alice``:"
msgstr "然后在 ``Alice`` 上启动监听器：@{"calib_text": " `[3568] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3568>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:116
msgid "Alice will now be receiving encrypted messages from Bob."
msgstr "现在，Alice 将接收到来自 Bob 的加密消息。@{"calib_text": " `[3569] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3569>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:118
msgid "With two machines successfully communicating using both encryption and authentication, you can use the same procedure to add more machines to your ROS graph."
msgstr "当两台机器成功使用加密和身份验证进行通信时，您可以使用相同的过程向 ROS 图中添加更多机器。@{"calib_text": " `[3570] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3570>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:8
msgid "Understanding the security keystore"
msgstr "理解安全密钥库@{"calib_text": " `[3571] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3571>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:10
msgid "**Goal:** Explore files located in the ROS 2 security keystore."
msgstr "**目标:** 探索位于ROS 2安全密钥库中的文件。@{"calib_text": " `[3572] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3572>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:24
msgid "The ``sros2`` package can be used to create keys, certificates and policies necessary to enable ROS 2 security. However, the security configuration is extrememly flexible. A basic understanding of the ROS 2 Security Keystore will allow integration with an existing PKI (Public Key Infrastructure) and managment of sensitive key materials consistent with organizational policies."
msgstr "``sros2``包可用于创建在启用ROS 2安全性所必需的密钥、证书和策略。然而，安全配置非常灵活。对ROS 2安全密钥库的基本理解将允许与现有PKI（公钥基础设施）集成，并根据组织政策管理敏感密钥材料。@{"calib_text": " `[3573] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3573>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:30
msgid "Security Artifact Locations"
msgstr "安全工件位置@{"calib_text": " `[3574] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3574>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:32
msgid "With communications security enabled in the prior tutorial, let's take a look at the files which were created when security was enabled. These are the files which make encryption possible."
msgstr "在前一个教程中启用了通信安全性后，让我们来看看在启用安全性时创建的文件。这些文件使加密成为可能。@{"calib_text": " `[3575] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3575>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:35
msgid "The ``sros2`` utilities (``ros2 security ...``) separate files into public, private and enclave key materials."
msgstr "``sros2`` 实用程序（``ros2 security ...``）将文件分为公共、私有和飞地密钥材料。@{"calib_text": " `[3576] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3576>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:37
msgid "ROS uses the directory defined by the environmental variable ``ROS_SECURITY_KEYSTORE`` as the keystore. For this tutorial, we use the directory ``~/sros2_demo/demo_keystore``."
msgstr "ROS 使用由环境变量 ``ROS_SECURITY_KEYSTORE`` 定义的目录作为密钥库。对于本教程，我们使用目录 ``~/sros2_demo/demo_keystore``。@{"calib_text": " `[3577] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3577>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:42
msgid "Public Key Materials"
msgstr "公钥材料@{"calib_text": " `[3578] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3578>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:44
msgid "You will find three encryption certificates in the public directory at ``~/sros2_demo/demo_keys/public``; however, the identity and permissions certificates are actually just a link to the Certificate Authority (CA) certificate."
msgstr "在``~/sros2_demo/demo_keys/public``目录中，你会找到三个加密证书；然而，身份和权限证书实际上只是指向证书颁发机构（CA）证书的链接。@{"calib_text": " `[3579] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3579>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:46
msgid "In a public key infrastructure, the `Certificate Authority <https://en.wikipedia.org/wiki/Certificate_authority>`_ acts as a trust anchor: it validates the identities and permissions of participants. For ROS, that means all the nodes that participate in the ROS graph (which may extend to an entire fleet of individual robots). By placing the Certificate Authority's certificate (``ca.cert.pem``) in the proper location on the robot, all ROS nodes can establish mutual trust with other nodes using the same Certificate Authority."
msgstr "在公钥基础设施中，`证书颁发机构（Certificate Authority）<https://en.wikipedia.org/wiki/Certificate_authority>`_ 充当信任锚点：它验证参与者的身份和权限。对于ROS来说，这意味着所有参与ROS图（可能延伸到整个机器人群）的节点。通过将证书颁发机构的证书（``ca.cert.pem``）放置在机器人上的正确位置，所有ROS节点可以使用相同的证书颁发机构与其他节点建立相互信任。@{"calib_text": " `[3580] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3580>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:50
msgid "Although in our tutorials we create a Certificate Authority on-the-fly, in a production system this should be done according to a pre-defined security plan. Typically the Certificate Authority for a production system will be created off-line, and placed on the robot during initial setup. It may be unique for each robot, or shared across a fleet of robots all intended to trust each other."
msgstr "虽然在我们的教程中我们会即时创建一个证书颁发机构，但在生产系统中，这应该根据预先定义的安全计划进行。通常情况下，生产系统的证书颁发机构将在离线状态下创建，并在机器人的初始设置过程中放置。它可以针对每个机器人是唯一的，也可以在整个机器人群中共享，这些机器人都相互信任。@{"calib_text": " `[3581] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3581>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:54
msgid "DDS (and ROS, by extension) supports separation of identity and permission trust chains, so each function has its own certificate authority. In most cases a ROS system security plan does not require a separation between these duties, so the security utilities generate a single Certificate Authority which is used for both identity and permissions."
msgstr "DDS（以及ROS）支持身份和权限信任链的分离，因此每个功能都有自己的证书颁发机构。在大多数情况下，ROS系统的安全计划不需要在这些职责之间进行分离，因此安全工具生成一个用于身份和权限的单个证书颁发机构。@{"calib_text": " `[3582] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3582>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:57
msgid "Use ``openssl`` to view this x509 certificate and display it as text:"
msgstr "使用``openssl``命令来查看该x509证书并以文本形式显示：@{"calib_text": " `[3583] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3583>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:64
msgid "The output should look similar to the following::"
msgstr "输出结果应该类似于以下内容：@{"calib_text": " `[3584] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3584>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:101
msgid "Some things to note about this CA certificate:"
msgstr "关于该CA证书需要注意的一些事项：@{"calib_text": " `[3585] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3585>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:98
msgid "The certificate subject name ``sros2testCA`` is the default provided by the ``sros2`` utilities."
msgstr "证书主题名称``sros2testCA``是由``sros2``工具提供的默认值。@{"calib_text": " `[3586] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3586>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:99
msgid "This certificate is valid for ten years from time of creation"
msgstr "该证书有效期为十年，从创建时开始@{"calib_text": " `[3587] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3587>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:100
msgid "Like all certificates, this contains a public key used for public-private key encryption"
msgstr "与所有证书一样，它包含用于公钥加密的公钥@{"calib_text": " `[3588] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3588>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:101
msgid "As a Root Certificate Authority, this is a `self-signed certificate <https://en.wikipedia.org/wiki/Self-signed_certificate>`_; i.e., it is signed using its own private key."
msgstr "作为根证书颁发机构，这是一个`自签名证书 <https://en.wikipedia.org/wiki/Self-signed_certificate>`_；即，它使用自己的私钥进行签名。@{"calib_text": " `[3589] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3589>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:103
msgid "Since this is a public certificate, it can be freely copied as needed to establish trust throughout your ROS system."
msgstr "由于这是一个公共证书，可以根据需要自由复制以在整个ROS系统中建立信任。@{"calib_text": " `[3590] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3590>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:107
msgid "Private Key Materials"
msgstr "私钥材料@{"calib_text": " `[3591] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3591>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:109
msgid "Private key materials can be found in the keystore directory ``~/sros2_demo/demo_keys/private``. Similar to the ``public`` directory, this contains one certificate authority key ``ca.key.pem`` and symbolic links to it to be used as both an Identity and a Permissions CA private key."
msgstr "私钥材料可以在密钥库目录 ``~/sros2_demo/demo_keys/private`` 中找到。与``public``目录类似，其中包含一个证书机构密钥 ``ca.key.pem`` 和指向它的符号链接，用作身份和权限 CA 的私钥。@{"calib_text": " `[3592] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3592>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:114
msgid "Protect this private key and create a secure backup of it!"
msgstr "请保护好这个私钥，并进行安全备份！@{"calib_text": " `[3593] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3593>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:116
msgid "This is the private key associated with the public Certificate Authority which serves as the anchor for all security in your ROS system. You will use it to modify encryption policies for the ROS graph and to add new ROS participants. Depending upon your robot's security needs, the key can be protected with access permissions and locked down to another account, or it can be moved off the robot entirely and onto another system or device. If the file is lost, you will be unable to change access permissions and add new participants to the system. Similarly, any user or process with access to the file has the ability to modify system policies and participants."
msgstr "这是与公共证书机构相关联的私钥，它是您的ROS系统中所有安全性的锚点。您将使用它来修改ROS图的加密策略并添加新的ROS参与者。根据您的机器人的安全需求，可以使用访问权限保护该密钥，并将其锁定到另一个帐户，或者完全将其移出机器人并放置到另一个系统或设备上。如果文件丢失，您将无法更改访问权限并向系统添加新的参与者。同样，任何具有对该文件访问权限的用户或进程都有修改系统策略和参与者的能力。@{"calib_text": " `[3594] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3594>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:122
msgid "This file is only required for configuring the robot, but is not needed for the robot to run. It can safely be stored offline in another system or removable media."
msgstr "这个文件只用于配置机器人，但对于机器人的运行来说是不需要的。可以安全地将它离线存储在另一个系统或可移动介质中。@{"calib_text": " `[3595] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3595>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:125
msgid "The ``sros2`` utilities use `elliptic curve cryptograpy <https://en.wikipedia.org/wiki/Elliptic-curve_cryptography>`_ rather than RSA for improved security and reduced key size. Use the following command to show details about this elliptic curve private key:"
msgstr "``sros2`` 实用程序使用 `椭圆曲线加密 <https://en.wikipedia.org/wiki/Elliptic-curve_cryptography>`_ 而不是 RSA，以提高安全性和减小密钥大小。使用以下命令显示有关此椭圆曲线私钥的详细信息：@{"calib_text": " `[3596] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3596>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:134
msgid "Your output should look similar to the following::"
msgstr "你的输出应该类似于以下内容：@{"calib_text": " `[3597] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3597>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:151
msgid "In addition to the private key itself, note that the public key is listed, and it matches the public key listed in the Certificate Authority ``ca.cert.pem``."
msgstr "除了私钥本身外，请注意公钥也被列出，并且与证书颁发机构 ``ca.cert.pem`` 中列出的公钥匹配。@{"calib_text": " `[3598] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3598>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:155
msgid "Domain Governance Policy"
msgstr "域治理政策@{"calib_text": " `[3599] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3599>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:157
msgid "Find the domain governance policy in the enclave directory within the keystore, ``~/sros2_demo/demo_keys/enclaves``. The ``enclave`` directory contains XML governance policy document ``governance.xml``, as well as a copy of the document which has been signed by the Permissions CA as ``governance.p7s``."
msgstr "在密钥库的保险库目录中，``~/sros2_demo/demo_keys/enclaves``中找到域治理政策。``enclave``目录包含XML治理政策文件``governance.xml``，以及由Permissions CA签署的文档副本``governance.p7s``。@{"calib_text": " `[3600] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3600>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:160
msgid "The ``governance.p7s`` file contains domain-wide settings such as how to handle unauthenticated participants, whether to encrypt discovery, and default rules for access to topics."
msgstr "``governance.p7s``文件包含域范围的设置，例如如何处理未经身份验证的参与者，是否加密发现以及访问主题的默认规则。@{"calib_text": " `[3601] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3601>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:162
msgid "Use the following command to validate the `S/MIME signature <https://en.wikipedia.org/wiki/S/MIME>`_ of the governance file:"
msgstr "使用以下命令验证治理文件的 `S/MIME签名 <https://en.wikipedia.org/wiki/S/MIME>`_： @{"calib_text": " `[3602] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3602>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:168
msgid "This command will print out the XML document, and the last line will be ``Verification successful`` to show that the document was properly signed by the Permissions CA."
msgstr "该命令将打印出XML文档，最后一行将显示``Verification successful``，以显示文档已由Permissions CA正确签名。@{"calib_text": " `[3603] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3603>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:172
msgid "Security Enclaves"
msgstr "安全飞地@{"calib_text": " `[3604] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3604>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:174
msgid "Secure processes (typically ROS nodes) run within a security enclave. In the simplest case, all the processes can be consolidated into the same enclave, and all processes will then use the same security policy. However, to apply different policies to different processes, the processes can use different security enclaves when starting. For more details about security enclaves, see the `design document <https://design.ros2.org/articles/ros2_security_enclaves.html>`_. The security enclave is specifed by using the ROS argument ``--enclave`` when running a node."
msgstr "安全进程（通常为ROS节点）在安全飞地内运行。在最简单的情况下，所有进程可以合并到同一个飞地中，并且所有进程将使用相同的安全策略。然而，为了将不同的策略应用于不同的进程，进程可以在启动时使用不同的安全飞地。有关安全飞地的更多详细信息，请参阅`设计文档 <https://design.ros2.org/articles/ros2_security_enclaves.html>`_。在运行节点时，可以使用ROS参数``--enclave``来指定安全飞地。@{"calib_text": " `[3605] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3605>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:180
msgid "**Each security enclave requires six files** in order to enable security. Each file **must** be named as defined below, and as outlined in the `DDS Security standard <https://www.omg.org/spec/DDS-SECURITY/1.1/About-DDS-SECURITY/>`_. In order to avoid having mulitple copies of the same files, the ``sros2`` utilities create links for each enclave to the single governance policy, the Identity CA and Permissions CA descibed above."
msgstr "**每个安全飞地需要六个文件**以启用安全性。每个文件的名称必须按照下面的定义命名，并且如上面的`DDS Security标准 <https://www.omg.org/spec/DDS-SECURITY/1.1/About-DDS-SECURITY/>`_中所述。为了避免有多个相同文件的副本，``sros2``工具会为每个飞地创建到单个治理策略、身份CA和权限CA的链接。@{"calib_text": " `[3606] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3606>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:184
msgid "See the following six files within the ``listener`` enclave. Three are specific to this enclave, while three are generic to this ROS system:"
msgstr "请查看``listener``飞地内的以下六个文件。其中三个文件是特定于此飞地的，而另外三个文件是通用于此ROS系统的：@{"calib_text": " `[3607] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3607>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:187
msgid "``key.pem``, the private key used to encrypt and decrypt within this enclave"
msgstr "``key.pem``，用于在此飞地内进行加密和解密的私钥@{"calib_text": " `[3608] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3608>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:188
msgid "``cert.pem``, the public certificate for this enclave; this certificate has been signed by the Identity CA"
msgstr "``cert.pem``，此飞地的公共证书；该证书已由身份认证机构签名@{"calib_text": " `[3609] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3609>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:189
msgid "``permissions.p7s``, the permissions for this enclave; this file has been signed with the Permissions CA"
msgstr "``permissions.p7s``，此飞地的权限；该文件已由权限认证机构签名@{"calib_text": " `[3610] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3610>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:190
msgid "``governance.p7s``, a link to the signed security policy file for this domain"
msgstr "``governance.p7s``，此域名的签署安全策略文件的链接@{"calib_text": " `[3611] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3611>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:191
msgid "``identity_ca.cert.pem``, a link to the Identity CA for this domain"
msgstr "``identity_ca.cert.pem``，此域名的身份认证中心链接@{"calib_text": " `[3612] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3612>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:192
msgid "``permissions_ca.cert.pem``, a link to the Permissions CA for this domain"
msgstr "``permissions_ca.cert.pem``，此域名的权限认证中心链接@{"calib_text": " `[3613] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3613>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:194
msgid "The private encryption key ``key.pem`` should be protected according to your security plan. This key encrypts, decrypts and validates communications within this specific enclave. Should the key be lost or stolen, revoke the key and create a new identity for this enclave."
msgstr "私有加密密钥``key.pem``应根据您的安全计划进行保护。该密钥用于加密、解密和验证此特定飞地内的通信。如果密钥丢失或被盗，应撤销该密钥并为该飞地创建新的身份。@{"calib_text": " `[3614] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3614>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:198
msgid "The file ``permissions.xml`` has also been created in this directory and can be used to recreate the signed permissions file. However, this file is not required to enable security since DDS uses the signed version of the file instead."
msgstr "该目录中还创建了文件 ``permissions.xml``，可用于重新创建已签名的权限文件。但是，启用安全性时不需要此文件，因为DDS使用已签名的文件版本。@{"calib_text": " `[3615] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3615>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:203
msgid "Take the quiz!"
msgstr "参加测验吧！@{"calib_text": " `[3616] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3616>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:205
msgid "See if you can answer these questions about the ROS security keystore. Begin with a new terminal session and enable security with the keystore created in the prior tutorial:"
msgstr "看看你是否能回答关于ROS安全密钥库的这些问题。从一个新的终端会话开始，并使用前面教程中创建的密钥库启用安全性：@{"calib_text": " `[3617] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3617>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:216
msgid "Make a backup copy of ``permissions.p7s`` before beginning."
msgstr "在开始之前，先备份 ``permissions.p7s`` 文件。@{"calib_text": " `[3618] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3618>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:222
msgid "Open ``permissions.p7s`` in a text editor. Make a negligible change to the XML content (e.g., add a space or a blank line) and save the file. Launch the listener node:"
msgstr "在文本编辑器中打开``permissions.p7s``。对XML内容进行微小的更改（例如，添加一个空格或空白行），然后保存文件。启动监听器节点：@{"calib_text": " `[3619] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3619>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:229
msgid "What do you expect to happen?"
msgstr "你期望会发生什么？@{"calib_text": " `[3620] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3620>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:231
msgid "Can you launch the talker node?"
msgstr "你能否启动说话节点？@{"calib_text": " `[3621] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3621>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:237
msgid "What is the difference between launching the listener and launching the talker?"
msgstr "启动监听器和启动说话节点有什么区别？@{"calib_text": " `[3622] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3622>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:241
msgid "The listener fails to launch and throws an error. When the ``permissions.p7s`` file was modified--however minor--the file's signature became invalid. A node will not launch with security enabled and enforced when the permissions file is invalid."
msgstr "监听器无法启动并抛出错误。当``permissions.p7s``文件被修改（即使是微小的修改），文件的签名就会变得无效。当权限文件无效时，节点将无法以启用和强制安全性的方式启动。@{"calib_text": " `[3623] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3623>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:245
msgid "The talker will start as expected. It uses the ``permissions.p7s`` file in a different enclave, and the file is still valid."
msgstr "讲话者将按预期启动。它在不同的保护区中使用``permissions.p7s``文件，并且该文件仍然有效。@{"calib_text": " `[3624] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3624>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:252
msgid "What command lets you check to see if the signature on the modified ``permissions.p7s`` file is valid?"
msgstr "哪个命令可以用来检查修改后的``permissions.p7s``文件的签名是否有效？@{"calib_text": " `[3625] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3625>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:256
msgid "Check that ``permissions.p7s`` has been properly signed by the Permissions CA using the ``openssl smime`` command:"
msgstr "使用``openssl smime``命令来检查``permissions.p7s``是否已由Permissions CA正确签名：@{"calib_text": " `[3626] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3626>`_ "}@"


#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:262
msgid "Restore your original, properly signed ``permissions.p7s`` file before proceeding to the next tutorial."
msgstr "在继续下一个教程之前，请恢复您的原始、正确签名的“permissions.p7s”文件。@{"calib_text": " `[3627] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3627>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:8
msgid "Setting up a robot simulation (Gazebo)"
msgstr "设置机器人仿真（Gazebo）。@{"calib_text": " `[3628] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3628>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:10
msgid "**Goal:** Launch a Simulation with Gazebo and ROS 2"
msgstr "**目标：** 使用Gazebo和ROS 2启动仿真。@{"calib_text": " `[3629] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3629>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:23
msgid "First of all you should install ROS 2 and Gazebo. You have two options:"
msgstr "首先，您应该安装ROS 2和Gazebo。您有两个选项：@{"calib_text": " `[3630] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3630>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:26
msgid "Install from deb packages. To check which versions are available from deb packages please check this `table <https://github.com/gazebosim/ros_ign>`__."
msgstr "通过deb软件包安装。要查看deb软件包提供的版本，请查看此 `表格 <https://github.com/gazebosim/ros_ign>`__。@{"calib_text": " `[3631] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3631>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:27
msgid "Compile from sources:"
msgstr "从源代码编译：@{"calib_text": " `[3632] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3632>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:29
msgid ":doc:`ROS 2 install instructions <../../../../Installation>`"
msgstr ":doc:`ROS 2安装说明 <../../../../Installation>`@{"calib_text": " `[3633] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3633>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:30
msgid "`Gazebo install instructions <https://gazebosim.org/docs>`__"
msgstr "`Gazebo安装说明 <https://gazebosim.org/docs>`__@{"calib_text": " `[3634] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3634>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:36
msgid "1 Launch the simulation"
msgstr "1 启动模拟@{"calib_text": " `[3635] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3635>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:38
msgid "In this demo you are going to simulate a simple diff drive robot in Gazebo. You are going to use one of the worlds defined in the Gazebo examples called `visualize_lidar.sdf <https://github.com/gazebosim/gz-sim/blob/main/examples/worlds/visualize_lidar.sdf>`__. To run this example you should execute the following command in a terminal:"
msgstr "在这个演示中，您将在Gazebo中模拟一个简单的差动驱动机器人。您将使用Gazebo示例中定义的一个世界，名为 `visualize_lidar.sdf <https://github.com/gazebosim/gz-sim/blob/main/examples/worlds/visualize_lidar.sdf>`__。要运行此示例，请在终端中执行以下命令：@{"calib_text": " `[3636] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3636>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:54
msgid "When the simulation is running you can check the topics provided by Gazebo with the ``ign`` command line tool:"
msgstr "当模拟正在运行时，您可以使用``ign``命令行工具检查Gazebo提供的主题：@{"calib_text": " `[3637] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3637>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:64 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:94
msgid "Which should show:"
msgstr "这将显示：@{"calib_text": " `[3638] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3638>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:83
msgid "Since you have not launched an ROS 2 nodes yet, the output from ``ros2 topic list`` should be free of any robot topics:"
msgstr "由于您尚未启动ROS 2节点，因此``ros2 topic list``命令的输出应该不包含任何机器人相关的主题:@{"calib_text": " `[3639] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3639>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:102
msgid "2 Configuring ROS 2"
msgstr "2 配置ROS 2@{"calib_text": " `[3640] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3640>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:104
msgid "To be able to communicate our simulation with ROS 2 you need to use a package called ``ros_gz_bridge``. This package provides a network bridge which enables the exchange of messages between ROS 2 and Gazebo Transport. You can install this package by typing:"
msgstr "为了能够将我们的仿真与ROS 2通信，您需要使用一个名为``ros_gz_bridge``的软件包。该软件包提供了一个网络桥接器，可以在ROS 2和Gazebo Transport之间交换消息。您可以通过输入以下命令来安装该软件包:@{"calib_text": " `[3641] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3641>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:116
msgid "At this point you are ready to launch a bridge from ROS to Gazebo. In particular you are going to create a bridge for the topic ``/model/vehicle_blue/cmd_vel``:"
msgstr "此时，您可以启动一个从ROS到Gazebo的桥接器。具体来说，您将为主题``/model/vehicle_blue/cmd_vel``创建一个桥接器:@{"calib_text": " `[3642] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3642>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:128
msgid "For more details about the ``ros_gz_bridge`` please check this `README <https://github.com/gazebosim/ros_gz/tree/ros2/ros_gz_bridge>`__ ."
msgstr "有关``ros_gz_bridge``的更多详细信息，请查看此`README <https://github.com/gazebosim/ros_gz/tree/ros2/ros_gz_bridge>`__。@{"calib_text": " `[3643] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3643>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:130
msgid "Once the bridge is running the robot is able to follow your motor commands. There are two options:"
msgstr "一旦桥接程序运行，机器人就能够遵循您的电机命令。有两种选择：@{"calib_text": " `[3644] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3644>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:133
msgid "Send a command to the topic using ``ros2 topic pub``"
msgstr "使用``ros2 topic pub``向主题发送命令@{"calib_text": " `[3645] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3645>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:143
msgid "``teleop_twist_keyboard`` package. This node takes keypresses from the keyboard and publishes them as Twist messages. You can install it typing:"
msgstr "``teleop_twist_keyboard``软件包。该节点从键盘接收按键，并将其发布为扭矩消息。您可以通过输入以下命令来安装它：@{"calib_text": " `[3646] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3646>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:153
msgid "The default topic where ``teleop_twist_keyboard`` is publishing Twist messages is ``/cmd_vel`` but you can remap this topic to make use of the topic used in the bridge:"
msgstr "``teleop_twist_keyboard``发布Twist消息的默认主题是``/cmd_vel``，但您可以重新映射此主题以使用桥接中使用的主题：@{"calib_text": " `[3647] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3647>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:165
msgid "Which will show:"
msgstr "将显示如下内容：@{"calib_text": " `[3648] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3648>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:197
msgid "3 Visualizing lidar data in ROS 2"
msgstr "3 在ROS 2中可视化激光雷达数据@{"calib_text": " `[3649] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3649>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:199
msgid "The diff drive robot has a lidar. To send the data generated by Gazebo to ROS 2, you need to launch another bridge. In the case the data from the lidar is provided in the Gazebo Transport topic ``/lidar2``, which you are going to remap in the bridge. This topic will be available under the topic ``/lidar_scan``:"
msgstr "差动驱动机器人配备了激光雷达。要将Gazebo生成的数据发送到ROS 2，您需要启动另一个桥接程序。在本例中，激光雷达的数据提供在Gazebo传输主题``/lidar2``中，您将在桥接程序中重新映射该主题。该主题将在主题``/lidar_scan``下可用：@{"calib_text": " `[3650] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3650>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:213
msgid "To visualize the data from the lidar in ROS 2 you can use Rviz2:"
msgstr "要在ROS 2中可视化来自激光雷达的数据，您可以使用Rviz2：@{"calib_text": " `[3651] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3651>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:224
msgid "Then you need to configure the ``fixed frame``:"
msgstr "然后，您需要配置“fixed frame”：@{"calib_text": " `[3652] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3652>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:228
msgid "And then click in the button \"Add\" to include a display to visualize the lidar:"
msgstr "然后点击“Add”按钮，添加一个显示以可视化激光雷达：@{"calib_text": " `[3653] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3653>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:232
msgid "Now you should see the data from the lidar in Rviz2:"
msgstr "现在您应该在Rviz2中看到来自激光雷达的数据：@{"calib_text": " `[3654] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3654>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:239
msgid "In this tutorial, you launched a robot simulation with Gazebo, launched bridges with actuators and sensors, visualized data from a sensor, and moved a diff drive robot."
msgstr "在本教程中，您使用Gazebo启动了一个机器人模拟，使用执行器和传感器启动了桥接器，可视化了传感器数据，并移动了差分驱动机器人。@{"calib_text": " `[3655] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3655>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Simulation-Gazebo.rst:2
msgid "Gazebo"
msgstr "Gazebo@{"calib_text": " `[3656] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3656>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Simulation-Gazebo.rst:4
msgid "This set of tutorials will teach you how to configure the Gazebo simulator with ROS 2."
msgstr "这套教程将教您如何配置ROS 2中的Gazebo模拟器。@{"calib_text": " `[3657] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3657>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Simulation-Main.rst:8
msgid "Simulators"
msgstr "模拟器@{"calib_text": " `[3658] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3658>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Simulation-Main.rst:10
msgid "Several advanced robot simulators can be used with ROS 2, such as Gazebo, Webots, etc. Unlike turtlesim, they provide fairly realistic results relying on physics-based models for robots, sensors, actuators and objects. Hence, what you observe in simulation is very close to what you will get when transferring your ROS 2 controllers to a real robot."
msgstr "ROS 2可以与多个高级机器人仿真器配合使用，例如Gazebo、Webots等。与turtlesim不同，它们依靠基于物理的机器人、传感器、执行器和物体模型提供相当逼真的结果。因此，你在仿真中观察到的情况非常接近将ROS 2控制器转移到实际机器人时的情况。@{"calib_text": " `[3659] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3659>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Simulation-Main.rst:14
msgid "This set of tutorials will teach you how to configure different simulators with ROS 2."
msgstr "这一系列教程将教你如何在ROS 2中配置不同的仿真器。@{"calib_text": " `[3660] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3660>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:2
msgid "Installation (macOS)"
msgstr "安装（macOS）@{"calib_text": " `[3661] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3661>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:4
msgid "**Goal:** Install the ``webots_ros2`` package and run simulation examples on macOS."
msgstr "**目标：**在macOS上安装``webots_ros2``包并运行仿真示例。@{"calib_text": " `[3662] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3662>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:8 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:8 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:8 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:13 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:14 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:13 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:14 ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:14 ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:14 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:14 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:14 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:14 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:14 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:14 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:14 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:14 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:14 ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:14 ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:14
msgid "**Time:** 10 minutes"
msgstr "**时间:** 10分钟@{"calib_text": " `[3663] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3663>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:17
msgid "The ``webots_ros2`` package provides an interface between ROS 2 and Webots. It includes several sub-packages, including ``webots_ros2_driver``, which allows you to start Webots and communicate with it. Other sub-packages are mainly examples that show multiple possible implementations using the interface. In this tutorial, you are going to install the package and learn how to run one of these examples."
msgstr "``webots_ros2``软件包提供了ROS 2和Webots之间的接口。它包括多个子软件包，其中包括``webots_ros2_driver``，它允许您启动Webots并与其通信。其他子软件包主要是示例，展示了使用该接口的多种可能实现。在本教程中，您将安装该软件包并学习如何运行其中的一个示例。@{"calib_text": " `[3664] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3664>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:25 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:26 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:25
msgid "It is recommended to understand basic ROS principles covered in the beginner :doc:`../../../../Tutorials`. In particular, :doc:`../../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace` and :doc:`../../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package` are useful prerequisites."
msgstr "建议您先了解入门级ROS原理，详情请参阅初学者 :doc:`../../../../Tutorials`。特别是 :doc:`../../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace` 和 :doc:`../../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package` 是有用的先决条件。@{"calib_text": " `[3665] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3665>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:28
msgid "It is necessary to install Webots natively on the mac in order to use the ``webots_ros2`` package in the virtual machine as explained below. You can follow the `installation procedure <https://cyberbotics.com/doc/guide/installation-procedure>`_ or `build it from sources <https://github.com/cyberbotics/webots/wiki/macOS-installation/>`_."
msgstr "为了在虚拟机中使用``webots_ros2``软件包，您需要在Mac上原生安装Webots，具体步骤如下所述。您可以按照`安装过程 <https://cyberbotics.com/doc/guide/installation-procedure>`_ 进行操作，或者从源代码构建Webots <https://github.com/cyberbotics/webots/wiki/macOS-installation/>。@{"calib_text": " `[3666] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3666>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:34
msgid "On macOS, a solution based on UTM virtual machines provides an improved user experience with ROS 2 compared to native macOS installation, as it runs ROS in a Linux environment. However, Webots should be installed natively on macOS and it will be able to communicate with the ROS nodes running in the Virtual Machine (VM). This solution allows for native 3D hardware acceleration for Webots. The VM runs all the ROS part (including RViz) and connects to the host machine through TCP to start Webots. A shared folder allows the script to transfer the world and other resource files from the VM to macOS where Webots is running."
msgstr "在macOS上，基于UTM虚拟机的解决方案可以提供比原生macOS安装更好的ROS 2用户体验，因为它在Linux环境中运行ROS。但是，Webots应该在macOS上进行原生安装，并且能够与运行在虚拟机中的ROS节点进行通信。该解决方案允许Webots进行本机的3D硬件加速。虚拟机运行所有ROS部分（包括RViz），通过TCP连接到主机以启动Webots。共享文件夹允许脚本将世界文件和其他资源文件从虚拟机传输到运行Webots的macOS上。@{"calib_text": " `[3667] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3667>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:40
msgid "The following steps explain how to create the VM image with the installation of the ``webots_ros2`` released package. It is also possible to install it from sources. In the :ref:`Preconfigured Images` section, you can find already configured images for every release of Webots (starting from R2023a) to download."
msgstr "下面的步骤说明了如何使用安装了 ``webots_ros2`` 发布软件包的方式创建虚拟机镜像。您也可以从源代码进行安装。在 :ref:`Preconfigured Images` 部分，您可以找到已经配置好的Webots每个版本（从R2023a开始）的镜像下载。@{"calib_text": " `[3668] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3668>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:45
msgid "1 Create the VM image"
msgstr "1 创建虚拟机镜像@{"calib_text": " `[3669] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3669>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:47
msgid "Install UTM on your macOS machine. The link can be found on the `official UTM website <https://mac.getutm.app/>`_."
msgstr "在您的 macOS 机器上安装 UTM。链接可以在 `official UTM website <https://mac.getutm.app/>`_ 上找到。@{"calib_text": " `[3670] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3670>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:50
msgid "Download the .iso image of `Ubuntu 22.04 <https://cdimage.ubuntu.com/jammy/daily-live/current/>`_ for Humble and Rolling or `Ubuntu 20.04 <https://cdimage.ubuntu.com/focal/daily-live/pending/>`_ for Foxy. Be sure to download the image corresponding to your CPU architecture."
msgstr "下载 `Ubuntu 22.04 <https://cdimage.ubuntu.com/jammy/daily-live/current/>`_ 的 .iso 镜像文件，用于 Humble 和 Rolling 版本，或者下载 `Ubuntu 20.04 <https://cdimage.ubuntu.com/focal/daily-live/pending/>`_ 的镜像文件，用于 Foxy 版本。请确保下载与您的 CPU 架构相对应的镜像文件。@{"calib_text": " `[3671] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3671>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:53
msgid "In the UTM software:"
msgstr "在UTM软件中：@{"calib_text": " `[3672] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3672>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:55
msgid "Create a new image and choose ``Virtualize`` option."
msgstr "创建一个新的镜像，并选择“虚拟化”选项。@{"calib_text": " `[3673] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3673>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:56
msgid "Select the ISO image you have downloaded in the ``Boot ISO Image`` field."
msgstr "在“启动ISO镜像”字段中选择你已下载的ISO镜像。@{"calib_text": " `[3674] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3674>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:57
msgid "Leave all hardware settings at default (including hardware acceleration disabled)."
msgstr "将所有硬件设置保持默认（包括禁用硬件加速）。@{"calib_text": " `[3675] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3675>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:58
msgid "In the ``Shared Directory`` window, select a folder that will be used by ``webots_ros2`` to transfer all the Webots assets to the host. In this example, the selected folder is ``/Users/username/shared``."
msgstr "在``Shared Directory``窗口中，选择一个文件夹，用于``webots_ros2``将所有Webots资源传输到主机。在此示例中，选择的文件夹为``/Users/username/shared``。@{"calib_text": " `[3676] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3676>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:60
msgid "Leave all the remaining parameters as default."
msgstr "将所有其余参数保持默认。@{"calib_text": " `[3677] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3677>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:61
msgid "Start the VM. Note that you can select another shared folder each time you start the VM."
msgstr "启动虚拟机。请注意，每次启动虚拟机时，都可以选择另一个共享文件夹。@{"calib_text": " `[3678] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3678>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:63
msgid "During the first launch of the VM, install Ubuntu and choose a username for your account. In this example, the username is ``ubuntu``."
msgstr "在首次启动虚拟机时，安装Ubuntu并选择一个帐户的用户名。在此示例中，用户名为``ubuntu``。@{"calib_text": " `[3679] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3679>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:64
msgid "Once Ubuntu is installed, close the VM, remove the iso image from the CD/DVD field and restart the VM."
msgstr "安装完Ubuntu后，关闭虚拟机，将iso镜像从CD/DVD字段中移除，并重新启动虚拟机。@{"calib_text": " `[3680] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3680>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:67
msgid "2 Configure the VM"
msgstr "2 配置虚拟机@{"calib_text": " `[3681] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3681>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:68
msgid "In this section, ROS 2 is installed in the VM and the shared folder is configured. The following instructions and commands are all run inside the VM."
msgstr "在本节中，将在虚拟机中安装ROS 2，并配置共享文件夹。以下指令和命令都在虚拟机内运行。@{"calib_text": " `[3682] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3682>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:71
msgid "Open a terminal in the started VM and install the ROS 2 distribution you need by following the instructions in :doc:`../../../../Installation/Ubuntu-Install-Debians`:"
msgstr "在启动的虚拟机中打开终端，并按照 :doc:`../../../../Installation/Ubuntu-Install-Debians` 中的说明安装所需的ROS 2版本。@{"calib_text": " `[3683] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3683>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:72
msgid "Create a folder in the VM to use as a shared folder. In this example, the shared folder in the VM is ``/home/ubuntu/shared``."
msgstr "在虚拟机中创建一个文件夹，用作共享文件夹。在本示例中，虚拟机中的共享文件夹为``/home/ubuntu/shared``。@{"calib_text": " `[3684] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3684>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:79
msgid "To mount this folder to the host, execute the following command. Don't forget to modify the path to the shared folder, if it is different in your case."
msgstr "要将此文件夹挂载到主机上，请执行以下命令。如果在您的情况下共享文件夹的路径不同，请不要忘记进行修改。@{"calib_text": " `[3685] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3685>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:86
msgid "To automatically mount this folder to the host when starting the VM, add the following line to ``/etc/fstab``. Don't forget to modify the path to the shared folder, if it is different in your case."
msgstr "要在启动虚拟机时自动将此文件夹挂载到主机上，请将以下行添加到``/etc/fstab``中。如果在您的情况下共享文件夹的路径不同，请不要忘记进行修改。@{"calib_text": " `[3686] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3686>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:93
msgid "The environment variable ``WEBOTS_SHARED_FOLDER`` must always be set in order for the package to work properly in the VM. This variable specifies the location of the shared folder that is used to exchange data between the host machine and the virtual machine (VM) to the ``webots_ros2`` package. The value to use for this variable should be in the format of ``<host shared folder>:<VM shared folder>``, where ``<host shared folder>`` is the path to the shared folder on the host machine and ``<VM shared folder>`` is the path to the same shared folder on the VM."
msgstr "环境变量``WEBOTS_SHARED_FOLDER``必须始终设置，以便使该包在虚拟机中正常工作。此变量指定用于在主机和虚拟机（VM）之间交换数据的共享文件夹的位置，以供``webots_ros2``包使用。此变量的值应采用``<主机共享文件夹>:<VM共享文件夹>``的格式，其中``<主机共享文件夹>``是主机上共享文件夹的路径，``<VM共享文件夹>``是虚拟机上相同共享文件夹的路径。@{"calib_text": " `[3687] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3687>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:97
msgid "In this example:"
msgstr "在这个例子中:@{"calib_text": " `[3688] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3688>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:103
msgid "You can add this command line to the ``~/.bashrc`` file to automatically set this environment variable when starting a new terminal."
msgstr "你可以将这个命令行添加到``~/.bashrc``文件中，这样在启动新终端时会自动设置这个环境变量。@{"calib_text": " `[3689] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3689>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:106 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:59
msgid "3 Install ``webots_ros2``"
msgstr "3 安装``webots_ros2``@{"calib_text": " `[3690] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3690>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:108
msgid "You can either install ``webots_ros2`` from the official released package, or install it from the latest up-to-date sources from `Github <https://github.com/cyberbotics/webots_ros2>`_."
msgstr "你可以选择从官方发布的包中安装``webots_ros2``，或者从最新的`Github <https://github.com/cyberbotics/webots_ros2>`_源代码中安装。@{"calib_text": " `[3691] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3691>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:112 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:54 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:66
msgid "Install ``webots_ros2`` distributed package"
msgstr "安装 ``webots_ros2`` 分发包@{"calib_text": " `[3692] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3692>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:114
msgid "Run the following command in the VM terminal."
msgstr "在虚拟机终端中运行以下命令。@{"calib_text": " `[3693] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3693>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:120 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:62 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:74
msgid "Install ``webots_ros2`` from sources"
msgstr "从源代码安装 ``webots_ros2``@{"calib_text": " `[3694] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3694>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:122
msgid "Install git."
msgstr "安装 Git。@{"calib_text": " `[3695] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3695>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:128 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:64 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:76
msgid "Create a ROS 2 workspace with its ``src`` directory."
msgstr "创建一个带有``src``目录的ROS 2工作空间。@{"calib_text": " `[3696] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3696>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:134 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:70 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:82
msgid "Source the ROS 2 environment."
msgstr "源化ROS 2环境。@{"calib_text": " `[3697] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3697>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:140 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:76 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:88
msgid "Retrieve the sources from Github."
msgstr "从Github获取源代码。@{"calib_text": " `[3698] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3698>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:147 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:83 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:95
msgid "Install the package dependencies."
msgstr "安装软件包依赖项。@{"calib_text": " `[3699] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3699>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:155 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:91 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:103
msgid "Build the package using ``colcon``."
msgstr "使用``colcon``构建软件包。@{"calib_text": " `[3700] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3700>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:161 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:97 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:109
msgid "Source this workspace."
msgstr "在此工作空间中进行源代码配置。@{"calib_text": " `[3701] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3701>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:168 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:117
msgid "4 Launch the ``webots_ros2_universal_robot`` example"
msgstr "4 启动``webots_ros2_universal_robot``示例。@{"calib_text": " `[3702] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3702>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:170
msgid "As mentioned in previous sections, the package uses the shared folder to communicate with Webots from the VM to the host. In order for Webots to be started on the host from the VM's ROS package, a local TCP simulation server must be run."
msgstr "如前面的部分所述，该软件包使用共享文件夹从虚拟机与主机之间进行Webots通信。为了能够从虚拟机的ROS软件包启动主机上的Webots，必须运行本地TCP仿真服务器。@{"calib_text": " `[3703] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3703>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:173
msgid "The server can be downloaded here: `local_simulation_server.py <https://github.com/cyberbotics/webots-server/blob/main/local_simulation_server.py>`_. Specify the Webots installation folder in ``WEBOTS_HOME`` environment variable (e.g. ``/Applications/Webots.app``) and run the server using the following commands in a new terminal on the host (not in the VM):"
msgstr "服务器可以从这里下载：`local_simulation_server.py <https://github.com/cyberbotics/webots-server/blob/main/local_simulation_server.py>`_。在``WEBOTS_HOME``环境变量中指定Webots安装文件夹（例如``/Applications/Webots.app``），然后在主机上的新终端中使用以下命令运行服务器（不要在虚拟机中运行）：@{"calib_text": " `[3704] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3704>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:181
msgid "In the VM, open a terminal and execute the following commands to start a package:"
msgstr "在虚拟机中打开终端并执行以下命令启动软件包：@{"calib_text": " `[3705] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3705>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:183 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:108 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:123
msgid "First source the ROS 2 environment, if not done already."
msgstr "如果尚未完成，请先启动ROS 2环境。@{"calib_text": " `[3706] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3706>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:189 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:120 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:136
msgid "If installed from sources, source your ROS 2 workspace, if not done already."
msgstr "如果是从源代码安装的，请先启动ROS 2工作区。@{"calib_text": " `[3707] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3707>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:196
msgid "If not already set in ``~/.bashrc``, set ``WEBOTS_SHARED_FOLDER`` (see previous sections for details). Be sure to change the paths according to the location of your respective directories."
msgstr "如果尚未在``~/.bashrc``中设置，请设置``WEBOTS_SHARED_FOLDER``（有关详细信息，请参见前面的部分）。请确保根据您各自目录的位置更改路径。@{"calib_text": " `[3708] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3708>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:203 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:127 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:143
msgid "Use the ROS 2 launch command to start demo packages (e.g. ``webots_ros2_universal_robot``)."
msgstr "使用ROS 2启动命令来启动演示包（例如``webots_ros2_universal_robot``）。@{"calib_text": " `[3709] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3709>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:209
msgid "If Webots is closed or the ROS 2 process is interrupted, the local server will automatically wait for a new package launch and the shared folder will be cleaned for the next run."
msgstr "如果Webots关闭或ROS 2进程中断，本地服务器将自动等待新的包启动，并清理共享文件夹以供下一次运行使用。@{"calib_text": " `[3710] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3710>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:214
msgid "Pre-configured Images"
msgstr "预配置的图像@{"calib_text": " `[3711] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3711>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:216
msgid "If you don't want to setup the VM from scratch, the following links provide you with pre-configured UTM images for each version of Webots. The ``webots_ros2`` version is installed from the official repository (not from sources) and is typically the first one that is compatible with the corresponding Webots version. You are welcome to download an image and upgrade the package, or install it from sources if necessary."
msgstr "如果您不想从头开始设置虚拟机，以下链接提供了预配置的UTM镜像，适用于每个版本的Webots。``webots_ros2``版本是从官方仓库安装的（而不是从源代码），通常是与相应的Webots版本兼容的第一个版本。您可以下载镜像并升级软件包，或者根据需要从源代码安装。@{"calib_text": " `[3712] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3712>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:220
msgid "`Version 2023.0.2 for Webots R2023a <https://cyberbotics.com/files/ros2/webots_ros2_2023_0_2.utm.zip>`_ [6.6 GB]"
msgstr "`Webots R2023a的2023.0.2版本 <https://cyberbotics.com/files/ros2/webots_ros2_2023_0_2.utm.zip>`_ [6.6 GB]@{"calib_text": " `[3713] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3713>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:222
msgid "When adding the downloaded image to the UTM software, you should also choose the path to the host shared folder before starting the VM in the drop-down menu (e.g. ``/Users/username/shared``). Once the VM is started, the ``WEBOTS_SHARED_FOLDER`` environment variable must always be set for the package to work properly in the virtual machine (VM). This variable specifies to the ``webots_ros2`` package the location of the shared folder that is used to exchange data between the host machine and the VM. The value for this variable should be in the format of ``<host shared folder>:<VM shared folder>``, where ``<host shared folder>`` is the path to the shared folder on the host machine and ``<VM shared folder>`` is the path to the same shared folder on the VM."
msgstr "在将下载的镜像添加到UTM软件时，在启动虚拟机之前，您还应该在下拉菜单中选择主机共享文件夹的路径（例如``/Users/username/shared``）。一旦虚拟机启动，必须始终设置``WEBOTS_SHARED_FOLDER``环境变量，以使软件包在虚拟机中正常工作。此变量指定给``webots_ros2``软件包用于在主机机器和虚拟机之间交换数据的共享文件夹的位置。此变量的值应为``<主机共享文件夹>:<虚拟机共享文件夹>``的格式，其中``<主机共享文件夹>``是主机机器上共享文件夹的路径，而``<虚拟机共享文件夹>``是虚拟机上相同共享文件夹的路径。@{"calib_text": " `[3714] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3714>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:227
msgid "In the pre-configured images, ``WEBOTS_SHARED_FOLDER`` is already set in ``~/.bashrc``. You will need to update it to use the correct path for the host folder:"
msgstr "在预配置的镜像中，``WEBOTS_SHARED_FOLDER``已在``~/.bashrc``中设置。您需要更新它以使用正确的主机文件夹路径：@{"calib_text": " `[3715] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3715>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:2
msgid "Installation (Ubuntu)"
msgstr "安装（Ubuntu）@{"calib_text": " `[3716] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3716>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:4
msgid "**Goal:** Install the ``webots_ros2`` package and run simulation examples on Ubuntu."
msgstr "**目标：** 在Ubuntu上安装``webots_ros2``软件包并运行仿真示例。@{"calib_text": " `[3717] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3717>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:17
msgid "The ``webots_ros2`` package provides an interface between ROS 2 and Webots. It includes several sub-packages, including ``webots_ros2_driver``, which allows you to start Webots and communicate with it. This interface is used in most of the following tutorials, so it is required to install it beforehand. Other sub-packages are mainly examples that show multiple possible implementations using the interface. In this tutorial, you are going to install the package and learn how to run one of these examples."
msgstr "``webots_ros2``软件包提供了ROS 2和Webots之间的接口。它包括多个子软件包，包括``webots_ros2_driver``，它允许您启动Webots并与其通信。此接口在以下大多数教程中都会使用，因此在此之前需要先安装它。其他子软件包主要是使用接口展示多个可能的实现示例。在本教程中，您将安装该软件包并学习如何运行其中一个示例。@{"calib_text": " `[3718] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3718>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:29
msgid "The Webots software should be installed in order to use the ``webots_ros2`` interface. You can follow the `installation procedure <https://cyberbotics.com/doc/guide/installation-procedure>`_ or `build it from sources <https://github.com/cyberbotics/webots/wiki/Linux-installation/>`_."
msgstr "为了使用``webots_ros2``接口，必须安装Webots软件。您可以按照`安装过程 <https://cyberbotics.com/doc/guide/installation-procedure>`_ 或者从源代码构建它 <https://github.com/cyberbotics/webots/wiki/Linux-installation/>`_。@{"calib_text": " `[3719] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3719>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:32
msgid "Alternatively, you can also let ``webots_ros2`` download and install Webots automatically. This option appears when you launch an example of the package and no Webots installation is found."
msgstr "或者，您还可以让``webots_ros2``自动下载并安装Webots。当您启动该软件包的示例并且没有找到Webots安装时，将会出现此选项。@{"calib_text": " `[3720] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3720>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:36 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:35
msgid "Multiple Installations of Webots"
msgstr "Webots的多个安装@{"calib_text": " `[3721] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3721>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:38
msgid "If you have installed different versions of Webots on your computer, ``webots_ros2`` will look for Webots at the following locations (in this order):"
msgstr "如果您在计算机上安装了不同版本的Webots，``webots_ros2``将按照以下顺序查找Webots：@{"calib_text": " `[3722] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3722>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:40 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:39
msgid "If the ``ROS2_WEBOTS_HOME`` environment variable is set, ROS 2 will use the Webots in this folder, regardless of its version."
msgstr "如果设置了``ROS2_WEBOTS_HOME``环境变量，ROS 2将使用此文件夹中的Webots，而不考虑其版本。@{"calib_text": " `[3723] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3723>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:41 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:40
msgid "If the ``WEBOTS_HOME`` environment variable is set, ROS 2 will use the Webots in this folder, regardless of its version."
msgstr "如果设置了``WEBOTS_HOME``环境变量，ROS 2将使用该文件夹中的Webots，而不管其版本如何。@{"calib_text": " `[3724] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3724>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:42
msgid "If none of these variables is set, ``webots_ros2`` will look for Webots in the default installation paths for a compatible version: ``/usr/local/webots`` and ``/snap/webots/current/usr/share/webots``."
msgstr "如果没有设置这些变量中的任何一个，``webots_ros2``将在兼容版本的默认安装路径中查找Webots：``/usr/local/webots``和``/snap/webots/current/usr/share/webots``。@{"calib_text": " `[3725] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3725>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:43
msgid "If Webots couldn't be found, ``webots_ros2`` will show a window offering the automatic installation of the latest compatible version of Webots."
msgstr "如果找不到Webots，``webots_ros2``将显示一个窗口，提供自动安装最新兼容版本的Webots。@{"calib_text": " `[3726] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3726>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:49
msgid "1 Install ``webots_ros2``"
msgstr "1 安装``webots_ros2``@{"calib_text": " `[3727] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3727>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:50
msgid "You can either install the official released package, or install it from the latest up-to-date sources from `Github <https://github.com/cyberbotics/webots_ros2>`_."
msgstr "您可以选择安装官方发布的软件包，或者从最新的更新源中安装，源地址为 `Github <https://github.com/cyberbotics/webots_ros2>`_。@{"calib_text": " `[3728] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3728>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:56 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:68
msgid "Run the following command in a terminal."
msgstr "在终端中运行以下命令。@{"calib_text": " `[3729] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3729>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:104
msgid "2 Launch the ``webots_ros2_universal_robot`` example"
msgstr "2. 启动 ``webots_ros2_universal_robot`` 示例@{"calib_text": " `[3730] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3730>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:106
msgid "The following instructions explain how to start a provided example."
msgstr "以下说明介绍了如何启动提供的示例。@{"calib_text": " `[3731] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3731>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:114
msgid "Setting the ``WEBOTS_HOME`` environment variable allows you to start a specific Webots installation."
msgstr "设置``WEBOTS_HOME``环境变量允许您启动特定的Webots安装。@{"calib_text": " `[3732] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3732>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:2
msgid "Installation (Windows)"
msgstr "安装（Windows）@{"calib_text": " `[3733] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3733>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:4
msgid "**Goal:** Install the ``webots_ros2`` package and run simulation examples on Windows."
msgstr "**目标：**在Windows上安装``webots_ros2``包并运行仿真示例。@{"calib_text": " `[3734] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3734>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:17
msgid "The ``webots_ros2`` package provides an interface between ROS 2 and Webots. It includes several sub-packages, including ``webots_ros2_driver``, which allows ROS nodes to communicate with Webots. Other sub-packages are mainly examples that show multiple possible implementations using the interface. In this tutorial, you are going to install the package and learn how to run one of these examples."
msgstr "``webots_ros2``包提供了ROS 2和Webots之间的接口。它包括多个子包，其中包括``webots_ros2_driver``，它允许ROS节点与Webots进行通信。其他子包主要是示例，展示了使用该接口的多种可能实现。在本教程中，您将安装该包并学习如何运行其中一个示例。@{"calib_text": " `[3735] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3735>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:28
msgid "Webots is a prerequisite to use the ``webots_ros2`` package. You can follow the `installation procedure <https://cyberbotics.com/doc/guide/installation-procedure>`_ or `build it from sources <https://github.com/cyberbotics/webots/wiki/Windows-installation/>`_."
msgstr "使用``webots_ros2``包需要先安装Webots。您可以按照`安装过程 <https://cyberbotics.com/doc/guide/installation-procedure>`_ 进行安装，或者从源代码构建（`从源代码构建 <https://github.com/cyberbotics/webots/wiki/Windows-installation/>`_）。@{"calib_text": " `[3736] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3736>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:31
msgid "Alternatively, you can also let ``webots_ros2`` download Webots automatically. This option appears when you launch an example of the package and no Webots installation is found."
msgstr "另外，您也可以让``webots_ros2``自动下载Webots。当您启动包中的示例并且没有找到Webots安装时，将会出现此选项。@{"calib_text": " `[3737] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3737>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:37
msgid "If you have more than one installation of Webots, ROS 2 will look for Webots at the following locations (in this order):"
msgstr "如果您安装了多个版本的Webots，ROS 2将按照以下顺序查找Webots所在位置：@{"calib_text": " `[3738] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3738>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:41
msgid "If none of the previous points is set/installed ROS 2 will look for Webots in the default installation paths for a compatible version: ``C:\\Program Files\\Webots``."
msgstr "如果前述方法均未设置或安装，ROS 2将在兼容版本的默认安装路径``C:\\Program Files\\Webots``中查找Webots。@{"calib_text": " `[3739] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3739>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:42
msgid "If Webots couldn't be found, ``webots_ros2`` will show a window and offer automatic Webots installation of the last compatible version."
msgstr "如果找不到Webots，``webots_ros2`` 将显示一个窗口，并提供最后一个兼容版本的Webots自动安装。@{"calib_text": " `[3740] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3740>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:48
msgid "1 Install WSL2"
msgstr "1 安装WSL2@{"calib_text": " `[3741] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3741>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:50
msgid "On Windows, WSL (Windows Subsystem for Linux) improves the user experience with ROS 2 compared to native Windows installation, as it runs on a Linux platform. Install WSL with an Ubuntu version which is compatible with your ROS distribution and upgrade to WSL2 following the `official Microsoft tutorial <https://learn.microsoft.com/en-us/windows/wsl/install>`_."
msgstr "在Windows上，使用WSL（Windows子系统Linux）与本机Windows安装相比，可以提升ROS 2的用户体验，因为它在Linux平台上运行。使用与您的ROS发行版兼容的Ubuntu版本安装WSL，并按照`官方Microsoft教程 <https://learn.microsoft.com/en-us/windows/wsl/install>`_ 升级到WSL2。@{"calib_text": " `[3742] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3742>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:54
msgid "2 Install ROS 2 in WSL"
msgstr "2 在WSL中安装ROS 2@{"calib_text": " `[3743] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3743>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:56
msgid "Install ROS 2 inside Ubuntu WSL, following :doc:`../../../../Installation/Ubuntu-Install-Debians`."
msgstr "在Ubuntu WSL中安装ROS 2，按照 :doc:`../../../../Installation/Ubuntu-Install-Debians` 进行操作。@{"calib_text": " `[3744] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3744>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:60
msgid "You can then either install ``webots_ros2`` from the official released package, or install it from the latest up-to-date sources from `Github <https://github.com/cyberbotics/webots_ros2>`_."
msgstr "您可以选择从官方发布的软件包中安装 ``webots_ros2``，或者从 `Github <https://github.com/cyberbotics/webots_ros2>`_ 的最新源代码中安装。@{"calib_text": " `[3745] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3745>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:62
msgid "The following commands must be run inside the WSL environment."
msgstr "以下命令必须在WSL环境中运行。@{"calib_text": " `[3746] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3746>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:119
msgid "WSL doesn't support hardware acceleration (yet). Therefore, Webots should be started on Windows, while the ROS part is running inside WSL. To do so, the following commands must be run inside the WSL environment."
msgstr "WSL暂时不支持硬件加速。因此，在WSL内部运行ROS部分时，Webots应该在Windows上启动。为此，必须在WSL环境中运行以下命令。@{"calib_text": " `[3747] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3747>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:129
msgid "Setting the ``WEBOTS_HOME`` environment variable allows you to start a specific Webots installation (e.g. ``C:\\Program Files\\Webots``). Use the mount point \"/mnt\" to refer to a path on native Windows."
msgstr "设置``WEBOTS_HOME``环境变量可以让您启动特定的Webots安装（例如``C:\\Program Files\\Webots``）。使用挂载点\"/mnt\"来引用本机Windows上的路径。@{"calib_text": " `[3748] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3748>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:151
msgid "5 RViz troubleshooting"
msgstr "5 RViz故障排除@{"calib_text": " `[3749] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3749>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:153
msgid "With recent versions of WSL2, RViz should work out of the box."
msgstr "在最新版本的WSL2上，RViz应该可以直接使用。@{"calib_text": " `[3750] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3750>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:155
msgid "You can check if it works correctly by running any example that uses RViz, for example:"
msgstr "您可以通过运行任何使用RViz的示例来检查它是否正常工作，例如：@{"calib_text": " `[3751] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3751>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:162
msgid "The Tiago robot can be controlled using:"
msgstr "使用 Tiago 机器人可以进行以下控制操作：@{"calib_text": " `[3752] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3752>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:168
msgid "With older WSL versions, RViz2 may not work directly, as no display is available. To use RViz, you can either upgrade WSL or enable X11 forwarding."
msgstr "在较旧的 WSL 版本中，RViz2 可能无法直接工作，因为没有可用的显示。要使用 RViz，您可以升级 WSL 或启用 X11 转发。@{"calib_text": " `[3753] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3753>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:171
msgid "Upgrade WSL"
msgstr "升级 WSL@{"calib_text": " `[3754] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3754>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:173
msgid "In a Windows shell:"
msgstr "在 Windows shell 中：@{"calib_text": " `[3755] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3755>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:179
msgid "Enable X11 forwarding"
msgstr "启用 X11 转发@{"calib_text": " `[3756] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3756>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:181
msgid "For older versions of WSL, the following steps can be followed:"
msgstr "对于旧版本的 WSL，可以按照以下步骤进行：@{"calib_text": " `[3757] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3757>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:183
msgid "Install `VcXsrv <https://sourceforge.net/projects/vcxsrv/>`_."
msgstr "安装 `VcXsrv <https://sourceforge.net/projects/vcxsrv/>`_。@{"calib_text": " `[3758] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3758>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:184
msgid "Launch VcXsrv. You can leave most of the parameters default, except the ``Extra settings`` page, where you must set ``Clipboard``, ``Primary Selection`` and ``Disable access control`` and unset ``Native opengl``."
msgstr "启动 VcXsrv。你可以保留大多数参数的默认值，只需在``Extra settings``页面中设置``Clipboard``、``Primary Selection``和``Disable access control``，并取消设置``Native opengl``。@{"calib_text": " `[3759] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3759>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:185
msgid "You can save the configuration for future launches."
msgstr "你可以保存配置以供将来使用。@{"calib_text": " `[3760] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3760>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:186
msgid "Click on ``Finish``, you will see that the X11 server is running in the icon tray."
msgstr "点击 ``Finish``，你将看到 X11 服务器在图标托盘中运行。@{"calib_text": " `[3761] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3761>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:187
msgid "In your WSL environment, export the ``DISPLAY`` variable."
msgstr "在你的 WSL 环境中，导出 ``DISPLAY`` 变量。@{"calib_text": " `[3762] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3762>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:193
msgid "You can add this to your ``.bashrc``, so that it is set for every future WSL environment."
msgstr "你可以将这个添加到你的 ``.bashrc`` 文件中，这样它就会被设置在每个将来的 WSL 环境中。@{"calib_text": " `[3763] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3763>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:2
msgid "Setting up a robot simulation (Advanced)"
msgstr "设置机器人模拟（高级）@{"calib_text": " `[3764] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3764>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:4
msgid "**Goal:** Extend a robot simulation with an obstacle avoider node."
msgstr "**目标：** 通过添加避障节点扩展机器人模拟。@{"calib_text": " `[3765] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3765>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:17
msgid "In this tutorial you will extend the package created in the first part of the tutorial: :doc:`./Setting-Up-Simulation-Webots-Basic`. The aim is to implement a ROS 2 node that avoids obstacles using the robot's distance sensors. This tutorial focuses on using robot devices with the ``webots_ros2_driver`` interface."
msgstr "在本教程中，您将扩展第一部分教程中创建的软件包：:doc:`./Setting-Up-Simulation-Webots-Basic`。目标是使用机器人的距离传感器实现一个ROS 2节点，用于避开障碍物。本教程重点介绍使用带有``webots_ros2_driver``接口的机器人设备。@{"calib_text": " `[3766] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3766>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:24
msgid "This is a continuation of the first part of the tutorial: :doc:`./Setting-Up-Simulation-Webots-Basic`. It is mandatory to start with the first part to set up the custom packages and necessary files."
msgstr "这是教程的第一部分的延续：:doc:`./Setting-Up-Simulation-Webots-Basic`。必须从第一部分开始设置自定义软件包和必要文件。@{"calib_text": " `[3767] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3767>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:31
msgid "1 Updating ``my_robot.urdf``"
msgstr "1 更新 ``my_robot.urdf``@{"calib_text": " `[3768] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3768>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:33
msgid "As mentioned in :doc:`./Setting-Up-Simulation-Webots-Basic`, ``webots_ros2_driver`` contains plugins to interface most of Webots devices with ROS 2 directly. These plugins can be loaded using the ``<device>`` tag in the URDF file of the robot. The ``reference`` attribute should match the Webots device ``name`` parameter. The list of all existing interfaces and the corresponding parameters can be found `on the devices reference page <https://github.com/cyberbotics/webots_ros2/wiki/References-Devices>`_. For available devices that are not configured in the URDF file, the interface will be automatically created and default values will be used for ROS parameters (e.g. ``update rate``, ``topic name``, and ``frame name``)."
msgstr "如在 :doc:`./Setting-Up-Simulation-Webots-Basic` 中所述，``webots_ros2_driver`` 包含了直接与 ROS 2 接口的大多数 Webots 设备的插件。可以使用 URDF 文件中的 ``<device>`` 标签加载这些插件。``reference`` 属性应与 Webots 设备的 ``name`` 参数匹配。所有现有接口及其对应的参数列表可以在 `设备参考页面 <https://github.com/cyberbotics/webots_ros2/wiki/References-Devices>`_ 找到。对于在 URDF 文件中未配置的可用设备，将自动创建接口，并使用 ROS 参数的默认值（例如 ``update rate``、``topic name`` 和 ``frame name``）。@{"calib_text": " `[3769] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3769>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:39
msgid "In ``my_robot.urdf`` replace the whole contents with:"
msgstr "在 ``my_robot.urdf`` 中，用以下内容替换整个内容：@{"calib_text": " `[3770] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3770>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:43 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:61 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:133 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:64 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:177 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:286 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:313 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:402 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:47 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:69 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:166 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:184 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:219 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:361 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:383 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:428 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:481 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:294 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:378 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:456 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:481 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:509 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:571 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:662 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:756 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:782 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:810 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:35 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:60 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:84 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:113 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:136 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:61 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:162 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:272 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:90 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:141
msgid "Python"
msgstr "Python@{"calib_text": " `[3771] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3771>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:48 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:92 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:144 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:102 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:219 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:294 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:321 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:412 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:250 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:340 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:450 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:467 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:499 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:538 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:609 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:750 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:767 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:800 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:25 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:50 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:74 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:100 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:127 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:72 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:126
msgid "C++"
msgstr "C++@{"calib_text": " `[3772] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3772>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:54
msgid "In addition to your custom plugin, the ``webots_ros2_driver`` will parse the ``<device>`` tags referring to the **DistanceSensor** nodes and use the standard parameters in the ``<ros>`` tags to enable the sensors and name their topics."
msgstr "除了您自定义的插件外，``webots_ros2_driver``将解析引用**DistanceSensor**节点的``<device>``标签，并使用``<ros>``标签中的标准参数来启用传感器并命名其主题。@{"calib_text": " `[3773] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3773>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:57
msgid "2 Creating a ROS node to avoid obstacles"
msgstr "2 创建一个ROS节点以避免障碍物@{"calib_text": " `[3774] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3774>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:63
msgid "The robot will use a standard ROS node to detect the wall and send motor commands to avoid it. In the ``my_package/my_package/`` folder, create a file named ``obstacle_avoider.py`` with this code:"
msgstr "机器人将使用一个标准的ROS节点来检测墙壁并发送电机指令以避免碰撞。在``my_package/my_package/``文件夹中创建一个名为``obstacle_avoider.py``的文件，并添加以下代码：@{"calib_text": " `[3775] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3775>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:69 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:105
msgid "This node will create a publisher for the command and subscribe to the sensors topics here:"
msgstr "此节点将在此处创建一个用于指令发布的发布者，并订阅传感器主题：@{"calib_text": " `[3776] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3776>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:76 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:111
msgid "When a measurement is received from the left sensor it will be copied to a member field:"
msgstr "当左侧传感器接收到测量值时，它将被复制到一个成员字段中：@{"calib_text": " `[3777] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3777>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:83 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:117
msgid "Finally, a message will be sent to the ``/cmd_vel`` topic when a measurement from the right sensor is received. The ``command_message`` will register at least a forward speed in ``linear.x`` in order to make the robot move when no obstacle is detected. If any of the two sensors detect an obstacle, ``command_message`` will also register a rotational speed in ``angular.z`` in order to make the robot turn right."
msgstr "最后，当右侧传感器接收到测量值时，将向``/cmd_vel``主题发送一条消息。``command_message``将至少在``linear.x``中注册前进速度，以便在没有检测到障碍物时使机器人移动。如果任何两个传感器都检测到障碍物，``command_message``还将在``angular.z``中注册旋转速度，以使机器人向右转动。@{"calib_text": " `[3778] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3778>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:94
msgid "The robot will use a standard ROS node to detect the wall and send motor commands to avoid it. In the ``my_package/include/my_package`` folder, create a header file named ``ObstacleAvoider.hpp`` with this code:"
msgstr "机器人将使用一个标准ROS节点来检测墙壁并发送电机命令以避开它。在``my_package/include/my_package``文件夹中，创建一个名为``ObstacleAvoider.hpp``的头文件，并添加以下代码：@{"calib_text": " `[3779] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3779>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:100
msgid "In the ``my_package/src`` folder, create a source file named ``ObstacleAvoider.cpp`` with this code:"
msgstr "在``my_package/src``文件夹中，创建一个名为``ObstacleAvoider.cpp``的源文件，并添加以下代码：@{"calib_text": " `[3780] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3780>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:127
msgid "3 Updating additional files"
msgstr "3 更新附加文件@{"calib_text": " `[3781] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3781>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:129
msgid "You have to modify these two other files to launch your new node."
msgstr "您需要修改这另外两个文件以启动您的新节点。@{"calib_text": " `[3782] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3782>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:135
msgid "Edit ``setup.py`` and replace ``'console_scripts'`` with:"
msgstr "编辑 ``setup.py``，将 ``'console_scripts'`` 替换为：@{"calib_text": " `[3783] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3783>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:142
msgid "This will add an entry point for the ``obstacle_avoider`` node."
msgstr "这将为 ``obstacle_avoider`` 节点添加一个入口点。@{"calib_text": " `[3784] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3784>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:146
msgid "Edit ``CMakeLists.txt`` and add the compilation and installation of the ``obstacle_avoider``:"
msgstr "编辑 ``CMakeLists.txt`` 文件，并添加 ``obstacle_avoider`` 的编译和安装：@{"calib_text": " `[3785] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3785>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:152
msgid "Go to the file ``robot_launch.py`` and replace ``def generate_launch_description():`` with:"
msgstr "打开 ``robot_launch.py`` 文件，并将 ``def generate_launch_description():`` 替换为：@{"calib_text": " `[3786] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3786>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:158
msgid "This will create an ``obstacle_avoider`` node that will be included in the ``LaunchDescription``."
msgstr "这将创建一个包含在 ``LaunchDescription`` 中的 ``obstacle_avoider`` 节点。@{"calib_text": " `[3787] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3787>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:161
msgid "4 Test the obstacle avoidance code"
msgstr "4. 测试避障代码。@{"calib_text": " `[3788] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3788>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:163
msgid "Launch the simulation from a terminal in your ROS 2 workspace:"
msgstr "在ROS 2工作空间的终端中启动仿真：@{"calib_text": " `[3789] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3789>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:169 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:442
msgid "From a terminal in your ROS 2 workspace run:"
msgstr "在ROS 2工作空间的终端中运行：@{"calib_text": " `[3790] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3790>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:179 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:455
msgid "From a terminal in your WSL ROS 2 workspace run:"
msgstr "在WSL ROS 2工作空间的终端中运行：@{"calib_text": " `[3791] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3791>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:188 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:464
msgid "Be sure to use the ``/mnt`` prefix in front of your path to the Webots installation folder to access the Windows file system from WSL."
msgstr "确保在WSL中使用``/mnt``前缀来访问Windows文件系统中Webots安装文件夹的路径。@{"calib_text": " `[3792] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3792>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:192
msgid "In a terminal of the host machine (not in the VM), if not done already, specify the Webots installation folder (e.g. ``/Applications/Webots.app``) and start the server using the following commands:"
msgstr "在主机机器的终端中（而不是虚拟机中），如果还没有这样做，请指定Webots安装文件夹（例如``/Applications/Webots.app``），然后使用以下命令启动服务器：@{"calib_text": " `[3793] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3793>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:199
msgid "Note that the server keeps running once the ROS 2 nodes are ended. You don't need to restart it every time you want to launch a new simulation. From a terminal in the Linux VM in your ROS 2 workspace, build and launch your custom package with:"
msgstr "请注意，一旦ROS 2节点结束，服务器将继续运行。您无需每次启动新的仿真时都重新启动它。从ROS 2工作空间中的Linux虚拟机终端中，使用以下命令构建和启动您的自定义包：@{"calib_text": " `[3794] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3794>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:210
msgid "Your robot should go forward and before hitting the wall it should turn clockwise. You can press ``Ctrl+F10`` in Webots or go to the ``View`` menu, ``Optional Rendering`` and ``Show DistanceSensor Rays`` to display the range of the distance sensors of the robot."
msgstr "您的机器人应该向前移动，在撞到墙壁之前应该顺时针转向。您可以在Webots中按下``Ctrl+F10``，或转到“View”菜单、“Optional Rendering”和“Show DistanceSensor Rays”以显示机器人的距离传感器范围。@{"calib_text": " `[3795] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3795>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:218
msgid "In this tutorial, you extended the basic simulation with a obstacle avoider ROS 2 node that publishes velocity commands based on the distance sensor values of the robot."
msgstr "在本教程中，您通过基于机器人的距离传感器值发布速度命令的障碍物避让ROS 2节点扩展了基本仿真。@{"calib_text": " `[3796] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3796>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:221 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:519 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:262 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:270 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:113 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:259 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:359 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:194 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:248 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:270 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:330 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:132 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:374 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:531 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:830 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:202 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:494 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:435 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:436 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:542 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:416 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:523 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:344 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:190 ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:118
msgid "Next steps"
msgstr "下一步@{"calib_text": " `[3797] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3797>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:223
msgid "You might want to improve the plugin or create new nodes to change the behavior of the robot. Taking inspiration from these previous tutorials could be a starting point:"
msgstr "您可能想要改进插件或创建新节点以改变机器人的行为。从这些以前的教程中获得灵感可能是一个起点：@{"calib_text": " `[3798] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3798>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:226
msgid ":doc:`../../Recording-A-Bag-From-Your-Own-Node-Py`."
msgstr ":doc:`../../Recording-A-Bag-From-Your-Own-Node-Py`.@{"calib_text": " `[3799] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3799>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:228
msgid ":doc:`../../../Intermediate/Tf2/Tf2-Main`."
msgstr ":doc:`../../../Intermediate/Tf2/Tf2-Main`.@{"calib_text": " `[3800] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3800>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:7
msgid "Setting up a robot simulation (Basic)"
msgstr "设置机器人仿真（基础）@{"calib_text": " `[3801] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3801>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:9
msgid "**Goal:** Setup a robot simulation and control it from ROS 2."
msgstr "**目标：**设置机器人仿真并通过ROS 2进行控制。@{"calib_text": " `[3802] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3802>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:13
msgid "**Time:** 30 minutes"
msgstr "**时间：**30分钟@{"calib_text": " `[3803] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3803>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:22
msgid "In this tutorial, you are going to use the Webots robot simulator to set-up and run a very simple ROS 2 simulation scenario."
msgstr "在本教程中，您将使用Webots机器人仿真器来设置和运行一个非常简单的ROS 2仿真场景。@{"calib_text": " `[3804] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3804>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:24
msgid "The ``webots_ros2`` package provides an interface between ROS 2 and Webots. It includes several sub-packages, but in this tutorial, you are going to use only the ``webots_ros2_driver`` sub-package to implement a Python or C++ plugin controlling a simulated robot. Some other sub-packages contain demos with different robots such as the TurtleBot3. They are documented in the `Webots ROS 2 examples <https://github.com/cyberbotics/webots_ros2/wiki/Examples>`_ page."
msgstr "``webots_ros2`` 包提供了ROS 2和Webots之间的接口。它包含了几个子包，但在本教程中，您只会使用``webots_ros2_driver``子包来实现一个控制模拟机器人的Python或C++插件。其他一些子包包含了不同机器人的演示，比如TurtleBot3。它们在 `Webots ROS 2 examples <https://github.com/cyberbotics/webots_ros2/wiki/Examples>`_ 页面有文档记录。@{"calib_text": " `[3805] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3805>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:32
msgid "It is recommended to understand basic ROS principles covered in the beginner :doc:`../../../../Tutorials`. In particular, :doc:`../../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim`, :doc:`../../../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics`, :doc:`../../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace`, :doc:`../../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package` and :doc:`../../../Intermediate/Launch/Creating-Launch-Files` are useful prerequisites."
msgstr "建议您先了解在初学者教程 :doc:`../../../../Tutorials` 中介绍的基本ROS原理。特别是 :doc:`../../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim`，:doc:`../../../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics`，:doc:`../../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace`，:doc:`../../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package` 和 :doc:`../../../Intermediate/Launch/Creating-Launch-Files` 是有用的先决条件。@{"calib_text": " `[3806] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3806>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:39
msgid "The Linux and ROS commands of this tutorial can be run in a standard Linux terminal. The following page :doc:`./Installation-Ubuntu` explains how to install the ``webots_ros2`` package on Linux."
msgstr "本教程中的Linux和ROS命令可以在标准的Linux终端中运行。下一页 :doc:`./Installation-Ubuntu` 解释了如何在Linux上安装 ``webots_ros2`` 包。@{"calib_text": " `[3807] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3807>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:44
msgid "The Linux and ROS commands of this tutorial must be run in a WSL (Windows Subsystem for Linux) environment. The following page :doc:`./Installation-Windows` explains how to install the ``webots_ros2`` package on Windows."
msgstr "本教程中的Linux和ROS命令必须在WSL（Windows Subsystem for Linux）环境中运行。下一页 :doc:`./Installation-Windows` 解释了如何在Windows上安装 ``webots_ros2`` 包。@{"calib_text": " `[3808] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3808>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:49
msgid "The Linux and ROS commands of this tutorial must be run in a pre-configured Linux Virtual Machine (VM). The following page :doc:`./Installation-MacOS` explains how to install the ``webots_ros2`` package on macOS."
msgstr "本教程中的Linux和ROS命令必须在预配置的Linux虚拟机（VM）中运行。下面的页面 :doc:`./Installation-MacOS` 解释了如何在macOS上安装 ``webots_ros2`` 包。@{"calib_text": " `[3809] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3809>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:56
msgid "1 Create the package structure"
msgstr "1 创建软件包结构@{"calib_text": " `[3810] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3810>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:58
msgid "Let's organize the code in a custom ROS 2 package. Create a new package named ``my_package`` from the ``src`` folder of your ROS 2 workspace. Change the current directory of your terminal to ``ros2_ws/src`` and run:"
msgstr "我们将在一个自定义的ROS 2软件包中组织代码。从ROS 2工作空间的 ``src`` 文件夹中创建一个名为 ``my_package`` 的新软件包。将终端的当前目录更改为 ``ros2_ws/src`` 并运行以下命令：@{"calib_text": " `[3811] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3811>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:70
msgid "The ``--node-name my_robot_driver`` option will create a ``my_robot_driver.py`` template Python plugin in the ``my_package`` subfolder that you will modify later. The ``--dependencies rclpy geometry_msgs webots_ros2_driver`` option specifies the packages needed by the ``my_robot_driver.py`` plugin in the ``package.xml`` file."
msgstr "选项 ``--node-name my_robot_driver`` 将在 ``my_package`` 子文件夹中创建一个名为 ``my_robot_driver.py`` 的模板Python插件，稍后您将对其进行修改。选项 ``--dependencies rclpy geometry_msgs webots_ros2_driver`` 在 ``package.xml`` 文件中指定了 ``my_robot_driver.py`` 插件所需的软件包。@{"calib_text": " `[3812] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3812>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:73
msgid "Let's add a ``launch`` and a ``worlds`` folder inside the ``my_package`` folder."
msgstr "让我们在 ``my_package`` 文件夹内添加一个 ``launch`` 和一个 ``worlds`` 文件夹。@{"calib_text": " `[3813] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3813>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:81 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:128
msgid "You should end up with the following folder structure:"
msgstr "最终你应该得到以下的文件结构：@{"calib_text": " `[3814] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3814>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:108
msgid "The ``--node-name MyRobotDriver`` option will create a ``MyRobotDriver.cpp`` template C++ plugin in the ``my_package/src`` subfolder that you will modify later. The ``--dependencies rclcpp geometry_msgs webots_ros2_driver pluginlib`` option specifies the packages needed by the ``MyRobotDriver`` plugin in the ``package.xml`` file."
msgstr "``--node-name MyRobotDriver`` 选项将在 ``my_package/src`` 子文件夹中创建一个 ``MyRobotDriver.cpp`` 模板 C++ 插件，稍后你将对其进行修改。``--dependencies rclcpp geometry_msgs webots_ros2_driver pluginlib`` 选项在 ``package.xml`` 文件中指定了 ``MyRobotDriver`` 插件所需的软件包。@{"calib_text": " `[3815] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3815>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:112
msgid "Let's add a ``launch``, a ``worlds`` and a ``resource`` folder inside the ``my_package`` folder."
msgstr "让我们在 ``my_package`` 文件夹内添加一个 ``launch``、一个 ``worlds`` 和一个 ``resource`` 文件夹。@{"calib_text": " `[3816] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3816>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:121
msgid "Two additional files must be created: the header file for ``MyRobotDriver`` and the ``my_robot_driver.xml`` pluginlib description file."
msgstr "需要创建两个额外的文件：``MyRobotDriver``的头文件和``my_robot_driver.xml``的pluginlib描述文件。@{"calib_text": " `[3817] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3817>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:147
msgid "2 Setup the simulation world"
msgstr "2 设置仿真世界@{"calib_text": " `[3818] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3818>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:149
msgid "You will need a world file containing a robot to launch your simulation. :download:`Download this world file <Code/my_world.wbt>` and move it inside ``my_package/worlds/``."
msgstr "您需要一个包含机器人的世界文件来启动仿真。:download:`下载这个世界文件 <Code/my_world.wbt>`并将其移动到``my_package/worlds/``文件夹中。@{"calib_text": " `[3819] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3819>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:152
msgid "This is actually a fairly simple text file you can visualize in a text editor. A simple robot is already included in this ``my_world.wbt`` world file."
msgstr "实际上，这是一个相当简单的文本文件，您可以在文本编辑器中查看。这个``my_world.wbt``世界文件中已经包含了一个简单的机器人。@{"calib_text": " `[3820] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3820>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:157
msgid "In case you want to learn how to create your own robot model in Webots, you can check this `tutorial <https://cyberbotics.com/doc/guide/tutorial-6-4-wheels-robot>`_."
msgstr "如果您想学习如何在Webots中创建自己的机器人模型，您可以查看这个`教程 <https://cyberbotics.com/doc/guide/tutorial-6-4-wheels-robot>`_。@{"calib_text": " `[3821] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3821>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:160
msgid "3 Edit the ``my_robot_driver`` plugin"
msgstr "3 编辑``my_robot_driver``插件@{"calib_text": " `[3822] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3822>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:162
msgid "The ``webots_ros2_driver`` sub-package automatically creates a ROS 2 interface for most sensors. More details on existing device interfaces and how to configure them is given in the second part of the tutorial: :doc:`./Setting-Up-Simulation-Webots-Advanced`. In this task, you will extend this interface by creating your own custom plugin. This custom plugin is a ROS node equivalent to a robot controller. You can use it to access the `Webots robot API  <https://cyberbotics.com/doc/reference/robot?tab-language=python>`_ and create your own topics and services to control your robot."
msgstr "``webots_ros2_driver``子包会自动为大多数传感器创建ROS 2接口。关于现有设备接口的更多细节以及如何配置它们，请参阅教程的第二部分： :doc:`./Setting-Up-Simulation-Webots-Advanced`。在这个任务中，您将通过创建自己的自定义插件来扩展这个接口。这个自定义插件是一个等效于机器人控制器的ROS节点。您可以使用它来访问`Webots机器人API <https://cyberbotics.com/doc/reference/robot?tab-language=python>`_，并创建自己的话题和服务来控制您的机器人。@{"calib_text": " `[3823] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3823>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:170
msgid "The purpose of this tutorial is to show a basic example with a minimum number of dependencies. However, you could avoid the use of this plugin by using another ``webots_ros2`` sub-package named ``webots_ros2_control``, introducing a new dependency. This other sub-package creates an interface with the ``ros2_control`` package that facilitates the control of a differential wheeled robot."
msgstr "本教程的目的是展示一个最小依赖的基本示例。但是，您可以通过使用另一个名为``webots_ros2_control``的``webots_ros2``子包来避免使用此插件，这将引入新的依赖项。该子包创建了与``ros2_control``包的接口，以便更容易控制差分轮式机器人。@{"calib_text": " `[3824] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3824>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:179
msgid "Open ``my_package/my_package/my_robot_driver.py`` in your favorite editor and replace its contents with the following:"
msgstr "在您喜欢的编辑器中打开``my_package/my_package/my_robot_driver.py``并将其内容替换为以下内容：@{"calib_text": " `[3825] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3825>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:184
msgid "As you can see, the ``MyRobotDriver`` class implements three methods."
msgstr "正如您所看到的，``MyRobotDriver``类实现了三个方法。@{"calib_text": " `[3826] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3826>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:186
msgid "The first method, named ``init(self, ...)``, is actually the ROS node counterpart of the Python ``__init__(self, ...)`` constructor. The ``init`` method always takes two arguments:"
msgstr "第一个方法名为``init(self, ...)`'，实际上是Python中``__init__(self, ...)`构造函数的ROS节点对应方法。``init``方法始终接受两个参数：@{"calib_text": " `[3827] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3827>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:189
msgid "The ``webots_node`` argument contains a reference on the Webots instance."
msgstr "``webots_node``参数包含对Webots实例的引用。@{"calib_text": " `[3828] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3828>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:190
msgid "The ``properties`` argument is a dictionary created from the XML tags given in the URDF files (:ref:`4 Create the my_robot.urdf file`) and allows you to pass parameters to the controller."
msgstr "``properties``参数是从URDF文件(:ref:`4 创建my_robot.urdf文件`)中提取的XML标签创建的字典，它允许您将参数传递给控制器。@{"calib_text": " `[3829] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3829>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:192
msgid "The robot instance from the simulation ``self.__robot`` can be used to access the `Webots robot API <https://cyberbotics.com/doc/reference/robot?tab-language=python>`_. Then, it gets the two motor instances and initializes them with a target position and a target velocity. Finally a ROS node is created and a callback method is registered for a ROS topic named ``/cmd_vel`` that will handle ``Twist`` messages."
msgstr "来自仿真的机器人实例``self.__robot``可用于访问`Webots机器人API<https://cyberbotics.com/doc/reference/robot?tab-language=python>`_。然后，它获取两个电机实例，并使用目标位置和目标速度进行初始化。最后，创建一个ROS节点，并为名为``/cmd_vel``的ROS主题注册一个回调方法，该回调方法将处理``Twist``消息。@{"calib_text": " `[3830] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3830>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:201
msgid "Then comes the implementation of the ``__cmd_vel_callback(self, twist)`` callback private method that will be called for each ``Twist`` message received on the ``/cmd_vel`` topic and will save it in the ``self.__target_twist`` member variable."
msgstr "然后，实现了``__cmd_vel_callback(self, twist)``回调私有方法，该方法将在``/cmd_vel``主题接收到每个``Twist``消息时被调用，并将其保存在``self.__target_twist``成员变量中。@{"calib_text": " `[3831] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3831>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:208
msgid "Finally, the ``step(self)`` method is called at every time step of the simulation. The call to ``rclpy.spin_once()`` is needed to keep the ROS node running smoothly. At each time step, the method will retrieve the desired ``forward_speed`` and ``angular_speed`` from ``self.__target_twist``. As the motors are controlled with angular velocities, the method will then convert the ``forward_speed`` and ``angular_speed`` into individual commands for each wheel. This conversion depends on the structure of the robot, more specifically on the radius of the wheel and the distance between them."
msgstr "最后，在仿真的每个时间步骤中调用``step(self)``方法。调用``rclpy.spin_once()``是为了保持ROS节点的平稳运行。在每个时间步骤中，该方法将从``self.__target_twist``中获取所需的``forward_speed``和``angular_speed``。由于电机受到角速度的控制，该方法将把``forward_speed``和``angular_speed``转换为每个轮子的单独命令。此转换取决于机器人的结构，更具体地说是轮子的半径和它们之间的距离。@{"calib_text": " `[3832] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3832>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:221
msgid "Open ``my_package/src/MyRobotDriver.hpp`` in your favorite editor and replace its contents with the following:"
msgstr "在您喜欢的编辑器中打开 ``my_package/src/MyRobotDriver.hpp`` 并将其内容替换为以下内容：@{"calib_text": " `[3833] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3833>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:226
msgid "The class ``MyRobotDriver`` is defined, which inherits from the ``webots_ros2_driver::PluginInterface`` class. The plugin has to override ``step(...)`` and ``init(...)`` functions. More details are given in the ``MyRobotDriver.cpp`` file. Several helper methods, callbacks and member variables that will be used internally by the plugin are declared privately."
msgstr "定义了类 ``MyRobotDriver``，它继承自 ``webots_ros2_driver::PluginInterface`` 类。插件必须重写 ``step(...)`` 和 ``init(...)`` 函数。更多详细信息请参阅 ``MyRobotDriver.cpp`` 文件。在插件内部，声明了几个辅助方法、回调函数和成员变量，它们将在插件内部使用，并作为私有成员。@{"calib_text": " `[3834] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3834>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:231
msgid "Then, open ``my_package/src/MyRobotDriver.cpp`` in your favorite editor and replace its contents with the following:"
msgstr "然后，在您喜欢的编辑器中打开 ``my_package/src/MyRobotDriver.cpp`` 并将其内容替换为以下内容：@{"calib_text": " `[3835] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3835>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:236
msgid "The ``MyRobotDriver::init`` method is executed once the plugin is loaded by the ``webots_ros2_driver`` package. It takes two arguments:"
msgstr "一旦 ``webots_ros2_driver`` 包加载插件，就会执行 ``MyRobotDriver::init`` 方法。它接受两个参数：@{"calib_text": " `[3836] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3836>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:239
msgid "A pointer to the ``WebotsNode`` defined by ``webots_ros2_driver``, which allows to access the ROS 2 node functions."
msgstr "一个指向``webots_ros2_driver``定义的``WebotsNode``的指针，它允许访问ROS 2节点函数。@{"calib_text": " `[3837] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3837>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:240
msgid "The ``parameters`` argument is an unordered map of strings, created from the XML tags given in the URDF files (:ref:`4 Create the my_robot.urdf file`) and allows to pass parameters to the controller. It is not used in this example."
msgstr "``parameters``参数是一个无序的字符串映射，由URDF文件（:ref:`4 创建my_robot.urdf文件`）中给定的XML标签创建，并允许向控制器传递参数。在此示例中不使用它。@{"calib_text": " `[3838] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3838>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:242
msgid "It initializes the plugin by setting up the robot motors, setting their positions and velocities, and subscribing to the ``/cmd_vel`` topic."
msgstr "它通过设置机器人电机、设置它们的位置和速度，并订阅``/cmd_vel``主题来初始化插件。@{"calib_text": " `[3839] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3839>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:248
msgid "Then comes the implementation of the ``cmdVelCallback()`` callback function that will be called for each Twist message received on the ``/cmd_vel`` topic and will save it in the ``cmd_vel_msg`` member variable."
msgstr "然后是``cmdVelCallback()``回调函数的实现，它将在``/cmd_vel``主题接收到每个Twist消息时被调用，并将其保存在``cmd_vel_msg``成员变量中。@{"calib_text": " `[3840] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3840>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:254
msgid "The ``step()`` method is called at every time step of the simulation. At each time step, the method will retrieve the desired ``forward_speed`` and ``angular_speed`` from ``cmd_vel_msg``. As the motors are controlled with angular velocities, the method will then convert the ``forward_speed`` and ``angular_speed`` into individual commands for each wheel. This conversion depends on the structure of the robot, more specifically on the radius of the wheel and the distance between them."
msgstr "``step()`` 方法在模拟的每个时间步调用。在每个时间步中，该方法将从 ``cmd_vel_msg`` 中获取所需的 ``forward_speed`` 和 ``angular_speed``。由于电机是由角速度控制的，因此该方法将把 ``forward_speed`` 和 ``angular_speed`` 转换为每个轮子的单独命令。这种转换取决于机器人的结构，更具体地说是轮子的半径和它们之间的距离。@{"calib_text": " `[3841] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3841>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:263
msgid "The final lines of the file define the end of the ``my_robot_driver`` namespace and include a macro to export the ``MyRobotDriver`` class as a plugin using the ``PLUGINLIB_EXPORT_CLASS`` macro. This allows the plugin to be loaded by the Webots ROS2 driver at runtime."
msgstr "文件的最后几行定义了``my_robot_driver`` 命名空间的结束，并使用 ``PLUGINLIB_EXPORT_CLASS`` 宏将 ``MyRobotDriver`` 类导出为插件。这允许在运行时由Webots ROS2驱动程序加载该插件。@{"calib_text": " `[3842] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3842>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:272
msgid "While the plugin is implemented in C++, the C API must be used to interact with the Webots controller library."
msgstr "尽管插件是用C++实现的，但必须使用C API与Webots控制器库进行交互。@{"calib_text": " `[3843] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3843>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:277
msgid "4 Create the ``my_robot.urdf`` file"
msgstr "4 创建 ``my_robot.urdf`` 文件@{"calib_text": " `[3844] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3844>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:279
msgid "You now have to create a URDF file to declare the ``MyRobotDriver`` plugin. This will allow the ``webots_ros2_driver`` ROS node to launch the plugin and connect it to the target robot."
msgstr "您现在需要创建一个URDF文件来声明``MyRobotDriver``插件。这将允许``webots_ros2_driver`` ROS节点启动插件并将其连接到目标机器人。@{"calib_text": " `[3845] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3845>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:282
msgid "In the ``my_package/resource`` folder create a text file named ``my_robot.urdf`` with this content:"
msgstr "在``my_package/resource``文件夹中创建一个名为``my_robot.urdf``的文本文件，其内容如下：@{"calib_text": " `[3846] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3846>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:291
msgid "The ``type`` attribute specifies the path to the class given by the hierarchical structure of files. ``webots_ros2_driver`` is responsible for loading the class based on the specified package and modules."
msgstr "``type``属性指定了根据文件的层次结构给出的类路径。``webots_ros2_driver``负责根据指定的软件包和模块加载类。@{"calib_text": " `[3847] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3847>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:299
msgid "The ``type`` attribute specifies the namespace and class name to load. ``pluginlib`` is responsible for loading the class based on the specified information."
msgstr "``type``属性指定要加载的命名空间和类名。``pluginlib``负责根据指定的信息加载类。@{"calib_text": " `[3848] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3848>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:304
msgid "This simple URDF file doesn't contain any link or joint information about the robot as it is not needed in this tutorial. However, URDF files usually contain much more information as explained in the :doc:`../../../Intermediate/URDF/URDF-Main` tutorial."
msgstr "这个简单的URDF文件不包含关于机器人的任何链接或关节信息，因为在本教程中不需要。然而，URDF文件通常包含更多的信息，如在 :doc:`../../../Intermediate/URDF/URDF-Main` 教程中所解释的。@{"calib_text": " `[3849] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3849>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:309
msgid "Here the plugin does not take any input parameter, but this can be achieved with a tag containing the parameter name."
msgstr "这里的插件不接受任何输入参数，但可以通过包含参数名的标签来实现。@{"calib_text": " `[3850] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3850>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:330
msgid "This is namely used to pass parameters to existing Webots device plugins (see :doc:`./Setting-Up-Simulation-Webots-Advanced`)."
msgstr "这主要用于向现有的Webots设备插件传递参数（参见 :doc:`./Setting-Up-Simulation-Webots-Advanced`）。@{"calib_text": " `[3851] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3851>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:333
msgid "5 Create the launch file"
msgstr "5 创建启动文件@{"calib_text": " `[3852] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3852>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:335
msgid "Let's create the launch file to easily launch the simulation and the ROS controller with a single command. In the ``my_package/launch`` folder create a new text file named ``robot_launch.py`` with this code:"
msgstr "让我们创建启动文件，以便可以通过一个命令轻松启动仿真和ROS控制器。在``my_package/launch``文件夹中创建一个名为``robot_launch.py``的新文本文件，并使用以下代码：@{"calib_text": " `[3853] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3853>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:341
msgid "The ``WebotsLauncher`` object is a custom action that allows you to start a Webots simulation instance. You have to specify in the constructor which world file the simulator will open."
msgstr "``WebotsLauncher``对象是一个自定义动作，可以启动Webots仿真实例。您需要在构造函数中指定模拟器将打开的世界文件。@{"calib_text": " `[3854] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3854>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:349
msgid "Then, the ROS node interacting with the simulated robot is created. This node, named ``driver``, is located in the ``webots_ros2_driver`` package."
msgstr "然后，创建与模拟机器人交互的ROS节点。此节点名为``driver``，位于``webots_ros2_driver``包中。@{"calib_text": " `[3855] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3855>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:356
msgid "The node will be able to communicate with the simulated robot by using a custom protocol based on IPC and shared memory."
msgstr "该节点将能够使用基于IPC和共享内存的自定义协议与模拟机器人通信。@{"calib_text": " `[3856] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3856>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:360
msgid "The node (in WSL) will be able to communicate with the simulated robot (in Webots on native Windows) through a TCP connection."
msgstr "在WSL中的节点将能够通过TCP连接与在本机Windows上的Webots模拟机器人进行通信。@{"calib_text": " `[3857] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3857>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:364
msgid "The node (in the docker container) will be able to communicate with the simulated robot (in Webots on native macOS) through a TCP connection."
msgstr "在Docker容器中的节点将能够通过TCP连接与在本机macOS上的Webots模拟机器人进行通信。@{"calib_text": " `[3858] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3858>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:367
msgid "In your case, you need to run a single instance of this node, because you have a single robot in the simulation. But if you had more robots in the simulation, you would have to run one instance of this node per robot. ``WEBOTS_CONTROLLER_URL`` is used to define the name of the robot the driver should connect to. The ``controller_url_prefix()`` method is mandatory, as it allows ``webots_ros2_driver`` to add the correct protocol prefix depending on your platform. The ``robot_description`` parameter holds the contents of the URDF file which refers to the ``MyRobotDriver`` plugin. You can see the ``driver`` node as the interface that connects your controller plugin to the target robot."
msgstr "在您的情况下，您需要运行一个此节点的实例，因为您在仿真中只有一个机器人。但是，如果您在仿真中有多个机器人，您需要为每个机器人运行一个此节点的实例。``WEBOTS_CONTROLLER_URL``用于定义驱动程序应连接到的机器人的名称。``controller_url_prefix()``方法是必需的，因为它允许``webots_ros2_driver``根据您的平台添加正确的协议前缀。``robot_description``参数保存了指向``MyRobotDriver``插件的URDF文件的内容。您可以将``driver``节点视为将控制器插件与目标机器人连接的接口。@{"calib_text": " `[3859] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3859>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:379
msgid "After that, the two nodes are set to be launched in the ``LaunchDescription`` constructor:"
msgstr "之后，这两个节点被设置为在``LaunchDescription``构造函数中启动：@{"calib_text": " `[3860] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3860>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:386
msgid "Finally, an optional part is added in order to shutdown all the nodes once Webots terminates (e.g., when it gets closed from the graphical user interface)."
msgstr "最后，为了在Webots终止时关闭所有节点（例如，当从图形用户界面关闭时），添加了一个可选部分。@{"calib_text": " `[3861] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3861>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:395
msgid "More details on ``webots_ros2_driver`` and ``WebotsLauncher`` arguments can be found `on the nodes reference page <https://github.com/cyberbotics/webots_ros2/wiki/References-Nodes>`_."
msgstr "关于``webots_ros2_driver``和``WebotsLauncher``参数的更多详细信息可以在`节点参考页面 <https://github.com/cyberbotics/webots_ros2/wiki/References-Nodes>`_找到。@{"calib_text": " `[3862] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3862>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:398
msgid "6 Edit additional files"
msgstr "6 编辑附加文件@{"calib_text": " `[3863] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3863>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:404
msgid "Before you can start the launch file, you have to modify the ``setup.py`` file to include the extra files you added. Open ``my_package/setup.py`` and replace its contents with:"
msgstr "在您启动启动文件之前，您必须修改``setup.py``文件以包括您添加的额外文件。打开``my_package/setup.py``并用以下内容替换其内容：@{"calib_text": " `[3864] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3864>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:410
msgid "This sets-up the package and adds in the ``data_files`` variable the newly added files: ``my_world.wbt``, ``my_robot.urdf`` and ``robot_launch.py``."
msgstr "这个设置了包并在``data_files``变量中添加了新增的文件：``my_world.wbt``、``my_robot.urdf``和``robot_launch.py``。@{"calib_text": " `[3865] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3865>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:414
msgid "Before you can start the launch file, you have to modify ``CMakeLists.txt`` and ``my_robot_driver.xml`` files:"
msgstr "在启动文件之前，您必须修改``CMakeLists.txt``和``my_robot_driver.xml``文件：@{"calib_text": " `[3866] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3866>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:416
msgid "``CMakeLists.txt`` defines the compilation rules of your plugin."
msgstr "``CMakeLists.txt``定义了您插件的编译规则。@{"calib_text": " `[3867] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3867>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:417
msgid "``my_robot_driver.xml`` is necessary for the pluginlib to find your Webots ROS 2 plugin."
msgstr "``my_robot_driver.xml``对于pluginlib找到您的Webots ROS 2插件是必需的。@{"calib_text": " `[3868] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3868>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:419
msgid "Open ``my_package/my_robot_driver.xml`` and replace its contents with:"
msgstr "打开``my_package/my_robot_driver.xml``并将其内容替换为：@{"calib_text": " `[3869] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3869>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:424
msgid "Open ``my_package/CMakeLists.txt`` and replace its contents with:"
msgstr "打开``my_package/CMakeLists.txt``并将其内容替换为：@{"calib_text": " `[3870] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3870>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:429
msgid "The CMakeLists.txt exports the plugin configuration file with the ``pluginlib_export_plugin_description_file()``, defines a shared library of the C++ plugin ``src/MyRobotDriver.cpp``, and sets the include and library dependencies using ``ament_target_dependencies()``."
msgstr "CMakeLists.txt使用``pluginlib_export_plugin_description_file()``导出插件配置文件，定义了C++插件``src/MyRobotDriver.cpp``的共享库，并使用``ament_target_dependencies()``设置包含和库依赖项。@{"calib_text": " `[3871] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3871>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:431
msgid "The file then installs the library, the directories ``launch``, ``resource``, and ``worlds`` to the ``share/my_package`` directory. Finally, it exports the include directories and libraries using ``ament_export_include_directories()`` and ``ament_export_libraries()``, respectively, and declares the package using ``ament_package()``."
msgstr "然后，该文件将库、目录``launch``、``resource``和``worlds``安装到``share/my_package``目录中。最后，它使用``ament_export_include_directories()``和``ament_export_libraries()``分别导出包含目录和库，并使用``ament_package()``声明包。@{"calib_text": " `[3872] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3872>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:436
msgid "7 Test the code"
msgstr "7 测试代码@{"calib_text": " `[3873] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3873>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:450 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:466
msgid "This will launch the simulation. Webots will be automatically installed on the first run in case it was not already installed."
msgstr "这将启动模拟。如果尚未安装Webots，则在第一次运行时将自动安装。@{"calib_text": " `[3874] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3874>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:471
msgid "On macOS, a local server must be started on the host to start Webots from the VM. The local server can be downloaded `on the webots-server repository <https://github.com/cyberbotics/webots-server/blob/main/local_simulation_server.py>`_."
msgstr "在 macOS 上，必须在主机上启动本地服务器才能从虚拟机中启动Webots。可以从`webots-server存储库 <https://github.com/cyberbotics/webots-server/blob/main/local_simulation_server.py>`_ 下载本地服务器。@{"calib_text": " `[3875] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3875>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:474
msgid "In a terminal of the host machine (not in the VM), specify the Webots installation folder (e.g. ``/Applications/Webots.app``) and start the server using the following commands:"
msgstr "在主机机器的终端（而不是虚拟机）中，指定Webots安装文件夹（例如 ``/Applications/Webots.app``）并使用以下命令启动服务器：@{"calib_text": " `[3876] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3876>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:481
msgid "From a terminal in the Linux VM in your ROS 2 workspace, build and launch your custom package with:"
msgstr "在您的ROS 2工作空间中的Linux虚拟机终端中，使用以下命令构建并启动您的自定义软件包：@{"calib_text": " `[3877] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3877>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:492
msgid "If you want to install Webots manually, you can download it `here <https://github.com/cyberbotics/webots/releases/latest>`_."
msgstr "如果您想手动安装Webots，您可以从`此处 <https://github.com/cyberbotics/webots/releases/latest>`_ 下载。@{"calib_text": " `[3878] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3878>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:495
msgid "Then, open a second terminal and send a command with:"
msgstr "然后，打开第二个终端并发送以下命令：@{"calib_text": " `[3879] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3879>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:501
msgid "The robot is now moving forward."
msgstr "机器人现在正在向前移动。@{"calib_text": " `[3880] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3880>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:505
msgid "At this point, the robot is able to blindly follow your motor commands. But it will eventually bump into the wall as you order it to move forwards."
msgstr "此时，机器人能够盲目地按照您的电机指令行动。但是，当您命令它向前移动时，它最终会撞到墙上。@{"calib_text": " `[3881] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3881>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:510
msgid "Close the Webots window, this should also shutdown your ROS nodes started from the launcher. Close also the topic command with ``Ctrl+C`` in the second terminal."
msgstr "关闭Webots窗口，这也会关闭从启动器启动的ROS节点。同时，在第二个终端中使用``Ctrl+C``关闭话题命令。@{"calib_text": " `[3882] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3882>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:516
msgid "In this tutorial, you set-up a realistic robot simulation with Webots and implemented a custom plugin to control the motors of the robot."
msgstr "在本教程中，您使用Webots设置了一个逼真的机器人仿真，并实现了一个自定义插件来控制机器人的电机。@{"calib_text": " `[3883] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3883>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:521
msgid "To improve the simulation, the robot's sensors can be used to detect obstacles and avoid them. The second part of the tutorial shows how to implement such behaviour:"
msgstr "为了改善仿真效果，可以使用机器人的传感器来检测障碍物并避开它们。教程的第二部分展示了如何实现这样的行为：@{"calib_text": " `[3884] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3884>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:524
msgid ":doc:`./Setting-Up-Simulation-Webots-Advanced`."
msgstr ":doc:`./Setting-Up-Simulation-Webots-Advanced`。@{"calib_text": " `[3885] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3885>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Webots.rst:2
msgid "Webots"
msgstr "Webots@{"calib_text": " `[3886] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3886>`_ "}@"


#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Webots.rst:4
msgid "This set of tutorials will teach you how to configure the Webots simulator with ROS 2."
msgstr "这套教程将教您如何配置带有ROS 2的Webots仿真器。@{"calib_text": " `[3887] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3887>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:7
msgid "Enabling topic statistics (C++)"
msgstr "启用主题统计信息（C++）@{"calib_text": " `[3888] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3888>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:9
msgid "**Goal:** Enable ROS 2 Topic Statistics and view the output statistics data."
msgstr "**目标：**启用ROS 2主题统计功能并查看输出统计数据。@{"calib_text": " `[3889] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3889>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:21
msgid "This is a short tutorial of how to enable :doc:`Topic Statistics<../../../Concepts/About-Topic-Statistics>` in ROS 2 and view the published statistics output using command line tools (:doc:`ros2topic<../../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>`)."
msgstr "这是一个简短的教程，介绍如何在ROS 2中启用 :doc:`Topic Statistics<../../../Concepts/About-Topic-Statistics>`，并使用命令行工具（:doc:`ros2topic<../../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>`）查看发布的统计输出。@{"calib_text": " `[3890] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3890>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:24
msgid "ROS 2 provides the integrated measurement of statistics for messages received by any subscription, called Topic Statistics. With Topic Statistics enabled for your subscription, you can characterize the performance of your system or use the data to help diagnose any present issues."
msgstr "ROS 2提供了对任何订阅接收的消息进行统计的集成测量功能，称为Topic Statistics。启用Topic Statistics功能后，您可以对系统的性能进行特征化，或者使用数据来帮助诊断任何现有的问题。@{"calib_text": " `[3891] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3891>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:29
msgid "For more details please see the :doc:`Topic Statistics Concepts Page<../../../Concepts/About-Topic-Statistics>`."
msgstr "有关更多详细信息，请参阅 :doc:`Topic Statistics Concepts Page<../../../Concepts/About-Topic-Statistics>`。@{"calib_text": " `[3892] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3892>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:34
msgid "An installation from either binaries or source."
msgstr "可以使用二进制文件或源码进行安装。@{"calib_text": " `[3893] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3893>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:36
msgid "In previous tutorials, you learned how to :doc:`create a workspace <../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>`, :doc:`create a package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`, and create a :doc:`C++ <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber>` publisher and subscriber."
msgstr "在之前的教程中，您学习了如何 :doc:`创建工作空间 <../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>`，:doc:`创建包 <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`，以及创建一个 :doc:`C++ <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber>` 发布者和订阅者。@{"calib_text": " `[3894] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3894>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:39
msgid "This tutorial assumes that you still have your ``cpp_pubsub`` package from the :doc:`C++ <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber>` tutorial."
msgstr "本教程假设您仍然拥有来自 :doc:`C++ <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber>` 教程的 ``cpp_pubsub`` 包。@{"calib_text": " `[3895] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3895>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:45
msgid "1 Write the subscriber node with statistics enabled"
msgstr "1. 使用启用统计信息的订阅者节点进行编写。@{"calib_text": " `[3896] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3896>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:47
msgid "Navigate into the ``ros2_ws/src/cpp_pubsub/src`` folder, created in the :doc:`previous tutorial <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber>`, and download the example talker code by entering the following command:"
msgstr "进入``ros2_ws/src/cpp_pubsub/src``文件夹，该文件夹是在 :doc:`先前的教程 <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber>` 中创建的，然后输入以下命令下载示例发布者代码：@{"calib_text": " `[3897] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3897>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:66
msgid "Right click this link and select Save As ``publisher_member_function.cpp``:"
msgstr "右键点击此链接，选择“另存为”，命名为``publisher_member_function.cpp``：@{"calib_text": " `[3898] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3898>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:68
msgid "https://raw.githubusercontent.com/ros2/examples/humble/rclcpp/topics/minimal_subscriber/member_function_with_topic_statistics.cpp"
msgstr "https://raw.githubusercontent.com/ros2/examples/humble/rclcpp/topics/minimal_subscriber/member_function_with_topic_statistics.cpp@{"calib_text": " `[3899] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3899>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:70
msgid "Now there will be a new file named ``member_function_with_topic_statistics.cpp``. Open the file using your preferred text editor."
msgstr "现在会有一个名为``member_function_with_topic_statistics.cpp``的新文件。使用您喜欢的文本编辑器打开该文件。@{"calib_text": " `[3900] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3900>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:124 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:142 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:132 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:169 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:155 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:173 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:211 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:181
msgid "1.1 Examine the code"
msgstr "1.1 检查代码@{"calib_text": " `[3901] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3901>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:126
msgid "As in the :doc:`C++ <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber>` tutorial, we have a subscriber node which receives string messages from the ``topic`` topic from the ``topic_callback`` function. However, we've now added options to configure the subscription to enable topic statistics with the ``rclcpp::SubscriptionOptions()`` options struct."
msgstr "就像在 :doc:`C++ <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber>` 教程中一样，我们有一个订阅器节点，它从 ``topic_callback`` 函数中的 ``topic`` 主题接收字符串消息。然而，我们现在添加了选项来配置订阅以启用使用 ``rclcpp::SubscriptionOptions()`` 选项结构的主题统计。@{"calib_text": " `[3902] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3902>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:137
msgid "Optionally, fields such as the statistics collection/publish period and the topic used to publish statistics can be configured as well."
msgstr "还可以选择配置诸如统计收集/发布周期和用于发布统计的主题等字段。@{"calib_text": " `[3903] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3903>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:148
msgid "The configurable fields are described in the following table:"
msgstr "可配置的字段在以下表格中描述：@{"calib_text": " `[3904] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3904>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:151
msgid "Subscription Config Field"
msgstr "订阅配置字段@{"calib_text": " `[3905] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3905>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:151
msgid "Purpose"
msgstr "目的@{"calib_text": " `[3906] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3906>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:153
msgid "topic_stats_options.state"
msgstr "topic_stats_options.state@{"calib_text": " `[3907] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3907>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:153
msgid "Enable or disable topic statistics (default ``rclcpp::TopicStatisticsState::Disable``)"
msgstr "启用或禁用主题统计信息（默认值为 ``rclcpp::TopicStatisticsState::Disable``）@{"calib_text": " `[3908] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3908>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:154
msgid "topic_stats_options.publish_period"
msgstr "topic_stats_options.publish_period@{"calib_text": " `[3909] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3909>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:154
msgid "The period in which to collect statistics data and publish a statistics message (default ``1s``)"
msgstr "收集统计数据并发布统计消息的时间周期（默认为 ``1s``）@{"calib_text": " `[3910] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3910>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:155
msgid "topic_stats_options.publish_topic"
msgstr "topic_stats_options.publish_topic@{"calib_text": " `[3911] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3911>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:155
msgid "The topic to use when publishing statistics data (default ``/statistics``)"
msgstr "发布统计数据时使用的主题（默认为 ``/statistics``）@{"calib_text": " `[3912] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3912>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:159 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:160 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:220 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:247
msgid "1.2 CMakeLists.txt"
msgstr "1.2 CMakeLists.txt@{"calib_text": " `[3913] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3913>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:163
msgid "Add the executable and name it ``listener_with_topic_statistics`` so you can run your node using ``ros2 run``:"
msgstr "添加可执行文件，并将其命名为``listener_with_topic_statistics``，这样你就可以使用``ros2 run``来运行你的节点：@{"calib_text": " `[3914] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3914>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:176
msgid "Make sure to save the file, and then your pub/sub system, with topic statistics enabled, should be ready for use."
msgstr "确保保存文件，然后启用主题统计的发布/订阅系统就可以使用了。@{"calib_text": " `[3915] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3915>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:180 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:498
msgid "2 Build and run"
msgstr "2 构建和运行@{"calib_text": " `[3916] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3916>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:182
msgid "To build, see the :ref:`Build and run <cpppubsub-build-and-run>` section in the pub/sub tutorial."
msgstr "要进行构建，请参阅发布/订阅教程中的 :ref:`构建和运行 <cpppubsub-build-and-run>` 部分。@{"calib_text": " `[3917] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3917>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:184
msgid "Run the subscriber with statistics enabled node:"
msgstr "以启用统计信息的方式运行订阅者节点：@{"calib_text": " `[3918] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3918>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:190 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:501 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:481
msgid "Now run the talker node:"
msgstr "现在运行对话节点：@{"calib_text": " `[3919] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3919>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:196 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:507 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:487
msgid "The terminal should start publishing info messages every 0.5 seconds, like so:"
msgstr "终端应该会每0.5秒发布一条信息消息，如下所示：@{"calib_text": " `[3920] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3920>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:206 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:523 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:504
msgid "The listener will start printing messages to the console, starting at whatever message count the publisher is on at that time, like so:"
msgstr "监听器将从发布者当前的消息计数开始，将消息打印到控制台，就像这样：@{"calib_text": " `[3921] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3921>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:216
msgid "Now that the subscriber node is receiving messages, it will periodically publish statistics messages. We will observe these messages in the next section."
msgstr "现在，订阅者节点正在接收消息，它将定期发布统计消息。我们将在下一节观察这些消息。@{"calib_text": " `[3922] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3922>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:220
msgid "3 Observe published statistic data"
msgstr "3 观察发布的统计数据@{"calib_text": " `[3923] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3923>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:222
msgid "While the nodes are running, open a new terminal window. Execute the following command:"
msgstr "在节点运行时，打开一个新的终端窗口。执行以下命令：@{"calib_text": " `[3924] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3924>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:229
msgid "This will list all currently active topics. You should see the following:"
msgstr "这将列出所有当前活动的主题。您应该会看到以下内容：@{"calib_text": " `[3925] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3925>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:239
msgid "If you optionally changed the ``topic_stats_options.publish_topic`` field earlier in the tutorial, then you will see that name instead of ``/statistics``."
msgstr "如果您之前在教程中选择性地更改了``topic_stats_options.publish_topic``字段，则会看到该名称而不是``/statistics``。@{"calib_text": " `[3926] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3926>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:242
msgid "The subscriber node you created is publishing statistics, for the topic ``topic``, to the output topic ``/statistics``."
msgstr "您创建的订阅节点正在将主题``topic``的统计信息发布到输出主题``/statistics``。@{"calib_text": " `[3927] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3927>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:245
msgid "We can visualize this using :doc:`RQt <../../../Concepts/About-RQt>`"
msgstr "我们可以使用:doc:`RQt <../../../Concepts/About-RQt>`进行可视化。@{"calib_text": " `[3928] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3928>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:249
msgid "Now we can view the statistics data published to this topic with the following command:"
msgstr "现在我们可以使用以下命令查看发布到此主题的统计数据：@{"calib_text": " `[3929] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3929>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:255
msgid "The terminal should start publishing statistics messages every 10 seconds, because the ``topic_stats_options.publish_period`` subscription configuration was optionally changed earlier in the tutorial."
msgstr "终端应该每10秒开始发布统计消息，因为``topic_stats_options.publish_period``订阅配置在教程早期已经可选更改过。@{"calib_text": " `[3930] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3930>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:304
msgid "From the `message definition <https://github.com/ros2/rcl_interfaces/tree/humble/statistics_msgs>`__ the ``data_types`` are as follows"
msgstr "从`消息定义 <https://github.com/ros2/rcl_interfaces/tree/humble/statistics_msgs>`__ 中，``data_types``如下：@{"calib_text": " `[3931] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3931>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:308
msgid "data_type value"
msgstr "data_type 值@{"calib_text": " `[3932] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3932>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:308
msgid "statistics"
msgstr "统计数据@{"calib_text": " `[3933] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3933>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:310
msgid "1"
msgstr "1@{"calib_text": " `[3934] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3934>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:310
msgid "average"
msgstr "平均值@{"calib_text": " `[3935] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3935>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:311
msgid "2"
msgstr "2@{"calib_text": " `[3936] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3936>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:311
msgid "minimum"
msgstr "最小值@{"calib_text": " `[3937] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3937>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:312
msgid "3"
msgstr "3@{"calib_text": " `[3938] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3938>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:312
msgid "maximum"
msgstr "最大值@{"calib_text": " `[3939] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3939>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:313
msgid "4"
msgstr "4@{"calib_text": " `[3940] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3940>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:313
msgid "standard deviation"
msgstr "标准差@{"calib_text": " `[3941] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3941>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:314
msgid "5"
msgstr "5@{"calib_text": " `[3942] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3942>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:314
msgid "sample count"
msgstr "样本数量@{"calib_text": " `[3943] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3943>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:317
msgid "Here we see the two currently possible calculated statistics for the ``std_msgs::msg::String`` message published to ``/topic`` by the ``minimal_publisher``. Because the ``std_msgs::msg::String`` does not have a message header, the ``message_age`` calculation cannot be performed, so NaNs are returned. However, the ``message_period`` can be calculated and we see the statistics populated in the message above."
msgstr "在这里，我们可以看到通过``minimal_publisher``发布到``/topic``的``std_msgs::msg::String``消息的两个当前可能计算出的统计数据。因为``std_msgs::msg::String``没有消息头，所以无法进行``message_age``的计算，因此返回NaN。然而，``message_period``可以计算，并且我们可以在上面的消息中看到填充的统计数据。@{"calib_text": " `[3944] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3944>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:327
msgid "You created a subscriber node with topic statistics enabled, which published statistics data from the :doc:`C++ <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client>`'s publisher node. You were able to compile and run this node. While running, you were able to observe the statistics data."
msgstr "您创建了一个启用主题统计的订阅节点，它从 :doc:`C++ <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client>` 的发布节点发布统计数据。您能够编译并运行此节点。在运行过程中，您可以观察到统计数据。@{"calib_text": " `[3945] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3945>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:332 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:275 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:265 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:365 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:200 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:275 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:196 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:500 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:548 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:422 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:529 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:350 ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:305 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:195 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:353 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:390 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:357
msgid "Related content"
msgstr "相关内容@{"calib_text": " `[3946] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3946>`_ "}@"


#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:334
msgid "To observe how the ``message_age`` period is calculated please see the `ROS 2 Topic Statistics demo <https://github.com/ros2/demos/tree/humble/topic_statistics_demo>`__."
msgstr "要观察 ``message_age`` 周期是如何计算的，请参阅 `ROS 2 主题统计演示 <https://github.com/ros2/demos/tree/humble/topic_statistics_demo>`__。@{"calib_text": " `[3947] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3947>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools.rst:2
msgid "Beginner: CLI tools"
msgstr "初学者：CLI 工具@{"calib_text": " `[3948] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3948>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:8
msgid "Configuring environment"
msgstr "配置环境@{"calib_text": " `[3949] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3949>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:10
msgid "**Goal:** This tutorial will show you how to prepare your ROS 2 environment."
msgstr "**目标:** 本教程将向您展示如何准备您的ROS 2环境。@{"calib_text": " `[3950] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3950>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:17 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:10 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:13 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:12
msgid "**Tutorial level:** Beginner"
msgstr "**教程级别:** 初学者@{"calib_text": " `[3951] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3951>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:23
msgid "ROS 2 relies on the notion of combining workspaces using the shell environment. \"Workspace\" is a ROS term for the location on your system where you're developing with ROS 2. The core ROS 2 workspace is called the underlay. Subsequent local workspaces are called overlays. When developing with ROS 2, you will typically have several workspaces active concurrently."
msgstr "ROS 2依赖于使用Shell环境组合工作空间的概念。\"工作空间\"是ROS中用于开发ROS 2的位置。核心ROS 2工作空间称为underlay。随后的本地工作空间称为overlays。在使用ROS 2进行开发时，通常会同时激活多个工作空间。@{"calib_text": " `[3952] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3952>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:29
msgid "Combining workspaces makes developing against different versions of ROS 2, or against different sets of packages, easier. It also allows the installation of several ROS 2 distributions (or “distros”, e.g. Dashing and Eloquent) on the same computer and switching between them."
msgstr "合并工作空间使得针对不同版本的ROS 2或不同包集进行开发更加容易。它还允许在同一台计算机上安装多个ROS 2发行版（或“distros”，如Dashing和Eloquent），并在它们之间进行切换。@{"calib_text": " `[3953] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3953>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:32
msgid "This is accomplished by sourcing setup files every time you open a new shell, or by adding the source command to your shell startup script once. Without sourcing the setup files, you won't be able to access ROS 2 commands, or find or use ROS 2 packages. In other words, you won't be able to use ROS 2."
msgstr "这可以通过在每次打开新的Shell时源化设置文件，或者将source命令添加到Shell启动脚本中来实现。如果不源化设置文件，您将无法访问ROS 2命令，也无法找到或使用ROS 2包。换句话说，您将无法使用ROS 2。@{"calib_text": " `[3954] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3954>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:39
msgid "Before starting these tutorials, install ROS 2 by following the instructions on the ROS 2 :doc:`../../Installation` page."
msgstr "在开始这些教程之前，请按照ROS 2 :doc:`../../Installation`页面上的说明安装ROS 2。@{"calib_text": " `[3955] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3955>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:41 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:35
msgid "The commands used in this tutorial assume you followed the binary packages installation guide for your operating system (Debian packages for Linux). You can still follow along if you built from source, but the path to your setup files will likely be different. You also won't be able to use the ``sudo apt install ros-<distro>-<package>`` command (used frequently in the beginner level tutorials) if you install from source."
msgstr "本教程中使用的命令假设您按照操作系统的二进制包安装指南进行操作（Linux的Debian包）。如果您从源代码构建，仍然可以按照本教程进行操作，但是您的设置文件路径可能会不同。如果您从源代码安装，您还将无法使用“sudo apt install ros-<distro>-<package>”命令（在初学者级别教程中经常使用）。@{"calib_text": " `[3956] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3956>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:45
msgid "If you are using Linux or macOS, but are not already familiar with the shell, `this tutorial <http://www.ee.surrey.ac.uk/Teaching/Unix/>`__ will help."
msgstr "如果您正在使用Linux或macOS，但尚未熟悉Shell，则`此教程 <http://www.ee.surrey.ac.uk/Teaching/Unix/>`__将有所帮助。@{"calib_text": " `[3957] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3957>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:51
msgid "1 Source the setup files"
msgstr "1 导入设置文件@{"calib_text": " `[3958] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3958>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:53
msgid "You will need to run this command on every new shell you open to have access to the ROS 2 commands, like so:"
msgstr "您需要在每次打开新的Shell时运行此命令以便访问ROS 2命令，如下所示：@{"calib_text": " `[3959] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3959>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:78
msgid "The exact command depends on where you installed ROS 2. If you're having problems, ensure the file path leads to your installation."
msgstr "确切的命令取决于您安装ROS 2的位置。如果遇到问题，请确保文件路径指向您的安装位置。@{"calib_text": " `[3960] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3960>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:82
msgid "2 Add sourcing to your shell startup script"
msgstr "2 将源命令添加到您的shell启动脚本@{"calib_text": " `[3961] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3961>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:84
msgid "If you don't want to have to source the setup file every time you open a new shell (skipping task 1), then you can add the command to your shell startup script:"
msgstr "如果您不想每次打开新的shell时都要进行源命令设置（跳过任务1），您可以将该命令添加到您的shell启动脚本中：@{"calib_text": " `[3962] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3962>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:94 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:102
msgid "To undo this, locate your system's shell startup script and remove the appended source command."
msgstr "要撤销此操作，请找到您系统的shell启动脚本，并删除附加的源命令。@{"calib_text": " `[3963] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3963>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:106
msgid "Only for PowerShell users, create a folder in 'My Documents' called 'WindowsPowerShell'. Within 'WindowsPowerShell', create file 'Microsoft.PowerShell_profile.ps1'. Inside the file, paste:"
msgstr "仅适用于PowerShell用户，在'My Documents'中创建一个名为'WindowsPowerShell'的文件夹。在'WindowsPowerShell'文件夹中，创建名为'Microsoft.PowerShell_profile.ps1'的文件。在文件中粘贴以下内容：@{"calib_text": " `[3964] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3964>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:114
msgid "PowerShell will request permission to run this script everytime a new shell is opened. To avoid that issue you can run:"
msgstr "每次打开新的shell时，PowerShell都会请求运行此脚本的权限。为了避免这个问题，您可以运行：@{"calib_text": " `[3965] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3965>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:121
msgid "To undo this, remove the new 'Microsoft.PowerShell_profile.ps1' file."
msgstr "要撤销此操作，请删除新的'Microsoft.PowerShell_profile.ps1'文件。@{"calib_text": " `[3966] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3966>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:124
msgid "3 Check environment variables"
msgstr "3 检查环境变量@{"calib_text": " `[3967] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3967>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:126
msgid "Sourcing ROS 2 setup files will set several environment variables necessary for operating ROS 2. If you ever have problems finding or using your ROS 2 packages, make sure that your environment is properly set up using the following command:"
msgstr "使用ROS 2设置文件会设置几个操作ROS 2所必需的环境变量。如果您在查找或使用ROS 2软件包时遇到问题，请确保您的环境已经正确设置，可以使用以下命令：@{"calib_text": " `[3968] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3968>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:149
msgid "Check that variables like ``ROS_DISTRO`` and ``ROS_VERSION`` are set."
msgstr "检查变量，如 ``ROS_DISTRO`` 和 ``ROS_VERSION`` 是否设置正确。@{"calib_text": " `[3969] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3969>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:157
msgid "If the environment variables are not set correctly, return to the ROS 2 package installation section of the installation guide you followed. If you need more specific help (because environment setup files can come from different places), you can `get answers <https://answers.ros.org>`__ from the community."
msgstr "如果环境变量设置不正确，请返回到您所遵循的安装指南的 ROS 2 包安装部分。如果您需要更具体的帮助（因为环境设置文件可能来自不同的位置），您可以从社区 `获取答案 <https://answers.ros.org>`__。@{"calib_text": " `[3970] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3970>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:161
msgid "3.1 The ``ROS_DOMAIN_ID`` variable"
msgstr "3.1 ``ROS_DOMAIN_ID`` 变量@{"calib_text": " `[3971] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3971>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:163
msgid "See the `domain ID <../../Concepts/About-Domain-ID>` article for details on ROS domain IDs."
msgstr "有关 ROS 域 ID 的详细信息，请参阅 `域 ID <../../Concepts/About-Domain-ID>` 文章。@{"calib_text": " `[3972] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3972>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:165
msgid "Once you have determined a unique integer for your group of ROS 2 nodes, you can set the environment variable with the following command:"
msgstr "确定了ROS 2节点组的唯一整数后，可以使用以下命令设置环境变量：@{"calib_text": " `[3973] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3973>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:175 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:187 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:222 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:234
msgid "To maintain this setting between shell sessions, you can add the command to your shell startup script:"
msgstr "为了在不同的shell会话之间保持这个设置，可以将该命令添加到shell启动脚本中：@{"calib_text": " `[3974] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3974>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:199 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:246
msgid "If you want to make this permanent between shell sessions, also run:"
msgstr "如果想要在不同的shell会话之间永久生效，还需要运行以下命令：@{"calib_text": " `[3975] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3975>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:206
msgid "3.2 The ``ROS_LOCALHOST_ONLY`` variable"
msgstr "3.2 ``ROS_LOCALHOST_ONLY`` 变量@{"calib_text": " `[3976] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3976>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:208
msgid "By default, ROS 2 communication is not limited to localhost. ``ROS_LOCALHOST_ONLY`` environment variable allows you to limit ROS 2 communication to localhost only. This means your ROS 2 system, and its topics, services, and actions will not be visible to other computers on the local network. Using ``ROS_LOCALHOST_ONLY`` is helpful in certain settings, such as classrooms, where multiple robots may publish to the same topic causing strange behaviors. You can set the environment variable with the following command:"
msgstr "默认情况下，ROS 2通信不限于本地主机。``ROS_LOCALHOST_ONLY``环境变量允许您将ROS 2通信限制为仅限本地主机。这意味着您的ROS 2系统及其主题、服务和操作将对本地网络上的其他计算机不可见。在某些情况下，使用``ROS_LOCALHOST_ONLY``非常有帮助，比如在教室中，多个机器人可能会向同一主题发布，从而导致奇怪的行为。您可以使用以下命令设置环境变量：@{"calib_text": " `[3977] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3977>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:256
msgid "The ROS 2 development environment needs to be correctly configured before use. This can be done in two ways: either sourcing the setup files in every new shell you open, or adding the source command to your startup script."
msgstr "在使用之前，需要正确配置ROS 2开发环境。可以通过两种方式实现：要么在每次打开新的shell时使用源文件，要么将源命令添加到启动脚本中。@{"calib_text": " `[3978] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3978>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:259
msgid "If you ever face any problems locating or using packages with ROS 2, the first thing you should do is check your environment variables and ensure they are set to the version and distro you intended."
msgstr "如果您在使用ROS 2时遇到任何定位或使用软件包的问题，首先应该检查您的环境变量，并确保其设置为您预期的版本和发行版。@{"calib_text": " `[3979] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3979>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:264
msgid "Now that you have a working ROS 2 installation and you know how to source its setup files, you can start learning the ins and outs of ROS 2 with the :doc:`turtlesim tool <./Introducing-Turtlesim/Introducing-Turtlesim>`."
msgstr "现在您已经安装了可用的ROS 2，并且知道如何获取其设置文件，可以开始使用 :doc:`turtlesim 工具 <./Introducing-Turtlesim/Introducing-Turtlesim>` 来深入了解ROS 2的内部工作原理。@{"calib_text": " `[3980] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3980>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:8
msgid "Using ``turtlesim``, ``ros2``, and ``rqt``"
msgstr "使用 ``turtlesim`` 、 ``ros2`` 和 ``rqt``@{"calib_text": " `[3981] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3981>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:10
msgid "**Goal:** Install and use the turtlesim package and rqt tools to prepare for upcoming tutorials."
msgstr "**目标：**安装并使用turtlesim包和rqt工具，为接下来的教程做准备。@{"calib_text": " `[3982] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3982>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:23
msgid "Turtlesim is a lightweight simulator for learning ROS 2. It illustrates what ROS 2 does at the most basic level to give you an idea of what you will do with a real robot or a robot simulation later on."
msgstr "Turtlesim是一个轻量级的用于学习ROS 2的模拟器。它以最基本的方式展示了ROS 2的功能，让您对以后在真实机器人或机器人模拟中要做什么有个基本的了解。@{"calib_text": " `[3983] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3983>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:26
msgid "The ros2 tool is how the user manages, introspects, and interacts with a ROS system. It supports multiple commands that target different aspects of the system and its operation. One might use it to start a node, set a parameter, listen to a topic, and many more. The ros2 tool is part of the core ROS 2 installation."
msgstr "ros2工具是用户管理、检视和与ROS系统交互的方式。它支持多个命令，针对系统及其操作的不同方面。用户可以使用它来启动一个节点、设置参数、监听话题等等。ros2工具是ROS 2核心安装的一部分。@{"calib_text": " `[3984] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3984>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:31
msgid "rqt is a graphical user interface (GUI) tool for ROS 2. Everything done in rqt can be done on the command line, but rqt provides a more user-friendly way to manipulate ROS 2 elements."
msgstr "rqt 是一个用于ROS 2的图形用户界面（GUI）工具。rqt 中的所有操作都可以通过命令行完成，但是rqt 提供了一种更加用户友好的方式来操作ROS 2元素。@{"calib_text": " `[3985] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3985>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:34
msgid "This tutorial touches upon core ROS 2 concepts, like nodes, topics, and services. All of these concepts will be elaborated on in later tutorials; for now, you will simply set up the tools and get a feel for them."
msgstr "本教程介绍了ROS 2的核心概念，如节点（nodes）、主题（topics）和服务（services）。所有这些概念将在后续教程中详细阐述；目前，您只需设置工具并对其有所了解。@{"calib_text": " `[3986] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3986>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:40
msgid "The previous tutorial, :doc:`../Configuring-ROS2-Environment`, will show you how to set up your environment."
msgstr "上一个教程，:doc:`../Configuring-ROS2-Environment`，将向您展示如何设置您的环境。@{"calib_text": " `[3987] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3987>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:46
msgid "1 Install turtlesim"
msgstr "1 安装 turtlesim@{"calib_text": " `[3988] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3988>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:48
msgid "As always, start by sourcing your setup files in a new terminal, as described in the :doc:`previous tutorial <../Configuring-ROS2-Environment>`."
msgstr "一如既往，在新的终端中通过引入设置文件开始，就像在 :doc:`先前的教程 <../Configuring-ROS2-Environment>` 中描述的那样。@{"calib_text": " `[3989] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3989>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:50
msgid "Install the turtlesim package for your ROS 2 distro:"
msgstr "为您的ROS 2发行版安装turtlesim包：@{"calib_text": " `[3990] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3990>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:64 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:68
msgid "As long as the archive you installed ROS 2 from contains the ``ros_tutorials`` repository, you should already have turtlesim installed."
msgstr "只要您安装ROS 2的存档包含``ros_tutorials``存储库，您应该已经安装了turtlesim。@{"calib_text": " `[3991] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3991>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:70
msgid "Check that the package is installed:"
msgstr "检查是否安装了该软件包：@{"calib_text": " `[3992] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3992>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:76
msgid "The above command should return a list of turtlesim's executables:"
msgstr "上述命令应返回turtlesim的可执行文件列表:@{"calib_text": " `[3993] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3993>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:86
msgid "2 Start turtlesim"
msgstr "2 开始turtlesim@{"calib_text": " `[3994] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3994>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:88
msgid "To start turtlesim, enter the following command in your terminal:"
msgstr "要启动turtlesim，请在终端中输入以下命令:@{"calib_text": " `[3995] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3995>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:94
msgid "The simulator window should appear, with a random turtle in the center."
msgstr "模拟器窗口应出现，并在中心显示一个随机的乌龟。@{"calib_text": " `[3996] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3996>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:98
msgid "In the terminal, under the command, you will see messages from the node:"
msgstr "在终端下面的命令中，您将看到来自节点的消息：@{"calib_text": " `[3997] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3997>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:105
msgid "There you can see the default turtle's name and the coordinates where it spawns."
msgstr "在那里您可以看到默认海龟的名称和它生成的坐标。@{"calib_text": " `[3998] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3998>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:108
msgid "3 Use turtlesim"
msgstr "3 使用turtlesim@{"calib_text": " `[3999] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=3999>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:110
msgid "Open a new terminal and source ROS 2 again."
msgstr "打开一个新的终端并再次启动ROS 2。@{"calib_text": " `[4000] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4000>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:112
msgid "Now you will run a new node to control the turtle in the first node:"
msgstr "现在您将运行一个新节点来控制第一个节点中的海龟：@{"calib_text": " `[4001] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4001>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:118
msgid "At this point you should have three windows open: a terminal running ``turtlesim_node``, a terminal running ``turtle_teleop_key`` and the turtlesim window. Arrange these windows so that you can see the turtlesim window, but also have the terminal running ``turtle_teleop_key`` active so that you can control the turtle in turtlesim."
msgstr "此时，您应该已经打开了三个窗口：一个终端运行着``turtlesim_node``，一个终端运行着``turtle_teleop_key``，以及一个turtlesim窗口。调整这些窗口的位置，使您能够看到turtlesim窗口，但同时也要使运行``turtle_teleop_key``的终端处于活动状态，以便您可以控制turtlesim中的海龟。@{"calib_text": " `[4002] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4002>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:121
msgid "Use the arrow keys on your keyboard to control the turtle. It will move around the screen, using its attached \"pen\" to draw the path it followed so far."
msgstr "使用键盘上的箭头键来控制海龟。它将在屏幕上移动，并使用其附加的“笔”来绘制它迄今为止所经过的路径。@{"calib_text": " `[4003] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4003>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:126
msgid "Pressing an arrow key will only cause the turtle to move a short distance and then stop. This is because, realistically, you wouldn't want a robot to continue carrying on an instruction if, for example, the operator lost the connection to the robot."
msgstr "按下箭头键只会导致海龟移动一小段距离，然后停止。这是因为，从实际情况来看，如果操作员失去与机器人的连接，您不希望机器人继续执行指令。@{"calib_text": " `[4004] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4004>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:129
msgid "You can see the nodes, and their associated topics, services, and actions, using the ``list`` subcommands of the respective commands:"
msgstr "您可以使用各自命令的``list``子命令查看节点及其关联的主题、服务和操作：@{"calib_text": " `[4005] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4005>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:138
msgid "You will learn more about these concepts in the coming tutorials. Since the goal of this tutorial is only to get a general overview of turtlesim, you will use rqt to call some of the turtlesim services and interact with ``turtlesim_node``."
msgstr "在接下来的教程中，您将了解更多关于这些概念的内容。由于本教程的目标仅是对turtlesim进行一般概述，您将使用rqt调用一些turtlesim的服务并与``turtlesim_node``进行交互。@{"calib_text": " `[4006] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4006>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:142
msgid "4 Install rqt"
msgstr "4 安装rqt@{"calib_text": " `[4007] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4007>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:144
msgid "Open a new terminal to install ``rqt`` and its plugins:"
msgstr "打开一个新的终端以安装``rqt``及其插件：@{"calib_text": " `[4008] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4008>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:148
msgid "Linux (apt 2.0/Ubuntu 20.04 and newer)"
msgstr "Linux（apt 2.0 / Ubuntu 20.04 及更高版本）@{"calib_text": " `[4009] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4009>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:156
msgid "Linux (apt 1.x/Ubuntu 18.04 and older)"
msgstr "Linux（apt 1.x / Ubuntu 18.04 及更早版本）@{"calib_text": " `[4010] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4010>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:166
msgid "The standard archive for installing ROS 2 on macOS contains ``rqt`` and its plugins, so you should already have ``rqt`` installed."
msgstr "在 macOS 上安装 ROS 2 的标准存档包含 ``rqt`` 及其插件，所以您应该已经安装了 ``rqt``。@{"calib_text": " `[4011] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4011>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:170
msgid "The standard archive for installing ROS 2 on Windows contains ``rqt`` and its plugins, so you should already have ``rqt`` installed."
msgstr "在 Windows 上安装 ROS 2 的标准存档包含 ``rqt`` 及其插件，所以您应该已经安装了 ``rqt``。@{"calib_text": " `[4012] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4012>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:172
msgid "To run rqt:"
msgstr "要运行rqt：@{"calib_text": " `[4013] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4013>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:179
msgid "5 Use rqt"
msgstr "5 使用rqt@{"calib_text": " `[4014] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4014>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:181
msgid "When running rqt for the first time, the window will be blank. No worries; just select **Plugins** > **Services** > **Service Caller** from the menu bar at the top."
msgstr "第一次运行rqt时，窗口将为空白。不要担心；只需在顶部的菜单栏中选择**插件** > **服务** > **服务调用器**。@{"calib_text": " `[4015] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4015>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:186
msgid "It may take some time for rqt to locate all the plugins. If you click on **Plugins** but don't see **Services** or any other options, you should close rqt and enter the command ``rqt --force-discover`` in your terminal."
msgstr "rqt可能需要一些时间来定位所有插件。如果你点击**插件**但看不到**服务**或任何其他选项，请关闭rqt并在终端中输入命令``rqt --force-discover``。@{"calib_text": " `[4016] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4016>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:191
msgid "Use the refresh button to the left of the **Service** dropdown list to ensure all the services of your turtlesim node are available."
msgstr "请使用位于**服务**下拉列表左侧的刷新按钮，以确保所有的turtlesim节点服务都可用。@{"calib_text": " `[4017] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4017>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:193
msgid "Click on the **Service** dropdown list to see turtlesim's services, and select the ``/spawn`` service."
msgstr "点击**服务**下拉列表，查看turtlesim的服务，并选择``/spawn``服务。@{"calib_text": " `[4018] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4018>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:196
msgid "5.1 Try the spawn service"
msgstr "5.1 尝试spawn服务@{"calib_text": " `[4019] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4019>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:198
msgid "Let's use rqt to call the ``/spawn`` service. You can guess from its name that ``/spawn`` will create another turtle in the turtlesim window."
msgstr "让我们使用rqt调用``/spawn``服务。从名称可以猜到，``/spawn``将在turtlesim窗口中创建另一只海龟。@{"calib_text": " `[4020] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4020>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:201
msgid "Give the new turtle a unique name, like ``turtle2``, by double-clicking between the empty single quotes in the **Expression** column. You can see that this expression corresponds to the value of **name** and is of type **string**."
msgstr "通过在**表达式**列的空单引号之间双击，为新的海龟设置一个唯一的名称，比如``turtle2``。您可以看到这个表达式对应于**name**的值，并且是**string**类型的。@{"calib_text": " `[4021] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4021>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:204
msgid "Next enter some valid coordinates at which to spawn the new turtle, like ``x = 1.0`` and ``y = 1.0``."
msgstr "接下来，输入一些有效的坐标来生成新的海龟，比如``x = 1.0``和``y = 1.0``。@{"calib_text": " `[4022] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4022>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:210
msgid "If you try to spawn a new turtle with the same name as an existing turtle, like the default ``turtle1``, you will get an error message in the terminal running ``turtlesim_node``:"
msgstr "如果您尝试生成一个与现有海龟名称相同的新海龟，比如默认的``turtle1``，您将在运行``turtlesim_node``的终端中收到错误信息：@{"calib_text": " `[4023] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4023>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:216
msgid "To spawn ``turtle2``, you then need to call the service by clicking the **Call** button on the upper right side of the rqt window."
msgstr "要生成``turtle2``，您需要点击rqt窗口右上方的**Call**按钮调用该服务。@{"calib_text": " `[4024] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4024>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:218
msgid "If the service call was successful, you should see a new turtle (again with a random design) spawn at the coordinates you input for **x** and **y**."
msgstr "如果服务调用成功，您应该会看到一个新的海龟（带有随机设计）在您输入的 **x** 和 **y** 坐标处生成。@{"calib_text": " `[4025] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4025>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:220
msgid "If you refresh the service list in rqt, you will also see that now there are services related to the new turtle, ``/turtle2/...``, in addition to ``/turtle1/...``."
msgstr "如果您在rqt中刷新服务列表，您还会看到与新海龟相关的服务，例如 ``/turtle2/...``，除了 ``/turtle1/...``。@{"calib_text": " `[4026] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4026>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:223
msgid "5.2 Try the set_pen service"
msgstr "5.2 尝试 set_pen 服务@{"calib_text": " `[4027] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4027>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:225
msgid "Now let's give ``turtle1`` a unique pen using the ``/set_pen`` service:"
msgstr "现在让我们使用 ``/set_pen`` 服务为 ``turtle1`` 设置一个独特的画笔：@{"calib_text": " `[4028] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4028>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:229
msgid "The values for **r**, **g** and **b**, which are between 0 and 255, set the color of the pen ``turtle1`` draws with, and **width** sets the thickness of the line."
msgstr "在**r**、**g**和**b**的取值范围为0至255之间时，设置了画笔``turtle1``的颜色，而**width**设置了线条的粗细。@{"calib_text": " `[4029] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4029>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:231
msgid "To have ``turtle1`` draw with a distinct red line, change the value of **r** to 255, and the value of **width** to 5. Don't forget to call the service after updating the values."
msgstr "要让``turtle1``画出明显的红色线条，将**r**的值改为255，将**width**的值改为5。更新数值后别忘了调用该服务。@{"calib_text": " `[4030] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4030>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:234
msgid "If you return to the terminal where ``turtle_teleop_key`` is running and press the arrow keys, you will see ``turtle1``'s pen has changed."
msgstr "如果返回到运行``turtle_teleop_key``的终端并按下箭头键，你会看到``turtle1``的画笔已经改变了。@{"calib_text": " `[4031] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4031>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:238
msgid "You've probably also noticed that there's no way to move ``turtle2``. That's because there is no teleop node for ``turtle2``."
msgstr "你可能还注意到没有办法移动``turtle2``。这是因为``turtle2``没有对应的teleop节点。@{"calib_text": " `[4032] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4032>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:242 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:385
msgid "6 Remapping"
msgstr "6 重映射@{"calib_text": " `[4033] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4033>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:244
msgid "You need a second teleop node in order to control ``turtle2``. However, if you try to run the same command as before, you will notice that this one also controls ``turtle1``. The way to change this behavior is by remapping the ``cmd_vel`` topic."
msgstr "您需要一个第二个teleop节点才能控制“turtle2”。然而，如果您尝试运行与之前相同的命令，您会注意到这个命令也控制“turtle1”。改变这种行为的方法是通过重映射“cmd_vel”话题。@{"calib_text": " `[4034] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4034>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:248
msgid "In a new terminal, source ROS 2, and run:"
msgstr "在一个新的终端中，设置ROS 2环境并运行：@{"calib_text": " `[4035] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4035>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:255
msgid "Now, you can move ``turtle2`` when this terminal is active, and ``turtle1`` when the other terminal running ``turtle_teleop_key`` is active."
msgstr "现在，当这个终端处于活动状态时，您可以移动“turtle2”，当另一个运行“turtle_teleop_key”的终端处于活动状态时，您可以移动“turtle1”。@{"calib_text": " `[4036] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4036>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:260
msgid "7 Close turtlesim"
msgstr "7 关闭 turtlesim@{"calib_text": " `[4037] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4037>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:262
msgid "To stop the simulation, you can enter ``Ctrl + C`` in the ``turtlesim_node`` terminal, and ``q`` in the ``turtle_teleop_key`` terminals."
msgstr "要停止仿真，您可以在``turtlesim_node``终端中输入``Ctrl + C``，在``turtle_teleop_key``终端中输入``q``。@{"calib_text": " `[4038] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4038>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:267
msgid "Using turtlesim and rqt is a great way to learn the core concepts of ROS 2."
msgstr "使用 turtlesim 和 rqt 是学习 ROS 2 核心概念的绝佳方式。@{"calib_text": " `[4039] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4039>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:272
msgid "Now that you have turtlesim and rqt up and running, and an idea of how they work, let's dive into the first core ROS 2 concept with the next tutorial, :doc:`../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes`."
msgstr "现在您已经启动并运行了 turtlesim 和 rqt，并且对它们的工作方式有了一个了解，让我们进入下一个教程中的第一个核心 ROS 2 概念：:doc:`../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes`。@{"calib_text": " `[4040] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4040>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:277
msgid "The turtlesim package can be found in the `ros_tutorials <https://github.com/ros/ros_tutorials/tree/humble/turtlesim>`_ repo."
msgstr "turtlesim包可以在`ros_tutorials <https://github.com/ros/ros_tutorials/tree/humble/turtlesim>`_存储库中找到。@{"calib_text": " `[4041] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4041>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:279
msgid "`This community contributed video <https://youtu.be/xwT7XWflMdc>`_ demonstrates many of the items covered in this tutorial."
msgstr "`这个社区贡献的视频 <https://youtu.be/xwT7XWflMdc>`_展示了本教程涵盖的许多内容。@{"calib_text": " `[4042] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4042>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:8
msgid "Launching nodes"
msgstr "启动节点@{"calib_text": " `[4043] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4043>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:10
msgid "**Goal:** Use a command line tool to launch multiple nodes at once."
msgstr "**目标:** 使用命令行工具一次启动多个节点。@{"calib_text": " `[4044] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4044>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:12
msgid "**Tutorial Level:** Beginner"
msgstr "**教程级别：**初学者@{"calib_text": " `[4045] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4045>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:23
msgid "In most of the introductory tutorials, you have been opening new terminals for every new node you run. As you create more complex systems with more and more nodes running simultaneously, opening terminals and reentering configuration details becomes tedious."
msgstr "在大多数入门教程中，您每次运行新节点都需要打开新的终端。随着您创建更复杂的系统，并同时运行越来越多的节点，打开终端并重新输入配置详细信息变得繁琐。@{"calib_text": " `[4046] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4046>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:26
msgid "Launch files allow you to start up and configure a number of executables containing ROS 2 nodes simultaneously."
msgstr "启动文件允许您同时启动和配置包含 ROS 2 节点的多个可执行文件。@{"calib_text": " `[4047] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4047>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:28
msgid "Running a single launch file with the ``ros2 launch`` command will start up your entire system - all nodes and their configurations - at once."
msgstr "使用``ros2 launch``命令运行单个启动文件将一次性启动整个系统 - 所有节点及其配置。@{"calib_text": " `[4048] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4048>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:33
msgid "Before starting these tutorials, install ROS 2 by following the instructions on the ROS 2 :doc:`../../../Installation/` page."
msgstr "在开始这些教程之前，请按照 ROS 2 :doc:`../../../Installation/` 页面上的说明安装 ROS 2。@{"calib_text": " `[4049] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4049>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:39
msgid "If you are using Linux and are not already familiar with the shell, `this tutorial <http://www.ee.surrey.ac.uk/Teaching/Unix/>`__ will help."
msgstr "如果你正在使用 Linux，并且对 shell 不熟悉，`这个教程 <http://www.ee.surrey.ac.uk/Teaching/Unix/>`__ 会有所帮助。@{"calib_text": " `[4050] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4050>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:45
msgid "Running a Launch File"
msgstr "运行 Launch 文件@{"calib_text": " `[4051] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4051>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:53
msgid "This command will run the following launch file:"
msgstr "以下命令将运行下面的 Launch 文件：@{"calib_text": " `[4052] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4052>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:72
msgid "The launch file above is written in Python, but you can also use XML and YAML to create launch files. You can see a comparison of these different ROS 2 launch formats in :doc:`../../../How-To-Guides/Launch-file-different-formats`."
msgstr "上面的启动文件是用Python编写的，但你也可以使用XML和YAML来创建启动文件。你可以在 :doc:`../../../How-To-Guides/Launch-file-different-formats` 中查看这些不同的ROS 2启动文件格式的比较。@{"calib_text": " `[4053] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4053>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:75
msgid "This will run two turtlesim nodes:"
msgstr "这将运行两个turtlesim节点：@{"calib_text": " `[4054] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4054>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:79
msgid "For now, don't worry about the contents of this launch file. You can find more information on ROS 2 launch in the :doc:`ROS 2 launch tutorials <../../Intermediate/Launch/Launch-Main>`."
msgstr "暂时不用担心启动文件的内容。你可以在 :doc:`ROS 2启动教程 <../../Intermediate/Launch/Launch-Main>` 中找到更多关于ROS 2启动的信息。@{"calib_text": " `[4055] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4055>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:83
msgid "(Optional) Control the Turtlesim Nodes"
msgstr "(可选) 控制Turtlesim节点@{"calib_text": " `[4056] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4056>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:85
msgid "Now that these nodes are running, you can control them like any other ROS 2 nodes. For example, you can make the turtles drive in opposite directions by opening up two additional terminals and running the following commands:"
msgstr "现在这些节点正在运行，您可以像其他ROS 2节点一样对它们进行控制。例如，您可以通过打开两个额外的终端并运行以下命令使乌龟朝相反的方向行驶：@{"calib_text": " `[4057] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4057>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:88
msgid "In the second terminal:"
msgstr "在第二个终端中：@{"calib_text": " `[4058] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4058>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:94
msgid "In the third terminal:"
msgstr "在第三个终端中：@{"calib_text": " `[4059] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4059>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:100
msgid "After running these commands, you should see something like the following:"
msgstr "运行这些命令后，您应该会看到类似以下内容的输出：@{"calib_text": " `[4060] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4060>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:107
msgid "The significance of what you've done so far is that you've run two turtlesim nodes with one command. Once you learn to write your own launch files, you'll be able to run multiple nodes - and set up their configuration - in a similar way, with the ``ros2 launch`` command."
msgstr "迄今为止，您所做的事情的重要性在于您使用一个命令运行了两个turtlesim节点。一旦您学会编写自己的launch文件，您就能够以类似的方式使用``ros2 launch``命令运行多个节点，并设置它们的配置。@{"calib_text": " `[4061] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4061>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:110
msgid "For more tutorials on ROS 2 launch files, see the :doc:`main launch file tutorial page<../../Intermediate/Launch/Launch-Main>`."
msgstr "有关ROS 2 launch文件的更多教程，请参阅：:doc:`主要的launch文件教程页面<../../Intermediate/Launch/Launch-Main>`。@{"calib_text": " `[4062] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4062>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:115
msgid "In the next tutorial, :doc:`../Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data`, you'll learn about another helpful tool, ``ros2 bag``."
msgstr "在下一个教程中，:doc:`../Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data`，您将了解另一个有用的工具，``ros2 bag``。@{"calib_text": " `[4063] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4063>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:8
msgid "Recording and playing back data"
msgstr "录制和回放数据@{"calib_text": " `[4064] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4064>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:10
msgid "**Goal:** Record data published on a topic so you can replay and examine it any time."
msgstr "**目标：** 记录发布在某个主题上的数据，以便随时回放和检查。@{"calib_text": " `[4065] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4065>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:23
msgid "``ros2 bag`` is a command line tool for recording data published on topics in your system. It accumulates the data passed on any number of topics and saves it in a database. You can then replay the data to reproduce the results of your tests and experiments. Recording topics is also a great way to share your work and allow others to recreate it."
msgstr "``ros2 bag`` 是一个命令行工具，用于记录系统中发布在主题上的数据。它会累积通过任意数量的主题传递的数据，并将其保存在数据库中。然后，您可以回放这些数据，以重现您的测试和实验结果。记录主题也是分享您的工作并允许他人重新创建的好方法。@{"calib_text": " `[4066] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4066>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:32
msgid "You should have ``ros2 bag`` installed as a part of your regular ROS 2 setup."
msgstr "您应该将``ros2 bag``作为常规ROS 2安装的一部分进行安装。@{"calib_text": " `[4067] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4067>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:34
msgid "If you installed ROS from Debian packages on Linux and your system doesn't recognize the command, install it like so:"
msgstr "如果您在Linux上从Debian软件包安装了ROS，而您的系统无法识别该命令，请按照以下方式进行安装：@{"calib_text": " `[4068] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4068>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:41
msgid "This tutorial talks about concepts covered in previous tutorials, like :doc:`nodes <../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` and :doc:`topics <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`. It also uses the :doc:`turtlesim package <../Introducing-Turtlesim/Introducing-Turtlesim>`."
msgstr "本教程讲解了之前教程中涉及的概念，例如:doc:`节点 <../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>`和:doc:`话题 <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`。它还使用了:doc:`turtlesim package <../Introducing-Turtlesim/Introducing-Turtlesim>`。@{"calib_text": " `[4069] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4069>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:44 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:42 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:47 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:34 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:38 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:40 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:35
msgid "As always, don't forget to source ROS 2 in :doc:`every new terminal you open <../Configuring-ROS2-Environment>`."
msgstr "像往常一样，在 :doc:`每个新开的终端中 <../Configuring-ROS2-Environment>` 都不要忘记加载 ROS 2 。@{"calib_text": " `[4070] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4070>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:51 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:48 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:40 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:44 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:46 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:42 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:45
msgid "1 Setup"
msgstr "1 设置@{"calib_text": " `[4071] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4071>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:52
msgid "You'll be recording your keyboard input in the ``turtlesim`` system to save and replay later on, so begin by starting up the ``/turtlesim`` and ``/teleop_turtle`` nodes."
msgstr "您将在``turtlesim``系统中记录您的键盘输入，以便稍后保存和回放，请先启动``/turtlesim``和``/teleop_turtle``节点。@{"calib_text": " `[4072] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4072>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:60 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:58 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:50 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:53 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:56
msgid "Open another terminal and run:"
msgstr "打开另一个终端并运行：@{"calib_text": " `[4073] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4073>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:66
msgid "Let's also make a new directory to store our saved recordings, just as good practice:"
msgstr "我们还可以创建一个新目录来存储我们的保存录音，这样做是一个好的实践：@{"calib_text": " `[4074] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4074>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:74
msgid "2 Choose a topic"
msgstr "2 选择一个主题@{"calib_text": " `[4075] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4075>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:76
msgid "``ros2 bag`` can only record data from published messages in topics. To see the list of your system's topics, open a new terminal and run the command:"
msgstr "``ros2 bag`` 只能记录发布在主题中的消息数据。要查看系统的主题列表，请打开一个新终端并运行以下命令：@{"calib_text": " `[4076] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4076>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:83 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:166 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:200 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:220 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:264 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:131 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:160 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:182 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:201 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:176
msgid "Which will return:"
msgstr "将返回：@{"calib_text": " `[4077] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4077>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:93
msgid "In the topics tutorial, you learned that the ``/turtle_teleop`` node publishes commands on the ``/turtle1/cmd_vel`` topic to make the turtle move in turtlesim."
msgstr "在主题教程中，你学到了 ``/turtle_teleop`` 节点在 ``/turtle1/cmd_vel`` 主题上发布命令，使乌龟在 turtlesim 中移动。@{"calib_text": " `[4078] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4078>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:95
msgid "To see the data that ``/turtle1/cmd_vel`` is publishing, run the command:"
msgstr "要查看 ``/turtle1/cmd_vel`` 发布的数据，请运行以下命令：@{"calib_text": " `[4079] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4079>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:101
msgid "Nothing will show up at first because no data is being published by the teleop. Return to the terminal where you ran the teleop and select it so it's active. Use the arrow keys to move the turtle around, and you will see data being published on the terminal running ``ros2 topic echo``."
msgstr "一开始不会显示任何内容，因为 teleop 没有发布任何数据。返回到运行 teleop 的终端并选择它，使其处于活动状态。使用箭头键来移动乌龟，你将在运行 ``ros2 topic echo`` 的终端上看到数据被发布。@{"calib_text": " `[4080] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4080>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:120
msgid "3 ros2 bag record"
msgstr "3 ros2 bag record@{"calib_text": " `[4081] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4081>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:122
msgid "To record the data published to a topic use the command syntax:"
msgstr "要记录发布到一个话题上的数据，请使用以下命令语法：@{"calib_text": " `[4082] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4082>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:128
msgid "Before running this command on your chosen topic, open a new terminal and move into the ``bag_files`` directory you created earlier, because the rosbag file will save in the directory where you run it."
msgstr "在对所选择的话题运行此命令之前，请打开一个新的终端并进入之前创建的``bag_files``目录，因为rosbag文件将保存在您运行命令的目录中。@{"calib_text": " `[4083] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4083>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:130 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:339
msgid "Run the command:"
msgstr "运行以下命令：@{"calib_text": " `[4084] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4084>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:136
msgid "You will see the following messages in the terminal (the date and time will be different):"
msgstr "你将在终端中看到以下消息（日期和时间会有所不同）：@{"calib_text": " `[4085] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4085>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:145
msgid "Now ``ros2 bag`` is recording the data published on the ``/turtle1/cmd_vel`` topic. Return to the teleop terminal and move the turtle around again. The movements don't matter, but try to make a recognizable pattern to see when you replay the data later."
msgstr "现在``ros2 bag``正在记录发布在``/turtle1/cmd_vel``话题上的数据。返回到teleop终端并再次移动乌龟。移动的具体方式不重要，但尽量制造一个可识别的模式，以便在稍后回放数据时进行观察。@{"calib_text": " `[4086] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4086>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:151
msgid "Press ``Ctrl+C`` to stop recording."
msgstr "按下``Ctrl+C``停止记录。@{"calib_text": " `[4087] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4087>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:153
msgid "The data will be accumulated in a new bag directory with a name in the pattern of ``rosbag2_year_month_day-hour_minute_second``. This directory will contain a ``metadata.yaml`` along with the bag file in the recorded format."
msgstr "数据将累积在一个新的袋子目录中，目录的命名方式为``rosbag2_year_month_day-hour_minute_second``。该目录将包含一个``metadata.yaml``文件和以记录格式保存的袋子文件。@{"calib_text": " `[4088] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4088>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:157
msgid "3.1 Record multiple topics"
msgstr "3.1 记录多个主题@{"calib_text": " `[4089] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4089>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:159
msgid "You can also record multiple topics, as well as change the name of the file ``ros2 bag`` saves to."
msgstr "您还可以记录多个主题，并更改文件“ros2 bag”保存的名称。@{"calib_text": " `[4090] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4090>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:161
msgid "Run the following command:"
msgstr "运行以下命令：@{"calib_text": " `[4091] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4091>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:167
msgid "The ``-o`` option allows you to choose a unique name for your bag file. The following string, in this case ``subset``, is the file name."
msgstr "``-o``选项允许您为您的包文件选择一个唯一的名称。在这种情况下，下面的字符串``subset``是文件名。@{"calib_text": " `[4092] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4092>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:170
msgid "To record more than one topic at a time, simply list each topic separated by a space."
msgstr "要同时记录多个主题，只需用空格分隔每个主题。@{"calib_text": " `[4093] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4093>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:172
msgid "You will see the following message, confirming that both topics are being recorded."
msgstr "您将看到以下消息，确认正在记录两个主题。@{"calib_text": " `[4094] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4094>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:182
msgid "You can move the turtle around and press ``Ctrl+C`` when you're finished."
msgstr "您可以移动海龟并在完成后按``Ctrl+C``。@{"calib_text": " `[4095] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4095>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:186
msgid "There is another option you can add to the command, ``-a``, which records all the topics on your system."
msgstr "您还可以在命令中添加另一个选项``-a``，该选项记录系统上的所有主题。@{"calib_text": " `[4096] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4096>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:189
msgid "4 ros2 bag info"
msgstr "4 ros2 bag info@{"calib_text": " `[4097] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4097>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:191
msgid "You can see details about your recording by running:"
msgstr "运行以下命令可查看有关您的记录的详细信息：@{"calib_text": " `[4098] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4098>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:197
msgid "Running this command on the ``subset`` bag file will return a list of information on the file:"
msgstr "在``subset``包文件上运行此命令将返回文件的信息列表：@{"calib_text": " `[4099] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4099>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:215
msgid "To view the individual messages, you would have to open up the database, in this case sqlite3, to examine it, which is beyond the scope of ROS 2."
msgstr "要查看单个消息，您需要打开数据库，例如sqlite3，在其中进行检查，这超出了ROS 2的范围。@{"calib_text": " `[4100] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4100>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:218
msgid "5 ros2 bag play"
msgstr "5 ros2 bag play@{"calib_text": " `[4101] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4101>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:220
msgid "Before replaying the bag file, enter ``Ctrl+C`` in the terminal where the teleop is running. Then make sure your turtlesim window is visible so you can see the bag file in action."
msgstr "在重新播放bag文件之前，在运行teleop的终端中输入``Ctrl+C``。然后确保turtlesim窗口可见，这样你就可以看到bag文件的效果。@{"calib_text": " `[4102] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4102>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:223 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:240
msgid "Enter the command:"
msgstr "输入以下命令：@{"calib_text": " `[4103] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4103>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:229
msgid "The terminal will return the message:"
msgstr "终端将返回以下消息：@{"calib_text": " `[4104] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4104>`_ "}@"


#, python-format
msgid "Your turtle will follow the same path you entered while recording (though not 100% exactly; turtlesim is sensitive to small changes in the system's timing)."
msgstr "当您录制时，您的海龟将按照您输入的相同路径移动（尽管不是100％准确；turtlesim对系统时间的微小变化敏感）。@{"calib_text": " `[4105] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4105>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:239
msgid "Because the ``subset`` file recorded the ``/turtle1/pose`` topic, the ``ros2 bag play`` command won't quit for as long as you had turtlesim running, even if you weren't moving."
msgstr "因为“subset”文件记录了“/turtle1/pose”主题，所以“ros2 bag play”命令将保持运行，直到您停止turtlesim，即使您没有移动海龟。@{"calib_text": " `[4106] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4106>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:241
msgid "This is because as long as the ``/turtlesim`` node is active, it publishes data on the  ``/turtle1/pose`` topic at regular intervals. You may have noticed in the ``ros2 bag info`` example result above that the  ``/turtle1/cmd_vel`` topic's ``Count`` information was only 9; that's how many times we pressed the arrow keys while recording."
msgstr "这是因为只要“/turtlesim”节点处于活动状态，它就会定期发布“/turtle1/pose”主题的数据。您可能已经注意到上面的“ros2 bag info”示例结果中，“/turtle1/cmd_vel”主题的“Count”信息只有9次；这是我们在录制过程中按下箭头键的次数。@{"calib_text": " `[4107] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4107>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:244
msgid "Notice that ``/turtle1/pose`` has a ``Count`` value of over 3000; while we were recording, data was published on that topic 3000 times."
msgstr "请注意，“/turtle1/pose”主题的“Count”值超过3000；在我们录制时，该主题的数据发布了3000次。@{"calib_text": " `[4108] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4108>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:246
msgid "To get an idea of how often position data is published, you can run the command:"
msgstr "要了解位置数据发布的频率，可以运行以下命令：@{"calib_text": " `[4109] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4109>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:255
msgid "You can record data passed on topics in your ROS 2 system using the ``ros2 bag`` command. Whether you're sharing your work with others or introspecting your own experiments, it's a great tool to know about."
msgstr "您可以使用``ros2 bag``命令记录ROS 2系统中传递的数据。无论是与他人分享您的工作还是审查自己的实验，这是一个很好的工具。@{"calib_text": " `[4110] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4110>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:261
msgid "You've completed the \"Beginner: CLI Tools\" tutorials! The next step is tackling the \"Beginner: Client Libraries\" tutorials, starting with :doc:`../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace`."
msgstr "您已完成“入门：CLI工具”教程！下一步是开始解决“入门：客户端库”教程，从 :doc:`../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace` 开始。@{"calib_text": " `[4111] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4111>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:267
msgid "A more thorough explanation of ``ros2 bag`` can be found in the README `here <https://github.com/ros2/rosbag2>`__. For more information on QoS compatibility and ``ros2 bag``, see :doc:`../../../How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback`."
msgstr "关于``ros2 bag``的更详细说明可以在此处的README `链接 <https://github.com/ros2/rosbag2>`__ 中找到。有关QoS兼容性和``ros2 bag``的更多信息，请参阅 :doc:`../../../How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback`。@{"calib_text": " `[4112] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4112>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:8
msgid "Understanding actions"
msgstr "理解行为@{"calib_text": " `[4113] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4113>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:10
msgid "**Goal:** Introspect actions in ROS 2."
msgstr "**目标：** 在ROS 2中审视行为。@{"calib_text": " `[4114] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4114>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:23
msgid "Actions are one of the communication types in ROS 2 and are intended for long running tasks. They consist of three parts: a goal, feedback, and a result."
msgstr "行为是ROS 2中的一种通信类型，用于长时间运行的任务。它们由三个部分组成：目标（goal），反馈（feedback）和结果（result）。@{"calib_text": " `[4115] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4115>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:26
msgid "Actions are built on topics and services. Their functionality is similar to services, except actions can be canceled. They also provide steady feedback, as opposed to services which return a single response."
msgstr "行为是建立在主题（topics）和服务（services）之上的。它们的功能类似于服务，但行为可以被取消。与只返回单个响应的服务不同，行为还提供稳定的反馈。@{"calib_text": " `[4116] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4116>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:30
msgid "Actions use a client-server model, similar to the publisher-subscriber model (described in the :doc:`topics tutorial <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`). An \"action client\" node sends a goal to an \"action server\" node that acknowledges the goal and returns a stream of feedback and a result."
msgstr "动作使用客户端-服务器模型，类似于发布者-订阅者模型（在 :doc:`topics tutorial <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>` 中有描述）。一个\"动作客户端\"节点向一个\"动作服务器\"节点发送一个目标，服务器节点确认目标并返回一系列反馈和结果流。@{"calib_text": " `[4117] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4117>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:38
msgid "This tutorial builds off concepts, like :doc:`nodes <../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` and :doc:`topics <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`, covered in previous tutorials."
msgstr "本教程在之前的教程中构建了一些概念，例如 :doc:`节点 <../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` 和 :doc:`主题 <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`。@{"calib_text": " `[4118] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4118>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:40 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:32
msgid "This tutorial uses the :doc:`turtlesim package <../Introducing-Turtlesim/Introducing-Turtlesim>`."
msgstr "本教程使用 :doc:`turtlesim 包 <../Introducing-Turtlesim/Introducing-Turtlesim>`。@{"calib_text": " `[4119] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4119>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:50 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:42 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:45
msgid "Start up the two turtlesim nodes, ``/turtlesim`` and ``/teleop_turtle``."
msgstr "启动两个 turtlesim 节点，``/turtlesim`` 和 ``/teleop_turtle``。@{"calib_text": " `[4120] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4120>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:66
msgid "2 Use actions"
msgstr "2 使用动作@{"calib_text": " `[4121] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4121>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:68
msgid "When you launch the ``/teleop_turtle`` node, you will see the following message in your terminal:"
msgstr "当你启动 ``/teleop_turtle`` 节点时，你将在终端中看到以下消息:@{"calib_text": " `[4122] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4122>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:75
msgid "Let's focus on the second line, which corresponds to an action. (The first instruction corresponds to the \"cmd_vel\" topic, discussed previously in the :doc:`topics tutorial <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`.)"
msgstr "让我们关注第二行，它对应一个动作。（第一条指令对应之前在 :doc:`topics 教程 <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>` 中讨论的 \"cmd_vel\" 话题。）@{"calib_text": " `[4123] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4123>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:78
msgid "Notice that the letter keys ``G|B|V|C|D|E|R|T`` form a \"box\" around the ``F`` key on a US QWERTY keyboard (if you are not using a QWERTY keyboard, see `this link <https://upload.wikimedia.org/wikipedia/commons/d/da/KB_United_States.svg>`__ to follow along). Each key's position around ``F`` corresponds to that orientation in turtlesim. For example, the ``E`` will rotate the turtle's orientation to the upper left corner."
msgstr "请注意，在美国的 QWERTY 键盘上，字母键 ``G|B|V|C|D|E|R|T`` 组成了围绕 ``F`` 键的“方框”（如果你没有使用 QWERTY 键盘，请查看 `此链接 <https://upload.wikimedia.org/wikipedia/commons/d/da/KB_United_States.svg>`__ 以便跟随）。每个键在 ``F`` 周围的位置对应 turtlesim 中的方向。例如，按下 ``E`` 将使乌龟的方向旋转到左上角。@{"calib_text": " `[4124] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4124>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:82
msgid "Pay attention to the terminal where the ``/turtlesim`` node is running. Each time you press one of these keys, you are sending a goal to an action server that is part of the ``/turtlesim`` node. The goal is to rotate the turtle to face a particular direction. A message relaying the result of the goal should display once the turtle completes its rotation:"
msgstr "请注意运行``/turtlesim``节点的终端。每次按下其中一个按键，都会向``/turtlesim``节点中的动作服务器发送一个目标。目标是将乌龟旋转到面向特定方向。当乌龟完成旋转时，应该显示一个传达目标结果的消息：@{"calib_text": " `[4125] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4125>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:91
msgid "The ``F`` key will cancel a goal mid-execution."
msgstr "按下``F``键将取消正在执行的目标。@{"calib_text": " `[4126] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4126>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:93
msgid "Try pressing the ``C`` key, and then pressing the ``F`` key before the turtle can complete its rotation. In the terminal where the ``/turtlesim`` node is running, you will see the message:"
msgstr "尝试在乌龟完成旋转之前按下``C``键，然后再按下``F``键。在运行``/turtlesim``节点的终端中，你将看到以下消息：@{"calib_text": " `[4127] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4127>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:100
msgid "Not only can the client-side (your input in the teleop) stop a goal, but the server-side (the ``/turtlesim`` node) can as well. When the server-side chooses to stop processing a goal, it is said to \"abort\" the goal."
msgstr "不仅客户端（你在teleop中输入的内容），而且服务器端（``/turtlesim``节点）也可以停止目标的执行。当服务器端选择停止处理目标时，称为“中止”目标。@{"calib_text": " `[4128] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4128>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:103
msgid "Try hitting the ``D`` key, then the ``G`` key before the first rotation can complete. In the terminal where the ``/turtlesim`` node is running, you will see the message:"
msgstr "在第一个旋转完成之前，请尝试按下 ``D`` 键，然后按下 ``G`` 键。在运行``/turtlesim``节点的终端中，您将看到以下消息：@{"calib_text": " `[4129] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4129>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:110
msgid "This action server chose to abort the first goal because it got a new one. It could have chosen something else, like reject the new goal or execute the second goal after the first one finished. Don't assume every action server will choose to abort the current goal when it gets a new one."
msgstr "这个动作服务器选择中止第一个目标，因为它收到了一个新的目标。它也可以选择其他操作，比如拒绝新目标或在第一个目标完成后执行第二个目标。不要假设每个动作服务器在收到新目标时都会选择中止当前目标。@{"calib_text": " `[4130] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4130>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:115 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:131
msgid "3 ros2 node info"
msgstr "3. ros2节点信息@{"calib_text": " `[4131] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4131>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:117
msgid "To see the list of actions a node provides, ``/turtlesim`` in this case, open a new terminal and run the command:"
msgstr "要查看一个节点提供的动作列表，例如这里的 ``/turtlesim``，请打开一个新的终端并运行以下命令：@{"calib_text": " `[4132] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4132>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:123
msgid "Which will return a list of ``/turtlesim``'s subscribers, publishers, services, action servers and action clients:"
msgstr "它将返回``/turtlesim``的订阅者、发布者、服务、动作服务器和动作客户端的列表：@{"calib_text": " `[4133] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4133>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:156
msgid "Notice that the ``/turtle1/rotate_absolute`` action for ``/turtlesim`` is under ``Action Servers``. This means ``/turtlesim`` responds to and provides feedback for the ``/turtle1/rotate_absolute`` action."
msgstr "请注意，``/turtlesim``中的``/turtle1/rotate_absolute``动作位于``动作服务器``下。这意味着``/turtlesim``对``/turtle1/rotate_absolute``动作进行响应并提供反馈。@{"calib_text": " `[4134] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4134>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:159
msgid "The ``/teleop_turtle`` node has the name ``/turtle1/rotate_absolute`` under ``Action Clients`` meaning that it sends goals for that action name. To see that, run:"
msgstr "``/teleop_turtle``节点的名称为``/turtle1/rotate_absolute``，位于``动作客户端``下，这意味着它发送该动作名称的目标。要查看，请运行：@{"calib_text": " `[4135] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4135>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:192
msgid "4 ros2 action list"
msgstr "4 ros2 action list@{"calib_text": " `[4136] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4136>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:194
msgid "To identify all the actions in the ROS graph, run the command:"
msgstr "要识别ROS图中的所有动作，请运行以下命令：@{"calib_text": " `[4137] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4137>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:206
msgid "This is the only action in the ROS graph right now. It controls the turtle's rotation, as you saw earlier. You also already know that there is one action client (part of ``/teleop_turtle``) and one action server (part of ``/turtlesim``) for this action from using the ``ros2 node info <node_name>`` command."
msgstr "目前ROS图中只有一个动作。它控制着乌龟的旋转，就像您之前看到的那样。您还已经知道，对于这个动作，有一个动作客户端（位于``/teleop_turtle``）和一个动作服务器（位于``/turtlesim``），可以使用``ros2 node info <node_name>``命令查看。@{"calib_text": " `[4138] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4138>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:211
msgid "4.1 ros2 action list -t"
msgstr "4.1 ros2 action list -t@{"calib_text": " `[4139] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4139>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:213
msgid "Actions have types, similar to topics and services. To find ``/turtle1/rotate_absolute``'s type, run the command:"
msgstr "动作也有类型，类似于主题和服务。要找到``/turtle1/rotate_absolute``的类型，请运行以下命令：@{"calib_text": " `[4140] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4140>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:226
msgid "In brackets to the right of each action name (in this case only ``/turtle1/rotate_absolute``) is the action type, ``turtlesim/action/RotateAbsolute``. You will need this when you want to execute an action from the command line or from code."
msgstr "在每个动作名称右侧的括号中（在这种情况下只有``/turtle1/rotate_absolute``），是动作类型``turtlesim/action/RotateAbsolute``。当你想要从命令行或代码中执行一个动作时，你将需要它。@{"calib_text": " `[4141] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4141>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:230
msgid "5 ros2 action info"
msgstr "5 ros2 action info@{"calib_text": " `[4142] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4142>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:232
msgid "You can further introspect the ``/turtle1/rotate_absolute`` action with the command:"
msgstr "你可以使用以下命令进一步检查``/turtle1/rotate_absolute``动作：@{"calib_text": " `[4143] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4143>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:238
msgid "Which will return"
msgstr "它将返回@{"calib_text": " `[4144] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4144>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:248
msgid "This tells us what we learned earlier from running ``ros2 node info`` on each node: The ``/teleop_turtle`` node has an action client and the ``/turtlesim`` node has an action server for the ``/turtle1/rotate_absolute`` action."
msgstr "这告诉我们之前在每个节点上运行``ros2 node info``时学到的内容：``/teleop_turtle``节点具有一个动作客户端，而``/turtlesim``节点具有一个``/turtle1/rotate_absolute``动作的动作服务器。@{"calib_text": " `[4145] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4145>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:253 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:185
msgid "6 ros2 interface show"
msgstr "6 ros2 interface show@{"calib_text": " `[4146] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4146>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:255
msgid "One more piece of information you will need before sending or executing an action goal yourself is the structure of the action type."
msgstr "在发送或执行动作目标之前，您还需要了解动作类型的结构。@{"calib_text": " `[4147] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4147>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:257
msgid "Recall that you identified ``/turtle1/rotate_absolute``'s type when running the command ``ros2 action list -t``. Enter the following command with the action type in your terminal:"
msgstr "回想一下，在运行命令``ros2 action list -t``时，您识别了``/turtle1/rotate_absolute``的类型。在终端中输入以下带有动作类型的命令：@{"calib_text": " `[4148] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4148>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:277
msgid "The section of this message above the first ``---`` is the structure (data type and name) of the goal request. The next section is the structure of the result. The last section is the structure of the feedback."
msgstr "在第一个 ``---`` 之上的部分是目标请求的结构（数据类型和名称）。接下来的部分是结果的结构。最后一部分是反馈的结构。@{"calib_text": " `[4149] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4149>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:282
msgid "7 ros2 action send_goal"
msgstr "7. 使用 ros2 action send_goal@{"calib_text": " `[4150] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4150>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:284
msgid "Now let's send an action goal from the command line with the following syntax:"
msgstr "现在让我们通过命令行发送一个动作目标，使用以下语法：@{"calib_text": " `[4151] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4151>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:290
msgid "``<values>`` need to be in YAML format."
msgstr "``<values>`` 需要以 YAML 格式提供。@{"calib_text": " `[4152] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4152>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:292
msgid "Keep an eye on the turtlesim window, and enter the following command into your terminal:"
msgstr "请密切关注turtlesim窗口，并在终端中输入以下命令：@{"calib_text": " `[4153] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4153>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:298
msgid "You should see the turtle rotating, as well as the following message in your terminal:"
msgstr "你应该会看到乌龟旋转，并在终端中看到以下消息：@{"calib_text": " `[4154] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4154>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:313
msgid "All goals have a unique ID, shown in the return message. You can also see the result, a field with the name ``delta``, which is the displacement to the starting position."
msgstr "所有目标都有一个唯一的ID，在返回消息中显示。你还可以看到名为``delta``的结果字段，它是相对于起始位置的位移。@{"calib_text": " `[4155] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4155>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:316
msgid "To see the feedback of this goal, add ``--feedback`` to the ``ros2 action send_goal`` command:"
msgstr "要查看此目标的反馈，请在``ros2 action send_goal``命令中添加``--feedback``：@{"calib_text": " `[4156] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4156>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:322 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:200
msgid "Your terminal will return the message:"
msgstr "终端将返回以下消息:@{"calib_text": " `[4157] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4157>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:344
msgid "You will continue to receive feedback, the remaining radians, until the goal is complete."
msgstr "您将继续接收反馈，直到完成目标。剩余弧度。@{"calib_text": " `[4158] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4158>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:349
msgid "Actions are like services that allow you to execute long running tasks, provide regular feedback, and are cancelable."
msgstr "动作类似于服务，允许您执行长时间运行的任务，提供定期反馈，并可取消。@{"calib_text": " `[4159] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4159>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:351
msgid "A robot system would likely use actions for navigation. An action goal could tell a robot to travel to a position. While the robot navigates to the position, it can send updates along the way (i.e. feedback), and then a final result message once it's reached its destination."
msgstr "一个机器人系统可能会使用动作进行导航。一个动作目标可以告诉机器人前往一个位置。当机器人导航到该位置时，它可以沿途发送更新（即反馈），然后在到达目的地后发送最终结果消息。@{"calib_text": " `[4160] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4160>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:355
msgid "Turtlesim has an action server that action clients can send goals to for rotating turtles. In this tutorial, you introspected that action, ``/turtle1/rotate_absolute``, to get a better idea of what actions are and how they work."
msgstr "Turtlesim具有一个动作服务器，动作客户端可以向其发送旋转乌龟的目标。在本教程中，您可以内省该动作``/turtle1/rotate_absolute``，以更好地了解动作是什么以及它们是如何工作的。@{"calib_text": " `[4161] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4161>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:361
msgid "Now you've covered all of the core ROS 2 concepts. The last few tutorials in the \"Users\" set will introduce you to some tools and techniques that will make using ROS 2 easier, starting with :doc:`../Using-Rqt-Console/Using-Rqt-Console`."
msgstr "现在，您已经掌握了所有核心ROS 2概念。\"Users\"系列中的最后几个教程将向您介绍一些工具和技术，这些工具和技术将使使用ROS 2更容易，首先是：:doc:`../Using-Rqt-Console/Using-Rqt-Console`。@{"calib_text": " `[4162] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4162>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:367
msgid "You can read more about the design decisions behind actions in ROS 2 `here <https://design.ros2.org/articles/actions.html>`__."
msgstr "您可以在ROS 2 `这里 <https://design.ros2.org/articles/actions.html>`__ 了解有关动作设计决策的更多信息。@{"calib_text": " `[4163] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4163>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:8
msgid "Understanding nodes"
msgstr "理解节点@{"calib_text": " `[4164] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4164>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:10
msgid "**Goal:** Learn about the function of nodes in ROS 2, and the tools to interact with them."
msgstr "**目标:** 了解ROS 2中节点的功能以及与之交互的工具。@{"calib_text": " `[4165] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4165>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:24
msgid "1 The ROS 2 graph"
msgstr "1 ROS 2图@{"calib_text": " `[4166] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4166>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:26
msgid "Over the next few tutorials, you will learn about a series of core ROS 2 concepts that make up what is referred to as the “ROS (2) graph”."
msgstr "在接下来的几个教程中，您将了解一系列组成所谓“ROS (2)图”的核心ROS 2概念。@{"calib_text": " `[4167] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4167>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:28
msgid "The ROS graph is a network of ROS 2 elements processing data together at the same time. It encompasses all executables and the connections between them if you were to map them all out and visualize them."
msgstr "ROS图是一个由ROS 2元素组成的网络，这些元素同时处理数据。如果您将它们全部映射并可视化，它将包含所有可执行文件和它们之间的连接。@{"calib_text": " `[4168] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4168>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:32
msgid "2 Nodes in ROS 2"
msgstr "ROS 2中的两个节点@{"calib_text": " `[4169] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4169>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:34
msgid "Each node in ROS should be responsible for a single, modular purpose, e.g. controlling the wheel motors or publishing the sensor data from a laser range-finder. Each node can send and receive data from other nodes via topics, services, actions, or parameters."
msgstr "ROS中的每个节点应该负责一个单一的模块化功能，例如控制轮子马达或发布来自激光测距仪的传感器数据。每个节点可以通过主题（topics）、服务（services）、动作（actions）或参数（parameters）与其他节点进行数据的发送和接收。@{"calib_text": " `[4170] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4170>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:39
msgid "A full robotic system is comprised of many nodes working in concert. In ROS 2, a single executable (C++ program, Python program, etc.) can contain one or more nodes."
msgstr "一个完整的机器人系统由许多协同工作的节点组成。在ROS 2中，单个可执行文件（C++程序、Python程序等）可以包含一个或多个节点。@{"calib_text": " `[4171] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4171>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:45
msgid "The :doc:`previous tutorial <../Introducing-Turtlesim/Introducing-Turtlesim>` shows you how to install the ``turtlesim`` package used here."
msgstr "在 :doc:`上一篇教程<../Introducing-Turtlesim/Introducing-Turtlesim>` 中，你可以了解如何安装这里使用的 ``turtlesim`` 包。@{"calib_text": " `[4172] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4172>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:53
msgid "1 ros2 run"
msgstr "1 ros2 run@{"calib_text": " `[4173] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4173>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:55
msgid "The command ``ros2 run`` launches an executable from a package."
msgstr "命令``ros2 run``会从一个软件包中启动一个可执行文件。@{"calib_text": " `[4174] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4174>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:61
msgid "To run turtlesim, open a new terminal, and enter the following command:"
msgstr "要运行turtlesim，请打开一个新的终端，并输入以下命令：@{"calib_text": " `[4175] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4175>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:67
msgid "The turtlesim window will open, as you saw in the :doc:`previous tutorial <../Introducing-Turtlesim/Introducing-Turtlesim>`."
msgstr "turtlesim窗口将会打开，就像你在:doc:`上一个教程<../Introducing-Turtlesim/Introducing-Turtlesim>`中看到的那样。@{"calib_text": " `[4176] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4176>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:69
msgid "Here, the package name is ``turtlesim`` and the executable name is ``turtlesim_node``."
msgstr "这里，包名是 `turtlesim`，可执行文件名是 `turtlesim_node`。@{"calib_text": " `[4177] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4177>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:71
msgid "We still don't know the node name, however. You can find node names by using ``ros2 node list``"
msgstr "然而，我们还不知道节点名称。您可以使用 `ros2 node list` 命令查找节点名称。@{"calib_text": " `[4178] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4178>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:75
msgid "2 ros2 node list"
msgstr "2 `ros2 node list`@{"calib_text": " `[4179] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4179>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:77
msgid "``ros2 node list`` will show you the names of all running nodes. This is especially useful when you want to interact with a node, or when you have a system running many nodes and need to keep track of them."
msgstr "`ros2 node list` 命令将显示所有正在运行的节点的名称。当您想与节点进行交互或者系统运行多个节点时需要跟踪它们时，这特别有用。@{"calib_text": " `[4180] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4180>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:80
msgid "Open a new terminal while turtlesim is still running in the other one, and enter the following command:"
msgstr "在另一个终端中打开新的终端，同时 turtlesim 仍在运行，请输入以下命令：@{"calib_text": " `[4181] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4181>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:86
msgid "The terminal will return the node name:"
msgstr "终端将返回节点名称：@{"calib_text": " `[4182] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4182>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:92
msgid "Open another new terminal and start the teleop node with the command:"
msgstr "再打开一个新的终端，并使用以下命令启动 teleop 节点：@{"calib_text": " `[4183] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4183>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:98
msgid "Here, we are referring to the ``turtlesim`` package again, but this time we target the executable named ``turtle_teleop_key``."
msgstr "在这里，我们再次引用了“turtlesim”软件包，但这次我们的目标是名为“turtle_teleop_key”的可执行文件。@{"calib_text": " `[4184] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4184>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:100
msgid "Return to the terminal where you ran ``ros2 node list`` and run it again. You will now see the names of two active nodes:"
msgstr "返回到之前运行``ros2 node list``的终端，再次运行该命令。你将会看到两个活动节点的名称：@{"calib_text": " `[4185] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4185>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:109
msgid "2.1 Remapping"
msgstr "2.1 重映射@{"calib_text": " `[4186] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4186>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:111
msgid "`Remapping <https://design.ros2.org/articles/ros_command_line_arguments.html#name-remapping-rules>`__ allows you to reassign default node properties, like node name, topic names, service names, etc., to custom values. In the last tutorial, you used remapping on ``turtle_teleop_key`` to change the cmd_vel topic and target **turtle2**."
msgstr "`重映射 <https://design.ros2.org/articles/ros_command_line_arguments.html#name-remapping-rules>`__ 允许你重新分配默认节点属性，如节点名称、话题名称、服务名称等，以自定义的值。在上一个教程中，你在``turtle_teleop_key``上使用了重映射来改变``cmd_vel``话题和目标节点为**turtle2**。@{"calib_text": " `[4187] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4187>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:114
msgid "Now, let's reassign the name of our ``/turtlesim`` node. In a new terminal, run the following command:"
msgstr "现在，让我们重新分配``/turtlesim``节点的名称。在一个新的终端中运行以下命令：@{"calib_text": " `[4188] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4188>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:121
msgid "Since you're calling ``ros2 run`` on turtlesim again, another turtlesim window will open. However, now if you return to the terminal where you ran ``ros2 node list``, and run it again, you will see three node names:"
msgstr "由于您再次调用``ros2 run``启动了turtlesim，将会打开另一个turtlesim窗口。但是，现在如果您返回到之前运行``ros2 node list``的终端，并再次运行该命令，您将看到三个节点名称：@{"calib_text": " `[4189] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4189>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:133
msgid "Now that you know the names of your nodes, you can access more information about them with:"
msgstr "既然您知道了节点的名称，您可以使用以下命令访问有关它们的更多信息：@{"calib_text": " `[4190] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4190>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:139
msgid "To examine your latest node, ``my_turtle``, run the following command:"
msgstr "要查看您最新的节点``my_turtle``，请运行以下命令：@{"calib_text": " `[4191] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4191>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:145
msgid "``ros2 node info`` returns a list of subscribers, publishers, services, and actions. i.e. the ROS graph connections that interact with that node. The output should look like this:"
msgstr "``ros2 node info``返回订阅者、发布者、服务和动作的列表，即与该节点进行交互的ROS图连接。输出应该如下所示：@{"calib_text": " `[4192] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4192>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:179
msgid "Now try running the same command on the ``/teleop_turtle`` node, and see how its connections differ from ``my_turtle``."
msgstr "现在尝试在``/teleop_turtle``节点上运行相同的命令，观察它的连接与``my_turtle``有何不同。@{"calib_text": " `[4193] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4193>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:181
msgid "You will learn more about the ROS graph connection concepts including the message types in the upcoming tutorials."
msgstr "在即将进行的教程中，您将更多地了解ROS图连接概念，包括消息类型。@{"calib_text": " `[4194] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4194>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:186
msgid "A node is a fundamental ROS 2 element that serves a single, modular purpose in a robotics system."
msgstr "节点是ROS 2中的基本元素，在机器人系统中具有单一的模块化功能。@{"calib_text": " `[4195] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4195>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:188
msgid "In this tutorial, you utilized nodes created in the ``turtlesim`` package by running the executables ``turtlesim_node`` and ``turtle_teleop_key``."
msgstr "在本教程中，您利用了``turtlesim``包中创建的节点，通过运行``turtlesim_node``和``turtle_teleop_key``可执行文件。@{"calib_text": " `[4196] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4196>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:190
msgid "You learned how to use ``ros2 node list`` to discover active node names and ``ros2 node info`` to introspect a single node. These tools are vital to understanding the flow of data in a complex, real-world robot system."
msgstr "你学会了如何使用 ``ros2 node list`` 命令来发现活动节点的名称，以及使用 ``ros2 node info`` 命令来内省单个节点。这些工具对于理解复杂的实际机器人系统中的数据流非常重要。@{"calib_text": " `[4197] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4197>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:196
msgid "Now that you understand nodes in ROS 2, you can move on to the :doc:`topics tutorial <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`. Topics are one of the communication types that connects nodes."
msgstr "现在你已经了解了ROS 2中的节点，可以继续阅读 :doc:`topics tutorial <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`。主题是连接节点的通信类型之一。@{"calib_text": " `[4198] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4198>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:202
msgid "The :doc:`../../../Concepts` page adds some more detail to the concept of nodes."
msgstr "在 :doc:`../../../Concepts` 页面上，进一步详细介绍了节点的概念。@{"calib_text": " `[4199] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4199>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:8
msgid "Understanding parameters"
msgstr "理解参数@{"calib_text": " `[4200] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4200>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:10
msgid "**Goal:** Learn how to get, set, save and reload parameters in ROS 2."
msgstr "**目标：** 学习如何在 ROS 2 中获取、设置、保存和重新加载参数。@{"calib_text": " `[4201] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4201>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:23
msgid "A parameter is a configuration value of a node. You can think of parameters as node settings. A node can store parameters as integers, floats, booleans, strings, and lists. In ROS 2, each node maintains its own parameters. For more background on parameters, please see :doc:`the concept document <../../../Concepts/About-ROS-2-Parameters>`."
msgstr "参数是节点的配置值。你可以将参数视为节点的设置。节点可以将参数存储为整数、浮点数、布尔值、字符串和列表。在ROS 2中，每个节点都维护其自己的参数。有关参数的更多背景信息，请参阅：:doc:`概念文档 <../../../Concepts/About-ROS-2-Parameters>`。@{"calib_text": " `[4202] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4202>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:58
msgid "2 ros2 param list"
msgstr "2 ros2 param list@{"calib_text": " `[4203] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4203>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:60
msgid "To see the parameters belonging to your nodes, open a new terminal and enter the command:"
msgstr "要查看属于你的节点的参数，打开一个新的终端并输入以下命令：@{"calib_text": " `[4204] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4204>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:66
msgid "You will see the node namespaces, ``/teleop_turtle`` and ``/turtlesim``, followed by each node's parameters:"
msgstr "您将看到节点命名空间``/teleop_turtle``和``/turtlesim``，然后是每个节点的参数：@{"calib_text": " `[4205] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4205>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:88
msgid "Every node has the parameter ``use_sim_time``; it's not unique to turtlesim."
msgstr "每个节点都有参数``use_sim_time``；它不是 turtlesim 特有的。@{"calib_text": " `[4206] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4206>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:90
msgid "Based on their names, it looks like ``/turtlesim``'s parameters determine the background color of the turtlesim window using RGB color values."
msgstr "根据它们的名称，看起来``/turtlesim``的参数使用RGB颜色值来确定 turtlesim 窗口的背景色。@{"calib_text": " `[4207] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4207>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:92
msgid "To determine a parameter's type, you can use ``ros2 param get``."
msgstr "要确定参数的类型，您可以使用``ros2 param get``命令。@{"calib_text": " `[4208] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4208>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:96
msgid "3 ros2 param get"
msgstr "3 ros2 param get@{"calib_text": " `[4209] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4209>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:98
msgid "To display the type and current value of a parameter, use the command:"
msgstr "要显示参数的类型和当前值，请使用以下命令：@{"calib_text": " `[4210] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4210>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:104
msgid "Let's find out the current value of ``/turtlesim``'s parameter ``background_g``:"
msgstr "让我们找出``/turtlesim``的参数``background_g``的当前值：@{"calib_text": " `[4211] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4211>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:110
msgid "Which will return the value:"
msgstr "将返回该值：@{"calib_text": " `[4212] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4212>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:116
msgid "Now you know ``background_g`` holds an integer value."
msgstr "现在你知道 ``background_g`` 保存了一个整数值。@{"calib_text": " `[4213] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4213>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:118
msgid "If you run the same command on ``background_r`` and ``background_b``, you will get the values ``69`` and ``255``, respectively."
msgstr "如果你对 ``background_r`` 和 ``background_b`` 运行相同的命令，你将分别得到值 ``69`` 和 ``255``。@{"calib_text": " `[4214] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4214>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:121
msgid "4 ros2 param set"
msgstr "运行 ros2 param set 命令来执行第 4 步。@{"calib_text": " `[4215] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4215>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:123
msgid "To change a parameter's value at runtime, use the command:"
msgstr "要在运行时更改参数的值，请使用以下命令：@{"calib_text": " `[4216] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4216>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:129
msgid "Let's change ``/turtlesim``'s background color:"
msgstr "让我们改变 ``/turtlesim`` 的背景颜色:@{"calib_text": " `[4217] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4217>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:135
msgid "Your terminal should return the message:"
msgstr "你的终端应该返回以下信息:@{"calib_text": " `[4218] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4218>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:141
msgid "And the background of your turtlesim window should change colors:"
msgstr "然后你的 turtlesim 窗口的背景颜色会改变:@{"calib_text": " `[4219] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4219>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:145
msgid "Setting parameters with the ``set`` command will only change them in your current session, not permanently. However, you can save your settings and reload them the next time you start a node."
msgstr "使用 ``set`` 命令设置参数只会在当前会话中生效，而不是永久生效。然而，你可以保存你的设置，并在下次启动节点时重新加载。@{"calib_text": " `[4220] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4220>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:149
msgid "5 ros2 param dump"
msgstr "5 ros2 param dump@{"calib_text": " `[4221] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4221>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:151
msgid "You can view all of a node's current parameter values by using the command:"
msgstr "你可以使用以下命令查看节点的所有当前参数值：@{"calib_text": " `[4222] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4222>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:157
msgid "The command prints to the standard output (stdout) by default but you can also redirect the parameter values into a file to save them for later. To save your current configuration of ``/turtlesim``'s parameters into the file ``turtlesim.yaml``, enter the command:"
msgstr "该命令默认将参数值打印到标准输出（stdout），但你也可以将参数值重定向到文件中以便以后使用。要将当前``/turtlesim``参数的配置保存到文件``turtlesim.yaml``中，请执行以下命令：@{"calib_text": " `[4223] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4223>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:164
msgid "You will find a new file in the current working directory your shell is running in. If you open this file, you'll see the following content:"
msgstr "你会在当前工作目录中找到一个新的文件，如果你打开这个文件，你会看到以下内容：@{"calib_text": " `[4224] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4224>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:183
msgid "Dumping parameters comes in handy if you want to reload the node with the same parameters in the future."
msgstr "将参数转储非常方便，如果您希望将来重新加载具有相同参数的节点。@{"calib_text": " `[4225] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4225>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:186
msgid "6 ros2 param load"
msgstr "6 ros2 param load@{"calib_text": " `[4226] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4226>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:188
msgid "You can load parameters from a file to a currently running node using the command:"
msgstr "您可以使用以下命令将参数从文件加载到当前运行的节点：@{"calib_text": " `[4227] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4227>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:194
msgid "To load the ``turtlesim.yaml`` file generated with ``ros2 param dump`` into ``/turtlesim`` node's parameters, enter the command:"
msgstr "要将使用``ros2 param dump``生成的``turtlesim.yaml``文件加载到``/turtlesim``节点的参数中，请输入以下命令：@{"calib_text": " `[4228] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4228>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:215
msgid "Read-only parameters can only be modified at startup and not afterwards, that is why there are some warnings for the \"qos_overrides\" parameters."
msgstr "只读参数只能在启动时进行修改，不能在之后进行修改，这就是为什么“qos_overrides”参数会有一些警告。@{"calib_text": " `[4229] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4229>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:218
msgid "7 Load parameter file on node startup"
msgstr "7 在节点启动时加载参数文件@{"calib_text": " `[4230] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4230>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:220
msgid "To start the same node using your saved parameter values, use:"
msgstr "要使用保存的参数值启动相同的节点，请使用以下命令：@{"calib_text": " `[4231] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4231>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:226
msgid "This is the same command you always use to start turtlesim, with the added flags ``--ros-args`` and ``--params-file``, followed by the file you want to load."
msgstr "这是您启动turtlesim时经常使用的相同命令，只需添加``--ros-args``和``--params-file``标志，然后加上要加载的文件名。@{"calib_text": " `[4232] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4232>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:228
msgid "Stop your running turtlesim node, and try reloading it with your saved parameters, using:"
msgstr "停止正在运行的turtlesim节点，并尝试使用保存的参数重新加载它，使用命令：@{"calib_text": " `[4233] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4233>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:234
msgid "The turtlesim window should appear as usual, but with the purple background you set earlier."
msgstr "turtlesim窗口应该像往常一样显示，但是背景将是您之前设置的紫色背景。@{"calib_text": " `[4234] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4234>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:238
msgid "When a parameter file is used at node startup, all parameters, including the read-only ones, will be updated."
msgstr "当在节点启动时使用参数文件时，包括只读参数在内的所有参数都将被更新。@{"calib_text": " `[4235] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4235>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:243
msgid "Nodes have parameters to define their default configuration values. You can ``get`` and ``set`` parameter values from the command line. You can also save the parameter settings to a file to reload them in a future session."
msgstr "节点具有参数来定义其默认配置值。您可以从命令行中获取和设置参数值。您还可以将参数设置保存到文件中，在将来的会话中重新加载。@{"calib_text": " `[4236] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4236>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:250
msgid "Jumping back to ROS 2 communication methods, in the next tutorial you'll learn about :doc:`actions <../Understanding-ROS2-Actions/Understanding-ROS2-Actions>`."
msgstr "回到ROS 2通信方法，下一篇教程中你将学习：doc: `动作 <../Understanding-ROS2-Actions/Understanding-ROS2-Actions>`。@{"calib_text": " `[4237] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4237>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:8
msgid "Understanding services"
msgstr "了解服务@{"calib_text": " `[4238] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4238>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:10
msgid "**Goal:** Learn about services in ROS 2 using command line tools."
msgstr "**目标：** 使用命令行工具学习ROS 2中的服务。@{"calib_text": " `[4239] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4239>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:23
msgid "Services are another method of communication for nodes in the ROS graph. Services are based on a call-and-response model versus the publisher-subscriber model of topics. While topics allow nodes to subscribe to data streams and get continual updates, services only provide data when they are specifically called by a client."
msgstr "服务是ROS图中节点之间的另一种通信方法。服务基于调用-响应模型，而不是主题的发布-订阅模型。虽然主题允许节点订阅数据流并获得持续更新，但服务仅在客户端特定调用时提供数据。@{"calib_text": " `[4240] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4240>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:34
msgid "Some concepts mentioned in this tutorial, like :doc:`Nodes <../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` and :doc:`Topics <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`, were covered in previous tutorials in the series."
msgstr "在本教程中提到的一些概念，如 :doc:`节点 <../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` 和 :doc:`话题 <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`，在系列教程中已经介绍过了。@{"calib_text": " `[4241] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4241>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:36
msgid "You will need the :doc:`turtlesim package <../Introducing-Turtlesim/Introducing-Turtlesim>`."
msgstr "你需要安装 :doc:`turtlesim 包 <../Introducing-Turtlesim/Introducing-Turtlesim>`。@{"calib_text": " `[4242] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4242>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:60
msgid "2 ros2 service list"
msgstr "2 ros2 service list@{"calib_text": " `[4243] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4243>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:62
msgid "Running the ``ros2 service list`` command in a new terminal will return a list of all the services currently active in the system:"
msgstr "在新终端中运行 ``ros2 service list`` 命令将返回当前系统中所有活动服务的列表：@{"calib_text": " `[4244] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4244>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:86
msgid "You will see that both nodes have the same six services with ``parameters`` in their names. Nearly every node in ROS 2 has these infrastructure services that parameters are built off of. There will be more about parameters in the next tutorial. In this tutorial, the parameter services will be omitted from the discussion."
msgstr "你会发现两个节点都有相同的六个以``parameters``结尾的服务。ROS 2中几乎每个节点都有这些基础设施服务，参数就是构建在这些服务之上的。下一个教程将更多地介绍参数。在本教程中，将省略对参数服务的讨论。@{"calib_text": " `[4245] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4245>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:91
msgid "For now, let's focus on the turtlesim-specific services, ``/clear``, ``/kill``, ``/reset``, ``/spawn``, ``/turtle1/set_pen``, ``/turtle1/teleport_absolute``, and ``/turtle1/teleport_relative``. You may recall interacting with some of these services using rqt in the :doc:`Use turtlesim, ros2, and rqt <../Introducing-Turtlesim/Introducing-Turtlesim>` tutorial."
msgstr "现在，让我们专注于turtlesim特定的服务，``/clear``、``/kill``、``/reset``、``/spawn``、``/turtle1/set_pen``、``/turtle1/teleport_absolute``和``/turtle1/teleport_relative``。你可能还记得在 :doc:`使用turtlesim、ros2和rqt <../Introducing-Turtlesim/Introducing-Turtlesim>` 教程中使用rqt与其中一些服务进行交互。@{"calib_text": " `[4246] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4246>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:96
msgid "3 ros2 service type"
msgstr "3 ros2服务类型@{"calib_text": " `[4247] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4247>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:98
msgid "Services have types that describe how the request and response data of a service is structured. Service types are defined similarly to topic types, except service types have two parts: one message for the request and another for the response."
msgstr "服务具有描述服务的请求和响应数据结构的类型。服务类型的定义类似于主题类型，但服务类型由请求部分和响应部分组成。@{"calib_text": " `[4248] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4248>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:101
msgid "To find out the type of a service, use the command:"
msgstr "要找出服务的类型，请使用以下命令：@{"calib_text": " `[4249] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4249>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:107
msgid "Let's take a look at turtlesim's ``/clear`` service. In a new terminal, enter the command:"
msgstr "让我们来看一下 turtlesim 的 ``/clear`` 服务。在新的终端中，输入以下命令：@{"calib_text": " `[4250] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4250>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:114
msgid "Which should return:"
msgstr "预期的输出应为：@{"calib_text": " `[4251] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4251>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:120
msgid "The ``Empty`` type means the service call sends no data when making a request and receives no data when receiving a response."
msgstr "``Empty`` 类型表示服务调用在发送请求时不发送任何数据，在接收响应时也不接收任何数据。@{"calib_text": " `[4252] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4252>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:123
msgid "3.1 ros2 service list -t"
msgstr "3.1 ros2 service list -t@{"calib_text": " `[4253] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4253>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:125
msgid "To see the types of all the active services at the same time, you can append the ``--show-types`` option, abbreviated as ``-t``, to the ``list`` command:"
msgstr "要同时查看所有活动服务的类型，可以将``--show-types``选项（缩写为``-t``）附加到``list``命令后面：@{"calib_text": " `[4254] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4254>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:146
msgid "4 ros2 service find"
msgstr "4 ros2 service find@{"calib_text": " `[4255] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4255>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:148
msgid "If you want to find all the services of a specific type, you can use the command:"
msgstr "如果您想找到特定类型的所有服务，请使用以下命令：@{"calib_text": " `[4256] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4256>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:154
msgid "For example, you can find all the ``Empty`` typed services like this:"
msgstr "例如，您可以通过以下方式找到所有“Empty”类型的服务：@{"calib_text": " `[4257] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4257>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:168
msgid "5 ros2 interface show"
msgstr "5 ros2 interface show@{"calib_text": " `[4258] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4258>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:170
msgid "You can call services from the command line, but first you need to know the structure of the input arguments."
msgstr "您可以从命令行调用服务，但首先需要了解输入参数的结构。@{"calib_text": " `[4259] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4259>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:176
msgid "Try this on the ``/clear`` service's type, ``Empty``:"
msgstr "在“/clear”服务的类型“Empty”上尝试一下：@{"calib_text": " `[4260] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4260>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:188
msgid "The ``---`` separates the request structure (above) from the response structure (below). But, as you learned earlier, the ``Empty`` type doesn't send or receive any data. So, naturally, its structure is blank."
msgstr "``---`` 分隔了请求结构（上方）和响应结构（下方）。但是，正如您之前学到的那样，``Empty`` 类型不发送或接收任何数据。因此，它的结构自然为空白。@{"calib_text": " `[4261] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4261>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:192
msgid "Let's introspect a service with a type that sends and receives data, like ``/spawn``. From the results of ``ros2 service list -t``, we know ``/spawn``'s type is ``turtlesim/srv/Spawn``."
msgstr "让我们来查看一个发送和接收数据的服务类型，比如 ``/spawn``。通过 ``ros2 service list -t`` 的结果，我们知道 ``/spawn`` 的类型是 ``turtlesim/srv/Spawn``。@{"calib_text": " `[4262] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4262>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:195
msgid "To see the request and response arguments of the ``/spawn`` service, run the command:"
msgstr "要查看 ``/spawn`` 服务的请求和响应参数，请运行以下命令：@{"calib_text": " `[4263] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4263>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:212
msgid "The information above the ``---`` line tells us the arguments needed to call ``/spawn``. ``x``, ``y`` and ``theta`` determine the 2D pose of the spawned turtle, and ``name`` is clearly optional."
msgstr "``---`` 行上方的信息告诉我们调用 ``/spawn`` 需要的参数。``x``、``y`` 和 ``theta`` 决定了生成的乌龟的二维姿态，而 ``name`` 显然是可选的。@{"calib_text": " `[4264] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4264>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:215
msgid "The information below the line isn't something you need to know in this case, but it can help you understand the data type of the response you get from the call."
msgstr "下划线以下的信息在这种情况下不是您需要了解的内容，但它可以帮助您理解调用返回的响应的数据类型。@{"calib_text": " `[4265] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4265>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:218
msgid "6 ros2 service call"
msgstr "6 ros2 服务调用@{"calib_text": " `[4266] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4266>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:220
msgid "Now that you know what a service type is, how to find a service's type, and how to find the structure of that type's arguments, you can call a service using:"
msgstr "既然您知道了什么是服务类型，如何找到服务的类型，以及如何找到该类型参数的结构，您可以使用以下命令调用服务：@{"calib_text": " `[4267] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4267>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:226
msgid "The ``<arguments>`` part is optional. For example, you know that ``Empty`` typed services don't have any arguments:"
msgstr "``<arguments>`` 部分是可选的。例如，您知道 ``Empty`` 类型的服务没有任何参数：@{"calib_text": " `[4268] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4268>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:233
msgid "This command will clear the turtlesim window of any lines your turtle has drawn."
msgstr "该命令将清除乌龟绘制的所有线条，使得乌龟仿真窗口变空白。@{"calib_text": " `[4269] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4269>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:237
msgid "Now let's spawn a new turtle by calling ``/spawn`` and setting arguments. Input ``<arguments>`` in a service call from the command-line need to be in YAML syntax."
msgstr "现在让我们通过调用``/spawn``并设置参数来生成一个新的乌龟。在从命令行进行服务调用时，输入的``<arguments>``需要使用YAML语法。@{"calib_text": " `[4270] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4270>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:246
msgid "You will get this method-style view of what's happening, and then the service response:"
msgstr "您将会看到方法式的视图，了解正在发生的情况，然后获得服务的响应：@{"calib_text": " `[4271] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4271>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:255
msgid "Your turtlesim window will update with the newly spawned turtle right away:"
msgstr "您的乌龟仿真窗口将立即更新，显示新生成的乌龟：@{"calib_text": " `[4272] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4272>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:262
msgid "Nodes can communicate using services in ROS 2. Unlike a topic - a one way communication pattern where a node publishes information that can be consumed by one or more subscribers - a service is a request/response pattern where a client makes a request to a node providing the service and the service processes the request and generates a response."
msgstr "节点可以使用ROS 2中的服务进行通信。与话题不同，话题是一种单向通信模式，其中一个节点发布信息，可以由一个或多个订阅者消费。服务是一种请求/响应模式，其中客户端向提供服务的节点发出请求，服务处理请求并生成响应。@{"calib_text": " `[4273] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4273>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:265
msgid "You generally don't want to use a service for continuous calls; topics or even actions would be better suited."
msgstr "通常情况下，你不应该使用服务进行连续调用；更适合使用话题或者甚至是动作。@{"calib_text": " `[4274] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4274>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:267
msgid "In this tutorial you used command line tools to identify, introspect, and call services."
msgstr "在本教程中，你使用命令行工具来识别、内省和调用服务。@{"calib_text": " `[4275] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4275>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:272
msgid "In the next tutorial, :doc:`../Understanding-ROS2-Parameters/Understanding-ROS2-Parameters`, you will learn about configuring node settings."
msgstr "在下一个教程中，:doc:`../Understanding-ROS2-Parameters/Understanding-ROS2-Parameters`，你将学习如何配置节点设置。@{"calib_text": " `[4276] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4276>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:277
msgid "Check out `this tutorial <https://discourse.ubuntu.com/t/call-services-in-ros-2/15261>`_; it's an excellent realistic application of ROS services using a Robotis robot arm."
msgstr "请查看 `这个教程 <https://discourse.ubuntu.com/t/call-services-in-ros-2/15261>`_；这是一个使用Robotis机械臂进行ROS服务的出色实际应用。@{"calib_text": " `[4277] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4277>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:8
msgid "Understanding topics"
msgstr "理解话题@{"calib_text": " `[4278] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4278>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:10
msgid "**Goal:** Use rqt_graph and command line tools to introspect ROS 2 topics."
msgstr "**目标：** 使用rqt_graph和命令行工具来审查ROS 2话题。@{"calib_text": " `[4279] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4279>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:23
msgid "ROS 2 breaks complex systems down into many modular nodes. Topics are a vital element of the ROS graph that act as a bus for nodes to exchange messages."
msgstr "ROS 2将复杂系统分解为许多模块化节点。话题是ROS图中的重要组成部分，作为节点交换消息的总线。@{"calib_text": " `[4280] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4280>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:28
msgid "A node may publish data to any number of topics and simultaneously have subscriptions to any number of topics."
msgstr "一个节点可以向任意数量的主题发布数据，并同时订阅任意数量的主题。@{"calib_text": " `[4281] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4281>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:32
msgid "Topics are one of the main ways in which data is moved between nodes and therefore between different parts of the system."
msgstr "主题是数据在节点之间以及系统不同部分之间传递的主要方式之一。@{"calib_text": " `[4282] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4282>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:38
msgid "The :doc:`previous tutorial <../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` provides some useful background information on nodes that is built upon here."
msgstr "之前的教程<../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>`提供了一些关于节点的有用背景信息，这里进一步构建了该信息。@{"calib_text": " `[4283] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4283>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:48
msgid "By now you should be comfortable starting up turtlesim."
msgstr "到目前为止，你应该已经熟悉如何启动turtlesim。@{"calib_text": " `[4284] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4284>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:62
msgid "Recall from the :doc:`previous tutorial <../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` that the names of these nodes are ``/turtlesim`` and ``/teleop_turtle`` by default."
msgstr "回顾一下之前的教程（:doc:`上一个教程 <../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>`），这些节点的名称默认情况下是``/turtlesim``和``/teleop_turtle``。@{"calib_text": " `[4285] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4285>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:66
msgid "2 rqt_graph"
msgstr "2 rqt_graph@{"calib_text": " `[4286] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4286>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:68
msgid "Throughout this tutorial, we will use ``rqt_graph`` to visualize the changing nodes and topics, as well as the connections between them."
msgstr "在本教程中，我们将使用``rqt_graph``来可视化节点和话题的变化，以及它们之间的连接。@{"calib_text": " `[4287] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4287>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:70
msgid "The :doc:`turtlesim tutorial <../Introducing-Turtlesim/Introducing-Turtlesim>` tells you how to install rqt and all its plugins, including ``rqt_graph``."
msgstr "在 :doc:`turtlesim 教程 <../Introducing-Turtlesim/Introducing-Turtlesim>`中，介绍了如何安装 rqt 以及其包括的所有插件，包括``rqt_graph``。@{"calib_text": " `[4288] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4288>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:72
msgid "To run rqt_graph, open a new terminal and enter the command:"
msgstr "要运行 rqt_graph，请打开一个新的终端并输入以下命令：@{"calib_text": " `[4289] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4289>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:78
msgid "You can also open rqt_graph by opening ``rqt`` and selecting **Plugins** > **Introspection** > **Node Graph**."
msgstr "您也可以通过打开 ``rqt`` 并选择 **Plugins** > **Introspection** > **Node Graph** 来打开 rqt_graph。@{"calib_text": " `[4290] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4290>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:82
msgid "You should see the above nodes and topic, as well as two actions around the periphery of the graph (let's ignore those for now). If you hover your mouse over the topic in the center, you'll see the color highlighting like in the image above."
msgstr "您应该能够看到上述的节点和主题，以及图形周围的两个操作（暂时忽略它们）。如果将鼠标悬停在中心的主题上，您会看到像上面图片中那样的颜色高亮显示。@{"calib_text": " `[4291] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4291>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:85
msgid "The graph is depicting how the ``/turtlesim`` node and the ``/teleop_turtle`` node are communicating with each other over a topic. The ``/teleop_turtle`` node is publishing data (the keystrokes you enter to move the turtle around) to the ``/turtle1/cmd_vel`` topic, and the ``/turtlesim`` node is subscribed to that topic to receive the data."
msgstr "该图形描述了 ``/turtlesim`` 节点和 ``/teleop_turtle`` 节点之间如何通过一个主题进行通信。``/teleop_turtle`` 节点将数据（您输入的按键操作来移动乌龟）发布到 ``/turtle1/cmd_vel`` 主题上，而 ``/turtlesim`` 节点订阅该主题以接收数据。@{"calib_text": " `[4292] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4292>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:88
msgid "The highlighting feature of rqt_graph is very helpful when examining more complex systems with many nodes and topics connected in many different ways."
msgstr "rqt_graph的突出显示功能在检查具有许多以多种不同方式连接的节点和主题的更复杂系统时非常有帮助。@{"calib_text": " `[4293] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4293>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:90
msgid "rqt_graph is a graphical introspection tool. Now we'll look at some command line tools for introspecting topics."
msgstr "rqt_graph是一个图形化内省工具。现在我们将看一些用于内省主题的命令行工具。@{"calib_text": " `[4294] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4294>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:95
msgid "3 ros2 topic list"
msgstr "3. ros2 topic list@{"calib_text": " `[4295] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4295>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:97
msgid "Running the ``ros2 topic list`` command in a new terminal will return a list of all the topics currently active in the system:"
msgstr "在新终端中运行``ros2 topic list``命令将返回系统中当前活动的所有主题的列表：@{"calib_text": " `[4296] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4296>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:107
msgid "``ros2 topic list -t`` will return the same list of topics, this time with the topic type appended in brackets:"
msgstr "``ros2 topic list -t`` 将返回相同的主题列表，这次在括号中附加了主题类型：@{"calib_text": " `[4297] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4297>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:117
msgid "These attributes, particularly the type, are how nodes know they're talking about the same information as it moves over topics."
msgstr "特别是类型属性是节点了解它们正在通过主题传输相同信息的方式。@{"calib_text": " `[4298] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4298>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:119
msgid "If you're wondering where all these topics are in rqt_graph, you can uncheck all the boxes under **Hide:**"
msgstr "如果你想知道在 rqt_graph 中所有这些主题的位置，在 **隐藏：** 下取消选中所有复选框：@{"calib_text": " `[4299] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4299>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:123
msgid "For now, though, leave those options checked to avoid confusion."
msgstr "不过现在，保留这些选项的选择以避免混淆。@{"calib_text": " `[4300] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4300>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:126
msgid "4 ros2 topic echo"
msgstr "4 ros2 topic echo@{"calib_text": " `[4301] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4301>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:128
msgid "To see the data being published on a topic, use:"
msgstr "要查看在话题上发布的数据，请使用：@{"calib_text": " `[4302] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4302>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:134
msgid "Since we know that ``/teleop_turtle`` publishes data to ``/turtlesim`` over the ``/turtle1/cmd_vel`` topic, let's use ``echo`` to introspect that topic:"
msgstr "由于我们知道 ``/teleop_turtle`` 在 ``/turtle1/cmd_vel`` 话题上向 ``/turtlesim`` 发布数据，让我们使用 ``echo`` 来检查该话题：@{"calib_text": " `[4303] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4303>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:140
msgid "At first, this command won't return any data. That's because it's waiting for ``/teleop_turtle`` to publish something."
msgstr "刚开始，这个命令不会返回任何数据。这是因为它正在等待 ``/teleop_turtle`` 发布一些东西。@{"calib_text": " `[4304] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4304>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:143
msgid "Return to the terminal where ``turtle_teleop_key`` is running and use the arrows to move the turtle around. Watch the terminal where your ``echo`` is running at the same time, and you'll see position data being published for every movement you make:"
msgstr "返回到运行``turtle_teleop_key``的终端，并使用箭头键来移动乌龟。同时观察运行``echo``的终端，你将会看到每次移动时发布的位置数据：@{"calib_text": " `[4305] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4305>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:158
msgid "Now return to rqt_graph and uncheck the **Debug** box."
msgstr "现在返回到rqt_graph并取消选择**Debug**框。@{"calib_text": " `[4306] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4306>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:162
msgid "``/_ros2cli_26646`` is the node created by the ``echo`` command we just ran (the number might be different). Now you can see that the publisher is publishing data over the ``cmd_vel`` topic, and two subscribers are subscribed to it."
msgstr "``/_ros2cli_26646``是刚刚我们运行的``echo``命令创建的节点（数字可能不同）。现在你可以看到发布者正在通过``cmd_vel``主题发布数据，而两个订阅者正在订阅它。@{"calib_text": " `[4307] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4307>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:166
msgid "5 ros2 topic info"
msgstr "5 ros2 topic info@{"calib_text": " `[4308] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4308>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:168
msgid "Topics don't have to only be one-to-one communication; they can be one-to-many, many-to-one, or many-to-many."
msgstr "主题不仅可以是一对一的通信，还可以是一对多的、多对一的或多对多的通信。@{"calib_text": " `[4309] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4309>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:170
msgid "Another way to look at this is running:"
msgstr "另一种理解方式是运行：@{"calib_text": " `[4310] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4310>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:187
msgid "Nodes send data over topics using messages. Publishers and subscribers must send and receive the same type of message to communicate."
msgstr "节点使用消息在主题上发送数据。发布者和订阅者必须发送和接收相同类型的消息来进行通信。@{"calib_text": " `[4311] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4311>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:190
msgid "The topic types we saw earlier after running ``ros2 topic list -t`` let us know what message type is used on each topic. Recall that the ``cmd_vel`` topic has the type:"
msgstr "在运行 ``ros2 topic list -t`` 后，我们可以看到之前提到的主题类型，它们告诉我们每个主题使用的消息类型。回想一下，``cmd_vel`` 主题的类型是：@{"calib_text": " `[4312] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4312>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:197
msgid "This means that in the package ``geometry_msgs`` there is a ``msg`` called ``Twist``."
msgstr "这意味着在``geometry_msgs``包中有一个名为``Twist``的``msg``。@{"calib_text": " `[4313] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4313>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:199
msgid "Now we can run ``ros2 interface show <msg type>`` on this type to learn its details. Specifically, what structure of data the message expects."
msgstr "现在我们可以在此类型上运行``ros2 interface show <msg type>``以了解其详细信息。具体来说，消息期望的数据结构是什么样的。@{"calib_text": " `[4314] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4314>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:206
msgid "For the message type from above it yields:"
msgstr "对于上述消息类型，它产生以下结果：@{"calib_text": " `[4315] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4315>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:221
msgid "This tells you that the ``/turtlesim`` node is expecting a message with two vectors, ``linear`` and ``angular``, of three elements each. If you recall the data we saw ``/teleop_turtle`` passing to ``/turtlesim`` with the ``echo`` command, it's in the same structure:"
msgstr "这告诉你``/turtlesim``节点期望接收一个带有两个向量``linear``和``angular``的消息，每个向量都有三个元素。如果你回想一下我们使用``echo``命令看到``/teleop_turtle``传递给``/turtlesim``的数据，它具有相同的结构：@{"calib_text": " `[4316] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4316>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:237
msgid "7 ros2 topic pub"
msgstr "7 ros2 topic pub@{"calib_text": " `[4317] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4317>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:239
msgid "Now that you have the message structure, you can publish data onto a topic directly from the command line using:"
msgstr "现在您已经有了消息结构，您可以直接从命令行发布数据到一个话题上，使用以下命令：@{"calib_text": " `[4318] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4318>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:245
msgid "The ``'<args>'`` argument is the actual data you'll pass to the topic, in the structure you just discovered in the previous section."
msgstr "``'<args>'`` 参数是您将传递给话题的实际数据，其结构正如您在前一节中了解到的。@{"calib_text": " `[4319] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4319>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:247
msgid "It's important to note that this argument needs to be input in YAML syntax. Input the full command like so:"
msgstr "请注意，这个参数需要以 YAML 语法输入。请输入完整的命令，如下所示：@{"calib_text": " `[4320] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4320>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:254
msgid "``--once`` is an optional argument meaning “publish one message then exit”."
msgstr "``--once`` 是一个可选参数，表示“发布一条消息后退出”。@{"calib_text": " `[4321] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4321>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:256
msgid "You will see the following output in the terminal:"
msgstr "您将在终端中看到以下输出：@{"calib_text": " `[4322] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4322>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:263
msgid "And you will see your turtle move like so:"
msgstr "然后您将看到乌龟移动如下：@{"calib_text": " `[4323] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4323>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:267
msgid "The turtle (and commonly the real robots which it is meant to emulate) require a steady stream of commands to operate continuously. So, to get the turtle to keep moving, you can run:"
msgstr "乌龟（以及通常用于模拟乌龟的真实机器人）需要持续不断地接收命令才能保持运动。因此，要让乌龟持续移动，您可以运行以下命令：@{"calib_text": " `[4324] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4324>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:274
msgid "The difference here is the removal of the ``--once`` option and the addition of the ``--rate 1`` option, which tells ``ros2 topic pub`` to publish the command in a steady stream at 1 Hz."
msgstr "这里的区别是删除了``--once``选项，并增加了``--rate 1``选项，告诉``ros2 topic pub``以1 Hz的恒定速率发布命令。@{"calib_text": " `[4325] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4325>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:278
msgid "You can refresh rqt_graph to see what's happening graphically. You will see that the ``ros2 topic pub ...`` node (``/_ros2cli_30358``) is publishing over the ``/turtle1/cmd_vel`` topic, which is being received by both the ``ros2 topic echo ...`` node (``/_ros2cli_26646``) and the ``/turtlesim`` node now."
msgstr "你可以刷新rqt_graph来查看图形化的情况。你会看到``ros2 topic pub ...``节点（``/_ros2cli_30358``）正在``/turtle1/cmd_vel``话题上发布消息，这些消息被``ros2 topic echo ...``节点（``/_ros2cli_26646``）和``/turtlesim``节点接收。@{"calib_text": " `[4326] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4326>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:283
msgid "Finally, you can run ``echo`` on the ``pose`` topic and recheck rqt_graph:"
msgstr "最后，你可以在``pose``话题上运行``echo``命令，并重新检查rqt_graph：@{"calib_text": " `[4327] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4327>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:291
msgid "You can see that the ``/turtlesim`` node is also publishing to the ``pose`` topic, which the new ``echo`` node has subscribed to."
msgstr "你会看到``/turtlesim``节点也在向``pose``话题发布消息，而新的``echo``节点已经订阅了该话题。@{"calib_text": " `[4328] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4328>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:294
msgid "8 ros2 topic hz"
msgstr "8 ros2 topic hz@{"calib_text": " `[4329] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4329>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:296
msgid "For one last introspection on this process, you can view the rate at which data is published using:"
msgstr "作为对该过程的最后一次内省，您可以使用以下命令查看数据发布的速率：@{"calib_text": " `[4330] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4330>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:302
msgid "It will return data on the rate at which the ``/turtlesim`` node is publishing data to the ``pose`` topic."
msgstr "它将返回``/turtlesim``节点向``pose``主题发布数据的速率。@{"calib_text": " `[4331] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4331>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:309
msgid "Recall that you set the rate of ``turtle1/cmd_vel`` to publish at a steady 1 Hz using ``ros2 topic pub --rate 1``. If you run the above command with ``turtle1/cmd_vel`` instead of ``turtle1/pose``, you will see an average reflecting that rate."
msgstr "回想一下，您使用``ros2 topic pub --rate 1``将``turtle1/cmd_vel``的速率设置为稳定的1 Hz。如果您使用``turtle1/cmd_vel``而不是``turtle1/pose``运行上述命令，则会看到反映该速率的平均值。@{"calib_text": " `[4332] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4332>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:317
msgid "9 Clean up"
msgstr "9 清理@{"calib_text": " `[4333] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4333>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:319
msgid "At this point you'll have a lot of nodes running. Don't forget to stop them by entering ``Ctrl+C`` in each terminal."
msgstr "此时你会有很多正在运行的节点。不要忘记在每个终端中输入``Ctrl+C``来停止它们。@{"calib_text": " `[4334] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4334>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:325
msgid "Nodes publish information over topics, which allows any number of other nodes to subscribe to and access that information. In this tutorial you examined the connections between several nodes over topics using rqt_graph and command line tools. You should now have a good idea of how data moves around a ROS 2 system."
msgstr "节点通过主题发布信息，允许任意数量的其他节点订阅和访问该信息。在本教程中，您使用rqt_graph和命令行工具检查了几个节点之间的连接。现在您应该对数据在ROS 2系统中如何传输有一个很好的了解。@{"calib_text": " `[4335] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4335>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:332
msgid "Next you'll learn about another communication type in the ROS graph with the tutorial :doc:`../Understanding-ROS2-Services/Understanding-ROS2-Services`."
msgstr "接下来，您将在ROS图中学习另一种通信类型，可以参考教程：:doc:`../Understanding-ROS2-Services/Understanding-ROS2-Services`。@{"calib_text": " `[4336] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4336>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:8
msgid "Using ``rqt_console`` to view logs"
msgstr "使用 ``rqt_console`` 查看日志@{"calib_text": " `[4337] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4337>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:10
msgid "**Goal:** Get to know ``rqt_console``, a tool for introspecting log messages."
msgstr "**目标：** 了解 ``rqt_console``，一种用于查看日志消息的工具。@{"calib_text": " `[4338] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4338>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:23
msgid "``rqt_console`` is a GUI tool used to introspect log messages in ROS 2. Typically, log messages show up in your terminal. With ``rqt_console``, you can collect those messages over time, view them closely and in a more organized manner, filter them, save them and even reload the saved files to introspect at a different time."
msgstr "``rqt_console`` 是一个用于在ROS 2中检查日志消息的图形界面工具。通常，日志消息会显示在终端中。使用 ``rqt_console``，您可以随时间收集这些消息，以更加仔细和有组织的方式查看它们，对它们进行过滤、保存，甚至可以重新加载保存的文件以在不同的时间进行检查。@{"calib_text": " `[4339] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4339>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:27
msgid "Nodes use logs to output messages concerning events and status in a variety of ways. Their content is usually informational, for the sake of the user."
msgstr "节点使用日志来输出与事件和状态有关的消息，以各种方式进行。它们的内容通常是信息性的，为了用户的利益。@{"calib_text": " `[4340] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4340>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:33
msgid "You will need :doc:`rqt_console and turtlesim <../Introducing-Turtlesim/Introducing-Turtlesim>` installed."
msgstr "你需要安装 :doc:`rqt_console and turtlesim <../Introducing-Turtlesim/Introducing-Turtlesim>`。@{"calib_text": " `[4341] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4341>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:44
msgid "Start ``rqt_console`` in a new terminal with the following command:"
msgstr "在新的终端窗口中使用以下命令启动 ``rqt_console``：@{"calib_text": " `[4342] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4342>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:50
msgid "The ``rqt_console`` window will open:"
msgstr "``rqt_console`` 窗口将会打开：@{"calib_text": " `[4343] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4343>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:54
msgid "The first section of the console is where log messages from your system will display."
msgstr "控制台的第一部分用于显示系统的日志消息。@{"calib_text": " `[4344] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4344>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:56
msgid "In the middle you have the option to filter messages by excluding severity levels. You can also add more exclusion filters using the plus-sign button to the right."
msgstr "在中间，您可以选择通过排除严重级别来过滤消息。您还可以使用右侧的加号按钮添加更多的排除过滤器。@{"calib_text": " `[4345] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4345>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:59
msgid "The bottom section is for highlighting messages that include a string you input. You can add more filters to this section as well."
msgstr "底部的部分是用于突出显示包含您输入的字符串的消息。您也可以在此部分添加更多的过滤器。@{"calib_text": " `[4346] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4346>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:62
msgid "Now start ``turtlesim`` in a new terminal with the following command:"
msgstr "现在在新终端中使用以下命令启动 ``turtlesim`` ：@{"calib_text": " `[4347] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4347>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:69
msgid "2 Messages on rqt_console"
msgstr "rqt_console 上的 2 条消息@{"calib_text": " `[4348] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4348>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:71
msgid "To produce log messages for ``rqt_console`` to display, let's have the turtle run into the wall. In a new terminal, enter the ``ros2 topic pub`` command (discussed in detail in the :doc:`topics tutorial <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`) below:"
msgstr "为了生成供``rqt_console``显示的日志消息，让乌龟撞到墙上。在新的终端中输入``ros2 topic pub``命令（在:doc:`主题教程 <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`中有详细讨论），如下所示：@{"calib_text": " `[4349] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4349>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:78
msgid "Since the above command is publishing the topic at a steady rate, the turtle is continuously running into the wall. In ``rqt_console`` you will see the same message with the ``Warn`` severity level displayed over and over, like so:"
msgstr "由于上述命令以固定速率发布主题，乌龟会持续撞墙。在``rqt_console``中，你会看到相同的消息以``Warn``严重级别一遍又一遍地显示，如下所示：@{"calib_text": " `[4350] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4350>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:83
msgid "Press ``Ctrl+C`` in the terminal where you ran the ``ros2 topic pub`` command to stop your turtle from running into the wall."
msgstr "在你运行``ros2 topic pub``命令的终端中按下``Ctrl+C``，停止乌龟撞墙。@{"calib_text": " `[4351] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4351>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:86
msgid "3 Logger levels"
msgstr "3个日志记录器级别@{"calib_text": " `[4352] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4352>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:88
msgid "ROS 2's logger levels are ordered by severity:"
msgstr "ROS 2的记录器级别按严重程度排序：@{"calib_text": " `[4353] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4353>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:98
msgid "There is no exact standard for what each level indicates, but it's safe to assume that:"
msgstr "关于每个级别表示的确切标准并没有精确的规定，但可以安全地假设：@{"calib_text": " `[4354] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4354>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:100
msgid "``Fatal`` messages indicate the system is going to terminate to try to protect itself from detriment."
msgstr "``Fatal``（致命）消息表明系统将终止以试图保护自身免受损害。@{"calib_text": " `[4355] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4355>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:101
msgid "``Error`` messages indicate significant issues that won't necessarily damage the system, but are preventing it from functioning properly."
msgstr "``Error``（错误）消息表示存在重要问题，这些问题不一定会损坏系统，但会阻止其正常运行。@{"calib_text": " `[4356] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4356>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:102
msgid "``Warn`` messages indicate unexpected activity or non-ideal results that might represent a deeper issue, but don't harm functionality outright."
msgstr "``Warn`` 消息表示意外活动或非理想结果，可能表示更深层问题，但不会直接影响功能。@{"calib_text": " `[4357] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4357>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:103
msgid "``Info`` messages indicate event and status updates that serve as a visual verification that the system is running as expected."
msgstr "``Info`` 消息表示事件和状态更新，作为系统正常运行的可视验证。@{"calib_text": " `[4358] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4358>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:104
msgid "``Debug`` messages detail the entire step-by-step process of the system execution."
msgstr "``Debug`` 消息详细描述系统执行的每个步骤。@{"calib_text": " `[4359] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4359>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:106
msgid "The default level is ``Info``. You will only see messages of the default severity level and more-severe levels."
msgstr "默认级别是 ``Info``。只会看到默认严重级别和更严重级别的消息。@{"calib_text": " `[4360] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4360>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:109
msgid "Normally, only ``Debug`` messages are hidden because they're the only level less severe than ``Info``. For example, if you set the default level to ``Warn``, you would only see messages of severity ``Warn``, ``Error``, and ``Fatal``."
msgstr "通常，只有``Debug``级别的消息被隐藏，因为它们是比``Info``级别更轻微的级别。例如，如果您将默认级别设置为``Warn``，您只会看到``Warn``、``Error``和``Fatal``严重程度的消息。@{"calib_text": " `[4361] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4361>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:113
msgid "3.1 Set the default logger level"
msgstr "3.1 设置默认日志记录器级别@{"calib_text": " `[4362] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4362>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:115
msgid "You can set the default logger level when you first run the ``/turtlesim`` node using remapping. Enter the following command in your terminal:"
msgstr "您可以在首次运行``/turtlesim``节点时使用重映射设置默认日志记录器级别。在终端中输入以下命令：@{"calib_text": " `[4363] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4363>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:122
msgid "Now you won't see the initial ``Info`` level messages that came up in the console last time you started ``turtlesim``. That's because ``Info`` messages are lower priority than the new default severity, ``Warn``."
msgstr "现在您将不会看到上次启动``turtlesim``时在控制台上出现的初始``Info``级别的消息。这是因为``Info``消息的优先级低于新的默认严重程度``Warn``。@{"calib_text": " `[4364] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4364>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:128
msgid "``rqt_console`` can be very helpful if you need to closely examine the log messages from your system. You might want to examine log messages for any number of reasons, usually to find out where something went wrong and the series of events leading up to that."
msgstr "如果您需要仔细检查系统的日志消息，``rqt_console``可能非常有帮助。您可能出于各种原因想要检查日志消息，通常是为了找出出错的地方以及导致该问题的事件序列。@{"calib_text": " `[4365] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4365>`_ "}@"


#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:134
msgid "The next tutorial will teach you about starting multiple nodes at once with :doc:`ROS 2 Launch <../Launching-Multiple-Nodes/Launching-Multiple-Nodes>`."
msgstr "下一个教程将教您如何使用 :doc:`ROS 2 Launch <../Launching-Multiple-Nodes/Launching-Multiple-Nodes>` 一次启动多个节点。@{"calib_text": " `[4366] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4366>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries.rst:2
msgid "Beginner: Client libraries"
msgstr "初学者：客户端库@{"calib_text": " `[] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4367>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:9
msgid "Using ``colcon`` to build packages"
msgstr "使用 ``colcon`` 构建软件包@{"calib_text": " `[4368] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4368>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:15
msgid "**Goal:** Build a ROS 2 workspace with ``colcon``."
msgstr "**目标：**使用``colcon``构建一个ROS 2工作空间。@{"calib_text": " `[4369] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4369>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:21
msgid "This is a brief tutorial on how to create and build a ROS 2 workspace with ``colcon``. It is a practical tutorial and not designed to replace the core documentation."
msgstr "这是一个简要教程，介绍如何使用``colcon``创建和构建ROS 2工作空间。它是一个实用教程，不旨在取代核心文档。@{"calib_text": " `[4370] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4370>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:27
msgid "``colcon`` is an iteration on the ROS build tools ``catkin_make``, ``catkin_make_isolated``, ``catkin_tools`` and ``ament_tools``. For more information on the design of colcon see `this document <https://design.ros2.org/articles/build_tool.html>`__."
msgstr "``colcon``是对ROS构建工具``catkin_make``、``catkin_make_isolated``、``catkin_tools``和``ament_tools``的改进。有关colcon设计的更多信息，请参阅`此文档 <https://design.ros2.org/articles/build_tool.html>`__。@{"calib_text": " `[4371] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4371>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:30
msgid "The source code can be found in the `colcon GitHub organization <https://github.com/colcon>`__."
msgstr "源代码可以在`colcon GitHub组织 <https://github.com/colcon>`__中找到。@{"calib_text": " `[4372] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4372>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:36
msgid "Install colcon"
msgstr "安装 colcon@{"calib_text": " `[4373] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4373>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:60
msgid "Install ROS 2"
msgstr "安装 ROS 2@{"calib_text": " `[4374] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4374>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:62
msgid "To build the samples, you will need to install ROS 2."
msgstr "要构建示例，您需要安装 ROS 2。@{"calib_text": " `[4375] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4375>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:64
msgid "Follow the :doc:`installation instructions <../../Installation>`."
msgstr "请按照 :doc:`安装说明 <../../Installation>` 进行操作。@{"calib_text": " `[4376] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4376>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:66
msgid "If installing from Debian packages, this tutorial requires the :ref:`desktop installation <linux-install-debians-install-ros-2-packages>`."
msgstr "如果从Debian软件包安装，请参考 :ref:`桌面安装 <linux-install-debians-install-ros-2-packages>` 进行教程。@{"calib_text": " `[4377] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4377>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:69
msgid "Basics"
msgstr "基础知识@{"calib_text": " `[] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4378>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:71
msgid "A ROS workspace is a directory with a particular structure. Commonly there is a ``src`` subdirectory. Inside that subdirectory is where the source code of ROS packages will be located. Typically the directory starts otherwise empty."
msgstr "ROS工作空间是一个具有特定结构的目录。通常有一个 ``src`` 子目录。在该子目录下是ROS软件包的源代码所在位置。通常该目录开始时为空。@{"calib_text": " `[4379] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4379>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:76
msgid "colcon does out of source builds. By default it will create the following directories as peers of the ``src`` directory:"
msgstr "colcon进行外部构建。默认情况下，它会创建以下目录作为 ``src`` 目录的同级目录：@{"calib_text": " `[4380] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4380>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:79
msgid "The ``build`` directory will be where intermediate files are stored. For each package a subfolder will be created in which e.g. CMake is being invoked."
msgstr "``build`` 目录将用于存储中间文件。对于每个软件包，将在其中创建一个子文件夹，例如在该子文件夹中调用 CMake。@{"calib_text": " `[4381] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4381>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:81
msgid "The ``install`` directory is where each package will be installed to. By default each package will be installed into a separate subdirectory."
msgstr "``install`` 目录是每个软件包将要安装到的位置。默认情况下，每个软件包将被安装到单独的子目录中。@{"calib_text": " `[4382] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4382>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:83
msgid "The ``log`` directory contains various logging information about each colcon invocation."
msgstr "``log`` 目录包含有关每个 colcon 调用的各种日志信息。@{"calib_text": " `[4383] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4383>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:85
msgid "Compared to catkin there is no ``devel`` directory."
msgstr "与 catkin 相比，没有 ``devel`` 目录。@{"calib_text": " `[4384] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4384>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:88
msgid "Create a workspace"
msgstr "创建一个工作空间@{"calib_text": " `[4385] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4385>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:90
msgid "First, create a directory (``ros2_ws``) to contain our workspace:"
msgstr "首先，创建一个目录（``ros2_ws``）来容纳我们的工作空间：@{"calib_text": " `[4386] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4386>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:115
msgid "At this point the workspace contains a single empty directory ``src``:"
msgstr "此时，工作空间中只包含一个空目录 ``src``：@{"calib_text": " `[4387] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4387>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:125
msgid "Add some sources"
msgstr "添加一些源文件@{"calib_text": " `[4388] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4388>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:127
msgid "Let's clone the `examples <https://github.com/ros2/examples>`__ repository into the ``src`` directory of the workspace:"
msgstr "将 `examples <https://github.com/ros2/examples>`__ 存储库克隆到工作区的 ``src`` 目录中：@{"calib_text": " `[4389] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4389>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:133
msgid "Now the workspace should have the source code to the ROS 2 examples:"
msgstr "现在工作区应该有 ROS 2 示例的源代码：@{"calib_text": " `[4390] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4390>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:149
msgid "Source an underlay"
msgstr "源目录@{"calib_text": " `[4391] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4391>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:151
msgid "It is important that we have sourced the environment for an existing ROS 2 installation that will provide our workspace with the necessary build dependencies for the example packages. This is achieved by sourcing the setup script provided by a binary installation or a source installation, ie. another colcon workspace (see :doc:`Installation <../../Installation>`). We call this environment an **underlay**."
msgstr "很重要的是，我们已经为现有的 ROS 2 安装环境提供了所需的构建依赖项，以便为示例软件包提供支持。这可以通过对二进制安装或源码安装提供的设置脚本进行实现，即使用另一个 colcon 工作区提供的设置脚本（参见 :doc:`Installation <../../Installation>`）。我们称这个环境为 **源目录**。@{"calib_text": " `[4392] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4392>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:155
msgid "Our workspace, ``ros2_ws``, will be an **overlay** on top of the existing ROS 2 installation. In general, it is recommended to use an overlay when you plan to iterate on a small number of packages, rather than putting all of your packages into the same workspace."
msgstr "我们的工作空间``ros2_ws``将作为现有ROS 2安装的**覆盖层**。一般而言，建议在计划迭代少量软件包时使用覆盖层，而不是将所有软件包放入同一个工作空间中。@{"calib_text": " `[4393] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4393>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:159
msgid "Build the workspace"
msgstr "构建工作空间@{"calib_text": " `[4394] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4394>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:163
msgid "To build packages on Windows you need to be in a Visual Studio environment, see :ref:`Building the ROS 2 Code <windows-dev-build-ros2>` for more details."
msgstr "要在Windows上构建软件包，您需要处于Visual Studio环境中，请参阅 :ref:`构建ROS 2代码 <windows-dev-build-ros2>` 获取更多详细信息。@{"calib_text": " `[4395] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4395>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:165
msgid "In the root of the workspace, run ``colcon build``. Since build types such as ``ament_cmake`` do not support the concept of the ``devel`` space and require the package to be installed, colcon supports the option ``--symlink-install``. This allows the installed files to be changed by changing the files in the ``source`` space (e.g. Python files or other non-compiled resources) for faster iteration."
msgstr "在工作空间的根目录下运行``colcon build``命令。由于``ament_cmake``等构建类型不支持``devel``空间的概念，而且需要安装软件包，因此colcon支持选项``--symlink-install``。这允许通过更改``source``空间中的文件（例如Python文件或其他非编译资源）来更改已安装文件，以便实现更快的迭代。@{"calib_text": " `[4396] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4396>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:189 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:206 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:301
msgid "Windows doesn't allow long paths, so ``merge-install`` will combine all the paths into the ``install`` directory."
msgstr "Windows 不允许使用过长的路径，所以 ``merge-install`` 将会把所有路径合并到 ``install`` 目录中。@{"calib_text": " `[4397] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4397>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:191
msgid "After the build is finished, we should see the ``build``, ``install``, and ``log`` directories:"
msgstr "在构建完成后，我们应该能够看到 ``build``、``install`` 和 ``log`` 目录：@{"calib_text": " `[4398] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4398>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:206
msgid "Run tests"
msgstr "运行测试@{"calib_text": " `[4399] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4399>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:208
msgid "To run tests for the packages we just built, run the following:"
msgstr "为了对刚刚构建的软件包运行测试，请执行以下操作：@{"calib_text": " `[4400] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4400>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:226
msgid "Remember to use a ``x64 Native Tools Command Prompt for VS 2019`` for executing the following command, as we are going to build a workspace."
msgstr "请记得使用``x64 Native Tools Command Prompt for VS 2019``来执行下面的命令，因为我们要构建一个工作空间。@{"calib_text": " `[4401] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4401>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:232
msgid "You also need to specify ``--merge-install`` here since we used it for building above."
msgstr "在这里还需要指定``--merge-install``，因为我们在上面使用了它来进行构建。@{"calib_text": " `[4402] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4402>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:237
msgid "Source the environment"
msgstr "加载环境变量@{"calib_text": " `[4403] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4403>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:239
msgid "When colcon has completed building successfully, the output will be in the ``install`` directory. Before you can use any of the installed executables or libraries, you will need to add them to your path and library paths. colcon will have generated bash/bat files in the ``install`` directory to help set up the environment. These files will add all of the required elements to your path and library paths as well as provide any bash or shell commands exported by packages."
msgstr "当colcon成功构建完成后，输出将位于``install``目录中。在您可以使用任何已安装的可执行文件或库之前，您需要将它们添加到您的路径和库路径中。colcon会在``install``目录中生成bash/bat文件来帮助设置环境。这些文件将会将所有所需的元素添加到您的路径和库路径中，并提供由软件包导出的任何bash或shell命令。@{"calib_text": " `[4404] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4404>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:264
msgid "Or with Powershell:"
msgstr "使用Powershell：@{"calib_text": " `[4405] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4405>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:271
msgid "Try a demo"
msgstr "试用演示@{"calib_text": " `[4406] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4406>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:273
msgid "With the environment sourced, we can run executables built by colcon. Let's run a subscriber node from the examples:"
msgstr "在环境配置完成后，我们可以运行由colcon构建的可执行文件。让我们从示例中运行一个订阅者节点：@{"calib_text": " `[4407] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4407>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:280
msgid "In another terminal, let's run a publisher node (don't forget to source the setup script):"
msgstr "在另一个终端中，让我们运行一个发布者节点（不要忘记配置脚本）：@{"calib_text": " `[4408] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4408>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:286
msgid "You should see messages from the publisher and subscriber with numbers incrementing."
msgstr "你应该能够看到发布者和订阅者的消息，并且消息编号会递增。@{"calib_text": " `[4409] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4409>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:289
msgid "Create your own package"
msgstr "创建你自己的包@{"calib_text": " `[4410] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4410>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:291
msgid "colcon uses the ``package.xml`` specification defined in `REP 149 <https://www.ros.org/reps/rep-0149.html>`__ (`format 2 <https://www.ros.org/reps/rep-0140.html>`__ is also supported)."
msgstr "colcon使用在`REP 149 <https://www.ros.org/reps/rep-0149.html>`__中定义的``package.xml``规范（也支持`format 2 <https://www.ros.org/reps/rep-0140.html>`__）。@{"calib_text": " `[4411] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4411>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:293
msgid "colcon supports multiple build types. The recommended build types are ``ament_cmake`` and ``ament_python``. Also supported are pure ``cmake`` packages."
msgstr "colcon支持多种构建类型。推荐的构建类型是``ament_cmake``和``ament_python``。还支持纯``cmake``包。@{"calib_text": " `[4412] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4412>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:297
msgid "An example of an ``ament_python`` build is the `ament_index_python package <https://github.com/ament/ament_index/tree/humble/ament_index_python>`__ , where the setup.py is the primary entry point for building."
msgstr "``ament_python``构建的一个示例是`ament_index_python包 <https://github.com/ament/ament_index/tree/humble/ament_index_python>`__，其中setup.py是构建的主要入口点。@{"calib_text": " `[4413] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4413>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:299
msgid "A package such as `demo_nodes_cpp <https://github.com/ros2/demos/tree/humble/demo_nodes_cpp>`__ uses the ``ament_cmake`` build type, and uses CMake as the build tool."
msgstr "诸如`demo_nodes_cpp <https://github.com/ros2/demos/tree/humble/demo_nodes_cpp>`__的包使用``ament_cmake``构建类型，并使用CMake作为构建工具。@{"calib_text": " `[4414] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4414>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:301
msgid "For convenience, you can use the tool ``ros2 pkg create`` to create a new package based on a template."
msgstr "为了方便起见，您可以使用``ros2 pkg create``工具基于模板创建一个新的包。@{"calib_text": " `[4415] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4415>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:303
msgid "For ``catkin`` users, this is the equivalent of ``catkin_create_package``."
msgstr "对于``catkin``用户来说，这相当于``catkin_create_package``。@{"calib_text": " `[4416] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4416>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:306
msgid "Setup ``colcon_cd``"
msgstr "设置 ``colcon_cd``@{"calib_text": " `[4417] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4417>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:308
msgid "The command ``colcon_cd`` allows you to quickly change the current working directory of your shell to the directory of a package. As an example ``colcon_cd some_ros_package`` would quickly bring you to the directory ``~/ros2_ws/src/some_ros_package``."
msgstr "命令 ``colcon_cd`` 允许您快速将当前工作目录更改为包的目录。例如，``colcon_cd some_ros_package`` 可快速将您导航到目录 ``~/ros2_ws/src/some_ros_package``。@{"calib_text": " `[4418] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4418>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:329 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:355
msgid "Not yet available"
msgstr "尚未可用@{"calib_text": " `[4419] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4419>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:331
msgid "Depending on the way you installed ``colcon_cd`` and where your workspace is, the instructions above may vary, please refer to `the documentation <https://colcon.readthedocs.io/en/released/user/installation.html#quick-directory-changes>`__ for more details. To undo this in Linux and macOS, locate your system's shell startup script and remove the appended source and export commands."
msgstr "根据您安装 ``colcon_cd`` 的方式和工作空间的位置，上述说明可能有所不同，请参考 `文档 <https://colcon.readthedocs.io/en/released/user/installation.html#quick-directory-changes>`__ 以获取更多详细信息。要在Linux和macOS上撤消此操作，请找到系统的shell启动脚本并删除附加的source和export命令。@{"calib_text": " `[4420] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4420>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:335
msgid "Setup ``colcon`` tab completion"
msgstr "设置 ``colcon`` 的选项自动补全@{"calib_text": " `[4421] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4421>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:337
msgid "The command ``colcon`` `supports command completion <https://colcon.readthedocs.io/en/released/user/installation.html#enable-completion>`__ for bash and bash-like shells if the ``colcon-argcomplete`` package is installed."
msgstr "如果已安装 ``colcon-argcomplete`` 包，则命令 ``colcon`` `支持命令补全 <https://colcon.readthedocs.io/en/released/user/installation.html#enable-completion>`__，适用于 bash 和类似 bash 的 shell。@{"calib_text": " `[4422] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4422>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:357
msgid "Depending on the way you installed ``colcon`` and where your workspace is, the instructions above may vary, please refer to `the documentation <https://colcon.readthedocs.io/en/released/user/installation.html>`__ for more details. To undo this in Linux and macOS, locate your system's shell startup script and remove the appended source command."
msgstr "根据您安装 ``colcon`` 的方式和工作空间的位置，上述说明可能会有所不同，请参考 `文档 <https://colcon.readthedocs.io/en/released/user/installation.html>`__ 获取更多详细信息。要在 Linux 和 macOS 上撤消此操作，请找到您系统的 shell 启动脚本并删除附加的源命令。@{"calib_text": " `[4423] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4423>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:361
msgid "Tips"
msgstr "提示@{"calib_text": " `[4424] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4424>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:363
msgid "If you do not want to build a specific package place an empty file named ``COLCON_IGNORE`` in the directory and it will not be indexed."
msgstr "如果您不想构建特定的软件包，请在目录中放置一个名为“COLCON_IGNORE”的空文件，它将不会被索引。@{"calib_text": " `[4425] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4425>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:365
msgid "If you want to avoid configuring and building tests in CMake packages you can pass: ``--cmake-args -DBUILD_TESTING=0``."
msgstr "如果您想避免在CMake软件包中配置和构建测试，您可以传递参数：``--cmake-args -DBUILD_TESTING=0``。@{"calib_text": " `[4426] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4426>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:367
msgid "If you want to run a single particular test from a package:"
msgstr "如果您想从软件包中运行单个特定测试：@{"calib_text": " `[4427] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4427>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:8
msgid "Creating a workspace"
msgstr "创建一个工作空间@{"calib_text": " `[4428] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4428>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:10
msgid "**Goal:** Create a workspace and learn how to set up an overlay for development and testing."
msgstr "**目标:** 创建一个工作空间并学习如何为开发和测试设置叠加层。@{"calib_text": " `[4429] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4429>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:23
msgid "A workspace is a directory containing ROS 2 packages. Before using ROS 2, it's necessary to source your ROS 2 installation workspace in the terminal you plan to work in. This makes ROS 2's packages available for you to use in that terminal."
msgstr "工作空间是包含ROS 2软件包的目录。在使用ROS 2之前，需要在您计划使用的终端中使用ROS 2安装工作空间。这样可以使ROS 2的软件包在该终端中可用于使用。@{"calib_text": " `[4430] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4430>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:27
msgid "You also have the option of sourcing an \"overlay\" - a secondary workspace where you can add new packages without interfering with the existing ROS 2 workspace that you're extending, or \"underlay\". Your underlay must contain the dependencies of all the packages in your overlay. Packages in your overlay will override packages in the underlay. It's also possible to have several layers of underlays and overlays, with each successive overlay using the packages of its parent underlays."
msgstr "您还可以选择使用\"叠加层\" - 一个次要的工作空间，您可以在其中添加新的软件包，而不会干扰您正在扩展或\"下层\"的现有ROS 2工作空间。您的下层必须包含叠加层中所有软件包的依赖关系。叠加层中的软件包将覆盖下层中的软件包。还可以有多个层次的下层和叠加层，每个连续的叠加层都使用其父级下层的软件包。@{"calib_text": " `[4431] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4431>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:36
msgid ":doc:`ROS 2 installation <../../../Installation>`"
msgstr ":doc:`ROS 2安装 <../../../Installation>`@{"calib_text": " `[4432] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4432>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:37
msgid ":doc:`colcon installation <../Colcon-Tutorial>`"
msgstr ":doc:`colcon安装 <../Colcon-Tutorial>`@{"calib_text": " `[4433] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4433>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:38
msgid "`git installation <https://git-scm.com/book/en/v2/Getting-Started-Installing-Git>`__"
msgstr "`git安装 <https://git-scm.com/book/en/v2/Getting-Started-Installing-Git>`__@{"calib_text": " `[4434] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4434>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:39
msgid ":doc:`turtlesim installation <../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>`"
msgstr ":doc:`turtlesim安装 <../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>`@{"calib_text": " `[4435] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4435>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:40
msgid "Have :doc:`rosdep installed <../../Intermediate/Rosdep>`"
msgstr "已安装 :doc:`rosdep <../../Intermediate/Rosdep>`@{"calib_text": " `[4436] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4436>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:41
msgid "Understanding of basic terminal commands (`here's a guide for Linux <http://www.ee.surrey.ac.uk/Teaching/Unix/>`__)"
msgstr "理解基本终端命令（`这是Linux的指南 <http://www.ee.surrey.ac.uk/Teaching/Unix/>`__）@{"calib_text": " `[4437] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4437>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:42
msgid "Text editor of your choice"
msgstr "你选择的文本编辑器@{"calib_text": " `[4438] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4438>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:48
msgid "1 Source ROS 2 environment"
msgstr "1. 配置ROS 2环境@{"calib_text": " `[4439] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4439>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:50
msgid "Your main ROS 2 installation will be your underlay for this tutorial. (Keep in mind that an underlay does not necessarily have to be the main ROS 2 installation.)"
msgstr "你的主要ROS 2安装将成为本教程的基础。 （请注意，基础不一定非得是主要的ROS 2安装。）@{"calib_text": " `[4440] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4440>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:53
msgid "Depending on how you installed ROS 2 (from source or binaries), and which platform you're on, your exact source command will vary:"
msgstr "根据您安装ROS 2的方式（源码安装或二进制安装），以及您所在的平台，您的确切源命令会有所不同：@{"calib_text": " `[4441] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4441>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:71
msgid "Remember to use a ``x64 Native Tools Command Prompt for VS 2019`` for executing the following commands, as we are going to build a workspace."
msgstr "请记得使用“x64 Native Tools Command Prompt for VS 2019”来执行以下命令，因为我们将要构建一个工作空间。@{"calib_text": " `[4442] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4442>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:77
msgid "Consult the :doc:`installation guide <../../../Installation>` you followed if these commands don't work for you."
msgstr "如果这些命令对您不起作用，请参考您所遵循的:doc:`安装指南 <../../../Installation>`。@{"calib_text": " `[4443] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4443>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:82
msgid "2 Create a new directory"
msgstr "2. 创建一个新目录@{"calib_text": " `[4444] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4444>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:84
msgid "Best practice is to create a new directory for every new workspace. The name doesn't matter, but it is helpful to have it indicate the purpose of the workspace. Let's choose the directory name ``ros2_ws``, for \"development workspace\":"
msgstr "最佳实践是为每个新的工作空间创建一个新的目录。目录名称无关紧要，但是有助于表明工作空间的目的。让我们选择目录名为``ros2_ws``，表示\"开发工作空间\"：@{"calib_text": " `[4445] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4445>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:112
msgid "Another best practice is to put any packages in your workspace into the ``src`` directory. The above code creates a ``src`` directory inside ``ros2_ws`` and then navigates into it."
msgstr "另一个最佳实践是将工作空间中的任何包放置在``src``目录中。上述代码在``ros2_ws``内创建一个``src``目录，然后进入其中。@{"calib_text": " `[4446] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4446>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:117
msgid "3 Clone a sample repo"
msgstr "3 克隆示例仓库@{"calib_text": " `[4447] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4447>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:119
msgid "Ensure you're still in the ``ros2_ws/src`` directory before you clone."
msgstr "在克隆之前，请确保您仍在``ros2_ws/src``目录中。@{"calib_text": " `[4448] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4448>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:121
msgid "In the rest of the beginner developer tutorials, you will create your own packages, but for now you will practice putting a workspace together using existing packages."
msgstr "在接下来的初学者开发者教程中，您将创建自己的软件包，但目前您将练习使用现有软件包组合一个工作空间。@{"calib_text": " `[4449] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4449>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:123
msgid "If you went through the :doc:`Beginner: CLI Tools <../../Beginner-CLI-Tools>` tutorials, you'll be familiar with ``turtlesim``, one of the packages in `ros_tutorials <https://github.com/ros/ros_tutorials/>`__."
msgstr "如果您已经完成了 :doc:`初学者：CLI 工具 <../../Beginner-CLI-Tools>` 教程，您将熟悉 ``turtlesim``，它是 `ros_tutorials <https://github.com/ros/ros_tutorials/>`__ 中的一个软件包。@{"calib_text": " `[4450] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4450>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:125
msgid "A repo can have multiple branches. You need to check out the one that targets your installed ROS 2 distro. When you clone this repo, add the ``-b`` argument followed by that branch."
msgstr "一个存储库可以有多个分支。您需要检出与您已安装的 ROS 2 发行版对应的分支。当您克隆这个存储库时，请添加 ``-b`` 参数，后跟该分支的名称。@{"calib_text": " `[4451] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4451>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:129
msgid "In the ``ros2_ws/src`` directory, run the following command:"
msgstr "在 ``ros2_ws/src`` 目录下运行以下命令：@{"calib_text": " `[4452] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4452>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:135
msgid "Now ``ros_tutorials`` is cloned in your workspace.  The ``ros_tutorials`` repository contains the ``turtlesim`` package, which we'll use in the rest of this tutorial.  The other packages in this repository are not built because they contain a ``COLCON_IGNORE`` file."
msgstr "现在在您的工作空间中克隆了 ``ros_tutorials`` 。``ros_tutorials`` 仓库包含了 ``turtlesim`` 包，我们将在本教程的剩余部分中使用它。此仓库中的其他包没有构建，因为它们包含一个 ``COLCON_IGNORE`` 文件。@{"calib_text": " `[4453] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4453>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:137
msgid "So far you have populated your workspace with a sample package, but it isn't a fully-functional workspace yet. You need to resolve the dependencies first and then build the workspace."
msgstr "到目前为止，您已经在工作空间中添加了一个示例包，但它还不是一个完全功能的工作空间。您需要先解决依赖关系，然后再构建工作空间。@{"calib_text": " `[4454] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4454>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:142
msgid "4 Resolve dependencies"
msgstr "4 解决依赖关系@{"calib_text": " `[4455] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4455>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:144
msgid "Before building the workspace, you need to resolve the package dependencies. You may have all the dependencies already, but best practice is to check for dependencies every time you clone. You wouldn't want a build to fail after a long wait only to realize that you have missing dependencies."
msgstr "在构建工作空间之前，您需要解决包的依赖关系。您可能已经拥有了所有的依赖项，但最佳实践是每次克隆时都检查依赖关系。您不希望在长时间等待后构建失败，然后才意识到您缺少依赖项。@{"calib_text": " `[4456] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4456>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:148
msgid "From the root of your workspace (``ros2_ws``), run the following command:"
msgstr "从工作空间的根目录(``ros2_ws``)运行以下命令：@{"calib_text": " `[4457] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4457>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:162 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:166
msgid "rosdep only runs on Linux, so you can skip ahead to section \"5 Build the workspace with colcon\"."
msgstr "rosdep仅在Linux上运行，所以您可以直接跳到\"5 使用colcon构建工作空间\"一节。@{"calib_text": " `[4458] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4458>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:168
msgid "If you installed ROS 2 on Linux from source or the \"fat\" archive, you will need to use the rosdep command from their installation instructions. Here are the :ref:`from-source rosdep section <linux-development-setup-install-dependencies-using-rosdep>` and the :ref:`\"fat\" archive rosdep section <linux-install-binary-install-missing-dependencies>`."
msgstr "如果您从源代码或\"fat\"存档中在Linux上安装了ROS 2，则需要按照它们的安装说明使用rosdep命令。这里有 :ref:`从源代码安装的rosdep部分 <linux-development-setup-install-dependencies-using-rosdep>` 和 :ref:`\"fat\"存档的rosdep部分 <linux-install-binary-install-missing-dependencies>`。@{"calib_text": " `[4459] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4459>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:171
msgid "If you already have all your dependencies, the console will return:"
msgstr "如果您已经具备了所有的依赖项，控制台会返回：@{"calib_text": " `[4460] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4460>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:177
msgid "Packages declare their dependencies in the package.xml file (you will learn more about packages in the next tutorial). This command walks through those declarations and installs the ones that are missing. You can learn more about ``rosdep`` in another tutorial (coming soon)."
msgstr "软件包在package.xml文件中声明其依赖关系（您将在下一个教程中了解更多关于软件包的内容）。这个命令会遍历这些声明并安装缺失的依赖项。您可以在另一个教程（即将推出）中了解更多关于``rosdep``的信息。@{"calib_text": " `[4461] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4461>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:182
msgid "5 Build the workspace with colcon"
msgstr "5 使用colcon构建工作空间@{"calib_text": " `[4462] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4462>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:184
msgid "From the root of your workspace (``ros2_ws``), you can now build your packages using the command:"
msgstr "从工作空间的根目录（``ros2_ws``）开始，您可以使用以下命令构建您的软件包：@{"calib_text": " `[4463] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4463>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:208
msgid "The console will return the following message:"
msgstr "控制台将返回以下消息：@{"calib_text": " `[4464] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4464>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:219
msgid "Other useful arguments for ``colcon build``:"
msgstr "``colcon build``的其他有用参数：@{"calib_text": " `[4465] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4465>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:221
msgid "``--packages-up-to`` builds the package you want, plus all its dependencies, but not the whole workspace (saves time)"
msgstr "``--packages-up-to`` 构建所需的包及其所有依赖项，而不是整个工作空间（节省时间）@{"calib_text": " `[4466] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4466>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:222
msgid "``--symlink-install`` saves you from having to rebuild every time you tweak python scripts"
msgstr "``--symlink-install`` 在您调整Python脚本时，无需每次重新构建@{"calib_text": " `[4467] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4467>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:223
msgid "``--event-handlers console_direct+`` shows console output while building (can otherwise be found in the ``log`` directory)"
msgstr "``--event-handlers console_direct+`` 在构建时显示控制台输出（否则可在``log``目录中找到）@{"calib_text": " `[4468] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4468>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:225
msgid "Once the build is finished, enter ``ls`` in the workspace root (``~/ros2_ws``) and you will see that colcon has created new directories:"
msgstr "构建完成后，在工作空间根目录（~/ros2_ws）中输入``ls``命令，你会看到colcon已经创建了新的目录：@{"calib_text": " `[4469] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4469>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:231
msgid "The ``install`` directory is where your workspace's setup files are, which you can use to source your overlay."
msgstr "``install``目录是你的工作空间的设置文件所在的位置，你可以使用它来设置你的叠加层。@{"calib_text": " `[4470] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4470>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:235
msgid "6 Source the overlay"
msgstr "6 设置叠加层@{"calib_text": " `[4471] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4471>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:237
msgid "Before sourcing the overlay, it is very important that you open a new terminal, separate from the one where you built the workspace. Sourcing an overlay in the same terminal where you built, or likewise building where an overlay is sourced, may create complex issues."
msgstr "在设置叠加层之前，非常重要的一点是要打开一个新的终端，与构建工作空间的终端分开。在同一个终端中设置叠加层或在设置叠加层的终端中进行构建可能会导致复杂的问题。@{"calib_text": " `[4472] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4472>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:240
msgid "In the new terminal, source your main ROS 2 environment as the \"underlay\", so you can build the overlay \"on top of\" it:"
msgstr "在新的终端中，将你的主要ROS 2环境作为“underlay”来源化，这样你就可以在其“之上”构建叠加层：@{"calib_text": " `[4473] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4473>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:258
msgid "In this case you can use a normal command prompt, as we are not going to build any workspace in this terminal."
msgstr "在这种情况下，你可以使用普通的命令提示符，因为我们不会在这个终端中构建任何工作空间。@{"calib_text": " `[4474] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4474>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:264
msgid "Go into the root of your workspace:"
msgstr "进入你的工作空间的根目录：@{"calib_text": " `[4475] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4475>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:286
msgid "In the root, source your overlay:"
msgstr "在根目录中，将你的叠加层源化：@{"calib_text": " `[4476] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4476>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:310
msgid "Sourcing the ``local_setup`` of the overlay will only add the packages available in the overlay to your environment. ``setup`` sources the overlay as well as the underlay it was created in, allowing you to utilize both workspaces."
msgstr "只有在源中添加覆盖层的``local_setup``才会将覆盖层中的软件包添加到您的环境中。``setup``源同时包含覆盖层和创建它的底层，使您能够同时利用两个工作区。@{"calib_text": " `[4477] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4477>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:313
msgid "So, sourcing your main ROS 2 installation's ``setup`` and then the ``ros2_ws`` overlay's ``local_setup``, like you just did, is the same as just sourcing ``ros2_ws``'s ``setup``, because that includes the environment of its underlay."
msgstr "因此，像您刚才做的那样，先对主要的ROS 2安装进行``setup``，然后再对``ros2_ws``覆盖层的``local_setup``进行源操作，与只对``ros2_ws``的``setup``进行源操作是相同的，因为后者已经包含了底层的环境。@{"calib_text": " `[4478] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4478>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:316
msgid "Now you can run the ``turtlesim`` package from the overlay:"
msgstr "现在，您可以从覆盖层中运行``turtlesim``软件包：@{"calib_text": " `[4479] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4479>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:322
msgid "But how can you tell that this is the overlay turtlesim running, and not your main installation's turtlesim?"
msgstr "但是，您如何确定这是运行的覆盖层中的turtlesim，而不是主安装中的turtlesim呢？@{"calib_text": " `[4480] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4480>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:324
msgid "Let's modify turtlesim in the overlay so you can see the effects:"
msgstr "让我们在覆盖层中修改turtlesim，这样你就可以看到效果了：@{"calib_text": " `[4481] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4481>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:326
msgid "You can modify and rebuild packages in the overlay separately from the underlay."
msgstr "你可以在覆盖层中单独修改和重建软件包，而不影响底层。@{"calib_text": " `[4482] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4482>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:327
msgid "The overlay takes precedence over the underlay."
msgstr "覆盖层优先于底层。@{"calib_text": " `[4483] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4483>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:331
msgid "7 Modify the overlay"
msgstr "7 修改覆盖层@{"calib_text": " `[4484] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4484>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:333
msgid "You can modify ``turtlesim`` in your overlay by editing the title bar on the turtlesim window. To do this, locate the ``turtle_frame.cpp`` file in ``~/ros2_ws/src/ros_tutorials/turtlesim/src``. Open ``turtle_frame.cpp`` with your preferred text editor."
msgstr "你可以通过编辑turtlesim窗口的标题栏来修改overlay中的`turtlesim`。要做到这一点，找到`~/ros2_ws/src/ros_tutorials/turtlesim/src`中的`turtle_frame.cpp`文件。用你喜欢的文本编辑器打开`turtle_frame.cpp`。@{"calib_text": " `[4485] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4485>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:337
msgid "On line 52 you will see the function ``setWindowTitle(\"TurtleSim\");``. Change the value ``\"TurtleSim\"`` to ``\"MyTurtleSim\"``, and save the file."
msgstr "在第52行，你会看到函数`setWindowTitle(\"TurtleSim\");`。将值`\"TurtleSim\"`更改为`\"MyTurtleSim\"`，然后保存文件。@{"calib_text": " `[4486] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4486>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:340
msgid "Return to the first terminal where you ran ``colcon build`` earlier and run it again."
msgstr "返回到之前运行`colcon build`的第一个终端，并再次运行它。@{"calib_text": " `[4487] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4487>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:342
msgid "Return to the second terminal (where the overlay is sourced) and run turtlesim again:"
msgstr "返回到第二个终端（源化了overlay的终端），然后再次运行turtlesim：@{"calib_text": " `[4488] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4488>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:348
msgid "You will see the title bar on the turtlesim window now says \"MyTurtleSim\"."
msgstr "现在您将看到turtlesim窗口的标题栏显示为\"MyTurtleSim\"。@{"calib_text": " `[4489] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4489>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:352
msgid "Even though your main ROS 2 environment was sourced in this terminal earlier, the overlay of your ``ros2_ws`` environment takes precedence over the contents of the underlay."
msgstr "尽管您之前在此终端中激活了主要的ROS 2环境，但是\"ros2_ws\"环境的叠加优先于底层的内容。@{"calib_text": " `[4490] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4490>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:354
msgid "To see that your underlay is still intact, open a brand new terminal and source only your ROS 2 installation. Run turtlesim again:"
msgstr "为了验证您的底层仍然完整，打开一个全新的终端并只激活您的ROS 2安装。再次运行turtlesim：@{"calib_text": " `[4491] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4491>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:363
msgid "You can see that modifications in the overlay did not actually affect anything in the underlay."
msgstr "您可以看到叠加中的修改实际上没有对底层产生任何影响。@{"calib_text": " `[4492] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4492>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:368
msgid "In this tutorial, you sourced your main ROS 2 distro install as your underlay, and created an overlay by cloning and building packages in a new workspace. The overlay gets prepended to the path, and takes precedence over the underlay, as you saw with your modified turtlesim."
msgstr "在本教程中，您将ROS 2主要发行版安装为底层，并通过克隆和构建包在新的工作空间中创建一个覆盖层。覆盖层被添加到路径中，并且优先于底层，正如您通过修改后的turtlesim所看到的。@{"calib_text": " `[4493] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4493>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:371
msgid "Using overlays is recommended for working on a small number of packages, so you don't have to put everything in the same workspace and rebuild a huge workspace on every iteration."
msgstr "建议在处理少量包时使用覆盖层，这样您就不必将所有内容放在同一个工作空间中，并且不必在每次迭代中重新构建一个庞大的工作空间。@{"calib_text": " `[4494] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4494>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:376
msgid "Now that you understand the details behind creating, building and sourcing your own workspace, you can learn how to :doc:`create your own packages <../Creating-Your-First-ROS2-Package>`."
msgstr "现在您已经了解了创建、构建和源化自己的工作空间的细节，您可以学习如何：:doc:`创建自己的软件包 <../Creating-Your-First-ROS2-Package>`。@{"calib_text": " `[4495] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4495>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:8
msgid "Creating a package"
msgstr "创建软件包@{"calib_text": " `[4496] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4496>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:10
msgid "**Goal:** Create a new package using either CMake or Python, and run its executable."
msgstr "**目标：** 使用CMake或Python创建一个新的包，并运行其可执行文件。@{"calib_text": " `[4497] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4497>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:24
msgid "1 What is a ROS 2 package?"
msgstr "1 什么是ROS 2包？@{"calib_text": " `[4498] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4498>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:26
msgid "A package is an organizational unit for your ROS 2 code. If you want to be able to install your code or share it with others, then you'll need it organized in a package. With packages, you can release your ROS 2 work and allow others to build and use it easily."
msgstr "包是ROS 2代码的组织单元。如果您希望能够安装代码或与他人共享代码，那么您需要将其组织成一个包。通过包，您可以发布ROS 2工作并允许其他人轻松构建和使用它。@{"calib_text": " `[4499] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4499>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:30
msgid "Package creation in ROS 2 uses ament as its build system and colcon as its build tool. You can create a package using either CMake or Python, which are officially supported, though other build types do exist."
msgstr "ROS 2中的包创建使用ament作为构建系统和colcon作为构建工具。您可以使用CMake或Python创建一个包，这两种方式得到官方支持，尽管还存在其他构建类型。@{"calib_text": " `[4500] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4500>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:34
msgid "2 What makes up a ROS 2 package?"
msgstr "2 什么构成了一个ROS 2软件包?@{"calib_text": " `[4501] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4501>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:36
msgid "ROS 2 Python and CMake packages each have their own minimum required contents:"
msgstr "ROS 2的Python和CMake软件包各自有其最小要求的内容:@{"calib_text": " `[4502] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4502>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:40 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:59 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:160 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:178 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:196 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:355 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:374 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:403 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:477
msgid "CMake"
msgstr "CMake@{"calib_text": " `[4503] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4503>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:42
msgid "``CMakeLists.txt`` file that describes how to build the code within the package"
msgstr "``CMakeLists.txt``文件，描述了如何构建软件包内的代码@{"calib_text": " `[4504] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4504>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:43
msgid "``include/<package_name>`` directory containing the public headers for the package"
msgstr "包含该包的公共头文件的 ``include/<package_name>`` 目录@{"calib_text": " `[4505] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4505>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:44 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:49
msgid "``package.xml`` file containing meta information about the package"
msgstr "包含有关该包的元信息的 ``package.xml`` 文件@{"calib_text": " `[4506] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4506>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:45
msgid "``src`` directory containing the source code for the package"
msgstr "包含该包源代码的 ``src`` 目录@{"calib_text": " `[4507] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4507>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:50
msgid "``resource/<package_name>`` marker file for the package"
msgstr "用于标记该包的 ``resource/<package_name>`` 文件@{"calib_text": " `[4508] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4508>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:51
msgid "``setup.cfg`` is required when a package has executables, so ``ros2 run`` can find them"
msgstr "当一个软件包包含可执行文件时，需要使用``setup.cfg``，以便``ros2 run``能够找到它们@{"calib_text": " `[4509] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4509>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:52
msgid "``setup.py`` containing instructions for how to install the package"
msgstr "``setup.py``包含了安装该软件包的指令@{"calib_text": " `[4510] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4510>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:53
msgid "``<package_name>`` - a directory with the same name as your package, used by ROS 2 tools to find your package, contains ``__init__.py``"
msgstr "``<package_name>`` - 与软件包同名的目录，被ROS 2工具用于查找软件包，包含``__init__.py``@{"calib_text": " `[4511] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4511>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:55
msgid "The simplest possible package may have a file structure that looks like:"
msgstr "最简单的软件包的文件结构可能如下所示：@{"calib_text": " `[4512] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4512>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:82
msgid "3 Packages in a workspace"
msgstr "工作空间中的3个软件包@{"calib_text": " `[4513] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4513>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:84
msgid "A single workspace can contain as many packages as you want, each in their own folder. You can also have packages of different build types in one workspace (CMake, Python, etc.). You cannot have nested packages."
msgstr "一个工作空间可以包含任意多个软件包，每个软件包位于自己的文件夹中。您还可以在一个工作空间中拥有不同构建类型的软件包（如CMake、Python等）。但不能嵌套软件包。@{"calib_text": " `[4514] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4514>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:88
msgid "Best practice is to have a ``src`` folder within your workspace, and to create your packages in there. This keeps the top level of the workspace “clean”."
msgstr "最佳实践是在工作空间中创建一个``src``文件夹，并在其中创建您的软件包。这样可以保持工作空间的顶层“清洁”。@{"calib_text": " `[4515] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4515>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:91
msgid "A trivial workspace might look like:"
msgstr "一个简单的工作空间可能如下所示：@{"calib_text": " `[4516] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4516>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:120
msgid "You should have a ROS 2 workspace after following the instructions in the :doc:`previous tutorial <./Creating-A-Workspace/Creating-A-Workspace>`. You will create your package in this workspace."
msgstr "在按照 :doc:`先前教程 <./Creating-A-Workspace/Creating-A-Workspace>` 的说明操作后，您应该拥有一个 ROS 2 工作空间。您将在该工作空间中创建您的软件包。@{"calib_text": " `[4517] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4517>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:130
msgid "First, :doc:`source your ROS 2 installation <../Beginner-CLI-Tools/Configuring-ROS2-Environment>`."
msgstr "首先， :doc:`配置您的 ROS 2 安装环境 <../Beginner-CLI-Tools/Configuring-ROS2-Environment>`。@{"calib_text": " `[4518] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4518>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:132
msgid "Let's use the workspace you created in the :ref:`previous tutorial <new-directory>`, ``ros2_ws``, for your new package."
msgstr "让我们使用您在 :ref:`先前教程 <new-directory>` 中创建的工作空间 ``ros2_ws`` 来创建您的新软件包。@{"calib_text": " `[4519] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4519>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:134
msgid "Make sure you are in the ``src`` folder before running the package creation command."
msgstr "在运行软件包创建命令之前，请确保您位于 ``src`` 文件夹中。@{"calib_text": " `[4520] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4520>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:156
msgid "The command syntax for creating a new package in ROS 2 is:"
msgstr "在ROS 2中创建新包的命令语法如下：@{"calib_text": " `[4521] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4521>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:172
msgid "For this tutorial, you will use the optional argument ``--node-name`` which creates a simple Hello World type executable in the package."
msgstr "在本教程中，您将使用可选参数``--node-name``，它将在包中创建一个简单的Hello World类型的可执行文件。@{"calib_text": " `[4522] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4522>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:174
msgid "Enter the following command in your terminal:"
msgstr "在终端中输入以下命令：@{"calib_text": " `[4523] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4523>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:190
msgid "You will now have a new folder within your workspace's ``src`` directory called ``my_package``."
msgstr "现在，您的工作空间的``src``目录中将有一个名为``my_package``的新文件夹。@{"calib_text": " `[4524] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4524>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:192
msgid "After running the command, your terminal will return the message:"
msgstr "运行该命令后，您的终端会返回以下消息：@{"calib_text": " `[4525] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4525>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:249
msgid "You can see the automatically generated files for the new package."
msgstr "您可以看到为新软件包自动生成的文件。@{"calib_text": " `[4526] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4526>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:252
msgid "2 Build a package"
msgstr "2 构建软件包@{"calib_text": " `[4527] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4527>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:254
msgid "Putting packages in a workspace is especially valuable because you can build many packages at once by running ``colcon build`` in the workspace root. Otherwise, you would have to build each package individually."
msgstr "将软件包放入工作区尤其有价值，因为您可以通过在工作区根目录下运行``colcon build``一次性构建多个软件包。否则，您将需要逐个构建每个软件包。@{"calib_text": " `[4528] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4528>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:257
msgid "Return to the root of your workspace:"
msgstr "返回工作区的根目录：@{"calib_text": " `[4529] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4529>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:279
msgid "Now you can build your packages:"
msgstr "现在你可以构建你的软件包：@{"calib_text": " `[4530] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4530>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:303
msgid "Recall from the last tutorial that you also have the ``ros_tutorials`` packages in your ``ros2_ws``. You might have noticed that running ``colcon build`` also built the ``turtlesim`` package. That's fine when you only have a few packages in your workspace, but when there are many packages, ``colcon build`` can take a long time."
msgstr "从上个教程中你记得你的``ros2_ws``里也有``ros_tutorials``软件包。你可能已经注意到运行``colcon build``时还会构建``turtlesim``软件包。当你的工作区只有几个软件包时这没问题，但当有很多软件包时，``colcon build``会花费很长时间。@{"calib_text": " `[4531] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4531>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:307
msgid "To build only the ``my_package`` package next time, you can run:"
msgstr "下次只构建``my_package``软件包，你可以运行：@{"calib_text": " `[4532] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4532>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:314
msgid "3 Source the setup file"
msgstr "3 导入设置文件@{"calib_text": " `[4533] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4533>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:316
msgid "To use your new package and executable, first open a new terminal and source your main ROS 2 installation."
msgstr "要使用您的新软件包和可执行文件，请首先打开一个新终端并导入您的主要ROS 2安装。@{"calib_text": " `[4534] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4534>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:318
msgid "Then, from inside the ``ros2_ws`` directory, run the following command to source your workspace:"
msgstr "然后，在``ros2_ws``目录内运行以下命令以导入您的工作空间：@{"calib_text": " `[4535] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4535>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:340
msgid "Now that your workspace has been added to your path, you will be able to use your new package's executables."
msgstr "现在，您的工作空间已添加到路径中，您将能够使用您的新软件包的可执行文件。@{"calib_text": " `[4536] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4536>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:343
msgid "4 Use the package"
msgstr "4 使用软件包@{"calib_text": " `[4537] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4537>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:345
msgid "To run the executable you created using the ``--node-name`` argument during package creation, enter the command:"
msgstr "要运行您使用``--node-name``参数在创建软件包时创建的可执行文件，请输入以下命令：@{"calib_text": " `[4538] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4538>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:351
msgid "Which will return a message to your terminal:"
msgstr "将在终端返回一条消息：@{"calib_text": " `[4539] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4539>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:368
msgid "5 Examine package contents"
msgstr "5 检查软件包内容@{"calib_text": " `[4540] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4540>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:370
msgid "Inside ``ros2_ws/src/my_package``, you will see the files and folders that ``ros2 pkg create`` automatically generated:"
msgstr "在 ``ros2_ws/src/my_package`` 内，您将看到 ``ros2 pkg create`` 自动创建的文件和文件夹：@{"calib_text": " `[4541] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4541>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:380
msgid "``my_node.cpp`` is inside the ``src`` directory. This is where all your custom C++ nodes will go in the future."
msgstr "``my_node.cpp`` 位于 ``src`` 目录中。这是您以后将放置所有自定义 C++ 节点的位置。@{"calib_text": " `[4542] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4542>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:389
msgid "``my_node.py`` is inside the ``my_package`` directory. This is where all your custom Python nodes will go in the future."
msgstr "``my_node.py`` 位于 ``my_package`` 目录中。这是您以后将放置所有自定义 Python 节点的位置。@{"calib_text": " `[4543] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4543>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:393
msgid "6 Customize package.xml"
msgstr "6 自定义 package.xml@{"calib_text": " `[4544] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4544>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:395
msgid "You may have noticed in the return message after creating your package that the fields ``description`` and ``license`` contain ``TODO`` notes. That's because the package description and license declaration are not automatically set, but are required if you ever want to release your package. The ``maintainer`` field may also need to be filled in."
msgstr "在创建包后，您可能会注意到返回消息中的字段“description”和“license”包含“TODO”注释。这是因为包的描述和许可声明不会自动设置，但是如果您想发布包，它们是必需的。如果需要，还可以填写“maintainer”字段。@{"calib_text": " `[4545] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4545>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:399
msgid "From ``ros2_ws/src/my_package``, open ``package.xml`` using your preferred text editor:"
msgstr "从“ros2_ws/src/my_package”目录下，使用您喜欢的文本编辑器打开“package.xml”文件：@{"calib_text": " `[4546] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4546>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:453
msgid "Input your name and email on the ``maintainer`` line if it hasn't been automatically populated for you. Then, edit the ``description`` line to summarize the package:"
msgstr "如果“maintainer”行没有自动填充，请在该行上输入您的姓名和电子邮件。然后，编辑“description”行以对包进行概括：@{"calib_text": " `[4547] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4547>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:460
msgid "Then, update the ``license`` line. You can read more about open source licenses `here <https://opensource.org/licenses/alphabetical>`__. Since this package is only for practice, it's safe to use any license. We'll use ``Apache License 2.0``:"
msgstr "然后，更新“license”行。您可以在此处阅读有关开源许可证的更多信息：<https://opensource.org/licenses/alphabetical>。由于此包仅用于练习，使用任何许可证都是安全的。我们将使用“Apache License 2.0”：@{"calib_text": " `[4548] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4548>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:469
msgid "Don't forget to save once you're done editing."
msgstr "编辑完成后别忘了保存。@{"calib_text": " `[4549] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4549>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:471
msgid "Below the license tag, you will see some tag names ending with ``_depend``. This is where your ``package.xml`` would list its dependencies on other packages, for colcon to search for. ``my_package`` is simple and doesn't have any dependencies, but you will see this space being utilized in upcoming tutorials."
msgstr "在许可证标签下面，你会看到一些以``_depend``结尾的标签名。这是你的``package.xml``文件列出了它对其他软件包的依赖关系，供colcon进行搜索。``my_package``很简单，并不依赖其他软件包，但你将在接下来的教程中看到这个空间被利用起来。@{"calib_text": " `[4550] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4550>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:479
msgid "You're all done for now!"
msgstr "目前为止，你已经完成了！@{"calib_text": " `[4551] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4551>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:483
msgid "The ``setup.py`` file contains the same description, maintainer and license fields as ``package.xml``, so you need to set those as well. They need to match exactly in both files. The version and name (``package_name``) also need to match exactly, and should be automatically populated in both files."
msgstr "``setup.py``文件包含了与``package.xml``相同的描述、维护者和许可证字段，所以你也需要设置它们。两个文件中的内容必须完全匹配。版本和名称（``package_name``）也必须完全匹配，并且应该在两个文件中自动填充。@{"calib_text": " `[4552] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4552>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:487
msgid "Open ``setup.py`` with your preferred text editor."
msgstr "用你喜欢的文本编辑器打开 ``setup.py`` 。@{"calib_text": " `[4553] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4553>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:518
msgid "Edit the ``maintainer``, ``maintainer_email``, and ``description`` lines to match ``package.xml``."
msgstr "编辑 ``maintainer``、``maintainer_email`` 和 ``description`` 行，使其与 ``package.xml`` 匹配。@{"calib_text": " `[4554] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4554>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:520
msgid "Don't forget to save the file."
msgstr "不要忘记保存文件。@{"calib_text": " `[4555] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4555>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:526
msgid "You've created a package to organize your code and make it easy to use for others."
msgstr "你创建了一个用于组织代码并方便他人使用的包。@{"calib_text": " `[4556] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4556>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:528
msgid "Your package was automatically populated with the necessary files, and then you used colcon to build it so you can use its executables in your local environment."
msgstr "您的软件包已自动填充所需文件，然后您使用 colcon 构建它，以便在本地环境中使用其可执行文件。@{"calib_text": " `[4557] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4557>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:533
msgid "Next, let's add something meaningful to a package. You'll start with a simple publisher/subscriber system, which you can choose to write in either :doc:`C++ <./Writing-A-Simple-Cpp-Publisher-And-Subscriber>` or :doc:`Python <./Writing-A-Simple-Py-Publisher-And-Subscriber>`."
msgstr "接下来，让我们向软件包添加一些有意义的内容。您可以选择使用 :doc:`C++ <./Writing-A-Simple-Cpp-Publisher-And-Subscriber>` 或 :doc:`Python <./Writing-A-Simple-Py-Publisher-And-Subscriber>` 来编写一个简单的发布者/订阅者系统。@{"calib_text": " `[4558] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4558>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:8
msgid "Creating custom msg and srv files"
msgstr "创建自定义的 msg 和 srv 文件。@{"calib_text": " `[4559] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4559>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:10
msgid "**Goal:** Define custom interface files (``.msg`` and ``.srv``) and use them with Python and C++ nodes."
msgstr "**目标：**定义自定义接口文件（``.msg`` 和 ``.srv``），并在 Python 和 C++ 节点中使用它们。@{"calib_text": " `[4560] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4560>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:23
msgid "In previous tutorials you utilized message and service interfaces to learn about :doc:`topics <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>`, :doc:`services <../Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services>`, and simple publisher/subscriber (:doc:`C++ <./Writing-A-Simple-Cpp-Publisher-And-Subscriber>`/:doc:`Python<./Writing-A-Simple-Py-Publisher-And-Subscriber>`) and service/client (:doc:`C++ <./Writing-A-Simple-Cpp-Service-And-Client>`/:doc:`Python<./Writing-A-Simple-Py-Service-And-Client>`) nodes. The interfaces you used were predefined in those cases."
msgstr "在之前的教程中，你使用消息和服务接口了解了 :doc:`topics <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>`、:doc:`services <../Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services>` 以及简单的发布者/订阅者 (:doc:`C++ <./Writing-A-Simple-Cpp-Publisher-And-Subscriber>`/:doc:`Python <./Writing-A-Simple-Py-Publisher-And-Subscriber>`) 和服务/客户端 (:doc:`C++ <./Writing-A-Simple-Cpp-Service-And-Client>`/:doc:`Python <./Writing-A-Simple-Py-Service-And-Client>`) 节点。你使用的接口在这些情况下是预定义的。@{"calib_text": " `[4561] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4561>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:26
msgid "While it's good practice to use predefined interface definitions, you will probably need to define your own messages and services sometimes as well. This tutorial will introduce you to the simplest method of creating custom interface definitions."
msgstr "虽然使用预定义的接口定义是一个好习惯，但有时你可能需要自定义自己的消息和服务。本教程将介绍创建自定义接口定义的最简单方法。@{"calib_text": " `[4562] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4562>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:32
msgid "You should have a :doc:`ROS 2 workspace <./Creating-A-Workspace/Creating-A-Workspace>`."
msgstr "你应该有一个 :doc:`ROS 2 工作空间 <./Creating-A-Workspace/Creating-A-Workspace>`。@{"calib_text": " `[4563] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4563>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:34
msgid "This tutorial also uses the packages created in the publisher/subscriber (:doc:`C++ <./Writing-A-Simple-Cpp-Publisher-And-Subscriber>` and :doc:`Python<./Writing-A-Simple-Py-Publisher-And-Subscriber>`) and service/client  (:doc:`C++ <./Writing-A-Simple-Cpp-Service-And-Client>` and :doc:`Python<./Writing-A-Simple-Py-Service-And-Client>`) tutorials to try out the new custom messages."
msgstr "本教程还使用了发布者/订阅者 (:doc:`C++ <./Writing-A-Simple-Cpp-Publisher-And-Subscriber>` 和 :doc:`Python <./Writing-A-Simple-Py-Publisher-And-Subscriber>`) 以及服务/客户端 (:doc:`C++ <./Writing-A-Simple-Cpp-Service-And-Client>` 和 :doc:`Python <./Writing-A-Simple-Py-Service-And-Client>`) 教程中创建的软件包，以尝试新的自定义消息。@{"calib_text": " `[4564] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4564>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:40
msgid "1 Create a new package"
msgstr "1 创建一个新的包@{"calib_text": " `[4565] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4565>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:42
msgid "For this tutorial you will be creating custom ``.msg`` and ``.srv`` files in their own package, and then utilizing them in a separate package. Both packages should be in the same workspace."
msgstr "在本教程中，您将创建自己的``.msg``和``.srv``文件，并将它们放在一个单独的包中，然后在另一个包中使用它们。这两个包应该在同一个工作空间中。@{"calib_text": " `[4566] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4566>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:45
msgid "Since we will use the pub/sub and service/client packages created in earlier tutorials, make sure you are in the same workspace as those packages (``ros2_ws/src``), and then run the following command to create a new package:"
msgstr "由于我们将使用之前教程中创建的发布/订阅和服务/客户端包，请确保您处于与这些包相同的工作空间中（``ros2_ws/src``），然后运行以下命令来创建一个新的包：@{"calib_text": " `[4567] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4567>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:51
msgid "``tutorial_interfaces`` is the name of the new package. Note that it is, and can only be, a CMake package, but this doesn't restrict in which type of packages you can use your messages and services. You can create your own custom interfaces in a CMake package, and then use it in a C++ or Python node, which will be covered in the last section."
msgstr "``tutorial_interfaces`` 是新包的名称。请注意，它只能是 CMake 包，但这并不限制您可以在哪种类型的包中使用消息和服务。您可以在 CMake 包中创建自定义接口，然后在 C++ 或 Python 节点中使用它，这将在最后一节中介绍。@{"calib_text": " `[4568] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4568>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:55
msgid "The ``.msg`` and ``.srv`` files are required to be placed in directories called ``msg`` and ``srv`` respectively. Create the directories in ``ros2_ws/src/tutorial_interfaces``:"
msgstr "要求将``.msg``和``.srv``文件分别放置在名为``msg``和``srv``的目录中。请在``ros2_ws/src/tutorial_interfaces``中创建这些目录：@{"calib_text": " `[4569] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4569>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:63
msgid "2 Create custom definitions"
msgstr "2 创建自定义定义@{"calib_text": " `[4570] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4570>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:66
msgid "2.1 msg definition"
msgstr "2.1 msg定义@{"calib_text": " `[4571] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4571>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:68
msgid "In the ``tutorial_interfaces/msg`` directory you just created, make a new file called ``Num.msg`` with one line of code declaring its data structure:"
msgstr "在刚刚创建的``tutorial_interfaces/msg``目录中，创建一个名为``Num.msg``的新文件，并添加一行代码声明其数据结构：@{"calib_text": " `[4572] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4572>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:74
msgid "This is a custom message that transfers a single 64-bit integer called ``num``."
msgstr "这是一个自定义消息，传递一个名为``num``的64位整数。@{"calib_text": " `[4573] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4573>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:76
msgid "Also in the ``tutorial_interfaces/msg`` directory you just created, make a new file called ``Sphere.msg`` with the following content:"
msgstr "在刚刚创建的``tutorial_interfaces/msg``目录中，还需创建一个名为``Sphere.msg``的新文件，并按照以下内容进行编写:@{"calib_text": " `[4574] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4574>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:83
msgid "This custom message uses a message from another message package (``geometry_msgs/Point`` in this case)."
msgstr "这个自定义消息使用了另一个消息包中的消息（在这种情况下为``geometry_msgs/Point``）。@{"calib_text": " `[4575] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4575>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:86
msgid "2.2 srv definition"
msgstr "2.2 服务定义@{"calib_text": " `[4576] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4576>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:88
msgid "Back in the ``tutorial_interfaces/srv`` directory you just created, make a new file called ``AddThreeInts.srv`` with the following request and response structure:"
msgstr "在刚刚创建的 ``tutorial_interfaces/srv`` 目录中，创建一个名为 ``AddThreeInts.srv`` 的新文件，其请求和响应结构如下所示：@{"calib_text": " `[4577] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4577>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:98
msgid "This is your custom service that requests three integers named ``a``, ``b``, and ``c``, and responds with an integer called ``sum``."
msgstr "这是您自定义的服务，它请求三个名为 ``a``、``b`` 和 ``c`` 的整数，并以名为 ``sum`` 的整数作为响应。@{"calib_text": " `[4578] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4578>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:101
msgid "3 ``CMakeLists.txt``"
msgstr "3. ``CMakeLists.txt``@{"calib_text": " `[4579] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4579>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:103
msgid "To convert the interfaces you defined into language-specific code (like C++ and Python) so that they can be used in those languages, add the following lines to ``CMakeLists.txt``:"
msgstr "要将您定义的接口转换为特定语言的代码（如C++和Python），以便在这些语言中使用它们，请将以下行添加到 ``CMakeLists.txt`` 中：@{"calib_text": " `[4580] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4580>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:119
msgid "The first argument (library name) in the rosidl_generate_interfaces must match ${PROJECT_NAME} (see https://github.com/ros2/rosidl/issues/441#issuecomment-591025515)."
msgstr "在rosidl_generate_interfaces中，第一个参数（库名称）必须与${PROJECT_NAME}匹配（参见https://github.com/ros2/rosidl/issues/441#issuecomment-591025515）。@{"calib_text": " `[4581] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4581>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:122
msgid "4 ``package.xml``"
msgstr "4 `package.xml`@{"calib_text": " `[4582] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4582>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:124
msgid "Because the interfaces rely on ``rosidl_default_generators`` for generating language-specific code, you need to declare a build tool dependency on it. ``rosidl_default_runtime`` is a runtime or execution-stage dependency, needed to be able to use the interfaces later. The ``rosidl_interface_packages`` is the name of the dependency group that your package, ``tutorial_interfaces``, should be associated with, declared using the ``<member_of_group>`` tag."
msgstr "因为接口依赖于rosidl_default_generators来生成特定语言的代码，所以您需要在其上声明构建工具依赖项。rosidl_default_runtime是一个运行时或执行阶段的依赖项，以便稍后能够使用这些接口。rosidl_interface_packages是您的软件包“tutorial_interfaces”应关联的依赖组的名称，使用`<member_of_group>`标签声明。@{"calib_text": " `[4583] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4583>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:128
msgid "Add the following lines within the ``<package>`` element of ``package.xml``:"
msgstr "将以下行添加到`package.xml`的`<package>`元素中：@{"calib_text": " `[4584] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4584>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:138
msgid "5 Build the ``tutorial_interfaces`` package"
msgstr "5 构建``tutorial_interfaces``包@{"calib_text": " `[4585] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4585>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:140
msgid "Now that all the parts of your custom interfaces package are in place, you can build the package. In the root of your workspace (``~/ros2_ws``), run the following command:"
msgstr "现在你的自定义接口包的所有部分都已经就位，你可以构建这个包。在你的工作空间的根目录（``~/ros2_ws``）中运行以下命令：@{"calib_text": " `[4586] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4586>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:163
msgid "Now the interfaces will be discoverable by other ROS 2 packages."
msgstr "现在其他ROS 2包可以发现这些接口。@{"calib_text": " `[4587] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4587>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:166
msgid "6 Confirm msg and srv creation"
msgstr "6 确认消息和服务的创建@{"calib_text": " `[4588] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4588>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:168
msgid "In a new terminal, run the following command from within your workspace (``ros2_ws``) to source it:"
msgstr "在新的终端中，从你的工作空间（``ros2_ws``）内运行以下命令以加载它：@{"calib_text": " `[4589] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4589>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:190
msgid "Now you can confirm that your interface creation worked by using the ``ros2 interface show`` command:"
msgstr "现在，你可以通过使用 ``ros2 interface show`` 命令确认接口创建是否成功：@{"calib_text": " `[4590] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4590>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:196 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:208 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:224
msgid "should return:"
msgstr "应该返回：@{"calib_text": " `[4591] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4591>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:202 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:218
msgid "And"
msgstr "而且@{"calib_text": " `[4592] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4592>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:235
msgid "7 Test the new interfaces"
msgstr "7 测试新接口@{"calib_text": " `[4593] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4593>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:237
msgid "For this step you can use the packages you created in previous tutorials. A few simple modifications to the nodes, ``CMakeLists.txt`` and ``package.xml`` files will allow you to use your new interfaces."
msgstr "在这一步中，您可以使用之前教程中创建的软件包。对节点、``CMakeLists.txt``和``package.xml``文件进行一些简单的修改，即可使用您的新接口。@{"calib_text": " `[4594] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4594>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:241
msgid "7.1 Testing ``Num.msg`` with pub/sub"
msgstr "7.1 使用发布/订阅测@{"calib_text": " `[4595] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4595>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:243
msgid "With a few modifications to the publisher/subscriber package created in a previous tutorial (:doc:`C++ <./Writing-A-Simple-Cpp-Publisher-And-Subscriber>` or :doc:`Python <./Writing-A-Simple-Py-Publisher-And-Subscriber>`), you can see ``Num.msg`` in action. Since you'll be changing the standard string msg to a numerical one, the output will be slightly different."
msgstr "在之前的教程（:doc:`C++ <./Writing-A-Simple-Cpp-Publisher-And-Subscriber>`或者 :doc:`Python <./Writing-A-Simple-Py-Publisher-And-Subscriber>`）中创建的发布者/订阅者包稍作修改，你就可以看到 ``Num.msg`` 的作用。由于你将把标准字符串消息更改为数值消息，输出结果将稍有不同。@{"calib_text": " `[4596] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4596>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:246
msgid "**Publisher**"
msgstr "**发布者**@{"calib_text": " `[4597] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4597>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:336
msgid "**Subscriber**"
msgstr "**订阅者**@{"calib_text": " `[4598] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4598>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:418 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:716
msgid "**CMakeLists.txt**"
msgstr "**CMakeLists.txt**@{"calib_text": " `[4599] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4599>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:420 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:718
msgid "Add the following lines (C++ only):"
msgstr "添加以下行（仅限C++）：@{"calib_text": " `[4600] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4600>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:444 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:744
msgid "**package.xml**"
msgstr "**package.xml**@{"calib_text": " `[4601] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4601>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:446 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:746
msgid "Add the following line:"
msgstr "添加以下行：@{"calib_text": " `[4602] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4602>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:463 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:763
msgid "After making the above edits and saving all the changes, build the package:"
msgstr "在进行上述编辑并保存所有更改后，构建包：@{"calib_text": " `[4603] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4603>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:469 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:483 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:769 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:784
msgid "On Linux/macOS:"
msgstr "在Linux/macOS上：@{"calib_text": " `[4604] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4604>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:475 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:489 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:775 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:790
msgid "On Windows:"
msgstr "在Windows上：@{"calib_text": " `[4605] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4605>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:495 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:796
msgid "Then open two new terminals, source ``ros2_ws`` in each, and run:"
msgstr "然后在两个新终端中分别打开，每个终端中执行以下命令：@{"calib_text": " `[4606] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4606>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:519
msgid "Since ``Num.msg`` relays only an integer, the talker should only be publishing integer values, as opposed to the string it published previously:"
msgstr "由于``Num.msg``只传递整数，因此talker只应该发布整数值，而不是之前发布的字符串：@{"calib_text": " `[4607] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4607>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:529
msgid "7.2 Testing ``AddThreeInts.srv`` with service/client"
msgstr "7.2 使用服务/客户端测试``AddThreeInts.srv``@{"calib_text": " `[4608] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4608>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:531
msgid "With a few modifications to the service/client package created in a previous tutorial (:doc:`C++ <./Writing-A-Simple-Cpp-Service-And-Client>` or :doc:`Python <./Writing-A-Simple-Py-Service-And-Client>`), you can see ``AddThreeInts.srv`` in action. Since you'll be changing the original two integer request srv to a three integer request srv, the output will be slightly different."
msgstr "在之前的教程（:doc:`C++ <./Writing-A-Simple-Cpp-Service-And-Client>`或:doc:`Python <./Writing-A-Simple-Py-Service-And-Client>`）创建的服务/客户端包上做一些修改，你就可以看到``AddThreeInts.srv``的效果。由于你将原来的两个整数请求 srv 更改为三个整数请求 srv，输出结果会有些不同。@{"calib_text": " `[4609] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4609>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:534
msgid "**Service**"
msgstr "**服务端**@{"calib_text": " `[4610] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4610>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:605
msgid "**Client**"
msgstr "**客户端**@{"calib_text": " `[4611] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4611>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:824
msgid "In this tutorial, you learned how to create custom interfaces in their own package and how to utilize those interfaces in other packages."
msgstr "在本教程中，您学习了如何在自己的软件包中创建自定义接口，并如何在其他软件包中利用这些接口。@{"calib_text": " `[4612] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4612>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:826
msgid "This tutorial only scratches the surface about defining custom interfaces. You can learn more about it in :doc:`About ROS 2 interfaces <../../Concepts/About-ROS-Interfaces>`."
msgstr "本教程只是对定义自定义接口的表面进行了涉及。您可以在 :doc:`ROS 2接口介绍 <../../Concepts/About-ROS-Interfaces>`中了解更多相关内容。@{"calib_text": " `[4613] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4613>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:832
msgid "The :doc:`next tutorial <./Single-Package-Define-And-Use-Interface>` covers more ways to use interfaces in ROS 2."
msgstr "在 :doc:`下一个教程 <./Single-Package-Define-And-Use-Interface>` 中，将介绍在ROS 2中使用接口的更多方法。@{"calib_text": " `[4614] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4614>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:8
msgid "Using ``ros2doctor`` to identify issues"
msgstr "使用``ros2doctor``来识别问题@{"calib_text": " `[4615] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4615>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:10
msgid "**Goal:** Identify issues in your ROS 2 setup using the ``ros2doctor`` tool."
msgstr "**目标:** 使用``ros2doctor``工具识别您的ROS 2设置中的问题。@{"calib_text": " `[4616] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4616>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:23
msgid "When your ROS 2 setup is not running as expected, you can check its settings with the ``ros2doctor`` tool."
msgstr "当您的ROS 2设置未按预期运行时，您可以使用``ros2doctor``工具检查其设置。@{"calib_text": " `[4617] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4617>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:25
msgid "``ros2doctor`` checks all aspects of ROS 2, including platform, version, network, environment, running systems and more, and warns you about possible errors and reasons for issues."
msgstr "``ros2doctor``检查ROS 2的所有方面，包括平台、版本、网络、环境、运行系统等，并向您警告可能的错误和问题原因。@{"calib_text": " `[4618] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4618>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:30
msgid "``ros2doctor`` is part of the ``ros2cli`` package. As long as you have ``ros2cli`` installed (which any normal install should have), you will be able to use ``ros2doctor``."
msgstr "``ros2doctor``是``ros2cli``包的一部分。只要您安装了``ros2cli``（任何正常安装都应该有），您就可以使用``ros2doctor``。@{"calib_text": " `[4619] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4619>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:33
msgid "This tutorial uses :doc:`turtlesim <../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>` to illustrate some of the examples."
msgstr "本教程使用 :doc:`turtlesim <../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>` 来演示一些例子。@{"calib_text": " `[4620] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4620>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:39
msgid "1 Check your setup"
msgstr "1 检查你的设置@{"calib_text": " `[4621] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4621>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:41
msgid "Let's examine your general ROS 2 setup as a whole with ``ros2doctor``. First, source ROS 2 in a new terminal, then enter the command:"
msgstr "让我们用 ``ros2doctor`` 来检查你的整个ROS 2设置。首先，在新终端中source ROS 2，然后输入以下命令：@{"calib_text": " `[4622] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4622>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:48
msgid "This will conduct checks over all your setup modules and return warnings and errors."
msgstr "这将对你的所有设置模块进行检查，并返回警告和错误。@{"calib_text": " `[4623] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4623>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:50
msgid "If your ROS 2 setup is in perfect shape, you'll see a message similar to this:"
msgstr "如果您的ROS 2配置完美无缺，您将看到类似于以下的消息:@{"calib_text": " `[4624] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4624>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:56
msgid "However, it's not unusual to have a few warnings returned. A ``UserWarning`` doesn't mean your setup is unusable; it's more likely just an indication that something is configured in a way that's not ideal."
msgstr "然而，出现一些警告是很正常的。``UserWarning``并不意味着您的配置无法使用；更可能只是指示某些配置不太理想。@{"calib_text": " `[4625] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4625>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:59
msgid "If you do receive a warning, it will look something like this:"
msgstr "如果您收到一个警告，它会类似于以下的样子:@{"calib_text": " `[4626] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4626>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:65
msgid "For example, ``ros2doctor`` will find this warning if you're using an unstable ROS 2 distribution:"
msgstr "例如，如果您使用一个不稳定的ROS 2发行版，``ros2doctor``将发现此警告:@{"calib_text": " `[4627] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4627>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:71
msgid "If ``ros2doctor`` only finds warnings in your system, you will still receive the ``All <n> checks passed`` message."
msgstr "如果``ros2doctor``在您的系统中只发现了警告，您仍将收到``所有 <n> 个检查通过``的消息。@{"calib_text": " `[4628] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4628>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:73
msgid "Most checks are categorized as warnings as opposed to errors. It's mostly up to you, the user, to determine the importance of the feedback ``ros2doctor`` returns. If it does find a rare error in your setup, indicated by ``UserWarning: ERROR:``, the check is considered failed."
msgstr "大多数检查被归类为警告而不是错误。大部分情况下，您作为用户需确定``ros2doctor``返回的反馈的重要性。如果它在您的设置中发现了罕见的错误，其标志是``UserWarning: ERROR:``，则该检查被视为失败。@{"calib_text": " `[4629] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4629>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:77
msgid "You will see a message similar to the following list of issue feedback:"
msgstr "您将看到以下类似的问题反馈列表消息：@{"calib_text": " `[4630] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4630>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:85
msgid "An error indicates the system is missing important settings or functions that are crucial to ROS 2. Errors should be addressed to ensure the system functions properly."
msgstr "错误指示系统缺少对ROS 2至关重要的设置或功能。应该解决错误以确保系统正常运行。@{"calib_text": " `[4631] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4631>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:89
msgid "2 Check a system"
msgstr "2 检查系统@{"calib_text": " `[4632] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4632>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:91
msgid "You can also examine a running ROS 2 system to identify possible causes for issues. To see ``ros2doctor`` working on a running system, let's run turtlesim, which has nodes actively communicating with each other."
msgstr "您还可以检查正在运行的ROS 2系统，以确定可能导致问题的原因。为了查看``ros2doctor``在正在运行的系统上的工作情况，让我们运行turtlesim，其中的节点正在积极地相互通信。@{"calib_text": " `[4633] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4633>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:94
msgid "Start up the system by opening a new terminal, sourcing ROS 2, and entering the command:"
msgstr "通过打开新的终端、设置ROS 2环境变量并输入以下命令来启动系统：@{"calib_text": " `[4634] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4634>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:100
msgid "Open another terminal and source ROS 2 to run the teleop controls:"
msgstr "打开另一个终端并设置ROS 2环境变量以运行teleop控制器：@{"calib_text": " `[4635] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4635>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:106
msgid "Now run ``ros2doctor`` again in its own terminal. You will see the warnings and errors you had the last time you ran ``ros2doctor`` on your setup if you had any. Following those will be a couple new warnings relating to the system itself:"
msgstr "现在在一个新的终端中再次运行 ``ros2doctor``。如果你在上次运行 ``ros2doctor`` 时遇到了警告和错误，你将会看到它们。接下来会有一些与系统本身相关的新警告：@{"calib_text": " `[4636] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4636>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:115
msgid "It seems that the ``/turtlesim`` node publishes data to two topics that aren't being subscribed to, and ``ros2doctor`` thinks this could possibly lead to issues."
msgstr "看起来 ``/turtlesim`` 节点发布了数据到两个未被订阅的话题上，``ros2doctor`` 认为这可能会导致问题。@{"calib_text": " `[4637] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4637>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:117
msgid "If you run commands to echo the ``/color_sensor`` and ``/pose`` topics, those warnings will disappear because the publishers will have subscribers."
msgstr "如果你运行命令来回显 ``/color_sensor`` 和 ``/pose`` 话题，这些警告将会消失，因为发布者将会有订阅者。@{"calib_text": " `[4638] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4638>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:119
msgid "You can try this by opening two new terminals while turtlesim is still running, sourcing ROS 2 in each, and running each of the following commands in their own terminal:"
msgstr "你可以尝试在 turtlesim 仍然运行的情况下，在两个新终端中打开，每个终端中都 source ROS 2，并在各自的终端中运行以下命令：@{"calib_text": " `[4639] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4639>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:129
msgid "Then run ``ros2doctor`` in its terminal again. The ``publisher without subscriber`` warnings will be gone. (Make sure to enter ``Ctrl+C`` in the terminals where you ran ``echo``)."
msgstr "然后再次在其终端中运行``ros2doctor``命令。``publisher without subscriber``的警告将会消失。（确保在运行``echo``命令的终端中按下``Ctrl+C``）。@{"calib_text": " `[4640] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4640>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:133
msgid "Now try exiting either the turtlesim window or quitting the teleop and running ``ros2doctor`` again. You'll see more warnings indicating ``publisher without subscriber`` or ``subscriber without publisher`` for different topics, now that one node in the system isn't available."
msgstr "现在尝试退出turtlesim窗口或停止teleop，并再次运行``ros2doctor``命令。你会看到更多警告，指示不同主题的``publisher without subscriber``或``subscriber without publisher``，现在系统中的一个节点不可用。@{"calib_text": " `[4641] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4641>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:136
msgid "In a complex system with many nodes, ``ros2doctor`` would be invaluable for identifying possible reasons for communication issues."
msgstr "在一个包含许多节点的复杂系统中，``ros2doctor``对于识别通信问题的可能原因非常有价值。@{"calib_text": " `[4642] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4642>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:139
msgid "3 Get a full report"
msgstr "3 获取完整报告@{"calib_text": " `[4643] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4643>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:141
msgid "While ``ros2doctor`` will let you know warnings about your network, system, etc., running it with the ``--report`` argument will give you much more detail to help you analyze issues."
msgstr "虽然``ros2doctor``会提供关于网络、系统等方面的警告，但是使用``--report``参数运行它将提供更详细的信息，帮助您分析问题。@{"calib_text": " `[4644] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4644>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:143
msgid "You might want to use ``--report`` if you get a warning about your network setup and want to find out exactly what part of your configuration is causing the warning."
msgstr "如果您收到关于网络设置的警告，并想要确切地找出导致警告的配置部分，可以使用``--report``。@{"calib_text": " `[4645] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4645>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:145
msgid "It's also very helpful when you need to open a support ticket to get help with ROS 2. You can copy and paste the relevant parts of your report into the ticket so the people helping you can better understand your environment and provide better assistance."
msgstr "当您需要开启一个支持工单以获取ROS 2的帮助时，这也非常有帮助。您可以将报告的相关部分复制粘贴到工单中，以便帮助您的人员更好地了解您的环境并提供更好的支持。@{"calib_text": " `[4646] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4646>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:148
msgid "To get a full report, enter the following command in the terminal:"
msgstr "要获取完整的报告，请在终端中输入以下命令：@{"calib_text": " `[4647] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4647>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:154
msgid "Which will return a list of information categorized into five groups:"
msgstr "将返回按五个组进行分类的信息列表：@{"calib_text": " `[4648] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4648>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:173
msgid "You can crosscheck the information here against the warnings you get when running ``ros2 doctor``. For example, if ``ros2doctor`` returned the warning (mentioned earlier) that your distribution is “not fully supported or tested”, you might take a look at the ``ROS 2 INFORMATION`` section of the report:"
msgstr "您可以将此处的信息与运行``ros2 doctor``时收到的警告进行交叉检查。例如，如果``ros2 doctor``返回了前面提到的警告，即您的发行版“不完全受支持或经过测试”，您可以查看报告的``ROS 2 INFORMATION``部分：@{"calib_text": " `[4649] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4649>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:183
msgid "Here you can see the ``distribution status`` is ``prerelease``, which explains why it's not fully supported."
msgstr "在这里，您可以看到``distribution status``为``prerelease``，这解释了为什么它不被完全支持。@{"calib_text": " `[4650] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4650>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:189
msgid "``ros2doctor`` will inform you of problems in your ROS 2 setup and running systems. You can get a deeper look at information behind those warnings by using the ``--report`` argument."
msgstr "``ros2 doctor``会通知您ROS 2设置和运行系统中的问题。您可以使用``--report``参数深入了解这些警告背后的信息。@{"calib_text": " `[4651] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4651>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:192
msgid "Keep in mind, ``ros2doctor`` is not a debug tool; it won't help with errors in your code or on the implementation side of your system."
msgstr "请记住，“ros2doctor”不是一个调试工具；它不能帮助您解决代码错误或系统实现方面的问题。@{"calib_text": " `[4652] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4652>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:198
msgid "`ros2doctor's README <https://github.com/ros2/ros2cli/tree/humble/ros2doctor>`__ will tell you more about different arguments. You might want to take a look around the ``ros2doctor`` repo as well, since it's fairly beginner friendly and a great place to get started with contributing."
msgstr "``ros2doctor`` 的 README <https://github.com/ros2/ros2cli/tree/humble/ros2doctor> 会告诉您更多关于不同参数的信息。您可能也想在 ``ros2doctor`` 存储库中查看一下，因为它非常适合初学者，并且是一个开始贡献的绝佳地点。@{"calib_text": " `[4653] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4653>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:204
msgid "You've completed the beginner level tutorials!"
msgstr "您已经完成了初学者级别的教程！@{"calib_text": " `[4654] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4654>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:6
msgid "Creating and using plugins (C++)"
msgstr "创建和使用插件（C++）@{"calib_text": " `[4655] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4655>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:8
msgid "**Goal:** Learn to create and load a simple plugin using pluginlib."
msgstr "**目标:** 学习使用pluginlib创建和加载简单插件。@{"calib_text": " `[4656] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4656>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:21
msgid "This tutorial is derived from `<http://wiki.ros.org/pluginlib>`_ and `Writing and Using a Simple Plugin Tutorial <http://wiki.ros.org/pluginlib/Tutorials/Writing%20and%20Using%20a%20Simple%20Plugin>`_."
msgstr "本教程源自 `<http://wiki.ros.org/pluginlib>`_ 和 `编写和使用简单插件教程 <http://wiki.ros.org/pluginlib/Tutorials/Writing%20and%20Using%20a%20Simple%20Plugin>`_。@{"calib_text": " `[4657] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4657>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:23
msgid "pluginlib is a C++ library for loading and unloading plugins from within a ROS package. Plugins are dynamically loadable classes that are loaded from a runtime library (i.e. shared object, dynamically linked library). With pluginlib, one does not have to explicitly link their application against the library containing the classes -- instead pluginlib can open a library containing exported classes at any point without the application having any prior awareness of the library or the header file containing the class definition. Plugins are useful for extending/modifying application behavior without needing the application source code."
msgstr "pluginlib是一个用于在ROS软件包中加载和卸载插件的C++库。插件是动态可加载的类，从运行时库（即共享对象、动态链接库）中加载。使用pluginlib，无需显式地将应用程序与包含类的库进行链接，而是可以在任何时候打开包含导出类的库，而应用程序对库或包含类定义的头文件没有任何先前的了解。插件对于扩展/修改应用程序行为而无需应用程序源代码非常有用。@{"calib_text": " `[4658] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4658>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:31
msgid "This tutorial assumes basic C++ knowledge and that you have ``pluginlib`` installed."
msgstr "本教程假设你具有基本的C++知识，并且已经安装了``pluginlib``。@{"calib_text": " `[4659] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4659>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:41
msgid "In this tutorial, you will create two new packages, one that defines the base class, and another that provides the plugins. The base class will define a generic polygon class, and then our plugins will define specific shapes."
msgstr "在本教程中，您将创建两个新的软件包，一个定义基类，另一个提供插件。基类将定义一个通用的多边形类，然后我们的插件将定义特定的形状。@{"calib_text": " `[4660] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4660>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:45
msgid "1 Create the Base Class Package"
msgstr "1 创建基类软件包@{"calib_text": " `[4661] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4661>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:47
msgid "Create a new empty package in your ``ros2_ws/src`` folder with the following command:"
msgstr "在``ros2_ws/src``文件夹中使用以下命令创建一个新的空软件包：@{"calib_text": " `[4662] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4662>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:54
msgid "Open your favorite editor, edit ``ros2_ws/src/polygon_base/include/polygon_base/regular_polygon.hpp``, and paste the following inside of it:"
msgstr "打开您喜欢的编辑器，编辑``ros2_ws/src/polygon_base/include/polygon_base/regular_polygon.hpp``文件，并将以下内容粘贴到其中：@{"calib_text": " `[4663] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4663>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:77
msgid "This code above should be pretty self-explanatory... we're creating an abstract class called ``RegularPolygon``. One thing to notice is the presence of the initialize method. With ``pluginlib``, a constructor without parameters is required, so if any parameters to the class are needed, we use the initialize method to pass them to the object."
msgstr "上面的代码应该很容易理解...我们正在创建一个名为``RegularPolygon``的抽象类。需要注意的一件事是存在初始化方法。在``pluginlib``中，需要一个没有参数的构造函数，所以如果需要类的任何参数，我们使用初始化方法将它们传递给对象。@{"calib_text": " `[4664] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4664>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:81
msgid "We need to make this header available to other classes, so open ``ros2_ws/src/polygon_base/CMakeLists.txt`` for editing. Add the following lines after the ``ament_target_dependencies`` command:"
msgstr "我们需要使这个头文件对其他类可用，所以打开``ros2_ws/src/polygon_base/CMakeLists.txt``进行编辑。在``ament_target_dependencies``命令之后添加以下行：@{"calib_text": " `[4665] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4665>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:91
msgid "And add this command before the ``ament_package`` command:"
msgstr "在``ament_package``命令之前添加此命令：@{"calib_text": " `[4666] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4666>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:99
msgid "We will return to this package later to write our test node."
msgstr "我们将在稍后返回这个软件包来编写我们的测试节点。@{"calib_text": " `[4667] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4667>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:102
msgid "2 Create the Plugin Package"
msgstr "2 创建插件包@{"calib_text": " `[4668] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4668>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:104
msgid "Now we're going to write two non-virtual implementations of our abstract class. Create a second empty package in your ``ros2_ws/src`` folder with the following command:"
msgstr "现在我们要编写两个非虚拟实现我们的抽象类。在 ``ros2_ws/src`` 文件夹中创建第二个空包，使用以下命令：@{"calib_text": " `[4669] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4669>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:112
msgid "2.1 Source code for the plugins"
msgstr "2.1 插件的源代码@{"calib_text": " `[4670] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4670>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:114
msgid "Open ``ros2_ws/src/polygon_plugins/src/polygon_plugins.cpp`` for editing, and paste the following inside of it:"
msgstr "打开 ``ros2_ws/src/polygon_plugins/src/polygon_plugins.cpp`` 进行编辑，并将以下内容粘贴到其中：@{"calib_text": " `[4671] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4671>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:168
msgid "The implementation of the Square and Triangle classes should be fairly straightforward: save the side length, and use it to calculate the area. The only piece that is pluginlib specific is the last three lines, which invokes some magical macros that register the classes as actual plugins. Let's go through the arguments to the ``PLUGINLIB_EXPORT_CLASS`` macro:"
msgstr "Square和Triangle类的实现应该相对简单：保存边长，并使用它来计算面积。与pluginlib特定相关的部分是最后三行，它们调用了一些神奇的宏来将这些类注册为实际的插件。让我们来看看``PLUGINLIB_EXPORT_CLASS``宏的参数：@{"calib_text": " `[4672] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4672>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:172
msgid "The fully-qualified type of the plugin class, in this case, ``polygon_plugins::Square``."
msgstr "插件类的完全限定类型，在这种情况下为``polygon_plugins::Square``。@{"calib_text": " `[4673] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4673>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:173
msgid "The fully-qualified type of the base class, in this case, ``polygon_base::RegularPolygon``."
msgstr "基类的完全限定类型，在这种情况下为``polygon_base::RegularPolygon``。@{"calib_text": " `[4674] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4674>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:176
msgid "2.2 Plugin Declaration XML"
msgstr "2.2 插件声明 XML@{"calib_text": " `[4675] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4675>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:178
msgid "The steps above make it so that instances of our plugins can be created once the library they exist in is loaded, but the plugin loader still needs a way to find that library and to know what to reference within that library. To this end, we'll also create an XML file that, along with a special export line in the package manifest, makes all the necessary information about our plugins available to the ROS toolchain."
msgstr "上述步骤使得在加载包含插件的库时可以创建插件的实例，但是插件加载器仍然需要找到该库并知道在库中引用的内容。为此，我们还将创建一个XML文件，该文件与包清单中的特殊导出行一起，将关于插件的所有必要信息提供给ROS工具链。@{"calib_text": " `[4676] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4676>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:181
msgid "Create ``ros2_ws/src/polygon_plugins/plugins.xml`` with the following code:"
msgstr "在``ros2_ws/src/polygon_plugins/plugins.xml``中创建以下代码：@{"calib_text": " `[4677] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4677>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:194
msgid "A couple things to note:"
msgstr "需要注意的几点：@{"calib_text": " `[4678] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4678>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:196
msgid "The ``library`` tag gives the relative path to a library that contains the plugins that we want to export. In ROS 2, that is just the name of the library. In ROS 1, it contained the prefix ``lib`` or sometimes ``lib/lib`` (i.e. ``lib/libpolygon_plugins``), but here it is simpler."
msgstr "``library``标签提供了一个相对路径，指向包含我们要导出的插件的库。在ROS 2中，这只是库的名称。在ROS 1中，它包含前缀``lib``或者有时是``lib/lib``（即``lib/libpolygon_plugins``），但在这里更简单。@{"calib_text": " `[4679] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4679>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:198
msgid "The ``class`` tag declares a plugin that we want to export from our library. Let's go through its parameters:"
msgstr "``class`` 标签声明了我们想要从库中导出的插件。让我们来看一下它的参数：@{"calib_text": " `[4680] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4680>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:201
msgid "``type``: The fully qualified type of the plugin. For us, that's ``polygon_plugins::Square``."
msgstr "``type``: 插件的完全限定类型。对于我们来说，那是 ``polygon_plugins::Square``。@{"calib_text": " `[4681] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4681>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:202
msgid "``base_class``: The fully qualified base class type for the plugin. For us, that's ``polygon_base::RegularPolygon``."
msgstr "``base_class``: 插件的完全限定基类类型。对于我们来说，那是 ``polygon_base::RegularPolygon``。@{"calib_text": " `[4682] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4682>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:203
msgid "``description``: A description of the plugin and what it does."
msgstr "``description``: 插件的描述以及它的功能。@{"calib_text": " `[4683] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4683>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:204
msgid "``name``: There used to be a name attribute, but it is no longer required."
msgstr "``name``: 以前有一个名字属性，但现在不再需要。@{"calib_text": " `[4684] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4684>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:207
msgid "2.3 CMake Plugin Declaration"
msgstr "2.3 CMake插件声明@{"calib_text": " `[4685] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4685>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:209
msgid "The last step is to export your plugins via ``CMakeLists.txt``. This is a change from ROS 1, where the exporting was done via ``package.xml``. Add the following line to your ``ros2_ws/src/polygon_plugins/CMakeLists.txt`` after the line reading ``find_package(pluginlib REQUIRED)``:"
msgstr "最后一步是通过``CMakeLists.txt``导出你的插件。这是与ROS 1不同的地方，ROS 1是通过``package.xml``来导出插件的。在读取``find_package(pluginlib REQUIRED)``这一行后，在你的``ros2_ws/src/polygon_plugins/CMakeLists.txt``中添加以下代码行：@{"calib_text": " `[4686] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4686>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:217
msgid "The arguments to the ``pluginlib_export_plugin_description_file`` command are:"
msgstr "``pluginlib_export_plugin_description_file``命令的参数为：@{"calib_text": " `[4687] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4687>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:219
msgid "The package with the base class, i.e. ``polygon_base``."
msgstr "基类的包，即``polygon_base``。@{"calib_text": " `[4688] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4688>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:220
msgid "The relative path to the Plugin Declaration xml, i.e. ``plugins.xml``."
msgstr "插件声明 xml 的相对路径，即``plugins.xml``。@{"calib_text": " `[4689] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4689>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:223
msgid "3 Use the Plugins"
msgstr "3 使用插件@{"calib_text": " `[4690] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4690>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:225
msgid "Now it's time to use the plugins. This can be done in any package, but here we're going to do it in the base package. Edit ``ros2_ws/src/polygon_base/src/area_node.cpp`` to contain the following:"
msgstr "现在是时候使用插件了。可以在任何包中完成此操作，但是这里我们将在基础包中进行。编辑``ros2_ws/src/polygon_base/src/area_node.cpp``，使其包含以下内容：@{"calib_text": " `[4691] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4691>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:261
msgid "The ``ClassLoader`` is the key class to understand, defined in the ``class_loader.hpp`` `header file <https://github.com/ros/pluginlib/blob/ros2/pluginlib/include/pluginlib/class_loader.hpp>`_:"
msgstr "``ClassLoader``是理解的关键类，定义在``class_loader.hpp`` `头文件 <https://github.com/ros/pluginlib/blob/ros2/pluginlib/include/pluginlib/class_loader.hpp>`_中：@{"calib_text": " `[4692] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4692>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:263
msgid "It is templated with the base class, i.e. ``polygon_base::RegularPolygon``."
msgstr "它以基类``polygon_base::RegularPolygon``进行模板化。@{"calib_text": " `[4693] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4693>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:264
msgid "The first argument is a string for the package name of the base class, i.e. ``polygon_base``."
msgstr "第一个参数是基类的包名字符串，例如``polygon_base``。@{"calib_text": " `[4694] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4694>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:265
msgid "The second argument is a string with the fully qualified base class type for the plugin, i.e. ``polygon_base::RegularPolygon``."
msgstr "第二个参数是插件的完全限定基类类型的字符串，例如``polygon_base::RegularPolygon``。@{"calib_text": " `[4695] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4695>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:267
msgid "There are a number of ways to instantiate an instance of the class. In this example, we're using shared pointers. We just need to call ``createSharedInstance`` with the fully-qualified type of the plugin class, in this case, ``polygon_plugins::Square``."
msgstr "有许多实例化类的方法。在这个例子中，我们使用了共享指针。我们只需要使用完全限定的插件类类型调用 ``createSharedInstance``，在本例中是 ``polygon_plugins::Square``。@{"calib_text": " `[4696] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4696>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:271
msgid "Important note: the ``polygon_base`` package in which this node is defined does NOT depend on the ``polygon_plugins`` class. The plugins will be loaded dynamically without any dependency needing to be declared. Furthermore, we're instantiating the classes with hardcoded plugin names, but you can also do so dynamically with parameters, etc."
msgstr "重要提示：定义这个节点的 ``polygon_base`` 包不依赖于 ``polygon_plugins`` 类。插件将会在不需要声明任何依赖关系的情况下进行动态加载。此外，我们通过硬编码插件名称来实例化类，但你也可以使用参数等动态方式来实现。@{"calib_text": " `[4697] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4697>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:276 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:436 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:308 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:416 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:256
msgid "4 Build and run"
msgstr "4 构建和运行@{"calib_text": " `[4698] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4698>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:278
msgid "Navigate back to the root of your workspace, ``ros2_ws``, and build your new packages:"
msgstr "返回你的工作空间根目录 ``ros2_ws``，并构建你的新包：@{"calib_text": " `[4699] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4699>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:284
msgid "From ``ros2_ws``, be sure to source the setup files:"
msgstr "从 ``ros2_ws`` 中，请确保源码了设置文件：@{"calib_text": " `[4700] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4700>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:312
msgid "It should print:"
msgstr "应该打印出：@{"calib_text": " `[4701] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4701>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:322
msgid "Congratulations! You've just written and used your first plugins."
msgstr "恭喜！您刚刚编写并使用了您的第一个插件。@{"calib_text": " `[4702] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4702>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:9
msgid "Implementing custom interfaces"
msgstr "实现自定义接口@{"calib_text": " `[4703] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4703>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:11
msgid "**Goal:** Learn more ways to implement custom interfaces in ROS 2."
msgstr "**目标：**了解在ROS 2中实现自定义接口的更多方法。@{"calib_text": " `[4704] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4704>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:24
msgid "In a :doc:`previous tutorial <./Custom-ROS2-Interfaces>`, you learned how to create custom msg and srv interfaces."
msgstr "在之前的教程中，你学习了如何创建自定义的msg和srv接口。@{"calib_text": " `[4705] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4705>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:26
msgid "While best practice is to declare interfaces in dedicated interface packages, sometimes it can be convenient to declare, create and use an interface all in one package."
msgstr "虽然最佳实践是在专用接口包中声明接口，但有时候在一个包中声明、创建和使用接口会更加方便。@{"calib_text": " `[4706] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4706>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:28
msgid "Recall that interfaces can currently only be defined in CMake packages. It is possible, however, to have Python libraries and nodes in CMake packages (using `ament_cmake_python <https://github.com/ament/ament_cmake/tree/humble/ament_cmake_python>`_), so you could define interfaces and Python nodes together in one package. We'll use a CMake package and C++ nodes here for the sake of simplicity."
msgstr "请注意，目前只能在CMake包中定义接口。然而，可以在CMake包中使用Python库和节点（使用`ament_cmake_python <https://github.com/ament/ament_cmake/tree/humble/ament_cmake_python>`_），因此你可以在一个包中同时定义接口和Python节点。为了简单起见，我们在这里使用一个CMake包和C++节点。@{"calib_text": " `[4707] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4707>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:32
msgid "This tutorial will focus on the msg interface type, but the steps here are applicable to all interface types."
msgstr "本教程将重点介绍msg接口类型，但这里的步骤适用于所有接口类型。@{"calib_text": " `[4708] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4708>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:37
msgid "We assume you've reviewed the basics in the :doc:`./Custom-ROS2-Interfaces` tutorial before working through this one."
msgstr "我们假设您在完成本教程之前已经阅读了 :doc:`./Custom-ROS2-Interfaces` 教程的基础知识。@{"calib_text": " `[4709] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4709>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:39
msgid "You should have :doc:`ROS 2 installed <../../Installation>`, a :doc:`workspace <./Creating-A-Workspace/Creating-A-Workspace>`, and an understanding of :doc:`creating packages <./Creating-Your-First-ROS2-Package>`."
msgstr "您应该已经安装了 :doc:`ROS 2 <../../Installation>`，创建了一个 :doc:`工作空间 <./Creating-A-Workspace/Creating-A-Workspace>`，并且了解了 :doc:`如何创建包 <./Creating-Your-First-ROS2-Package>`。@{"calib_text": " `[4710] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4710>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:41
msgid "As always, don't forget to :doc:`source ROS 2 <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` in every new terminal you open."
msgstr "一如既往，请不要忘记在每个新打开的终端中 :doc:`source ROS 2 <../Beginner-CLI-Tools/Configuring-ROS2-Environment>`。@{"calib_text": " `[4711] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4711>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:49
msgid "In your workspace ``src`` directory, create a package ``more_interfaces`` and make a directory within it for msg files:"
msgstr "在您的工作空间 ``src`` 目录下，创建一个名为 ``more_interfaces`` 的包，并在其中创建一个用于存放消息文件的目录：@{"calib_text": " `[4712] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4712>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:57
msgid "2 Create a msg file"
msgstr "2 创建一个消息文件@{"calib_text": " `[4713] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4713>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:59
msgid "Inside ``more_interfaces/msg``, create a new file ``AddressBook.msg``, and paste the following code to create a message meant to carry information about an individual:"
msgstr "在 ``more_interfaces/msg`` 目录下，创建一个名为 ``AddressBook.msg`` 的新文件，并粘贴以下代码以创建一个用于携带个人信息的消息：@{"calib_text": " `[4714] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4714>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:72
msgid "This message is composed of these fields:"
msgstr "该消息由以下字段组成：@{"calib_text": " `[4715] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4715>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:74
msgid "first_name: of type string"
msgstr "first_name: 字符串类型@{"calib_text": " `[4716] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4716>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:75
msgid "last_name: of type string"
msgstr "last_name: 字符串类型@{"calib_text": " `[4717] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4717>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:76
msgid "phone_number: of type string"
msgstr "phone_number: 字符串类型@{"calib_text": " `[4718] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4718>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:77
msgid "phone_type: of type uint8, with several named constant values defined"
msgstr "phone_type: uint8 类型，具有多个已定义的命名常量值@{"calib_text": " `[4719] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4719>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:79
msgid "Note that it's possible to set default values for fields within a message definition. See :doc:`../../Concepts/About-ROS-Interfaces` for more ways you can customize interfaces."
msgstr "请注意，可以为消息定义中的字段设置默认值。详见 :doc:`../../Concepts/About-ROS-Interfaces` 以了解更多自定义接口的方式。@{"calib_text": " `[4720] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4720>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:82
msgid "Next, we need to make sure that the msg file is turned into source code for C++, Python, and other languages."
msgstr "接下来，我们需要确保将 msg 文件转换为 C++、Python 和其他语言的源代码。@{"calib_text": " `[4721] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4721>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:85
msgid "2.1 Build a msg file"
msgstr "2.1 构建 msg 文件@{"calib_text": " `[4722] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4722>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:87
msgid "Open ``package.xml`` and add the following lines:"
msgstr "打开 ``package.xml`` 并添加以下行：@{"calib_text": " `[4723] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4723>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:97
msgid "Note that at build time, we need ``rosidl_default_generators``, while at runtime, we only need ``rosidl_default_runtime``."
msgstr "请注意，在构建时我们需要``rosidl_default_generators``，而在运行时，我们只需要``rosidl_default_runtime``。@{"calib_text": " `[4724] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4724>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:99
msgid "Open ``CMakeLists.txt`` and add the following lines:"
msgstr "打开``CMakeLists.txt``并添加以下行：@{"calib_text": " `[4725] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4725>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:101
msgid "Find the package that generates message code from msg/srv files:"
msgstr "找到生成消息代码的软件包：@{"calib_text": " `[4726] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4726>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:107
msgid "Declare the list of messages you want to generate:"
msgstr "声明您想要生成的消息列表：@{"calib_text": " `[4727] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4727>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:115
msgid "By adding the .msg files manually, we make sure that CMake knows when it has to reconfigure the project after you add other .msg files."
msgstr "通过手动添加.msg文件，我们确保CMake知道在添加其他.msg文件后何时重新配置项目。@{"calib_text": " `[4728] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4728>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:117
msgid "Generate the messages:"
msgstr "生成消息：@{"calib_text": " `[4729] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4729>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:125
msgid "Also make sure you export the message runtime dependency:"
msgstr "还要确保导出消息的运行时依赖项：@{"calib_text": " `[4730] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4730>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:131
msgid "Now you're ready to generate source files from your msg definition. We'll skip the compile step for now as we'll do it all together below in step 4."
msgstr "现在您已经准备好从msg定义生成源文件。我们将在步骤4中一起完成，暂时跳过编译步骤。@{"calib_text": " `[4731] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4731>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:135
msgid "2.2 (Extra) Set multiple interfaces"
msgstr "2.2（额外）设置多个接口@{"calib_text": " `[4732] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4732>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:139
msgid "You can use ``set`` in ``CMakeLists.txt`` to neatly list all of your interfaces:"
msgstr "您可以在``CMakeLists.txt``中使用``set``来整洁地列出所有接口：@{"calib_text": " `[4733] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4733>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:155
msgid "And generate all lists at once like so:"
msgstr "然后一次生成所有列表，如下所示：@{"calib_text": " `[4734] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4734>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:166
msgid "3 Use an interface from the same package"
msgstr "3 从同一软件包中使用接口@{"calib_text": " `[4735] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4735>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:168
msgid "Now we can start writing code that uses this message."
msgstr "现在我们可以开始编写使用这个消息的代码。@{"calib_text": " `[4736] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4736>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:170
msgid "In ``more_interfaces/src`` create a file called ``publish_address_book.cpp`` and paste the following code:"
msgstr "在``more_interfaces/src``目录下创建一个名为``publish_address_book.cpp``的文件，并粘贴以下代码：@{"calib_text": " `[4737] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4737>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:223
msgid "3.1 The code explained"
msgstr "3.1 代码解释@{"calib_text": " `[4738] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4738>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:225
msgid "Include the header of our newly created ``AddressBook.msg``."
msgstr "包含我们新创建的``AddressBook.msg``的头文件。@{"calib_text": " `[4739] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4739>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:231
msgid "Create a node and an ``AddressBook`` publisher."
msgstr "创建一个节点和一个 ``AddressBook`` 发布者。@{"calib_text": " `[4740] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4740>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:246
msgid "Create a callback to publish the messages periodically."
msgstr "创建一个定期发布消息的回调函数。@{"calib_text": " `[4741] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4741>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:252
msgid "Create an ``AddressBook`` message instance that we will later publish."
msgstr "创建一个 ``AddressBook`` 消息实例，稍后我们将发布它。@{"calib_text": " `[4742] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4742>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:258
msgid "Populate ``AddressBook`` fields."
msgstr "填充 ``AddressBook`` 字段。@{"calib_text": " `[4743] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4743>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:267
msgid "Finally send the message periodically."
msgstr "最后定期发送消息。@{"calib_text": " `[4744] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4744>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:276
msgid "Create a 1 second timer to call our ``publish_msg`` function every second."
msgstr "创建一个每秒调用``publish_msg``函数的1秒定时器。@{"calib_text": " `[4745] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4745>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:283
msgid "3.2 Build the publisher"
msgstr "3.2 构建发布者。@{"calib_text": " `[4746] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4746>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:285
msgid "We need to create a new target for this node in the ``CMakeLists.txt``:"
msgstr "我们需要在``CMakeLists.txt``中为该节点创建一个新的目标：@{"calib_text": " `[4747] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4747>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:299
msgid "3.3 Link against the interface"
msgstr "3.3 链接到接口@{"calib_text": " `[4748] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4748>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:301
msgid "In order to use the messages generated in the same package we need to use the following CMake code:"
msgstr "为了在同一软件包中使用生成的消息，我们需要使用以下的CMake代码：@{"calib_text": " `[4749] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4749>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:310
msgid "This finds the relevant generated C++ code from ``AddressBook.msg`` and allows your target to link against it."
msgstr "这将从``AddressBook.msg``中找到相关的生成的C++代码，并允许您的目标进行链接。@{"calib_text": " `[4750] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4750>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:312
msgid "You may have noticed that this step was not necessary when the interfaces being used were from a different package that was built independently. This CMake code is only required when you want to use interfaces in the same package as the one in which they are defined."
msgstr "您可能已经注意到，当使用的接口来自一个独立构建的不同软件包时，这个步骤是不必要的。只有当您想要在与接口定义的软件包相同的软件包中使用接口时，才需要这个CMake代码。@{"calib_text": " `[4751] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4751>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:316
msgid "4 Try it out"
msgstr "4 尝试一下@{"calib_text": " `[4752] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4752>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:318
msgid "Return to the root of the workspace to build the package:"
msgstr "返回到工作空间的根目录以构建包：@{"calib_text": " `[4753] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4753>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:343
msgid "Then source the workspace and run the publisher:"
msgstr "然后运行以下命令激活工作空间并运行发布者：@{"calib_text": " `[4754] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4754>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:368 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:402
msgid "Or using Powershell:"
msgstr "或者使用 Powershell：@{"calib_text": " `[4755] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4755>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:375
msgid "You should see the publisher relaying the msg you defined, including the values you set in ``publish_address_book.cpp``."
msgstr "你应该看到发布者正在转发你定义的消息，包括你在 ``publish_address_book.cpp`` 中设置的值。@{"calib_text": " `[4756] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4756>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:377
msgid "To confirm the message is being published on the ``address_book`` topic, open another terminal, source the workspace, and call ``topic echo``:"
msgstr "为了确认消息正在 ``address_book`` 主题上发布，打开另一个终端，加载工作空间，并调用 ``topic echo``：@{"calib_text": " `[4757] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4757>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:409
msgid "We won't create a subscriber in this tutorial, but you can try to write one yourself for practice (use :doc:`./Writing-A-Simple-Cpp-Publisher-And-Subscriber` to help)."
msgstr "在本教程中，我们不会创建一个订阅者，但你可以尝试自己编写一个进行练习（使用 :doc:`./Writing-A-Simple-Cpp-Publisher-And-Subscriber` 来帮助你）。@{"calib_text": " `[4758] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4758>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:412
msgid "5 (Extra) Use an existing interface definition"
msgstr "5（额外）使用现有接口定义@{"calib_text": " `[4759] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4759>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:416
msgid "You can use an existing interface definition in a new interface definition. For example, let's say there is a message named ``Contact.msg`` that belongs to an existing ROS 2 package named ``rosidl_tutorials_msgs``. Assume that its definition is identical to our custom-made ``AddressBook.msg`` interface from earlier."
msgstr "您可以在新的接口定义中使用现有的接口定义。例如，假设有一个名为``Contact.msg``的消息，它属于一个名为``rosidl_tutorials_msgs``的现有ROS 2包。假设它的定义与我们之前自定义的``AddressBook.msg``接口相同。@{"calib_text": " `[4760] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4760>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:420
msgid "In that case you could have defined ``AddressBook.msg`` (an interface in the package *with* your nodes) as type ``Contact`` (an interface in a *separate* package). You could even define ``AddressBook.msg`` as an *array* of type ``Contact``, like so:"
msgstr "在这种情况下，您可以将``AddressBook.msg``（与您的节点在同一包中的接口）定义为类型``Contact``（在一个*单独的*包中的接口）。您甚至可以将``AddressBook.msg``定义为类型``Contact``的*数组*，如下所示：@{"calib_text": " `[4761] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4761>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:427
msgid "To generate this message you would need to declare a dependency on ``Contact.msg's`` package, ``rosidl_tutorials_msgs``, in ``package.xml``:"
msgstr "要生成此消息，您需要在``package.xml``中声明对``Contact.msg``所在的包``rosidl_tutorials_msgs``的依赖项：@{"calib_text": " `[4762] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4762>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:435
msgid "And in ``CMakeLists.txt``:"
msgstr "还需要在``CMakeLists.txt``中进行如下设置：@{"calib_text": " `[4763] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4763>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:446
msgid "You would also need to include the header of ``Contact.msg`` in you publisher node in order to be able to add ``contacts`` to your ``address_book``."
msgstr "你还需要在发布者节点中包含``Contact.msg``的头文件，以便能够将``contacts``添加到你的``address_book``。@{"calib_text": " `[4764] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4764>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:452
msgid "You could change the callback to something like this:"
msgstr "你可以将回调函数改为以下内容：@{"calib_text": " `[4765] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4765>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:484
msgid "Building and running these changes would show the msg defined as expected, as well as the array of msgs defined above."
msgstr "构建并运行这些更改会显示预期的消息定义，以及上面定义的消息数组。@{"calib_text": " `[4766] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4766>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:489
msgid "In this tutorial, you tried out different field types for defining interfaces, then built an interface in the same package where it's being used."
msgstr "在本教程中，你尝试了不同的字段类型来定义接口，然后在使用接口的同一软件包中构建了一个接口。@{"calib_text": " `[4767] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4767>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:491
msgid "You also learned how to use another interface as a field type, as well as the ``package.xml``, ``CMakeLists.txt``, and ``#include`` statements necessary for utilizing that feature."
msgstr "您还学习了如何将另一个接口用作字段类型，以及使用``package.xml``、``CMakeLists.txt``和``#include``语句来利用该功能所必需的内容。@{"calib_text": " `[4768] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4768>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:496
msgid "Next you will create a simple ROS 2 package with a custom parameter that you will learn to set from a launch file. Again, you can choose to write it in either :doc:`C++ <./Using-Parameters-In-A-Class-CPP>` or :doc:`Python <./Using-Parameters-In-A-Class-Python>`."
msgstr "接下来，您将创建一个简单的ROS 2软件包，其中包含一个自定义参数，您将学习如何从启动文件中设置该参数。同样，您可以选择使用 :doc:`C++ <./Using-Parameters-In-A-Class-CPP>` 或 :doc:`Python <./Using-Parameters-In-A-Class-Python>` 来编写它。@{"calib_text": " `[4769] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4769>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:502
msgid "There are `several design articles <https://design.ros2.org/#interfaces>`_ on ROS 2 interfaces and the IDL (interface definition language)."
msgstr "有关ROS 2接口和IDL（接口定义语言）的 `几篇设计文章 <https://design.ros2.org/#interfaces>`_ 可供参考。@{"calib_text": " `[4770] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4770>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:8
msgid "Using parameters in a class (C++)"
msgstr "在类中使用参数（C++）@{"calib_text": " `[4771] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4771>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:10
msgid "**Goal:** Create and run a class with ROS parameters using C++."
msgstr "**目标：**使用C++创建和运行具有ROS参数的类。@{"calib_text": " `[4772] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4772>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:23 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:23
msgid "When making your own :doc:`nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` you will sometimes need to add parameters that can be set from the launch file."
msgstr "当创建自己的 :doc:`节点 <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` 时，有时需要添加可以从启动文件中设置的参数。@{"calib_text": " `[4773] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4773>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:25
msgid "This tutorial will show you how to create those parameters in a C++ class, and how to set them in a launch file."
msgstr "本教程将向您展示如何在C++类中创建这些参数，并如何在启动文件中设置它们。@{"calib_text": " `[4774] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4774>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:30 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:30
msgid "In previous tutorials, you learned how to :doc:`create a workspace <./Creating-A-Workspace/Creating-A-Workspace>` and :doc:`create a package <./Creating-Your-First-ROS2-Package>`. You have also learned about :doc:`parameters <../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` and their function in a ROS 2 system."
msgstr "在之前的教程中，您已经学习了如何 :doc:`创建工作空间 <./Creating-A-Workspace/Creating-A-Workspace>` 和 :doc:`创建包 <./Creating-Your-First-ROS2-Package>`。您还了解了 ROS 2 系统中参数的作用和功能。@{"calib_text": " `[4775] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4775>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:43 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:43 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:44 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:43
msgid "Recall that packages should be created in the ``src`` directory, not the root of the workspace. Navigate into ``ros2_ws/src`` and create a new package:"
msgstr "请记住，包应该在“src”目录中创建，而不是工作区的根目录。进入“ros2_ws/src”并创建一个新的包：@{"calib_text": " `[4776] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4776>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:50
msgid "Your terminal will return a message verifying the creation of your package ``cpp_parameters`` and all its necessary files and folders."
msgstr "您的终端将返回一条消息，验证您的包“cpp_parameters”及其所有必要的文件和文件夹的创建。@{"calib_text": " `[4777] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4777>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:52 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:52 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:59
msgid "The ``--dependencies`` argument will automatically add the necessary dependency lines to ``package.xml`` and ``CMakeLists.txt``."
msgstr "“--dependencies”参数将自动添加必要的依赖项行到“package.xml”和“CMakeLists.txt”中。@{"calib_text": " `[4778] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4778>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:57 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:57 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:68
msgid "Because you used the ``--dependencies`` option during package creation, you don't have to manually add dependencies to ``package.xml`` or ``CMakeLists.txt``."
msgstr "因为您在包创建过程中使用了“--dependencies”选项，所以无需手动添加依赖项到“package.xml”或“CMakeLists.txt”中。@{"calib_text": " `[4779] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4779>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:59 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:59 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:70 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:69
msgid "As always, though, make sure to add the description, maintainer email and name, and license information to ``package.xml``."
msgstr "同样，确保将描述、维护者电子邮件和姓名以及许可证信息添加到 ``package.xml`` 中。@{"calib_text": " `[4780] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4780>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:70
msgid "Inside the ``ros2_ws/src/cpp_parameters/src`` directory, create a new file called ``cpp_parameters_node.cpp`` and paste the following code within:"
msgstr "在 ``ros2_ws/src/cpp_parameters/src`` 目录中创建一个名为 ``cpp_parameters_node.cpp`` 的新文件，并将以下代码粘贴到其中：@{"calib_text": " `[4781] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4781>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:118
msgid "The ``#include`` statements at the top are the package dependencies."
msgstr "顶部的 ``#include`` 语句是包依赖项。@{"calib_text": " `[4782] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4782>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:120
msgid "The next piece of code creates the class and the constructor. The first line of this constructor creates a parameter with the name ``my_parameter`` and a default value of ``world``. The parameter type is inferred from the default value, so in this case it would be set to a string type. Next the ``timer_`` is initialized with a period of 1000ms, which causes the ``timer_callback`` function to be executed once a second."
msgstr "下面的代码段创建了一个类和构造函数。构造函数的第一行创建了一个名为 ``my_parameter`` 的参数，其默认值为 ``world``。参数类型是根据默认值推断的，在这种情况下，参数类型将设置为字符串类型。接下来，``timer_`` 使用1000ms的周期进行初始化，这会导致每秒执行一次 ``timer_callback`` 函数。@{"calib_text": " `[4783] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4783>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:139
msgid "The first line of our ``timer_callback`` function gets the parameter ``my_parameter`` from the node, and stores it in ``my_param``. Next the ``RCLCPP_INFO`` function ensures the event is logged. The ``set_parameters`` function then sets the parameter ``my_parameter`` back to the default string value ``world``. In the case that the user changed the parameter externally, this ensures it is always reset back to the original."
msgstr "我们的 ``timer_callback`` 函数的第一行从节点中获取参数 ``my_parameter``，并将其存储在 ``my_param`` 中。接下来，``RCLCPP_INFO`` 函数确保事件被记录。然后，``set_parameters`` 函数将参数 ``my_parameter`` 设置回默认的字符串值 ``world``。在用户外部更改参数的情况下，这可以确保它始终被重置回原始值。@{"calib_text": " `[4784] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4784>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:156
msgid "Last is the declaration of ``timer_``."
msgstr "最后是 ``timer_`` 的声明。@{"calib_text": " `[4785] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4785>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:163
msgid "Following our ``MinimalParam`` is our ``main``. Here ROS 2 is initialized, an instance of the ``MinimalParam`` class is constructed, and ``rclcpp::spin`` starts processing data from the node."
msgstr "在我们的 ``MinimalParam`` 后面是我们的 ``main`` 函数。在这里，ROS 2 被初始化，构造了一个 ``MinimalParam`` 类的实例，并且 ``rclcpp::spin`` 开始处理来自节点的数据。@{"calib_text": " `[4786] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4786>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:177 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:162
msgid "2.1.1 (Optional) Add ParameterDescriptor"
msgstr "2.1.1（可选）添加 ParameterDescriptor。@{"calib_text": " `[4787] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4787>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:178
msgid "Optionally, you can set a descriptor for the parameter. Descriptors allow you to specify a text description of the parameter and its constraints, like making it read-only, specifying a range, etc. For that to work, the code in the constructor has to be changed to:"
msgstr "可选的，您可以为参数设置一个描述符。描述符允许您指定参数及其约束的文本描述，例如设置为只读、指定范围等。为了使其生效，构造函数中的代码必须进行更改：@{"calib_text": " `[4788] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4788>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:201 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:183
msgid "The rest of the code remains the same. Once you run the node, you can then run ``ros2 param describe /minimal_param_node my_parameter`` to see the type and description."
msgstr "其余的代码保持不变。运行节点后，您可以运行``ros2 param describe /minimal_param_node my_parameter``来查看类型和描述。@{"calib_text": " `[4789] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4789>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:208
msgid "Now open the ``CMakeLists.txt`` file. Below the dependency ``find_package(rclcpp REQUIRED)`` add the following lines of code."
msgstr "现在打开``CMakeLists.txt``文件。在依赖项``find_package(rclcpp REQUIRED)``下方添加以下代码行。@{"calib_text": " `[4790] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4790>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:224 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:215 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:310 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:258 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:189
msgid "It's good practice to run ``rosdep`` in the root of your workspace (``ros2_ws``) to check for missing dependencies before building:"
msgstr "在构建之前，最好在工作空间的根目录（``ros2_ws``）中运行``rosdep``来检查是否缺少依赖项：@{"calib_text": " `[4791] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4791>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:236 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:240 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:227 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:231 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:450 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:454 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:322 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:326 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:430 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:434 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:270 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:274 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:201 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:205
msgid "rosdep only runs on Linux, so you can skip ahead to next step."
msgstr "rosdep 只能在 Linux 上运行，所以您可以跳过下一步。@{"calib_text": " `[4792] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4792>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:242 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:233 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:329 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:277 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:207
msgid "Navigate back to the root of your workspace, ``ros2_ws``, and build your new package:"
msgstr "返回到您的工作空间的根目录 ``ros2_ws``，并构建您的新包：@{"calib_text": " `[4793] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4793>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:264 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:255 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:479 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:351 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:459 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:283 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:213
msgid "Open a new terminal, navigate to ``ros2_ws``, and source the setup files:"
msgstr "打开一个新的终端，导航到 ``ros2_ws``，并加载设置文件：@{"calib_text": " `[4794] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4794>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:292 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:422 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:283 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:422
msgid "The terminal should return the following message every second:"
msgstr "终端应该每秒返回以下消息：@{"calib_text": " `[4795] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4795>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:298 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:289
msgid "Now you can see the default value of your parameter, but you want to be able to set it yourself. There are two ways to accomplish this."
msgstr "现在您可以看到参数的默认值，但您希望能够自己设置它。有两种方法可以实现这一点。@{"calib_text": " `[4796] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4796>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:302 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:293
msgid "3.1 Change via the console"
msgstr "3.1 通过控制台进行更改@{"calib_text": " `[4797] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4797>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:304
msgid "This part will use the knowledge you have gained from the :doc:`tutorial about parameters <../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` and apply it to the node you have just created."
msgstr "本部分将使用您从 :doc:`参数教程 <../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` 中获得的知识，并将其应用到您刚刚创建的节点上。@{"calib_text": " `[4798] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4798>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:306 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:297
msgid "Make sure the node is running:"
msgstr "确保节点正在运行：@{"calib_text": " `[4799] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4799>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:312 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:303
msgid "Open another terminal, source the setup files from inside ``ros2_ws`` again, and enter the following line:"
msgstr "在另一个终端中打开，再次从``ros2_ws``目录中加载设置文件，然后输入以下命令行：@{"calib_text": " `[4800] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4800>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:318 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:309
msgid "There you will see the custom parameter ``my_parameter``. To change it, simply run the following line in the console:"
msgstr "在那里，您将看到自定义参数``my_parameter``。要进行更改，只需在控制台中运行以下命令行：@{"calib_text": " `[4801] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4801>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:325
msgid "You know it went well if you got the output ``Set parameter successful``. If you look at the other terminal, you should see the output change to ``[INFO] [minimal_param_node]: Hello earth!``"
msgstr "如果您看到输出``Set parameter successful``，则表示更改成功。如果您查看另一个终端，您应该看到输出更改为``[INFO] [minimal_param_node]: Hello earth!``@{"calib_text": " `[4802] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4802>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:329 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:322
msgid "3.2 Change via a launch file"
msgstr "3.2 通过启动文件进行更改@{"calib_text": " `[4803] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4803>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:330
msgid "You can also set the parameter in a launch file, but first you will need to add the launch directory. Inside the ``ros2_ws/src/cpp_parameters/`` directory, create a new directory called ``launch``. In there, create a new file called ``cpp_parameters_launch.py``"
msgstr "您还可以在启动文件中设置该参数，但首先需要添加启动目录。在``ros2_ws/src/cpp_parameters/``目录内，创建一个名为``launch``的新目录。在其中，创建一个名为``cpp_parameters_launch.py``的新文件。@{"calib_text": " `[4804] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4804>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:354
msgid "Here you can see that we set ``my_parameter`` to ``earth`` when we launch our node ``minimal_param_node``. By adding the two lines below, we ensure our output is printed in our console."
msgstr "在这里，您可以看到当我们启动节点``minimal_param_node``时，我们将``my_parameter``设置为``earth``。通过添加以下两行，我们确保输出打印在控制台上。@{"calib_text": " `[4805] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4805>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:362
msgid "Now open the ``CMakeLists.txt`` file. Below the lines you added earlier, add the following lines of code."
msgstr "现在打开``CMakeLists.txt``文件。在您之前添加的行下方，添加以下代码行。@{"calib_text": " `[4806] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4806>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:372 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:372
msgid "Open a console and navigate to the root of your workspace, ``ros2_ws``, and build your new package:"
msgstr "打开一个控制台并导航到您的工作空间的根目录``ros2_ws``，然后构建您的新软件包：@{"calib_text": " `[4807] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4807>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:394 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:394
msgid "Then source the setup files in a new terminal:"
msgstr "然后在新的终端中加载设置文件：@{"calib_text": " `[4808] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4808>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:416 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:416
msgid "Now run the node using the launch file we have just created:"
msgstr "现在使用刚刚创建的启动文件运行节点：@{"calib_text": " `[4809] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4809>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:431 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:432
msgid "You created a node with a custom parameter that can be set either from a launch file or the command line. You added the dependencies, executables, and a launch file to the package configuration files so that you could build and run them, and see the parameter in action."
msgstr "您创建了一个带有自定义参数的节点，可以从启动文件或命令行中进行设置。您将依赖项、可执行文件和启动文件添加到软件包配置文件中，以便您可以构建和运行它们，并查看参数的效果。@{"calib_text": " `[4810] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4810>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:437 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:438
msgid "Now that you have some packages and ROS 2 systems of your own, the :doc:`next tutorial <./Getting-Started-With-Ros2doctor>` will show you how to examine issues in your environment and systems in case you have problems."
msgstr "现在您拥有了一些软件包和自己的ROS 2系统，:doc:`下一个教程 <./Getting-Started-With-Ros2doctor>` 将向您展示如何在您的环境和系统中检查问题，以防出现问题。@{"calib_text": " `[4811] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4811>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:8
msgid "Using parameters in a class (Python)"
msgstr "在类中使用参数（Python）@{"calib_text": " `[4812] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4812>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:10
msgid "**Goal:** Create and run a class with ROS parameters using Python."
msgstr "**目标：** 使用Python创建并运行具有ROS参数的类。@{"calib_text": " `[4813] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4813>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:25
msgid "This tutorial will show you how to create those parameters in a Python class, and how to set them in a launch file."
msgstr "本教程将向您展示如何在Python类中创建这些参数，并如何在launch文件中设置它们。@{"calib_text": " `[4814] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4814>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:50
msgid "Your terminal will return a message verifying the creation of your package ``python_parameters`` and all its necessary files and folders."
msgstr "您的终端将返回一条消息，确认已创建名为``python_parameters``的软件包及其所有必要的文件和文件夹。@{"calib_text": " `[4815] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4815>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:70
msgid "Inside the ``ros2_ws/src/python_parameters/python_parameters`` directory, create a new file called ``python_parameters_node.py`` and paste the following code within:"
msgstr "在``ros2_ws/src/python_parameters/python_parameters``目录中，创建一个名为``python_parameters_node.py``的新文件，并将以下代码粘贴到其中：@{"calib_text": " `[4816] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4816>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:110
msgid "The ``import`` statements at the top are used to import the package dependencies."
msgstr "顶部的``import``语句用于导入包依赖项。@{"calib_text": " `[4817] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4817>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:112
msgid "The next piece of code creates the class and the constructor. The line ``self.declare_parameter('my_parameter', 'world')`` of the constructor creates a parameter with the name ``my_parameter`` and a default value of ``world``. The parameter type is inferred from the default value, so in this case it would be set to a string type. Next the ``timer`` is initialized with a period of 1, which causes the ``timer_callback`` function to be executed once a second."
msgstr "下面的代码创建了类和构造函数。构造函数中的``self.declare_parameter('my_parameter', 'world')``一行创建了一个名为``my_parameter``的参数，并将其默认值设置为``world``。参数类型根据默认值推断，所以在这种情况下它将被设置为字符串类型。接下来，``timer``被初始化为1的周期，这会导致``timer_callback``函数每秒执行一次。@{"calib_text": " `[4818] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4818>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:127
msgid "The first line of our ``timer_callback`` function gets the parameter ``my_parameter`` from the node, and stores it in ``my_param``. Next the ``get_logger`` function ensures the event is logged. The ``set_parameters`` function then sets the parameter ``my_parameter`` back to the default string value ``world``. In the case that the user changed the parameter externally, this ensures it is always reset back to the original."
msgstr "``timer_callback``函数的第一行从节点中获取参数``my_parameter``，并将其存储在``my_param``中。接下来，``get_logger``函数确保事件被记录。然后，``set_parameters``函数将参数``my_parameter``设置回默认的字符串值``world``。如果用户在外部更改了参数，这样可以确保它始终被重置回原始值。@{"calib_text": " `[4819] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4819>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:147
msgid "Following the ``timer_callback`` is our ``main``. Here ROS 2 is initialized, an instance of the ``MinimalParam`` class is constructed, and ``rclpy.spin`` starts processing data from the node."
msgstr "接下来是我们的``timer_callback``，紧接着是``main``函数。在这里，ROS 2被初始化，一个``MinimalParam``类的实例被构建，然后``rclpy.spin``开始处理来自节点的数据。@{"calib_text": " `[4820] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4820>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:163
msgid "Optionally, you can set a descriptor for the parameter. Descriptors allow you to specify a text description of the parameter and its constraints, like making it read-only, specifying a range, etc. For that to work, the ``__init__`` code has to be changed to:"
msgstr "可选地，您可以为参数设置一个描述符。描述符允许您指定参数的文本描述以及其约束条件，比如将其设置为只读、指定范围等。为了使其工作，``__init__``代码必须进行如下更改：@{"calib_text": " `[4821] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4821>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:187 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:163 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:418
msgid "2.2 Add an entry point"
msgstr "2.2 添加入口点@{"calib_text": " `[4822] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4822>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:189 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:240
msgid "Open the ``setup.py`` file. Again, match the ``maintainer``, ``maintainer_email``, ``description`` and ``license`` fields to your ``package.xml``:"
msgstr "打开``setup.py``文件。再次，将``maintainer``、``maintainer_email``、``description``和``license``字段与您的``package.xml``相匹配：@{"calib_text": " `[4823] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4823>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:199 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:250
msgid "Add the following line within the ``console_scripts`` brackets of the ``entry_points`` field:"
msgstr "将以下行添加到``entry_points``字段的``console_scripts``括号内：@{"calib_text": " `[4824] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4824>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:209 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:260
msgid "Don't forget to save."
msgstr "不要忘记保存。@{"calib_text": " `[4825] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4825>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:295
msgid "This part will use the knowledge you have gained from the :doc:`tutoral about parameters <../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` and apply it to the node you have just created."
msgstr "这部分将使用你从:doc:`关于参数的教程<../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>`中学到的知识，并将其应用到你刚刚创建的节点上。@{"calib_text": " `[4826] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4826>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:316
msgid "You know it went well if you get the output ``Set parameter successful``. If you look at the other terminal, you should see the output change to ``[INFO] [minimal_param_node]: Hello earth!``"
msgstr "如果你得到输出``Set parameter successful``，就表示运行成功。如果你查看另一个终端，你应该看到输出变为``[INFO] [minimal_param_node]: Hello earth!``@{"calib_text": " `[4827] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4827>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:319
msgid "Since the node afterwards set the parameter back to ``world``, further outputs show  ``[INFO] [minimal_param_node]: Hello world!``"
msgstr "由于后续节点将参数重新设置为“world”，后续的输出将显示为“[INFO] [minimal_param_node]: Hello world!”@{"calib_text": " `[4828] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4828>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:324
msgid "You can also set parameters in a launch file, but first you will need to add a launch directory. Inside the ``ros2_ws/src/python_parameters/`` directory, create a new directory called ``launch``. In there, create a new file called ``python_parameters_launch.py``"
msgstr "您还可以在启动文件中设置参数，但首先需要添加一个启动目录。在“ros2_ws/src/python_parameters/”目录中，创建一个名为“launch”的新目录。在其中创建一个名为“python_parameters_launch.py”的新文件。@{"calib_text": " `[4829] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4829>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:347
msgid "Here you can see that we set ``my_parameter`` to ``earth`` when we launch our node ``parameter_node``. By adding the two lines below, we ensure our output is printed in our console."
msgstr "在这里，您可以看到当我们启动节点“parameter_node”时，我们将“my_parameter”设置为“earth”。通过添加下面的两行代码，我们确保在控制台中打印输出。@{"calib_text": " `[4830] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4830>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:355
msgid "Now open the ``setup.py`` file. Add the ``import`` statements to the top of the file, and the other new statement to the ``data_files`` parameter to include all launch files:"
msgstr "现在打开“setup.py”文件。将“import”语句添加到文件的顶部，并将另一个新语句添加到“data_files”参数中以包括所有启动文件：@{"calib_text": " `[4831] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4831>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:8
msgid "Writing a simple publisher and subscriber (C++)"
msgstr "编写一个简单的发布者和订阅者（C++）@{"calib_text": " `[4832] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4832>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:10
msgid "**Goal:** Create and run a publisher and subscriber node using C++."
msgstr "**目标：** 使用C++创建并运行发布者和订阅者节点。@{"calib_text": " `[4833] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4833>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:23
msgid ":doc:`Nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` are executable processes that communicate over the ROS graph. In this tutorial, the nodes will pass information in the form of string messages to each other over a :doc:`topic <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>`. The example used here is a simple \"talker\" and \"listener\" system; one node publishes data and the other subscribes to the topic so it can receive that data."
msgstr ":doc:`节点 <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` 是在 ROS 图中进行通信的可执行进程。在本教程中，节点将以字符串消息的形式相互传递信息，通过一个 :doc:`主题 <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>`。这里使用的示例是一个简单的 \"talker\" 和 \"listener\" 系统；一个节点发布数据，另一个节点订阅该主题以接收数据。@{"calib_text": " `[4834] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4834>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:27
msgid "The code used in these examples can be found `here <https://github.com/ros2/examples/tree/humble/rclcpp/topics>`__."
msgstr "这些示例中使用的代码可以在 `这里 <https://github.com/ros2/examples/tree/humble/rclcpp/topics>`__ 找到。@{"calib_text": " `[4835] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4835>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:32 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:32 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:32 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:31
msgid "In previous tutorials, you learned how to :doc:`create a workspace <./Creating-A-Workspace/Creating-A-Workspace>` and :doc:`create a package <./Creating-Your-First-ROS2-Package>`."
msgstr "在之前的教程中，你学会了如何 :doc:`创建工作空间 <./Creating-A-Workspace/Creating-A-Workspace>` 和 :doc:`创建包 <./Creating-Your-First-ROS2-Package>`。@{"calib_text": " `[4836] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4836>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:42 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:42 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:44 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:41
msgid "Navigate into the ``ros2_ws`` directory created in a :ref:`previous tutorial <new-directory>`."
msgstr "进入在 :ref:`上一个教程 <new-directory>` 中创建的 ``ros2_ws`` 目录。@{"calib_text": " `[4837] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4837>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:44 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:46
msgid "Recall that packages should be created in the ``src`` directory, not the root of the workspace. So, navigate into ``ros2_ws/src``, and run the package creation command:"
msgstr "记住，包应该创建在 ``src`` 目录中，而不是工作空间的根目录。所以，进入 ``ros2_ws/src`` 目录，并运行包创建命令：@{"calib_text": " `[4838] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4838>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:51
msgid "Your terminal will return a message verifying the creation of your package ``cpp_pubsub`` and all its necessary files and folders."
msgstr "终端会返回一条消息，确认已创建名为 ``cpp_pubsub`` 的包及其所有必要的文件和文件夹。@{"calib_text": " `[4839] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4839>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:53
msgid "Navigate into ``ros2_ws/src/cpp_pubsub/src``. Recall that this is the directory in any CMake package where the source files containing executables belong."
msgstr "进入 ``ros2_ws/src/cpp_pubsub/src`` 目录。请注意，这是任何 CMake 包中包含可执行文件的源文件所在的目录。@{"calib_text": " `[4840] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4840>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:58 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:56
msgid "2 Write the publisher node"
msgstr "2 编写发布者节点@{"calib_text": " `[4841] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4841>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:60 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:61
msgid "Download the example talker code by entering the following command:"
msgstr "通过输入以下命令下载示例 talker 代码：@{"calib_text": " `[4842] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4842>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:78 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:324 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:79 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:300 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:71 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:364 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:71 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:342 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:67 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:339 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:59 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:59 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:58 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:58 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:79 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:79
msgid "In a Windows command line prompt:"
msgstr "在 Windows 命令行提示符中：@{"calib_text": " `[4843] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4843>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:84 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:330 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:85 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:306 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:77 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:370 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:77 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:348 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:73 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:345 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:65 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:65 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:64 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:64 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:85 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:85
msgid "Or in powershell:"
msgstr "或者在powershell中执行：@{"calib_text": " `[4844] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4844>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:90
msgid "Now there will be a new file named ``publisher_member_function.cpp``. Open the file using your preferred text editor."
msgstr "现在会有一个名为``publisher_member_function.cpp``的新文件。使用您喜欢的文本编辑器打开该文件。@{"calib_text": " `[4845] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4845>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:143
msgid "The top of the code includes the standard C++ headers you will be using. After the standard C++ headers is the ``rclcpp/rclcpp.hpp`` include which allows you to use the most common pieces of the ROS 2 system. Last is ``std_msgs/msg/string.hpp``, which includes the built-in message type you will use to publish data."
msgstr "代码的开头包含了您将要使用的标准C++头文件。标准C++头文件之后是``rclcpp/rclcpp.hpp``的包含部分，它允许您使用ROS 2系统中最常见的组件。最后是``std_msgs/msg/string.hpp``，它包含了您将用于发布数据的内置消息类型。@{"calib_text": " `[4846] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4846>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:159
msgid "These lines represent the node's dependencies. Recall that dependencies have to be added to ``package.xml`` and ``CMakeLists.txt``, which you'll do in the next section."
msgstr "这些行表示节点的依赖关系。请记住，依赖关系必须添加到``package.xml``和``CMakeLists.txt``中，在下一节中您将进行这些操作。@{"calib_text": " `[4847] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4847>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:162
msgid "The next line creates the node class ``MinimalPublisher`` by inheriting from ``rclcpp::Node``. Every ``this`` in the code is referring to the node."
msgstr "下一行通过从``rclcpp::Node``继承来创建节点类``MinimalPublisher``。代码中的每个``this``都是指向该节点。@{"calib_text": " `[4848] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4848>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:169
msgid "The public constructor names the node ``minimal_publisher`` and initializes ``count_`` to 0. Inside the constructor, the publisher is initialized with the ``String`` message type, the topic name ``topic``, and the required queue size to limit messages in the event of a backup. Next, ``timer_`` is initialized, which causes the ``timer_callback`` function to be executed twice a second."
msgstr "公共构造函数将节点命名为``minimal_publisher``，并将``count_``初始化为0。在构造函数内部，使用``String``消息类型、主题名称``topic``以及必要的队列大小来初始化发布者。接下来，初始化了``timer_``，它导致``timer_callback``函数每秒执行两次。@{"calib_text": " `[4849] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4849>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:184
msgid "The ``timer_callback`` function is where the message data is set and the messages are actually published. The ``RCLCPP_INFO`` macro ensures every published message is printed to the console."
msgstr "``timer_callback``函数是设置消息数据并实际发布消息的地方。``RCLCPP_INFO``宏确保每个发布的消息都会打印到控制台。@{"calib_text": " `[4850] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4850>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:198
msgid "Last is the declaration of the timer, publisher, and counter fields."
msgstr "最后是定时器、发布者和计数器字段的声明。@{"calib_text": " `[4851] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4851>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:206
msgid "Following the ``MinimalPublisher`` class is ``main``, where the node actually executes. ``rclcpp::init`` initializes ROS 2, and ``rclcpp::spin`` starts processing data from the node, including callbacks from the timer."
msgstr "下面是``MinimalPublisher``类的定义，接着是``main``函数，其中节点实际执行。``rclcpp::init``用于初始化ROS 2，``rclcpp::spin``则开始处理来自节点的数据，包括定时器的回调函数。@{"calib_text": " `[4852] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4852>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:220 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:212 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:528 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:305 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:316 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:244 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:264
msgid "2.2 Add dependencies"
msgstr "2.2 添加依赖项@{"calib_text": " `[4853] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4853>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:222
msgid "Navigate one level back to the ``ros2_ws/src/cpp_pubsub`` directory, where the ``CMakeLists.txt`` and ``package.xml`` files have been created for you."
msgstr "返回到``ros2_ws/src/cpp_pubsub``目录，这是``CMakeLists.txt``和``package.xml``文件所在的目录。这些文件已经为您创建好。@{"calib_text": " `[4854] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4854>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:224 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:216 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:248 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:268
msgid "Open ``package.xml`` with your text editor."
msgstr "用文本编辑器打开``package.xml``文件。@{"calib_text": " `[4855] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4855>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:226 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:218
msgid "As mentioned in the :doc:`previous tutorial <./Creating-Your-First-ROS2-Package>`, make sure to fill in the ``<description>``, ``<maintainer>`` and ``<license>`` tags:"
msgstr "如在:doc:`之前的教程 <./Creating-Your-First-ROS2-Package>`中提到的，确保填写``<description>``, ``<maintainer>``和``<license>``标签:@{"calib_text": " `[4856] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4856>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:234
msgid "Add a new line after the ``ament_cmake`` buildtool dependency and paste the following dependencies corresponding to your node's include statements:"
msgstr "在``ament_cmake``构建工具依赖项之后添加一个新行，并粘贴以下与节点的包含语句对应的依赖项:@{"calib_text": " `[4857] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4857>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:241
msgid "This declares the package needs ``rclcpp`` and ``std_msgs`` when its code is built and executed."
msgstr "这将在构建和执行代码时声明该包需要``rclcpp``和``std_msgs``.@{"calib_text": " `[4858] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4858>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:243 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:235 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:319 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:330 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:258 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:290
msgid "Make sure to save the file."
msgstr "确保保存文件.@{"calib_text": " `[4859] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4859>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:246 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:538 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:322 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:261
msgid "2.3 CMakeLists.txt"
msgstr "2.3 CMakeLists.txt@{"calib_text": " `[4860] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4860>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:248
msgid "Now open the ``CMakeLists.txt`` file. Below the existing dependency ``find_package(ament_cmake REQUIRED)``, add the lines:"
msgstr "现在打开 ``CMakeLists.txt`` 文件。在现有的依赖项 ``find_package(ament_cmake REQUIRED)`` 下方，添加以下行：@{"calib_text": " `[4861] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4861>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:256
msgid "After that, add the executable and name it ``talker`` so you can run your node using ``ros2 run``:"
msgstr "然后，添加可执行文件并将其命名为 ``talker``，这样你就可以使用 ``ros2 run`` 运行你的节点：@{"calib_text": " `[4862] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4862>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:263
msgid "Finally, add the ``install(TARGETS...)`` section so ``ros2 run`` can find your executable:"
msgstr "最后，添加 ``install(TARGETS...)`` 部分，以便 ``ros2 run`` 可以找到你的可执行文件：@{"calib_text": " `[4863] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4863>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:300 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:276
msgid "You could build your package now, source the local setup files, and run it, but let's create the subscriber node first so you can see the full system at work."
msgstr "现在您可以构建您的软件包，加载本地设置文件并运行它，但是让我们首先创建订阅者节点，这样您就可以看到整个系统的运行情况。@{"calib_text": " `[4864] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4864>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:303 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:279
msgid "3 Write the subscriber node"
msgstr "3 编写订阅者节点@{"calib_text": " `[4865] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4865>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:305
msgid "Return to ``ros2_ws/src/cpp_pubsub/src`` to create the next node. Enter the following code in your terminal:"
msgstr "返回到 ``ros2_ws/src/cpp_pubsub/src`` 目录，创建下一个节点。在终端中输入以下代码：@{"calib_text": " `[4866] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4866>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:336
msgid "Entering ``ls`` in the console will now return:"
msgstr "现在在控制台输入 ``ls`` 将会返回：@{"calib_text": " `[4867] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4867>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:342
msgid "Open the ``subscriber_member_function.cpp`` with your text editor."
msgstr "使用文本编辑器打开 ``subscriber_member_function.cpp``。@{"calib_text": " `[4868] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4868>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:379 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:244 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:319 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:222
msgid "3.1 Examine the code"
msgstr "3.1 检查代码@{"calib_text": " `[4869] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4869>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:381
msgid "The subscriber node's code is nearly identical to the publisher's. Now the node is named ``minimal_subscriber``, and the constructor uses the node's ``create_subscription`` class to execute the callback."
msgstr "订阅者节点的代码与发布者几乎完全相同。现在节点被命名为 ``minimal_subscriber``，构造函数使用节点的 ``create_subscription`` 类来执行回调函数。@{"calib_text": " `[4870] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4870>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:384
msgid "There is no timer because the subscriber simply responds whenever data is published to the ``topic`` topic."
msgstr "没有定时器，因为订阅者只会在数据被发布到 ``topic`` 主题时做出响应。@{"calib_text": " `[4871] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4871>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:396
msgid "Recall from the :doc:`topic tutorial <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>` that the topic name and message type used by the publisher and subscriber must match to allow them to communicate."
msgstr "回顾一下 :doc:`主题教程 <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>` 中提到，发布者和订阅者使用的主题名称和消息类型必须匹配，才能使它们进行通信。@{"calib_text": " `[4872] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4872>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:398
msgid "The ``topic_callback`` function receives the string message data published over the topic, and simply writes it to the console using the ``RCLCPP_INFO`` macro."
msgstr "``topic_callback`` 函数接收通过主题发布的字符串消息数据，并使用 ``RCLCPP_INFO`` 宏将其简单地写入控制台。@{"calib_text": " `[4873] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4873>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:400
msgid "The only field declaration in this class is the subscription."
msgstr "这个类中仅有一个字段声明，即订阅。@{"calib_text": " `[4874] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4874>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:411
msgid "The ``main`` function is exactly the same, except now it spins the ``MinimalSubscriber`` node. For the publisher node, spinning meant starting the timer, but for the subscriber it simply means preparing to receive messages whenever they come."
msgstr "``main`` 函数完全相同，只是现在它旋转 ``MinimalSubscriber`` 节点。对于发布者节点，旋转意味着启动计时器，而对于订阅者节点，它只是准备在消息到来时接收消息。@{"calib_text": " `[4875] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4875>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:414
msgid "Since this node has the same dependencies as the publisher node, there's nothing new to add to ``package.xml``."
msgstr "由于该节点与发布者节点具有相同的依赖关系，因此在``package.xml``中没有新内容可添加。@{"calib_text": " `[4876] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4876>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:417
msgid "3.2 CMakeLists.txt"
msgstr "3.2 CMakeLists.txt@{"calib_text": " `[4877] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4877>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:419
msgid "Reopen ``CMakeLists.txt`` and add the executable and target for the subscriber node below the publisher's entries."
msgstr "重新打开``CMakeLists.txt``，在发布者的条目下面添加订阅者节点的可执行文件和目标。@{"calib_text": " `[4878] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4878>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:431 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:413
msgid "Make sure to save the file, and then your pub/sub system should be ready."
msgstr "确保保存文件，然后您的发布/订阅系统就准备好了。@{"calib_text": " `[4879] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4879>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:437
msgid "You likely already have the ``rclcpp`` and ``std_msgs`` packages installed as part of your ROS 2 system. It's good practice to run ``rosdep`` in the root of your workspace (``ros2_ws``) to check for missing dependencies before building:"
msgstr "很可能您已经在您的ROS 2系统中安装了``rclcpp``和``std_msgs``软件包。在构建之前，最好在您的工作空间根目录（``ros2_ws``）中运行``rosdep``来检查是否存在缺失的依赖项：@{"calib_text": " `[4880] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4880>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:457 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:437
msgid "Still in the root of your workspace, ``ros2_ws``, build your new package:"
msgstr "仍然在您的工作空间根目录（``ros2_ws``）中，构建您的新软件包：@{"calib_text": " `[4881] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4881>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:517 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:498
msgid "Open another terminal, source the setup files from inside ``ros2_ws`` again, and then start the listener node:"
msgstr "打开另一个终端，在``ros2_ws``内部再次source设置文件，然后启动监听节点：@{"calib_text": " `[4882] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4882>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:533 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:514
msgid "Enter ``Ctrl+C`` in each terminal to stop the nodes from spinning."
msgstr "在每个终端中输入``Ctrl+C``来停止节点的旋转。@{"calib_text": " `[4883] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4883>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:538
msgid "You created two nodes to publish and subscribe to data over a topic. Before compiling and running them, you added their dependencies and executables to the package configuration files."
msgstr "你创建了两个节点，用于在一个话题上发布和订阅数据。在编译和运行之前，你将它们的依赖项和可执行文件添加到了软件包配置文件中。@{"calib_text": " `[4884] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4884>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:544 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:525
msgid "Next you'll create another simple ROS 2 package using the service/client model. Again, you can choose to write it in either :doc:`C++ <./Writing-A-Simple-Cpp-Service-And-Client>` or :doc:`Python <./Writing-A-Simple-Py-Service-And-Client>`."
msgstr "接下来，你将使用服务/客户端模型创建另一个简单的ROS 2软件包。同样，你可以选择使用 :doc:`C++ <./Writing-A-Simple-Cpp-Service-And-Client>` 或者 :doc:`Python <./Writing-A-Simple-Py-Service-And-Client>` 进行编写。@{"calib_text": " `[4885] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4885>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:550
msgid "There are several ways you could write a publisher and subscriber in C++; check out the ``minimal_publisher`` and ``minimal_subscriber`` packages in the `ros2/examples <https://github.com/ros2/examples/tree/humble/rclcpp/topics>`_ repo."
msgstr "有几种方式可以使用C++编写发布者和订阅者；你可以在 `ros2/examples <https://github.com/ros2/examples/tree/humble/rclcpp/topics>`_ 存储库中查看 ``minimal_publisher`` 和 ``minimal_subscriber`` 软件包。@{"calib_text": " `[4886] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4886>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:8
msgid "Writing a simple service and client (C++)"
msgstr "编写一个简单的服务和客户端（C++）@{"calib_text": " `[4887] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4887>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:10
msgid "**Goal:** Create and run service and client nodes using C++."
msgstr "**目标:** 使用C++创建和运行服务和客户端节点。@{"calib_text": " `[4888] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4888>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:23 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:23
msgid "When :doc:`nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` communicate using :doc:`services <../Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services>`, the node that sends a request for data is called the client node, and the one that responds to the request is the service node. The structure of the request and response is determined by a ``.srv`` file."
msgstr "当使用:doc:`services <../Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services>`的方式进行通信时，发送请求数据的节点称为客户端节点，而响应请求的节点则是服务节点。请求和响应的结构由``.srv``文件确定。@{"calib_text": " `[4889] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4889>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:26 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:26
msgid "The example used here is a simple integer addition system; one node requests the sum of two integers, and the other responds with the result."
msgstr "这里使用的示例是一个简单的整数加法系统；一个节点请求两个整数的和，另一个节点返回结果。@{"calib_text": " `[4890] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4890>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:51
msgid "Your terminal will return a message verifying the creation of your package ``cpp_srvcli`` and all its necessary files and folders."
msgstr "您的终端将返回一个消息，验证您的包``cpp_srvcli``及其所有必要的文件和文件夹的创建。@{"calib_text": " `[4891] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4891>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:53
msgid "The ``--dependencies`` argument will automatically add the necessary dependency lines to ``package.xml`` and ``CMakeLists.txt``. ``example_interfaces`` is the package that includes `the .srv file <https://github.com/ros2/example_interfaces/blob/humble/srv/AddTwoInts.srv>`__ you will need to structure your requests and responses:"
msgstr "``--dependencies``参数将自动向``package.xml``和``CMakeLists.txt``中添加必要的依赖项。``example_interfaces``是包含你需要构造请求和响应的`.srv文件 <https://github.com/ros2/example_interfaces/blob/humble/srv/AddTwoInts.srv>`__的包：@{"calib_text": " `[4892] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4892>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:63 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:62
msgid "The first two lines are the parameters of the request, and below the dashes is the response."
msgstr "前两行是请求的参数，在破折号以下是响应。@{"calib_text": " `[4893] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4893>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:80 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:90
msgid "2 Write the service node"
msgstr "2 编写服务节点@{"calib_text": " `[4894] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4894>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:82
msgid "Inside the ``ros2_ws/src/cpp_srvcli/src`` directory, create a new file called ``add_two_ints_server.cpp`` and paste the following code within:"
msgstr "在``ros2_ws/src/cpp_srvcli/src``目录中，创建一个名为``add_two_ints_server.cpp``的新文件，并粘贴以下代码：@{"calib_text": " `[4895] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4895>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:118
msgid "The first two ``#include`` statements are your package dependencies."
msgstr "前两个``#include``语句是你的包依赖项。@{"calib_text": " `[4896] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4896>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:120
msgid "The ``add`` function adds two integers from the request and gives the sum to the response, while notifying the console of its status using logs."
msgstr "``add``函数从请求中添加两个整数，并将和发送到响应中，同时使用日志通知控制台其状态。@{"calib_text": " `[4897] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4897>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:133
msgid "The ``main`` function accomplishes the following, line by line:"
msgstr "``main``函数逐行完成以下操作：@{"calib_text": " `[4898] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4898>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:135
msgid "Initializes ROS 2 C++ client library:"
msgstr "初始化ROS 2 C++客户端库：@{"calib_text": " `[4899] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4899>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:141
msgid "Creates a node named ``add_two_ints_server``:"
msgstr "创建一个名为``add_two_ints_server``的节点：@{"calib_text": " `[4900] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4900>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:147
msgid "Creates a service named ``add_two_ints`` for that node and automatically advertises it over the networks with the ``&add`` method:"
msgstr "为该节点创建一个名为``add_two_ints``的服务，并使用``&add``方法自动在网络上进行广告发布：@{"calib_text": " `[4901] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4901>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:154
msgid "Prints a log message when it's ready:"
msgstr "当准备好时打印一条日志消息：@{"calib_text": " `[4902] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4902>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:160
msgid "Spins the node, making the service available."
msgstr "旋转节点，使服务可用。@{"calib_text": " `[4903] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4903>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:169
msgid "The ``add_executable`` macro generates an executable you can run using ``ros2 run``. Add the following code block to ``CMakeLists.txt`` to create an executable named ``server``:"
msgstr "``add_executable``宏会生成一个可通过``ros2 run``运行的可执行文件。将以下代码块添加到``CMakeLists.txt``中以创建一个名为``server``的可执行文件：@{"calib_text": " `[4904] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4904>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:177
msgid "So ``ros2 run`` can find the executable, add the following lines to the end of the file, right before ``ament_package()``:"
msgstr "为了使``ros2 run``能够找到可执行文件，请在文件末尾，在``ament_package()``之前添加以下行：@{"calib_text": " `[4905] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4905>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:185
msgid "You could build your package now, source the local setup files, and run it, but let's create the client node first so you can see the full system at work."
msgstr "现在，您可以构建软件包、源化本地设置文件并运行它，但是让我们先创建客户端节点，以便您可以看到整个系统的运行情况。@{"calib_text": " `[4906] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4906>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:188 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:174
msgid "3 Write the client node"
msgstr "3.编写客户端节点@{"calib_text": " `[4907] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4907>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:190
msgid "Inside the ``ros2_ws/src/cpp_srvcli/src`` directory, create a new file called ``add_two_ints_client.cpp`` and paste the following code within:"
msgstr "在``ros2_ws/src/cpp_srvcli/src``目录中，创建一个名为``add_two_ints_client.cpp``的新文件，并将以下代码粘贴到其中：@{"calib_text": " `[4908] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4908>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:246
msgid "Similar to the service node, the following lines of code create the node and then create the client for that node:"
msgstr "与服务节点类似，以下代码行创建节点，然后为该节点创建客户端：@{"calib_text": " `[4909] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4909>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:254
msgid "Next, the request is created. Its structure is defined by the ``.srv`` file mentioned earlier."
msgstr "接下来，创建请求。其结构由之前提到的``.srv``文件定义。@{"calib_text": " `[4910] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4910>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:263
msgid "The ``while`` loop gives the client 1 second to search for service nodes in the network. If it can't find any, it will continue waiting."
msgstr "``while``循环给客户端1秒的时间在网络中搜索服务节点。如果找不到任何节点，将继续等待。@{"calib_text": " `[4911] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4911>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:270
msgid "If the client is canceled (e.g. by you entering ``Ctrl+C`` into the terminal), it will return an error log message stating it was interrupted."
msgstr "如果客户端被取消（例如你在终端中输入``Ctrl+C``），它将返回一个错误日志消息，说明它被中断了。@{"calib_text": " `[4912] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4912>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:276
msgid "Then the client sends its request, and the node spins until it receives its response, or fails."
msgstr "然后客户端发送请求，节点会一直等待直到接收到响应或失败。@{"calib_text": " `[4913] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4913>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:279
msgid "3.2 Add executable"
msgstr "3.2 添加可执行文件@{"calib_text": " `[4914] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4914>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:281
msgid "Return to ``CMakeLists.txt`` to add the executable and target for the new node. After removing some unnecessary boilerplate from the automatically generated file, your ``CMakeLists.txt`` should look like this:"
msgstr "返回到``CMakeLists.txt``，为新节点添加可执行文件和目标。在自动生成的文件中删除一些不必要的样板代码后，你的``CMakeLists.txt``应该如下所示：@{"calib_text": " `[4915] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4915>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:373 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:305
msgid "Now run the service node:"
msgstr "现在运行服务节点：@{"calib_text": " `[4916] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4916>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:379
msgid "The terminal should return the following message, and then wait:"
msgstr "终端应该返回以下消息，然后等待：@{"calib_text": " `[4917] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4917>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:385
msgid "Open another terminal, source the setup files from inside ``ros2_ws`` again. Start the client node, followed by any two integers separated by a space:"
msgstr "打开另一个终端，再次在``ros2_ws``目录内源化设置文件。启动客户端节点，然后输入两个整数，用空格分隔：@{"calib_text": " `[4918] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4918>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:392 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:320
msgid "If you chose ``2`` and ``3``, for example, the client would receive a response like this:"
msgstr "例如，如果你选择了``2``和``3``，客户端将会收到如下响应：@{"calib_text": " `[4919] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4919>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:398
msgid "Return to the terminal where your service node is running. You will see that it published log messages when it received the request and the data it received, and the response it sent back:"
msgstr "返回运行服务节点的终端。您将看到当服务节点收到请求、接收到的数据以及发送回的响应时，它会发布日志消息：@{"calib_text": " `[4920] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4920>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:407 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:334
msgid "Enter ``Ctrl+C`` in the server terminal to stop the node from spinning."
msgstr "在服务器终端中输入``Ctrl+C``以停止节点的运行。@{"calib_text": " `[4921] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4921>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:412
msgid "You created two nodes to request and respond to data over a service. You added their dependencies and executables to the package configuration files so that you could build and run them, and see a service/client system at work."
msgstr "您创建了两个节点来请求和响应服务数据。您将它们的依赖项和可执行文件添加到软件包配置文件中，以便能够构建和运行它们，并看到服务/客户端系统的工作情况。@{"calib_text": " `[4922] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4922>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:418 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:346
msgid "In the last few tutorials you've been utilizing interfaces to pass data across topics and services. Next, you'll learn how to :doc:`create custom interfaces <./Custom-ROS2-Interfaces>`."
msgstr "在过去的几个教程中，您已经利用接口在话题和服务之间传递数据。接下来，您将学习如何:doc:`创建自定义接口 <./Custom-ROS2-Interfaces>`。@{"calib_text": " `[4923] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4923>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:424
msgid "There are several ways you could write a service and client in C++; check out the ``minimal_service`` and ``minimal_client`` packages in the `ros2/examples <https://github.com/ros2/examples/tree/humble/rclcpp/services>`_ repo."
msgstr "有几种方式可以使用C++编写服务和客户端；在`ros2/examples <https://github.com/ros2/examples/tree/humble/rclcpp/services>`_ 存储库中查看 ``minimal_service`` 和 ``minimal_client`` 包。@{"calib_text": " `[4924] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4924>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:8
msgid "Writing a simple publisher and subscriber (Python)"
msgstr "编写一个简单的发布者和订阅者（Python）@{"calib_text": " `[4925] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4925>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:10
msgid "**Goal:** Create and run a publisher and subscriber node using Python."
msgstr "**目标：**使用Python创建和运行发布者和订阅者节点。@{"calib_text": " `[4926] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4926>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:23
msgid "In this tutorial, you will create :doc:`nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` that pass information in the form of string messages to each other over a :doc:`topic <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>`. The example used here is a simple \"talker\" and \"listener\" system; one node publishes data and the other subscribes to the topic so it can receive that data."
msgstr "在本教程中，您将创建 :doc:`节点 <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>`，以字符串消息的形式通过 :doc:`话题 <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>` 互相传递信息。这里使用的示例是一个简单的“说话者”和“侦听者”系统；一个节点发布数据，另一个节点订阅该话题以接收数据。@{"calib_text": " `[4927] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4927>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:27
msgid "The code used in these examples can be found `here <https://github.com/ros2/examples/tree/humble/rclpy/topics>`__."
msgstr "这些示例中使用的代码可以在 `这里 <https://github.com/ros2/examples/tree/humble/rclpy/topics>`__ 找到。@{"calib_text": " `[4928] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4928>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:34
msgid "A basic understanding of Python is recommended, but not entirely necessary."
msgstr "建议具备对Python的基本理解，但并非完全必要。@{"calib_text": " `[4929] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4929>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:53
msgid "Your terminal will return a message verifying the creation of your package ``py_pubsub`` and all its necessary files and folders."
msgstr "你的终端将返回一条消息，验证已创建名为 ``py_pubsub`` 的软件包及其所有必要的文件和文件夹。@{"calib_text": " `[4930] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4930>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:58
msgid "Navigate into ``ros2_ws/src/py_pubsub/py_pubsub``. Recall that this directory is a `Python package <https://docs.python.org/3/tutorial/modules.html#packages>`__ with the same name as the ROS 2 package it's nested in."
msgstr "进入 ``ros2_ws/src/py_pubsub/py_pubsub`` 目录。请记住，该目录是一个与嵌套的ROS 2软件包同名的 `Python包 <https://docs.python.org/3/tutorial/modules.html#packages>`__。@{"calib_text": " `[4931] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4931>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:91
msgid "Now there will be a new file named ``publisher_member_function.py`` adjacent to ``__init__.py``."
msgstr "现在会在``__init__.py``旁边出现一个名为``publisher_member_function.py``的新文件。@{"calib_text": " `[4932] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4932>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:93 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:79 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:351 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:71 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:71 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:70 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:70 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:91 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:91
msgid "Open the file using your preferred text editor."
msgstr "使用您偏爱的文本编辑器打开该文件。@{"calib_text": " `[4933] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4933>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:141
msgid "The first lines of code after the comments import ``rclpy`` so its ``Node`` class can be used."
msgstr "在注释之后的第一行代码中导入``rclpy``，以便可以使用其``Node``类。@{"calib_text": " `[4934] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4934>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:148
msgid "The next statement imports the built-in string message type that the node uses to structure the data that it passes on the topic."
msgstr "下一条语句导入了内置的字符串消息类型，节点使用该类型来结构化在主题上传递的数据。@{"calib_text": " `[4935] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4935>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:154
msgid "These lines represent the node's dependencies. Recall that dependencies have to be added to ``package.xml``, which you'll do in the next section."
msgstr "这些行表示节点的依赖关系。请记住，依赖项必须添加到``package.xml``中，在下一节中将进行此操作。@{"calib_text": " `[4936] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4936>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:157
msgid "Next, the ``MinimalPublisher`` class is created, which inherits from (or is a subclass of) ``Node``."
msgstr "接下来，创建了``MinimalPublisher``类，它继承自（或是``Node``的子类）。@{"calib_text": " `[4937] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4937>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:163
msgid "Following is the definition of the class's constructor. ``super().__init__`` calls the ``Node`` class's constructor and gives it your node name, in this case ``minimal_publisher``."
msgstr "以下是该类构造函数的定义。``super().__init__``调用了``Node``类的构造函数，并向其传递了节点名称，本例中为``minimal_publisher``。@{"calib_text": " `[4938] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4938>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:166
msgid "``create_publisher`` declares that the node publishes messages of type ``String`` (imported from the ``std_msgs.msg`` module), over a topic named ``topic``, and that the \"queue size\" is 10. Queue size is a required QoS (quality of service) setting that limits the amount of queued messages if a subscriber is not receiving them fast enough."
msgstr "``create_publisher``声明该节点发布类型为``String``（从``std_msgs.msg``模块导入），在名为``topic``的主题上，且“队列大小”为10。队列大小是一个必需的QoS（服务质量）设置，它限制了如果订阅者接收消息的速度不够快时，排队消息的数量。@{"calib_text": " `[4939] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4939>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:169
msgid "Next, a timer is created with a callback to execute every 0.5 seconds. ``self.i`` is a counter used in the callback."
msgstr "首先，创建一个定时器，并设置每0.5秒执行一次回调函数。``self.i``是在回调函数中使用的计数器。@{"calib_text": " `[4940] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4940>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:181
msgid "``timer_callback`` creates a message with the counter value appended, and publishes it to the console with ``get_logger().info``."
msgstr "``timer_callback``创建一个带有计数器值附加的消息，并使用``get_logger().info``将其发布到控制台。@{"calib_text": " `[4941] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4941>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:192
msgid "Lastly, the main function is defined."
msgstr "最后，定义主函数。@{"calib_text": " `[4942] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4942>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:209
msgid "First the ``rclpy`` library is initialized, then the node is created, and then it \"spins\" the node so its callbacks are called."
msgstr "首先初始化``rclpy``库，然后创建节点，最后\"旋转\"节点以调用其回调函数。@{"calib_text": " `[4943] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4943>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:214
msgid "Navigate one level back to the ``ros2_ws/src/py_pubsub`` directory, where the ``setup.py``, ``setup.cfg``, and ``package.xml`` files have been created for you."
msgstr "导航到``ros2_ws/src/py_pubsub``目录的上一级，其中已经为您创建了``setup.py``、``setup.cfg``和``package.xml``文件。@{"calib_text": " `[4944] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4944>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:226
msgid "After the lines above, add the following dependencies corresponding to your node's import statements:"
msgstr "在上述行之后，添加与您的节点导入语句对应的以下依赖项：@{"calib_text": " `[4945] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4945>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:233
msgid "This declares the package needs ``rclpy`` and ``std_msgs`` when its code is executed."
msgstr "这将在代码执行时声明该包需要``rclpy``和``std_msgs``。@{"calib_text": " `[4946] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4946>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:238 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:293
msgid "2.3 Add an entry point"
msgstr "2.3 添加入口点@{"calib_text": " `[4947] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4947>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:263
msgid "2.4 Check setup.cfg"
msgstr "2.4 检查 setup.cfg@{"calib_text": " `[4948] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4948>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:265
msgid "The contents of the ``setup.cfg`` file should be correctly populated automatically, like so:"
msgstr "``setup.cfg`` 文件的内容应该被正确地自动填充，如下所示：@{"calib_text": " `[4949] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4949>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:274
msgid "This is simply telling setuptools to put your executables in ``lib``, because ``ros2 run`` will look for them there."
msgstr "这仅仅是告诉 setuptools 将你的可执行文件放在 ``lib`` 中，因为 ``ros2 run`` 会在那里查找它们。@{"calib_text": " `[4950] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4950>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:281
msgid "Return to ``ros2_ws/src/py_pubsub/py_pubsub`` to create the next node. Enter the following code in your terminal:"
msgstr "返回到 ``ros2_ws/src/py_pubsub/py_pubsub``，创建下一个节点。在终端中输入以下代码：@{"calib_text": " `[4951] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4951>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:312
msgid "Now the directory should have these files:"
msgstr "现在目录中应该有以下文件:@{"calib_text": " `[4952] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4952>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:321
msgid "Open the ``subscriber_member_function.py`` with your text editor."
msgstr "用文本编辑器打开 ``subscriber_member_function.py``。@{"calib_text": " `[4953] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4953>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:363
msgid "The subscriber node's code is nearly identical to the publisher's. The constructor creates a subscriber with the same arguments as the publisher. Recall from the :doc:`topics tutorial <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>` that the topic name and message type used by the publisher and subscriber must match to allow them to communicate."
msgstr "订阅者节点的代码几乎与发布者节点相同。构造函数使用与发布者相同的参数创建一个订阅者。回顾一下:doc:`主题教程<../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>`中提到的，发布者和订阅者使用的主题名称和消息类型必须匹配，以便它们能够进行通信。@{"calib_text": " `[4954] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4954>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:375
msgid "The subscriber's constructor and callback don't include any timer definition, because it doesn't need one. Its callback gets called as soon as it receives a message."
msgstr "订阅者的构造函数和回调函数不包括任何定时器定义，因为它不需要。一旦接收到消息，它的回调函数就会被调用。@{"calib_text": " `[4955] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4955>`_ "}@"


#, python-format
msgid "The callback definition simply prints an info message to the console, along with the data it received. Recall that the publisher defines ``msg.data = 'Hello World: %d' % self.i``"
msgstr "回调函数的定义只是将一条信息和接收到的数据打印到控制台上。请回忆一下，发布者定义了``msg.data = 'Hello World: %d' % self.i``。@{"calib_text": " `[4956] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4956>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:386
msgid "The ``main`` definition is almost exactly the same, replacing the creation and spinning of the publisher with the subscriber."
msgstr "``main``函数的定义几乎完全相同，只是将创建和运行发布者替换为订阅者。@{"calib_text": " `[4957] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4957>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:394
msgid "Since this node has the same dependencies as the publisher, there's nothing new to add to ``package.xml``. The ``setup.cfg`` file can also remain untouched."
msgstr "由于该节点与发布者具有相同的依赖关系，因此不需要向``package.xml``中添加任何新内容。``setup.cfg``文件也可以保持不变。@{"calib_text": " `[4958] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4958>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:399 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:240
msgid "3.2 Add an entry point"
msgstr "3.2 添加一个入口点@{"calib_text": " `[4959] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4959>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:401
msgid "Reopen ``setup.py`` and add the entry point for the subscriber node below the publisher's entry point. The ``entry_points`` field should now look like this:"
msgstr "重新打开 ``setup.py`` 并在发布者的入口点下方添加订阅者节点的入口点。现在，``entry_points`` 字段应该如下所示：@{"calib_text": " `[4960] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4960>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:417
msgid "You likely already have the ``rclpy`` and ``std_msgs`` packages installed as part of your ROS 2 system. It's good practice to run ``rosdep`` in the root of your workspace (``ros2_ws``) to check for missing dependencies before building:"
msgstr "很可能您已经在ROS 2系统中安装了 ``rclpy`` 和 ``std_msgs`` 包。在构建之前，在工作空间的根目录（``ros2_ws``）中运行 ``rosdep`` 以检查缺失的依赖关系是一个好的做法：@{"calib_text": " `[4961] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4961>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:519
msgid "You created two nodes to publish and subscribe to data over a topic. Before running them, you added their dependencies and entry points to the package configuration files."
msgstr "您创建了两个节点，用于在话题上发布和订阅数据。在运行之前，您将它们的依赖关系和入口点添加到包配置文件中。@{"calib_text": " `[4962] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4962>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:531
msgid "There are several ways you could write a publisher and subscriber in Python; check out the ``minimal_publisher`` and ``minimal_subscriber`` packages in the `ros2/examples <https://github.com/ros2/examples/tree/humble/rclpy/topics>`_ repo."
msgstr "在Python中编写发布者和订阅者有几种方法；请查看 `ros2/examples <https://github.com/ros2/examples/tree/humble/rclpy/topics>`_ 存储库中的 ``minimal_publisher`` 和 ``minimal_subscriber`` 包。@{"calib_text": " `[4963] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4963>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:8
msgid "Writing a simple service and client (Python)"
msgstr "编写一个简单的服务和客户端（Python）@{"calib_text": " `[4964] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4964>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:10
msgid "**Goal:** Create and run service and client nodes using Python."
msgstr "**目标：** 使用Python创建和运行服务和客户端节点。@{"calib_text": " `[4965] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4965>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:50
msgid "Your terminal will return a message verifying the creation of your package ``py_srvcli`` and all its necessary files and folders."
msgstr "您的终端将返回一条消息，确认已创建名为``py_srvcli``的包及其所有必要的文件和文件夹。@{"calib_text": " `[4966] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4966>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:52
msgid "The ``--dependencies`` argument will automatically add the necessary dependency lines to ``package.xml``. ``example_interfaces`` is the package that includes `the .srv file <https://github.com/ros2/example_interfaces/blob/humble/srv/AddTwoInts.srv>`__ you will need to structure your requests and responses:"
msgstr "``--dependencies``参数将自动向``package.xml``添加必要的依赖项。``example_interfaces``是包含 `the .srv file <https://github.com/ros2/example_interfaces/blob/humble/srv/AddTwoInts.srv>`__ 的包，您将需要使用它来构建请求和响应的结构：@{"calib_text": " `[4967] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4967>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:67
msgid "Because you used the ``--dependencies`` option during package creation, you don't have to manually add dependencies to ``package.xml``."
msgstr "由于在包创建过程中使用了``--dependencies``选项，您无需手动将依赖项添加到``package.xml``文件中。@{"calib_text": " `[4968] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4968>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:78
msgid "1.2 Update ``setup.py``"
msgstr "1.2 更新``setup.py``文件@{"calib_text": " `[4969] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4969>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:80
msgid "Add the same information to the ``setup.py`` file for the ``maintainer``, ``maintainer_email``, ``description`` and ``license`` fields:"
msgstr "将相同的信息添加到``setup.py``文件的``maintainer``、``maintainer_email``、``description``和``license``字段中：@{"calib_text": " `[4970] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4970>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:92
msgid "Inside the ``ros2_ws/src/py_srvcli/py_srvcli`` directory, create a new file called ``service_member_function.py`` and paste the following code within:"
msgstr "在``ros2_ws/src/py_srvcli/py_srvcli``目录中创建一个名为``service_member_function.py``的新文件，并将以下代码粘贴到其中：@{"calib_text": " `[4971] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4971>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:131
msgid "The first ``import`` statement imports the ``AddTwoInts`` service type from the ``example_interfaces`` package. The following ``import`` statement imports the ROS 2 Python client library, and specifically the ``Node`` class."
msgstr "第一个 ``import`` 语句从 ``example_interfaces`` 包中导入了 ``AddTwoInts`` 服务类型。接下来的 ``import`` 语句导入了 ROS 2 Python 客户端库，具体导入了 ``Node`` 类。@{"calib_text": " `[4972] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4972>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:141
msgid "The ``MinimalService`` class constructor initializes the node with the name ``minimal_service``. Then, it creates a service and defines the type, name, and callback."
msgstr "``MinimalService`` 类的构造函数使用名称 ``minimal_service`` 初始化节点。然后，它创建一个服务并定义了类型、名称和回调函数。@{"calib_text": " `[4973] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4973>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:150
msgid "The definition of the service callback receives the request data, sums it, and returns the sum as a response."
msgstr "服务回调函数的定义接收请求数据，对其求和，并将求和结果作为响应返回。@{"calib_text": " `[4974] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4974>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:160
msgid "Finally, the main class initializes the ROS 2 Python client library, instantiates the ``MinimalService`` class to create the service node and spins the node to handle callbacks."
msgstr "最后，主类初始化了 ROS 2 Python 客户端库，实例化 ``MinimalService`` 类以创建服务节点，并旋转节点以处理回调函数。@{"calib_text": " `[4975] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4975>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:165
msgid "To allow the ``ros2 run`` command to run your node, you must add the entry point to ``setup.py`` (located in the ``ros2_ws/src/py_srvcli`` directory)."
msgstr "要允许``ros2 run``命令运行您的节点，您必须将入口点添加到``setup.py``（位于``ros2_ws/src/py_srvcli``目录中）。@{"calib_text": " `[4976] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4976>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:167 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:265 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:297
msgid "Add the following line between the ``'console_scripts':`` brackets:"
msgstr "在``'console_scripts':``括号之间添加以下行：@{"calib_text": " `[4977] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4977>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:176
msgid "Inside the ``ros2_ws/src/py_srvcli/py_srvcli`` directory, create a new file called ``client_member_function.py`` and paste the following code within:"
msgstr "在``ros2_ws/src/py_srvcli/py_srvcli``目录中创建一个名为``client_member_function.py``的新文件，并将以下代码粘贴到其中：@{"calib_text": " `[4978] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4978>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:224
msgid "The only different ``import`` statement for the client is ``import sys``. The client node code uses `sys.argv <https://docs.python.org/3/library/sys.html#sys.argv>`__ to get access to command line input arguments for the request."
msgstr "客户端唯一不同的``import``语句是``import sys``。客户端节点代码使用`sys.argv <https://docs.python.org/3/library/sys.html#sys.argv>`__ 来获取请求的命令行输入参数访问权限。@{"calib_text": " `[4979] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4979>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:227
msgid "The constructor definition creates a client with the same type and name as the service node. The type and name must match for the client and service to be able to communicate."
msgstr "构造函数定义创建一个与服务节点相同类型和名称的客户端。客户端和服务必须具有匹配的类型和名称才能进行通信。@{"calib_text": " `[4980] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4980>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:230
msgid "The ``while`` loop in the constructor checks if a service matching the type and name of the client is available once a second."
msgstr "构造函数中的``while``循环每秒检查是否有与客户端类型和名称匹配的服务可用。@{"calib_text": " `[4981] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4981>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:232
msgid "Below the constructor is the request definition, followed by ``main``."
msgstr "构造函数下方是请求定义，然后是``main``函数。@{"calib_text": " `[4982] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4982>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:234
msgid "The only significant difference in the client's ``main`` is the ``while`` loop. The loop checks the ``future`` to see if there is a response from the service, as long as the system is running. If the service has sent a response, the result will be written in a log message."
msgstr "客户端的``main``函数中唯一重要的区别是``while``循环。循环检查``future``以查看服务是否有响应，只要系统正在运行。如果服务发送了响应，结果将写入日志消息中。@{"calib_text": " `[4983] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4983>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:242
msgid "Like the service node, you also have to add an entry point to be able to run the client node."
msgstr "像服务节点一样，您还必须添加一个入口点才能运行客户端节点。@{"calib_text": " `[4984] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4984>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:244
msgid "The ``entry_points`` field of your ``setup.py`` file should look like this:"
msgstr "您的``setup.py``文件的``entry_points``字段应该如下所示：@{"calib_text": " `[4985] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4985>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:311
msgid "The node will wait for the client's request."
msgstr "节点将等待客户端的请求。@{"calib_text": " `[4986] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4986>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:313
msgid "Open another terminal and source the setup files from inside ``ros2_ws`` again. Start the client node, followed by any two integers separated by a space:"
msgstr "打开另一个终端，并再次从``ros2_ws``内部源化设置文件。启动客户端节点，然后输入由一个空格分隔的两个整数：@{"calib_text": " `[4987] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4987>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:326
msgid "Return to the terminal where your service node is running. You will see that it published log messages when it received the request:"
msgstr "返回到运行服务节点的终端。您将看到当它接收到请求时，它会发布日志消息：@{"calib_text": " `[4988] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4988>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:340
msgid "You created two nodes to request and respond to data over a service. You added their dependencies and executables to the package configuration files so that you could build and run them, allowing you to see a service/client system at work."
msgstr "您创建了两个节点来请求和响应服务中的数据。您将它们的依赖项和可执行文件添加到软件包配置文件中，以便您可以构建和运行它们，从而让您看到一个工作中的服务/客户端系统。@{"calib_text": " `[4989] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4989>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:352
msgid "There are several ways you could write a service and client in Python; check out the ``minimal_client`` and ``minimal_service`` packages in the `ros2/examples <https://github.com/ros2/examples/tree/humble/rclpy/services>`_ repo."
msgstr "有几种方法可以在Python中编写服务和客户端；在 `ros2/examples <https://github.com/ros2/examples/tree/humble/rclpy/services>`_ 存储库中查看``minimal_client``和``minimal_service``包。@{"calib_text": " `[4990] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4990>`_ "}@"


#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:354
msgid "In this tutorial, you used the ``call_async()`` API in your client node to call the service. There is another service call API available for Python called synchronous calls. We do not recommend using synchronous calls, but if you'd like to learn more about them, read the guide to :doc:`Synchronous vs. asynchronous clients <../../How-To-Guides/Sync-Vs-Async>`."
msgstr "在本教程中，您在客户端节点中使用了``call_async()`` API来调用服务。Python还提供了另一种名为同步调用的服务调用API。我们不建议使用同步调用，但如果您想了解更多信息，请阅读 :doc:`同步与异步客户端对比指南 <../../How-To-Guides/Sync-Vs-Async>`。@{"calib_text": " `[4991] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4991>`_ "}@"


#: ../../source/Tutorials/Demos.rst:2
msgid "Demos"
msgstr "演示@{"calib_text": " `[4992] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4992>`_ "}@"


#: ../../source/Tutorials/Demos.rst:17
msgid "External resources"
msgstr "外部资源@{"calib_text": " `[4993] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4993>`_ "}@"


#: ../../source/Tutorials/Demos.rst:19
msgid "`Bridging communication between ROS 1 and ROS 2 <https://github.com/ros2/ros1_bridge/blob/master/README.md>`__"
msgstr "在ROS 1和ROS 2之间进行通信的桥接 <https://github.com/ros2/ros1_bridge/blob/master/README.md>`__@{"calib_text": " `[4994] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4994>`_ "}@"


#: ../../source/Tutorials/Demos.rst:20
msgid "`Motion planning for a MoveIt 2 arm <https://moveit.picknik.ai/main/index.html>`__"
msgstr "针对MoveIt 2机械臂的运动规划 <https://moveit.picknik.ai/main/index.html>`__@{"calib_text": " `[4995] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4995>`_ "}@"


#: ../../source/Tutorials/Demos.rst:21
msgid "Using Turtlebot 3 (community-contributed)"
msgstr "使用 Turtlebot 3（社区贡献）@{"calib_text": " `[4996] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4996>`_ "}@"


#: ../../source/Tutorials/Demos.rst:23
msgid "`Getting started <https://emanual.robotis.com/docs/en/platform/turtlebot3/quick-start/>`__"
msgstr "`开始使用 <https://emanual.robotis.com/docs/en/platform/turtlebot3/quick-start/>`__@{"calib_text": " `[4997] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4997>`_ "}@"


#: ../../source/Tutorials/Demos.rst:24
msgid "`Simulating <https://ubuntu.com/blog/simulate-the-turtlebot3>`__"
msgstr "`模拟 <https://ubuntu.com/blog/simulate-the-turtlebot3>`__@{"calib_text": " `[4998] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4998>`_ "}@"


#: ../../source/Tutorials/Demos.rst:25
msgid "`Navigating in simulation <https://github.com/cyberbotics/webots_ros2/wiki/Navigate-TurtleBot3>`__"
msgstr "`在模拟中导航 <https://github.com/cyberbotics/webots_ros2/wiki/Navigate-TurtleBot3>`__@{"calib_text": " `[4999] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=4999>`_ "}@"


#: ../../source/Tutorials/Demos.rst:26
msgid "`Learning SLAM in simulation <https://github.com/cyberbotics/webots_ros2/wiki/SLAM-with-TurtleBot3>`__"
msgstr "`在模拟环境中学习SLAM <https://github.com/cyberbotics/webots_ros2/wiki/SLAM-with-TurtleBot3>`__@{"calib_text": " `[5000] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5000>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:6
msgid "Creating a content filtering subscription"
msgstr "创建内容过滤订阅@{"calib_text": " `[5001] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5001>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:8
msgid "**Goal:** Create a content filtering subscription."
msgstr "**目标:** 创建一个内容过滤订阅。@{"calib_text": " `[5002] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5002>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:19
msgid "Overview"
msgstr "概述@{"calib_text": " `[5003] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5003>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:21
msgid "ROS 2 applications typically consist of topics to transmit data from publishers to subscriptions. Basically, subscriptions receive all published data from publishers on the topic. But sometimes, a subscription might be interested in only a subset of the data which is being sent by publishers. A content filtering subscription allows to receive only the data of interest for the application."
msgstr "ROS 2应用程序通常由主题组成，用于将数据从发布者传输到订阅者。基本上，订阅者接收来自主题发布者的所有已发布数据。但有时，订阅者可能只对发布者发送的数据的子集感兴趣。内容过滤订阅允许只接收应用程序所关注的数据。@{"calib_text": " `[5004] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5004>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:26
msgid "In this demo, we'll be highlighting how to create a content filtering subscription and how they work."
msgstr "在这个演示中，我们将重点介绍如何创建一个内容过滤订阅以及它们的工作原理。@{"calib_text": " `[5005] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5005>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:29
msgid "RMW Support"
msgstr "RMW支持@{"calib_text": " `[5006] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5006>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:31
msgid "Content filtering subscriptions require RMW implementation support."
msgstr "内容过滤订阅需要RMW实现支持。@{"calib_text": " `[5007] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5007>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:33
msgid "Content-Filtering-Subscription Support Status"
msgstr "内容过滤订阅支持状态@{"calib_text": " `[5008] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5008>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:36
msgid "rmw_fastrtps"
msgstr "rmw_fastrtps@{"calib_text": " `[5009] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5009>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:37 ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:39
msgid "supported"
msgstr "支持@{"calib_text": " `[5010] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5010>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:38
msgid "rmw_connextdds"
msgstr "rmw_connextdds@{"calib_text": " `[5011] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5011>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:40
msgid "rmw_cyclonedds"
msgstr "rmw_cyclonedds@{"calib_text": " `[5012] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5012>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:41
msgid "not supported"
msgstr "不支持@{"calib_text": " `[5013] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5013>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:43
msgid "Currently all RMW implementations that support content filtering subscriptions are `DDS <https://www.omg.org/omg-dds-portal/>`__ based. That means that the supported filtering expressions and parameters are also dependent on `DDS <https://www.omg.org/omg-dds-portal/>`__, you can refer to `DDS specification <https://www.omg.org/spec/DDS/1.4/PDF>`__ ``Annex B - Syntax for Queries and Filters`` for details."
msgstr "目前，所有支持内容过滤订阅的RMW实现都是基于`DDS <https://www.omg.org/omg-dds-portal/>`__的。这意味着支持的过滤表达式和参数也依赖于`DDS <https://www.omg.org/omg-dds-portal/>`__，您可以参考`DDS规范 <https://www.omg.org/spec/DDS/1.4/PDF>`__的``附录B - 查询和过滤语法``了解详细信息。@{"calib_text": " `[5014] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5014>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:47 ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:21
msgid "Installing the demo"
msgstr "安装演示程序@{"calib_text": " `[5015] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5015>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:49 ../../source/Tutorials/Demos/Intra-Process-Communication.rst:26
msgid "See the :doc:`installation instructions <../../Installation>` for details on installing ROS 2."
msgstr "详细了解安装ROS 2的方法，请参阅:doc:`安装说明 <../../Installation>`。@{"calib_text": " `[5016] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5016>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:51
msgid "If you've installed ROS 2 from packages, ensure that you have ``ros-humble-demo-nodes-cpp`` installed. If you downloaded the archive or built ROS 2 from source, it will already be part of the installation."
msgstr "如果您已从软件包中安装了ROS 2，请确保已安装``ros-humble-demo-nodes-cpp``。如果您从存档中下载或从源代码构建ROS 2，它已经包含在安装中。@{"calib_text": " `[5017] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5017>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:55
msgid "Temperature filtering demo"
msgstr "温度过滤演示@{"calib_text": " `[5018] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5018>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:57
msgid "This demo shows how a content filtering subscription can be used to only receive temperature values that are out of the acceptable temperature range, detecting emergencies. The content filtering subscription filters out the uninteresting temperature data, so that the subscription callback is not issued."
msgstr "该演示展示了如何使用内容过滤订阅仅接收超出可接受温度范围的温度值，以检测紧急情况。内容过滤订阅会过滤掉无趣的温度数据，以避免发出订阅回调。@{"calib_text": " `[5019] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5019>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:60
msgid "ContentFilteringPublisher:"
msgstr "内容过滤发布者:@{"calib_text": " `[5020] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5020>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:62
msgid "https://github.com/ros2/demos/blob/humble/demo_nodes_cpp/src/topics/content_filtering_publisher.cpp"
msgstr "https://github.com/ros2/demos/blob/humble/demo_nodes_cpp/src/topics/content_filtering_publisher.cpp@{"calib_text": " `[5021] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5021>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:130
msgid "The content filter is defined in the subscription side, publishers don't need to be configured in any special way to allow content filtering. The ``ContentFilteringPublisher`` node publishes simulated temperature data starting from -100.0 and ending at 150.0 with a step size of 10.0 every second."
msgstr "内容过滤器在订阅端定义，发布者不需要以任何特殊方式进行配置以允许内容过滤。``ContentFilteringPublisher`` 节点每秒发布模拟温度数据，从-100.0开始，以10.0的步长逐渐增加，直到达到150.0。@{"calib_text": " `[5022] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5022>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:133
msgid "We can run the demo by running the ``ros2 run demo_nodes_cpp content_filtering_publisher`` executable (don't forget to source the setup file first):"
msgstr "我们可以通过运行``ros2 run demo_nodes_cpp content_filtering_publisher``可执行文件来运行演示（不要忘记首先源化设置文件）:@{"calib_text": " `[5023] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5023>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:169
msgid "ContentFilteringSubscriber:"
msgstr "ContentFilteringSubscriber:@{"calib_text": " `[5024] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5024>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:171
msgid "https://github.com/ros2/demos/blob/humble/demo_nodes_cpp/src/topics/content_filtering_subscriber.cpp"
msgstr "https://github.com/ros2/demos/blob/humble/demo_nodes_cpp/src/topics/content_filtering_subscriber.cpp@{"calib_text": " `[5025] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5025>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:241
msgid "To enable content filtering, applications can set the filtering expression and the expression parameters in ``SubscriptionOptions``. The application can also check if content filtering is enabled on the subscription."
msgstr "为了启用内容过滤，应用程序可以在``SubscriptionOptions``中设置过滤表达式和表达式参数。应用程序还可以检查订阅中是否启用了内容过滤。@{"calib_text": " `[5026] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5026>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:244
msgid "In this demo, the ``ContentFilteringSubscriber`` node creates a content filtering subscription that receives a message only if the temperature value is less than -30.0 or greater than 100.0."
msgstr "在这个演示中，``ContentFilteringSubscriber``节点创建了一个内容过滤订阅，只有当温度值小于-30.0或大于100.0时才接收消息。@{"calib_text": " `[5027] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5027>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:246
msgid "As commented before, content filtering subscription support depends on the RMW implementation. Applications can use the ``is_cft_enabled`` method to check if content filtering is actually enabled on the subscription."
msgstr "如前所述，内容过滤订阅的支持取决于RMW实现。应用程序可以使用``is_cft_enabled``方法来检查订阅是否实际上启用了内容过滤。@{"calib_text": " `[5028] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5028>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:249
msgid "To test content filtering subscription, let's run it:"
msgstr "为了测试内容过滤订阅，让我们运行它：@{"calib_text": " `[5029] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5029>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:275
msgid "You should see a message showing the content filtering options used and logs for each message received only if the temperature value is less than -30.0 or greater than 100.0."
msgstr "如果温度值小于-30.0或大于100.0，你应该会看到显示所使用的内容过滤选项和每个接收到的消息的日志。@{"calib_text": " `[5030] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5030>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:277
msgid "If content filtering is not supported by the RMW implementation, the subscription will still be created without content filtering enabled. We can try that by executing ``RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ros2 run demo_nodes_cpp content_filtering_publisher``."
msgstr "如果RMW实现不支持内容过滤，订阅仍然会被创建，但不会启用内容过滤。我们可以通过执行``RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ros2 run demo_nodes_cpp content_filtering_publisher``来尝试这一点。@{"calib_text": " `[5031] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5031>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:302
msgid "You can see the message ``Content filter is not enabled`` because underlying RMW implementation does not support the feature, but the demo still successfully creates the normal subscription to receive all temperature data."
msgstr "您可以看到消息``Content filter is not enabled``，这是因为底层RMW实现不支持该功能，但演示仍然成功创建了正常的订阅以接收所有温度数据。@{"calib_text": " `[5032] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5032>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:307
msgid "`content filtering examples <https://github.com/ros2/examples/blob/humble/rclcpp/topics/minimal_subscriber/content_filtering.cpp>`__ that covers all interfaces for content filtering subscription."
msgstr "``content filtering examples <https://github.com/ros2/examples/blob/humble/rclcpp/topics/minimal_subscriber/content_filtering.cpp>``__涵盖了所有内容过滤订阅的接口。@{"calib_text": " `[5033] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5033>`_ "}@"


#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:308
msgid "`content filtering design PR <https://github.com/ros2/design/pull/282>`__"
msgstr "``content filtering design PR <https://github.com/ros2/design/pull/282>``__@{"calib_text": " `[5034] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5034>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:7
msgid "Setting up efficient intra-process communication"
msgstr "设置高效的进程内通信@{"calib_text": " `[5035] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5035>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:16
msgid "ROS applications typically consist of a composition of individual \"nodes\" which perform narrow tasks and are decoupled from other parts of the system. This promotes fault isolation, faster development, modularity, and code reuse, but it often comes at the cost of performance. After ROS 1 was initially developed, the need for efficient composition of nodes became obvious and Nodelets were developed. In ROS 2 we aim to improve on the design of Nodelets by addressing some fundamental problems that required restructuring of nodes."
msgstr "ROS应用程序通常由一系列独立的“节点”组成，每个节点执行特定的任务，并与系统的其他部分解耦。这促进了故障隔离、更快的开发、模块化和代码重用，但通常会以性能为代价。在最初开发ROS 1后，人们意识到需要有效地组合节点，并因此开发了Nodelets。在ROS 2中，我们旨在改进Nodelets的设计，解决一些需要对节点进行重组的根本性问题。@{"calib_text": " `[5036] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5036>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:21
msgid "In this demo we'll be highlighting how nodes can be composed manually, by defining the nodes separately but combining them in different process layouts without changing the node's code or limiting its abilities."
msgstr "在这个演示中，我们将重点介绍如何手动组合节点，通过分别定义节点，但在不更改节点的代码或限制其功能的情况下，将它们组合在不同的进程布局中。@{"calib_text": " `[5037] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5037>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:24
msgid "Installing the demos"
msgstr "安装演示@{"calib_text": " `[5038] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5038>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:28
msgid "If you've installed ROS 2 from packages, ensure that you have ``ros-humble-intra-process-demo`` installed. If you downloaded the archive or built ROS 2 from source, it will already be part of the installation."
msgstr "如果你是通过包安装ROS 2，请确保已安装``ros-humble-intra-process-demo``。如果你从存档文件下载或从源代码构建ROS 2，它已经包含在安装中。@{"calib_text": " `[5039] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5039>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:32
msgid "Running and understanding the demos"
msgstr "运行和理解演示@{"calib_text": " `[5040] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5040>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:34
msgid "There are a few different demos: some are toy problems designed to highlight features of the intra process communications functionality and some are end to end examples which use OpenCV and demonstrate the ability to recombine nodes into different configurations."
msgstr "有几个不同的演示：其中一些是玩具问题，旨在突出显示进程内通信功能的特点，另一些是端到端示例，使用OpenCV，并演示了将节点重新组合成不同配置的能力。@{"calib_text": " `[5041] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5041>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:37
msgid "The two node pipeline demo"
msgstr "两个节点管道演示@{"calib_text": " `[5042] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5042>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:39
msgid "This demo is designed to show that the intra process publish/subscribe connection can result in zero-copy transport of messages when publishing and subscribing with ``std::unique_ptr``\\ s."
msgstr "此演示旨在展示进程内发布/订阅连接在使用``std::unique_ptr``进行发布和订阅时可以实现零拷贝传输。@{"calib_text": " `[5043] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5043>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:41
msgid "First let's take a look at the source:"
msgstr "首先，让我们来看一下源代码:@{"calib_text": " `[5044] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5044>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:43
msgid "https://github.com/ros2/demos/blob/humble/intra_process_demo/src/two_node_pipeline/two_node_pipeline.cpp"
msgstr "https://github.com/ros2/demos/blob/humble/intra_process_demo/src/two_node_pipeline/two_node_pipeline.cpp@{"calib_text": " `[5045] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5045>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:127
msgid "As you can see by looking at the ``main`` function, we have a producer and a consumer node, we add them to a single threaded executor, and then call spin."
msgstr "通过查看 ``main`` 函数，您可以看到我们有一个生产者节点和一个消费者节点，我们将它们添加到一个单线程执行器中，然后调用 spin 函数。@{"calib_text": " `[5046] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5046>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:129
msgid "If you look at the \"producer\" node's implementation in the ``Producer`` struct, you can see that we have created a publisher which publishes on the \"number\" topic and a timer which periodically creates a new message, prints out its address in memory and its content's value and then publishes it."
msgstr "如果您查看 ``Producer`` 结构体中的“生产者”节点实现，您会发现我们创建了一个在“number”主题上发布消息的发布者和一个定时器，该定时器周期性地创建一个新的消息，打印出它在内存中的地址和其内容的值，然后将其发布出去。@{"calib_text": " `[5047] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5047>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:131
msgid "The \"consumer\" node is a bit simpler, you can see its implementation in the ``Consumer`` struct, as it only subscribes to the \"number\" topic and prints the address and value of the message it receives."
msgstr "``consumer``节点相对简单，可以在``Consumer``结构体中看到其实现，它只订阅\"number\"主题，并打印出接收到的消息的地址和值。@{"calib_text": " `[5048] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5048>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:133
msgid "The expectation is that the producer will print out an address and value and the consumer will print out a matching address and value. This demonstrates that intra process communication is indeed working and unnecessary copies are avoided, at least for simple graphs."
msgstr "预期结果是生产者将打印出地址和值，而消费者将打印出匹配的地址和值。这证明了进程内通信确实起作用，并且至少对于简单的图形，避免了不必要的复制。@{"calib_text": " `[5049] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5049>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:136
msgid "Let's run the demo by executing ``ros2 run intra_process_demo two_node_pipeline`` executable (don't forget to source the setup file first):"
msgstr "让我们通过执行``ros2 run intra_process_demo two_node_pipeline``可执行文件来运行演示（不要忘记先执行设置文件）：@{"calib_text": " `[5050] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5050>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:154
msgid "One thing you'll notice is that the messages tick along at about one per second. This is because we told the timer to fire at about once per second."
msgstr "你会注意到一件事，消息大约每秒钟传递一次。这是因为我们告诉定时器大约每秒触发一次。@{"calib_text": " `[5051] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5051>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:157
msgid "Also you may have noticed that the first message (with value ``0``) does not have a corresponding \"Received message ...\" line. This is because publish/subscribe is \"best effort\" and we do not have any \"latching\" like behavior enabled. This means that if the publisher publishes a message before the subscription has been established, the subscription will not receive that message. This race condition can result in the first few messages being lost. In this case, since they only come once per second, usually only the first message is lost."
msgstr "你可能已经注意到第一条消息（值为``0``）没有对应的\"Received message ...\"行。这是因为发布/订阅是\"尽力而为\"的，我们没有启用任何\"锁存\"行为。这意味着如果发布者在建立订阅之前发布一条消息，订阅将不会接收到该消息。这种竞争条件可能导致前几条消息丢失。在这种情况下，由于它们每秒只出现一次，通常只会丢失第一条消息。@{"calib_text": " `[5052] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5052>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:163
msgid "Finally, you can see that \"Published message...\" and \"Received message ...\" lines with the same value also have the same address. This shows that the address of the message being received is the same as the one that was published and that it is not a copy. This is because we're publishing and subscribing with ``std::unique_ptr``\\ s which allow ownership of a message to be moved around the system safely. You can also publish and subscribe with ``const &`` and ``std::shared_ptr``, but zero-copy will not occur in that case."
msgstr "最后，你可以看到具有相同值的\"Published message...\"和\"Received message ...\"行也具有相同的地址。这表明接收到的消息的地址与发布的消息相同，并且它不是一个副本。这是因为我们使用``std::unique_ptr``进行发布和订阅，它允许消息的所有权在系统中安全地移动。你也可以使用``const &``和``std::shared_ptr``进行发布和订阅，但在这种情况下不会进行零拷贝。@{"calib_text": " `[5053] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5053>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:169
msgid "The cyclic pipeline demo"
msgstr "循环管道示例@{"calib_text": " `[5054] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5054>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:171
msgid "This demo is similar to the previous one, but instead of the producer creating a new message for each iteration, this demo only ever uses one message instance. This is achieved by creating a cycle in the graph and \"kicking off\" communication by externally making one of the nodes publish before spinning the executor:"
msgstr "这个示例与之前的示例类似，但是不同的是，生产者在每次迭代中不会创建新的消息，而是始终使用同一个消息实例。通过在图中创建一个循环，并在旋转执行器之前通过外部方式使其中一个节点发布消息，可以实现这一点：@{"calib_text": " `[5055] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5055>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:174
msgid "https://github.com/ros2/demos/blob/humble/intra_process_demo/src/cyclic_pipeline/cyclic_pipeline.cpp"
msgstr "https://github.com/ros2/demos/blob/humble/intra_process_demo/src/cyclic_pipeline/cyclic_pipeline.cpp@{"calib_text": " `[5056] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5056>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:256
msgid "Unlike the previous demo, this demo uses only one Node, instantiated twice with different names and configurations. The graph ends up being ``pipe1`` -> ``pipe2`` -> ``pipe1`` ... in a loop."
msgstr "与之前的演示不同，此演示只使用一个节点，使用不同的名称和配置实例化两次。图的结构为“pipe1” -> “pipe2” -> “pipe1”... 形成循环。@{"calib_text": " `[5057] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5057>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:259
msgid "The line ``pipe1->pub->publish(msg);`` kicks the process off, but from then on the messages are passed back and forth between the nodes by each one calling publish within its own subscription callback."
msgstr "代码行“pipe1->pub->publish(msg);”启动了该过程，但之后消息通过每个节点在自己的订阅回调中调用publish来来回传递。@{"calib_text": " `[5058] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5058>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:261
msgid "The expectation here is that the nodes pass the message back and forth, once a second, incrementing the value of the message each time. Because the message is being published and subscribed to as a ``unique_ptr`` the same message created at the beginning is continuously used."
msgstr "这里的期望是节点之间每秒传递消息一次，每次递增消息的值。由于消息作为“unique_ptr”发布和订阅，开始时创建的同一消息会不断使用。@{"calib_text": " `[5059] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5059>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:264
msgid "To test those expectations, let's run it:"
msgstr "为了测试这些期望，让我们运行它：@{"calib_text": " `[5060] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5060>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:294
msgid "You should see ever increasing numbers on each iteration, starting with 42... because 42, and the whole time it reuses the same message, as demonstrated by the pointer addresses which do not change, which avoids unnecessary copies."
msgstr "你应该在每次迭代中看到不断增加的数字，从42开始...因为42，而且整个时间它重复使用相同的消息，如指针地址所示，它们不会改变，这避免了不必要的拷贝。@{"calib_text": " `[5061] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5061>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:297
msgid "The image pipeline demo"
msgstr "图像处理演示@{"calib_text": " `[5062] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5062>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:299
msgid "In this demo we'll use OpenCV to capture, annotate, and then view images."
msgstr "在这个演示中，我们将使用OpenCV来捕获、注释和查看图像。@{"calib_text": " `[5063] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5063>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:303
msgid "If you are on macOS and these examples do not work or you receive an error like ``ddsi_conn_write failed -1``, then you'll need to increase your system wide UDP packet size:"
msgstr "如果您使用的是 macOS，而这些示例不起作用，或者您收到类似 ``ddsi_conn_write failed -1`` 的错误，那么您需要增加系统范围内的 UDP 数据包大小：@{"calib_text": " `[5064] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5064>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:310
msgid "These changes will not persist after a reboot."
msgstr "这些更改在重启后将不会保留。@{"calib_text": " `[5065] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5065>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:313
msgid "Simple pipeline"
msgstr "简单的流水线@{"calib_text": " `[5066] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5066>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:315
msgid "First we'll have a pipeline of three nodes, arranged as such: ``camera_node`` -> ``watermark_node`` -> ``image_view_node``"
msgstr "首先，我们将有一个由三个节点组成的流水线，安排如下：``camera_node`` -> ``watermark_node`` -> ``image_view_node``@{"calib_text": " `[5067] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5067>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:317
msgid "The ``camera_node`` reads from camera device ``0`` on your computer, writes some information on the image and publishes it. The ``watermark_node`` subscribes to the output of the ``camera_node`` and adds more text before publishing it too. Finally, the ``image_view_node`` subscribes to the output of the ``watermark_node``, writes more text to the image and then visualizes it with ``cv::imshow``."
msgstr "``camera_node``从计算机上的相机设备``0``读取数据，并在图像上写入一些信息后进行发布。``watermark_node``订阅``camera_node``的输出，并在发布之前添加更多的文本。最后，``image_view_node``订阅``watermark_node``的输出，向图像中添加更多的文本，并使用``cv::imshow``进行可视化。@{"calib_text": " `[5068] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5068>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:321
msgid "In each node the address of the message which is being sent, or which has been received, or both, is written to the image. The watermark and image view nodes are designed to modify the image without copying it and so the addresses imprinted on the image should all be the same as long as the nodes are in the same process and the graph remains organized in a pipeline as sketched above."
msgstr "在每个节点中，发送或接收到的消息的地址都写入图像中。水印节点和图像查看节点设计为在不复制图像的情况下修改图像，因此只要节点在同一进程中，并且图形以上述流水线的方式保持组织，图像上印刻的地址应该都是相同的。@{"calib_text": " `[5069] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5069>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:326
msgid "On some systems (we've seen it happen on Linux), the address printed to the screen might not change. This is because the same unique pointer is being reused. In this situation, the pipeline is still running."
msgstr "在某些系统上（我们在Linux上遇到过这种情况），打印到屏幕上的地址可能不会改变。这是因为正在重复使用相同的唯一指针。在这种情况下，流水线仍在运行。@{"calib_text": " `[5070] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5070>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:329
msgid "Let's run the demo by executing the following executable:"
msgstr "通过执行以下可执行文件来运行演示：@{"calib_text": " `[5071] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5071>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:335 ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:128
msgid "You should see something like this:"
msgstr "你应该看到类似这样的内容：@{"calib_text": " `[5072] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5072>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:341
msgid "You can pause the rendering of the image by pressing the spacebar and you can resume by pressing the spacebar again. You can also press ``q`` or ``ESC`` to exit."
msgstr "你可以通过按下空格键暂停图像的渲染，再次按下空格键可以恢复。你还可以按下 ``q`` 或 ``ESC`` 键退出。@{"calib_text": " `[5073] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5073>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:344
msgid "If you pause the image viewer, you should be able to compare the addresses written on the image and see that they are the same."
msgstr "如果你暂停了图像查看器，你应该能够比较图像上的地址，并看到它们是相同的。@{"calib_text": " `[5074] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5074>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:347
msgid "Pipeline with two image viewers"
msgstr "带有两个图像查看器的流水线@{"calib_text": " `[5075] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5075>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:349
msgid "Now let's look at an example just like the one above, except it has two image view nodes. All the nodes are still in the same process, but now two image view windows should show up. (Note for macOS users: your image view windows might be on top of each other). Let's run it with the command:"
msgstr "现在让我们看一个与上面相似的示例，只是这次有两个图像视图节点。所有节点仍然在同一个进程中，但现在应该会出现两个图像视图窗口。（注意 macOS 用户：你的图像视图窗口可能会重叠在一起）。让我们用以下命令运行它：@{"calib_text": " `[5076] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5076>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:361
msgid "Just like the last example, you can pause the rendering with the spacebar and continue by pressing the spacebar a second time. You can stop the updating to inspect the pointers written to the screen."
msgstr "与上一个示例一样，你可以使用空格键暂停渲染，再次按下空格键继续。你可以停止更新以检查写入屏幕的指针。@{"calib_text": " `[5077] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5077>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:363
msgid "As you can see in the example image above, we have one image with all of the pointers the same and then another image with the same pointers as the first image for the first two entries, but the last pointer on the second image is different. To understand why this is happening consider the graph's topology:"
msgstr "如上面的示例图所示，我们有一个图像，其中所有指针都相同，然后另一个图像的前两个条目与第一个图像的指针相同，但第二个图像的最后一个指针不同。要理解为什么会发生这种情况，请考虑图的拓扑结构：@{"calib_text": " `[5078] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5078>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:370
msgid "The link between the ``camera_node`` and the ``watermark_node`` can use the same pointer without copying because there is only one intra process subscription to which the message should be delivered. But for the link between the ``watermark_node`` and the two image view nodes the relationship is one to many, so if the image view nodes were using ``unique_ptr`` callbacks then it would be impossible to deliver the ownership of the same pointer to both. It can be, however, delivered to one of them. Which one would get the original pointer is not defined, but instead is simply the last to be delivered."
msgstr "``camera_node`` 和 ``watermark_node`` 之间的链接可以使用相同的指针而不进行复制，因为只有一个进程内的订阅应将消息传递给该指针。但是，对于 ``watermark_node`` 和两个图像视图节点之间的链接，关系是一对多的，因此，如果图像视图节点使用 ``unique_ptr`` 回调，那么将不可能将同一指针的所有权分别传递给它们。然而，它可以被传递给其中一个。哪个节点会获得原始指针并没有定义，而是简单地取决于最后被传递的节点。@{"calib_text": " `[5079] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5079>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:372
msgid "Note that the image view nodes are not subscribed with ``unique_ptr`` callbacks. Instead they are subscribed with ``const shared_ptr``\\ s. This means the system deliveres the same ``shared_ptr`` to both callbacks. When the first intraprocess subscription is handled, the internally stored ``unique_ptr`` is promoted to a ``shared_ptr``. Each of the callbacks will receive shared ownership of the same message."
msgstr "注意，图像视图节点没有使用``unique_ptr``回调函数进行订阅，而是使用``const shared_ptr``进行订阅。这意味着系统将向两个回调函数提供相同的``shared_ptr``。在处理第一个进程内订阅时，内部存储的``unique_ptr``将被提升为``shared_ptr``。每个回调函数将共享同一消息的所有权。@{"calib_text": " `[5080] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5080>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:375
msgid "Pipeline with interprocess viewer"
msgstr "具有进程间查看器的流水线@{"calib_text": " `[5081] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5081>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:377
msgid "One other important thing to get right is to avoid interruption of the intra process zero-copy behavior when interprocess subscriptions are made. To test this we can run the first image pipeline demo, ``image_pipeline_all_in_one``, and then run an instance of the stand alone ``image_view_node`` (don't forget to prefix them with ``ros2 run intra_process_demo`` in the terminal). This will look something like this:"
msgstr "还有一件重要的事情需要注意，即在进行进程间订阅时，避免中断进程内的零拷贝行为。为了测试这一点，我们可以运行第一个图像流水线演示程序``image_pipeline_all_in_one``，然后运行一个独立的``image_view_node``实例（不要忘记在终端中加上``ros2 run intra_process_demo``前缀）。大致如下所示：@{"calib_text": " `[5082] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5082>`_ "}@"


#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:383
msgid "It's hard to pause both images at the same time so the images may not line up, but the important thing to notice is that the ``image_pipeline_all_in_one`` image view shows the same address for each step. This means that the intra process zero-copy is preserved even when an external view is subscribed as well. You can also see that the interprocess image view has different process IDs for the first two lines of text and the process ID of the standalone image viewer in the third line of text."
msgstr "很难同时暂停两个图像，因此图像可能不会对齐，但需要注意的重要事项是，``image_pipeline_all_in_one``图像视图显示了每个步骤的相同地址。这意味着即使订阅了外部视图，进程内的零拷贝仍然得到保留。您还可以看到进程间图像视图在文本的前两行具有不同的进程 ID，并且独立图像查看器的进程 ID 在第三行文本中。@{"calib_text": " `[5083] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5083>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:7
msgid "Logging"
msgstr "记录日志@{"calib_text": " `[5084] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5084>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:13
msgid "See `the logging page <../../Concepts/About-Logging>` for details on available functionality."
msgstr "有关可用功能的详细信息，请参阅 `日志记录页面 <../../Concepts/About-Logging>`。@{"calib_text": " `[5085] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5085>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:16
msgid "Using log statements in code"
msgstr "在代码中使用日志语句@{"calib_text": " `[5086] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5086>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:19
msgid "Basic logging"
msgstr "基本日志记录@{"calib_text": " `[5087] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5087>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:21
msgid "The following code will output a log message from a ROS 2 node at ``DEBUG`` severity:"
msgstr "下面的代码将在``DEBUG``级别从ROS 2节点输出日志消息：@{"calib_text": " `[5088] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5088>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:41
msgid "Note that in both cases, no trailing newline is added, as the logging infrastructure will automatically add one."
msgstr "请注意，在两种情况下都不会添加尾随换行符，因为日志记录基础设施将自动添加一个。@{"calib_text": " `[5089] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5089>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:44
msgid "Logging only the first time"
msgstr "仅记录第一次@{"calib_text": " `[5090] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5090>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:46
msgid "The following code will output a log message from a ROS 2 node at ``INFO`` severity, but only the first time it is hit:"
msgstr "下面的代码将在``INFO``级别从ROS 2节点输出日志消息，但仅在第一次调用时：@{"calib_text": " `[5091] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5091>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:68
msgid "Logging all but the first time"
msgstr "记录除第一次之外的所有日志@{"calib_text": " `[5092] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5092>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:70
msgid "The following code will output a log message from a ROS 2 node at ``WARN`` severity, but not the very first time it is hit:"
msgstr "以下代码将从一个ROS 2节点以``WARN``严重程度输出日志消息，但在第一次触发时不输出：@{"calib_text": " `[5093] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5093>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:92
msgid "Logging throttled"
msgstr "记录被节流@{"calib_text": " `[5094] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5094>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:94
msgid "The following code will output a log message from a ROS 2 node at ``ERROR`` severity, but no more than once per second."
msgstr "以下代码将从一个ROS 2节点以``ERROR``严重程度输出日志消息，但每秒钟不超过一次。@{"calib_text": " `[5095] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5095>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:96
msgid "The interval parameter specifying milliseconds between messages should have an integer data type so it can be converted to a ``rcutils_duration_value_t`` (an ``int64_t``):"
msgstr "间隔参数指定消息之间的毫秒数应具有整数数据类型，以便可以将其转换为 ``rcutils_duration_value_t``（即 ``int64_t``）：@{"calib_text": " `[5096] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5096>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:121
msgid "Logging throttled all but the first time"
msgstr "除第一次外，日志被限制了频率@{"calib_text": " `[5097] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5097>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:123
msgid "The following code will output a log message from a ROS 2 node at ``DEBUG`` severity, no more than once per second, skipping the very first time it is hit:"
msgstr "以下代码将在 ROS 2 节点中以 ``DEBUG`` 严重性输出日志消息，每秒最多一次，并跳过第一次命中：@{"calib_text": " `[5098] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5098>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:144
msgid "Logging demo"
msgstr "日志演示@{"calib_text": " `[5099] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5099>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:146
msgid "In this `demo <https://github.com/ros2/demos/tree/humble/logging_demo>`_, different types of log calls are shown and the severity level of different loggers is configured locally and externally."
msgstr "在这个 `演示 <https://github.com/ros2/demos/tree/humble/logging_demo>`_ 中，展示了不同类型的日志调用，并配置了不同日志记录器的严重级别，可以在本地和外部进行配置。@{"calib_text": " `[5100] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5100>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:148
msgid "Start the demo with:"
msgstr "使用以下命令启动演示：@{"calib_text": " `[5101] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5101>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:154
msgid "Over time you will see output from various log calls with different properties. To start with you will only see output from log calls with severity ``INFO`` and above (``WARN``, ``ERROR``, ``FATAL``). Note that the first message will only be logged once, though the line is reached on each iteration, as that is a property of the log call used for that message."
msgstr "随着时间的推移，您将看到具有不同属性的各种日志调用的输出。首先，您只会看到具有严重级别为 ``INFO`` 及以上（``WARN``、``ERROR``、``FATAL``）的日志调用的输出。请注意，尽管在每次迭代中都会到达该行，但第一条消息只会被记录一次，因为它是用于该消息的日志调用的属性之一。@{"calib_text": " `[5102] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5102>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:159
msgid "Logging directory configuration"
msgstr "日志目录配置@{"calib_text": " `[5103] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5103>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:161
msgid "The logging directory can be configured through two environment variables: ``ROS_LOG_DIR`` and ``ROS_HOME``. The logic is as follows:"
msgstr "日志目录可以通过两个环境变量进行配置：``ROS_LOG_DIR`` 和 ``ROS_HOME``。逻辑如下：@{"calib_text": " `[5104] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5104>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:164
msgid "Use ``$ROS_LOG_DIR`` if ``ROS_LOG_DIR`` is set and not empty."
msgstr "如果``ROS_LOG_DIR``已设置且非空，则使用``$ROS_LOG_DIR``。@{"calib_text": " `[5105] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5105>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:165
msgid "Otherwise, use ``$ROS_HOME/log``, using ``~/.ros`` for ``ROS_HOME`` if not set or if empty."
msgstr "否则，使用``$ROS_HOME/log``，如果未设置或为空，则使用``~/.ros``作为``ROS_HOME``。@{"calib_text": " `[5106] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5106>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:167
msgid "For example, to set the logging directory to ``~/my_logs``:"
msgstr "例如，要将日志目录设置为 ``~/my_logs``：@{"calib_text": " `[5107] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5107>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:192
msgid "You will then find the logs under ``~/my_logs/``."
msgstr "然后您将在 ``~/my_logs/`` 下找到日志文件。@{"calib_text": " `[5108] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5108>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:194
msgid "Alternatively, you can set ``ROS_HOME`` and the logging directory will be relative to it (``$ROS_HOME/log``). ``ROS_HOME`` is intended to be used by anything that needs a base directory. Note that ``ROS_LOG_DIR`` has to be either unset or empty. For example, with ``ROS_HOME`` set to ``~/my_ros_home``:"
msgstr "另外，您可以设置 ``ROS_HOME``，日志目录将相对于它而定（``$ROS_HOME/log``）。``ROS_HOME`` 旨在用于需要基础目录的任何内容。请注意，``ROS_LOG_DIR`` 必须未设置或为空。例如，当将 ``ROS_HOME`` 设置为 ``~/my_ros_home`` 时：@{"calib_text": " `[5109] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5109>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:222
msgid "You will then find the logs under ``~/my_ros_home/log/``."
msgstr "然后您将在 ``~/my_ros_home/log/`` 下找到日志文件。@{"calib_text": " `[5110] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5110>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:225
msgid "Logger level configuration: programmatically"
msgstr "日志记录器级别配置：编程方式@{"calib_text": " `[5111] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5111>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:227
msgid "After 10 iterations the level of the logger will be set to ``DEBUG``, which will cause additional messages to be logged."
msgstr "经过10次迭代，日志记录器的级别将被设置为``DEBUG``，这将导致额外的消息被记录。@{"calib_text": " `[5112] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5112>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:229
msgid "Some of these debug messages cause additional functions/expressions to be evaluated, which were previously skipped as ``DEBUG`` log calls were not enabled. See `the source code <https://github.com/ros2/demos/blob/humble/logging_demo/src/logger_usage_component.cpp>`__ of the demo for further explanation of the calls used, and see the rclcpp logging documentation for a full list of supported logging calls."
msgstr "其中一些调试消息会导致评估额外的函数/表达式，这些函数/表达式在未启用``DEBUG``日志调用时以前被跳过。有关使用的调用的进一步解释，请参阅演示的`源代码 <https://github.com/ros2/demos/blob/humble/logging_demo/src/logger_usage_component.cpp>`__，并参阅 rclcpp 日志记录文档以获得支持的日志记录调用的完整列表。@{"calib_text": " `[5113] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5113>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:233
msgid "Logger level configuration: externally"
msgstr "日志记录器级别配置：外部@{"calib_text": " `[5114] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5114>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:235
msgid "In the future there will be a generalized approach to external configuration of loggers at runtime (similar to how `rqt_logger_level <https://wiki.ros.org/rqt_logger_level>`__ in ROS 1 allows logger configuration via remote procedural calls). **This concept is not yet officially supported in ROS 2.** In the meantime, this demo provides an **example** service that can be called externally to request configuration of logger levels for known names of loggers in the process."
msgstr "将来将会有一种通用方法来在运行时外部配置日志记录器（类似于 ROS 1 中通过远程过程调用允许日志记录器配置的方式，如 `rqt_logger_level <https://wiki.ros.org/rqt_logger_level>`__）。**目前，ROS 2 尚未正式支持这个概念。**与此同时，此演示提供了一个**示例**服务，可用于外部调用以请求配置进程中已知日志记录器的级别。@{"calib_text": " `[5115] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5115>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:239
msgid "The demo previously started is already running this example service. To set the level of the demo's logger back to ``INFO``\\ , call the service with:"
msgstr "之前启动的演示已经在运行这个示例服务。要将演示的日志记录器级别设置回``INFO``，请使用以下命令调用该服务：@{"calib_text": " `[5116] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5116>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:246
msgid "This service call will work on any logger that is running in the process provided that you know its name. This includes the loggers in the ROS 2 core, such as ``rcl`` (the common client library package). To enable debug logging for ``rcl``, call:"
msgstr "只要您知道日志记录器的名称，此服务调用将适用于正在运行的任何日志记录器，包括ROS 2核心中的日志记录器，如``rcl``（常见的客户端库包）。要为``rcl``启用调试日志记录，请执行以下命令：@{"calib_text": " `[5117] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5117>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:254
msgid "You should see debug output from ``rcl`` start to show."
msgstr "您应该会看到``rcl``的调试输出开始显示。@{"calib_text": " `[5118] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5118>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:257
msgid "Using the logger config component"
msgstr "使用日志记录器配置组件@{"calib_text": " `[5119] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5119>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:259
msgid "The server that responds to the logger configuration requests has been developed as a component so that it may be added to an existing composition-based system. For example, if you are using `a container to run your nodes <../Intermediate/Composition>`, to be able to configure your loggers you only need to request that it additionally load the ``logging_demo::LoggerConfig`` component into the container."
msgstr "响应记录器配置请求的服务器已被开发为一个组件，以便可以将其添加到现有的基于组合的系统中。例如，如果您正在使用`容器运行您的节点<../Intermediate/Composition>`，为了能够配置您的记录器，您只需要请求将``logging_demo::LoggerConfig``组件额外加载到容器中。@{"calib_text": " `[5120] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5120>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:262
msgid "As an example, if you want to debug the ``composition::Talker`` demo, you can start the talker as normal with:"
msgstr "例如，如果您想调试``composition::Talker``演示程序，您可以正常启动Talker，如下所示：@{"calib_text": " `[5121] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5121>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:264
msgid "Shell 1:"
msgstr "Shell 1:@{"calib_text": " `[5122] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5122>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:270 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:287
msgid "Shell 2:"
msgstr "Shell 2:@{"calib_text": " `[5123] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5123>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:276
msgid "And then when you want to enable debug logging, load the ``LoggerConfig`` component with:"
msgstr "当您想要启用调试日志记录时，使用以下命令加载“LoggerConfig”组件：@{"calib_text": " `[5124] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5124>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:278
msgid "Shell 2"
msgstr "Shell 2@{"calib_text": " `[5125] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5125>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:284
msgid "And finally, configure all unset loggers to the debug severity by addressing the empty-named logger. Note that loggers that have been specifically configured to use a particular severity will not be affected by this call."
msgstr "最后，通过处理空命名的日志记录器，将所有未设置的日志记录器配置为调试严重性。请注意，已经特别配置为使用特定严重性的日志记录器不会受到此调用的影响。@{"calib_text": " `[5126] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5126>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:293
msgid "You should see debug output from any previously unset loggers in the process start to appear, including from the ROS 2 core."
msgstr "您应该看到进程中以前未设置的日志记录器开始显示调试输出，包括来自ROS 2核心的输出。@{"calib_text": " `[5127] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5127>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:296
msgid "Logger level configuration: command line"
msgstr "日志级别配置：命令行@{"calib_text": " `[5128] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5128>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:298
msgid "As of the Bouncy ROS 2 release, the severity level for loggers that have not had their severity set explicitly can be configured from the command line. Restart the demo including the following command line argument:"
msgstr "自 Bouncy ROS 2 版本开始，未显式设置严重性级别的日志记录器的级别可以从命令行进行配置。重新启动演示，包括以下命令行参数：@{"calib_text": " `[5129] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5129>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:306
msgid "This configures the default severity for any unset logger to the debug severity level. You should see debug output from loggers from the demo itself and from the ROS 2 core."
msgstr "这将将任何未设置级别的记录器的默认级别配置为调试级别。您应该能够从演示本身和 ROS 2 核心的记录器看到调试输出。@{"calib_text": " `[5130] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5130>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:309
msgid "As of the Galactic ROS 2 release, the severity level for individual loggers can be configured from the command-line. Restart the demo including the following command line arguments:"
msgstr "自 Galactic ROS 2 版本开始，可以从命令行配置单个记录器的严重性级别。重新启动演示，包括以下命令行参数：@{"calib_text": " `[5131] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5131>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:314
msgid "Galactic and newer"
msgstr "银河系和更新@{"calib_text": " `[5132] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5132>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:322
msgid "Console output formatting"
msgstr "控制台输出格式化@{"calib_text": " `[5133] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5133>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:324
msgid "If you would like more or less verbose formatting, you can use RCUTILS_CONSOLE_OUTPUT_FORMAT environment variable. For example, to additionally get the timestamp and location of the log calls, stop the demo and restart it with the environment variable set:"
msgstr "如果您希望获得更详细或更简洁的格式化输出，您可以使用RCUTILS_CONSOLE_OUTPUT_FORMAT环境变量。例如，要在日志调用中额外获取时间戳和位置，请停止演示并使用设置了该环境变量的方式重新启动它：@{"calib_text": " `[5134] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5134>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:348
msgid "You should see the timestamp in seconds and the function name, filename and line number additionally printed with each message. *The ``time`` option is only supported as of the ROS 2 Bouncy release.*"
msgstr "您应该看到每条消息中额外打印的以秒为单位的时间戳、函数名称、文件名和行号。*“time”选项仅在ROS 2 Bouncy版本及以后的版本中受支持。*@{"calib_text": " `[5135] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5135>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:352
msgid "Console output colorizing"
msgstr "控制台输出着色@{"calib_text": " `[5136] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5136>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:354
msgid "By default, the output is colorized when it's targeting a terminal. If you would like to force enabling or disabling it, you can use the ``RCUTILS_COLORIZED_OUTPUT`` environment variable. For example:"
msgstr "默认情况下，当输出定向到终端时会进行着色。如果您想强制启用或禁用着色，可以使用``RCUTILS_COLORIZED_OUTPUT``环境变量。例如：@{"calib_text": " `[5137] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5137>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:379
msgid "You should see that debug, warn, error and fatal logs aren't colorized now."
msgstr "您应该看到现在调试、警告、错误和致命错误日志没有进行着色。@{"calib_text": " `[5138] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5138>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:383
msgid "In Linux and MacOS forcing colorized output means that if you redirect the output to a file, the ansi escape color codes will appear on it. In windows the colorization method relies on console APIs. If it is forced you will get a new warning saying that colorization failed. The default behavior already checks if the output is a console or not, so forcing colorization is not recommended."
msgstr "在Linux和MacOS中，强制着色输出意味着如果您将输出重定向到文件中，将会出现ANSI转义颜色代码。在Windows中，着色方法依赖于控制台API。如果强制启用，您将收到一条新的警告，表示着色失败。默认行为已经检查输出是否为控制台，因此不建议强制着色。@{"calib_text": " `[5139] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5139>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:389
msgid "Default stream for console output"
msgstr "默认控制台输出流@{"calib_text": " `[5140] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5140>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:391
msgid "In Foxy and later, the output from all debug levels goes to stderr by default.  It is possible to force all output to go to stdout by setting the ``RCUTILS_LOGGING_USE_STDOUT`` environment variable to ``1``. For example:"
msgstr "从Foxy版本开始，默认情况下所有调试级别的输出都将发送到stderr。通过将``RCUTILS_LOGGING_USE_STDOUT``环境变量设置为``1``，可以强制所有输出发送到stdout。例如：@{"calib_text": " `[5141] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5141>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:416
msgid "Line buffered console output"
msgstr "行缓冲的控制台输出@{"calib_text": " `[5142] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5142>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:419
msgid "By default, all logging output is unbuffered. You can force it to be buffered by setting the ``RCUTILS_LOGGING_BUFFERED_STREAM`` environment variable to 1. For example:"
msgstr "默认情况下，所有日志输出是无缓冲的。通过将``RCUTILS_LOGGING_BUFFERED_STREAM``环境变量设置为1，可以强制将其缓冲。例如：@{"calib_text": " `[5143] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5143>`_ "}@"


#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:443 ../../source/Tutorials/Demos/Quality-of-Service.rst:71
msgid "Then run:"
msgstr "然后运行：@{"calib_text": " `[5144] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5144>`_ "}@"


#: ../../source/Tutorials/Demos/Managed-Nodes.rst:7
msgid "Managing nodes with managed lifecycles"
msgstr "使用受控生命周期管理节点@{"calib_text": " `[5145] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5145>`_ "}@"


#: ../../source/Tutorials/Demos/Managed-Nodes.rst:9
msgid "This page lives now directly side-by-side with the `code <https://github.com/ros2/demos/blob/humble/lifecycle/README.rst>`__. For more information about the ``lifecycle`` package, refer to `rosindex <https://index.ros.org/p/lifecycle/github-ros2-demos/>`__."
msgstr "此页面现在直接与 `code <https://github.com/ros2/demos/blob/humble/lifecycle/README.rst>`__ 并存。有关 ``lifecycle`` 包的更多信息，请参阅 `rosindex <https://index.ros.org/p/lifecycle/github-ros2-demos/>`__。@{"calib_text": " `[5146] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5146>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:7
msgid "Using quality-of-service settings for lossy networks"
msgstr "在不稳定网络中使用服务质量设置@{"calib_text": " `[5147] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5147>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:16
msgid "Please read the documentation page `about QoS settings <../../Concepts/About-Quality-of-Service-Settings>` for background information on available support in ROS 2."
msgstr "请阅读文档页面 `关于 QoS 设置 <../../Concepts/About-Quality-of-Service-Settings>` 了解 ROS 2 中可用支持的背景信息。@{"calib_text": " `[5148] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5148>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:18
msgid "In this demo, we will spawn a node that publishes a camera image and another that subscribes to the image and shows it on the screen. We will then simulate a lossy network connection between them and show how different quality of service settings handle the bad link."
msgstr "在此演示中，我们将生成一个发布相机图像的节点，另一个节点订阅该图像并在屏幕上显示。然后我们将模拟它们之间的有丢包的网络连接，并展示不同的服务质量设置如何处理这个不良连接。@{"calib_text": " `[5149] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5149>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:24
msgid "This tutorial assumes you have a :doc:`working ROS 2 installation <../../Installation>` and OpenCV. See the `OpenCV documentation <http://docs.opencv.org/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html#table-of-content-introduction>`__ for its installation instructions. You will also need the ROS package ``image_tools``."
msgstr "本教程假设您已经安装了一个 :doc:`工作正常的 ROS 2 系统 <../../Installation>` 和 OpenCV。请参阅 `OpenCV 文档 <http://docs.opencv.org/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html#table-of-content-introduction>`__ 以获取安装说明。您还需要 ROS 包 ``image_tools``。@{"calib_text": " `[5150] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5150>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:30 ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:27
msgid "Linux Binaries"
msgstr "Linux 二进制文件@{"calib_text": " `[5151] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5151>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:36 ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:33
msgid "From Source"
msgstr "来自源代码@{"calib_text": " `[5152] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5152>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:47
msgid "Before running the demo, make sure you have a working webcam connected to your computer."
msgstr "在运行演示之前，请确保您的计算机连接了可工作的摄像头。@{"calib_text": " `[5153] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5153>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:49
msgid "Once you've installed ROS 2, source your setup file:"
msgstr "一旦您安装了ROS 2，请源码您的设置文件：@{"calib_text": " `[5154] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5154>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:77
msgid "Nothing will happen yet. ``showimage`` is a subscriber node that is waiting for a publisher on the ``image`` topic."
msgstr "目前还不会发生任何事情。``showimage`` 是一个订阅者节点，正在等待 ``image`` 主题的发布者。@{"calib_text": " `[5155] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5155>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:80
msgid "Note: you have to close the ``showimage`` process with ``Ctrl-C`` later. You can't just close the window."
msgstr "注意：稍后您需要使用“Ctrl-C”关闭“showimage”进程。您不能只是关闭窗口。@{"calib_text": " `[5156] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5156>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:83
msgid "In a separate terminal, source the install file and run the publisher node:"
msgstr "在另一个终端中，源化安装文件并运行发布节点：@{"calib_text": " `[5157] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5157>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:89
msgid "This will publish an image from your webcam. In case you don't have a camera attached to your computer, there is a commandline option which publishes predefined images."
msgstr "这将从您的网络摄像头发布一张图像。如果您的计算机没有连接摄像头，还有一个命令行选项可以发布预定义的图像。@{"calib_text": " `[5158] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5158>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:98
msgid "In this window, you'll see terminal output:"
msgstr "在此窗口中，您将看到终端输出：@{"calib_text": " `[5159] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5159>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:107
msgid "A window will pop up with the title \"view\" showing your camera feed. In the first window, you'll see output from the subscriber:"
msgstr "将会弹出一个标题为“view”的窗口，显示您的摄像头视频。在第一个窗口中，您将看到订阅者的输出:@{"calib_text": " `[5160] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5160>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:119
msgid "macOS users: If these examples do not work or you receive an error like ``ddsi_conn_write failed -1`` then you'll need to increase your system wide UDP packet size:"
msgstr "macOS用户: 如果这些示例不起作用或者您收到一个类似``ddsi_conn_write failed -1``的错误，那么您需要增加系统范围的UDP数据包大小:@{"calib_text": " `[5161] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5161>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:126
msgid "These changes will not persist a reboot. If you want the changes to persist, add these lines to ``/etc/sysctl.conf`` (create the file if it doesn't exist already):"
msgstr "这些更改不会在重启后生效。如果您希望更改持久生效，请将以下行添加到``/etc/sysctl.conf``（如果文件不存在，则创建该文件）:@{"calib_text": " `[5162] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5162>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:134
msgid "Command line options"
msgstr "命令行选项@{"calib_text": " `[5163] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5163>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:136
msgid "In one of your terminals, add a -h flag to the original command:"
msgstr "在其中一个终端中，将原始命令添加-h标志：@{"calib_text": " `[5164] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5164>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:146
msgid "Add network traffic"
msgstr "添加网络流量@{"calib_text": " `[5165] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5165>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:150
msgid "This section of the demo won't work on RTI's Connext DDS. When running multiple nodes in the same host, the RTI Connext DDS implementation uses shared memory along with the loopback interface. Degrading the loopback interface throughput won't affect shared memory, thus traffic between the two nodes won't be affected."
msgstr "本演示的这一部分在RTI的Connext DDS上不适用。当在同一主机上运行多个节点时，RTI Connext DDS实现使用共享内存和环回接口。降低环回接口的吞吐量不会影响共享内存，因此两个节点之间的流量不会受到影响。@{"calib_text": " `[5166] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5166>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:156
msgid "This next section is Linux-specific."
msgstr "下一部分仅适用于Linux系统。@{"calib_text": " `[5167] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5167>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:158
msgid "However, for macOS and Windows you can achieve a similar effect with the utilities \"Network Link Conditioner\" (part of the xcode tool suite) and \"Clumsy\" (http://jagt.github.io/clumsy/index.html), respectively, but they will not be covered in this tutorial."
msgstr "然而，在macOS和Windows上，您可以使用工具“Network Link Conditioner”（xcode工具套件的一部分）和“Clumsy”（http://jagt.github.io/clumsy/index.html）来实现类似的效果，但它们不在本教程中介绍。@{"calib_text": " `[5168] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5168>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:160
msgid "We are going to use the Linux network traffic control utility, ``tc`` (http://linux.die.net/man/8/tc)."
msgstr "我们将使用Linux的网络流量控制实用程序``tc``（http://linux.die.net/man/8/tc）。@{"calib_text": " `[5169] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5169>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:166
msgid "This magical incantation will simulate 5% packet loss over the local loopback device. If you use a higher resolution of the images (e.g. ``--ros-args -p width:=640 -p height:=480``) you might want to try a lower packet loss rate (e.g. ``1%``)."
msgstr "这个神奇的咒语将在本地环回设备上模拟5%的丢包。如果您使用更高分辨率的图像（例如``--ros-args -p width:=640 -p height:=480``），您可能希望尝试较低的丢包率（例如``1%``）。@{"calib_text": " `[5170] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5170>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:169
msgid "Next we start the ``cam2image`` and ``showimage``, and we'll soon notice that both programs seem to have slowed down the rate at which images are transmitted. This is caused by the behavior of the default QoS settings. Enforcing reliability on a lossy channel means that the publisher (in this case, ``cam2image``) will resend the network packets until it receives acknowledgement from the consumer (i.e. ``showimage``)."
msgstr "接下来，我们启动``cam2image``和``showimage``，很快我们会注意到两个程序似乎减慢了图像传输的速率。这是由于默认的QoS设置的行为引起的。在有丢包的通道上强制可靠性意味着发布者（在本例中为``cam2image``）将重发网络数据包，直到从消费者（即``showimage``）接收到确认。@{"calib_text": " `[5171] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5171>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:173
msgid "Let's now try running both programs, but with more suitable settings. First of all, we'll use the ``-p reliability:=best_effort`` option to enable best effort communication. The publisher will now just attempt to deliver the network packets, and don't expect acknowledgement from the consumer. We see now that some of the frames on the ``showimage`` side were dropped, so the frame numbers in the shell running ``showimage`` won't be consecutive anymore:"
msgstr "现在让我们尝试运行这两个程序，但使用更合适的设置。首先，我们将使用``-p reliability:=best_effort``选项来启用尽力而为的通信。现在，发布者将仅尝试传递网络数据包，并不期望来自消费者的确认。我们现在看到，``showimage``一侧的一些帧已经丢失，所以在运行``showimage``的shell中的帧编号将不再是连续的：@{"calib_text": " `[5172] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5172>`_ "}@"


msgid "Best effort image transfer"
msgstr "尽力而为的图像传输@{"calib_text": " `[5173] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5173>`_ "}@"


#: ../../source/Tutorials/Demos/Quality-of-Service.rst:184
msgid "When you're done, remember to delete the queueing discipline:"
msgstr "完成后，请记得删除队列规则：@{"calib_text": " `[5174] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5174>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:7
msgid "Understanding real-time programming"
msgstr "理解实时编程@{"calib_text": " `[5175] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5175>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:16
msgid "Real-time computing is a key feature of many robotics systems, particularly safety- and mission-critical applications such as autonomous vehicles, spacecrafts, and industrial manufacturing. We are designing and prototyping ROS 2 with real-time performance constraints in mind, since this is a requirement that was not considered in the early stages of ROS 1 and it is now intractable to refactor ROS 1 to be real-time friendly."
msgstr "实时计算是许多机器人系统的关键特性，特别是对于自动驾驶汽车、航天器和工业制造等安全和任务关键型应用。我们设计和原型化ROS 2时考虑了实时性能限制，因为在ROS 1的早期阶段并没有考虑这一要求，现在对ROS 1进行重构以实现实时友好性已经变得困难。@{"calib_text": " `[5176] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5176>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:19
msgid "`This document <https://design.ros2.org/articles/realtime_background.html>`__ outlines the requirements of real-time computing and best practices for software engineers.  In short:"
msgstr "``This document <https://design.ros2.org/articles/realtime_background.html>`` 详细介绍了实时计算的要求和软件工程师的最佳实践。简而言之：@{"calib_text": " `[5177] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5177>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:21
msgid "To make a real-time computer system, our real-time loop must update periodically to meet deadlines. We can only tolerate a small margin of error on these deadlines (our maximum allowable jitter). To do this, we must avoid nondeterministic operations in the execution path, things like: pagefault events, dynamic memory allocation/deallocation, and synchronization primitives that block indefinitely."
msgstr "要创建一个实时计算机系统，我们的实时循环必须周期性地更新以满足截止时间。我们只能容忍这些截止时间上的小误差（最大允许的抖动）。为了做到这一点，我们必须避免执行路径中的非确定性操作，比如：页错误事件、动态内存分配/释放和无限期阻塞的同步原语。@{"calib_text": " `[5178] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5178>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:25
msgid "A classic example of a controls problem commonly solved by real-time computing is balancing an `inverted pendulum <https://en.wikipedia.org/wiki/Inverted_pendulum>`__. If the controller blocked for an unexpectedly long amount of time, the pendulum would fall down or go unstable. But if the controller reliably updates at a rate faster than the motor controlling the pendulum can operate, the pendulum will successfully adapt react to sensor data to balance the pendulum."
msgstr "实时计算通常用于解决控制问题的经典示例是平衡一个``倒立摆 <https://en.wikipedia.org/wiki/Inverted_pendulum>``。如果控制器阻塞时间意外延长，摆杆将倒下或变得不稳定。但是，如果控制器可靠地以比控制摆杆的电机操作速度更快的频率更新，摆杆将能够成功地根据传感器数据调整自己来保持平衡。@{"calib_text": " `[5179] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5179>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:29
msgid "Now that you know everything about real-time computing, let's try a demo!"
msgstr "现在你已经了解了关于实时计算的一切，让我们尝试一下演示！@{"calib_text": " `[5180] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5180>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:32
msgid "Install and run the demo"
msgstr "安装并运行演示@{"calib_text": " `[5181] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5181>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:34
msgid "The real-time demo was written with Linux operating systems in mind, since many members of the ROS community doing real-time computing use Xenomai or RT_PREEMPT as their real-time solutions. Since many of the operations done in the demo to optimize performance are OS-specific, the demo only builds and runs on Linux systems. **So, if you are an OSX or Windows user, don't try this part!**"
msgstr "这个实时演示是为Linux操作系统设计的，因为ROS社区的许多进行实时计算的成员使用Xenomai或RT_PREEMPT作为他们的实时解决方案。由于演示中进行的许多优化性能的操作是特定于操作系统的，所以演示只能在Linux系统上构建和运行。**所以，如果你是OSX或Windows用户，请不要尝试这部分！**@{"calib_text": " `[5182] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5182>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:38
msgid "Also this must be built from source using a the static DDS API. **Currently the only supported implementation is Connext**."
msgstr "此外，必须使用静态DDS API从源代码构建。**目前唯一支持的实现是Connext**。@{"calib_text": " `[5183] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5183>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:40
msgid "First, follow the instructions to build ROS 2 :doc:`from source <../../Installation/Alternatives/Ubuntu-Development-Setup>` using Connext DDS as the middleware."
msgstr "首先，请按照说明使用Connext DDS作为中间件来构建ROS 2。请参考 :doc:`从源码构建ROS 2 <../../Installation/Alternatives/Ubuntu-Development-Setup>`。@{"calib_text": " `[5184] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5184>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:43
msgid "Run the tests"
msgstr "运行测试@{"calib_text": " `[5185] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5185>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:45
msgid "**Before you run make sure you have at least 8Gb of RAM free. With the memory locking, swap will not work anymore.**"
msgstr "**在运行之前，请确保至少有8GB的可用内存。使用内存锁定后，交换空间将无法使用。**@{"calib_text": " `[5186] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5186>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:47
msgid "Source your ROS 2 setup.bash."
msgstr "执行 `source your ROS 2 setup.bash`。@{"calib_text": " `[5187] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5187>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:49
msgid "Run the demo binary, and redirect the output. You may want to use ``sudo`` in case you get permission error:"
msgstr "运行演示程序二进制文件，并将输出重定向。如果出现权限错误，您可能需要使用``sudo``：@{"calib_text": " `[5188] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5188>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:56
msgid "What the heck just happened?"
msgstr "到底发生了什么？@{"calib_text": " `[5189] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5189>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:58
msgid "First, even though you redirected stdout, you will see some output to the console (from stderr):"
msgstr "首先，即使您重定向了stdout，您还是会在控制台上看到一些输出（来自stderr）：@{"calib_text": " `[5190] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5190>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:66
msgid "After the initialization stage of the demo program, it will attempt to lock all cached memory into RAM and prevent future dynamic memory allocations using ``mlockall``. This is to prevent pagefaults from loading lots of new memory into RAM. (See `the realtime design article <https://design.ros2.org/articles/realtime_background.html#memory-management>`__ for more information.)"
msgstr "在演示程序的初始化阶段之后，它将尝试将所有缓存内存锁定到RAM，并使用``mlockall``来阻止将来的动态内存分配。这是为了防止页面错误将大量新内存加载到RAM中。（有关更多信息，请参阅`实时设计文章 <https://design.ros2.org/articles/realtime_background.html#memory-management>`__。）@{"calib_text": " `[5191] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5191>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:70
msgid "The demo will continue on as usual when this occurs. At the bottom of the output.txt file generated by the demo, you'll see the number of pagefaults encountered during execution:"
msgstr "当这种情况发生时，演示将继续进行。在演示生成的 output.txt 文件底部，您将看到执行过程中遇到的页面错误数量：@{"calib_text": " `[5192] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5192>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:79
msgid "If we want those pagefaults to go away, we'll have to..."
msgstr "如果我们希望这些页面错误消失，我们需要...@{"calib_text": " `[5193] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5193>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:82
msgid "Adjust permissions for memory locking"
msgstr "调整内存锁定的权限@{"calib_text": " `[5194] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5194>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:84 ../../source/Tutorials/Demos/Real-Time-Programming.rst:179
msgid "Add to ``/etc/security/limits.conf`` (as sudo):"
msgstr "在 ``/etc/security/limits.conf`` 中添加以下内容（使用 sudo）：@{"calib_text": " `[5195] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5195>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:90
msgid "A limit of ``-1`` is unlimited. If you choose this, you may need to accompany it with ``ulimit -l unlimited`` after editing the file."
msgstr "``-1``的限制是无限制的。如果选择此选项，您可能需要在编辑文件后附加``ulimit -l unlimited``。@{"calib_text": " `[5196] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5196>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:93
msgid "After saving the file, log out and log back in. Then rerun the ``pendulum_demo`` invocation."
msgstr "保存文件后，请退出并重新登录。然后重新运行``pendulum_demo``命令。@{"calib_text": " `[5197] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5197>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:96
msgid "You'll either see zero pagefaults in your output file, or an error saying that a bad_alloc exception was caught. If this happened, you didn't have enough free memory available to lock the memory allocated for the process into RAM. You'll need to install more RAM in your computer to see zero pagefaults!"
msgstr "在输出文件中，您要么看到零页面错误（pagefaults），要么看到捕获的bad_alloc异常错误。如果发生这种情况，表示您没有足够的可用内存将进程分配的内存锁定到RAM中。您需要在计算机上安装更多的内存才能看到零页面错误！@{"calib_text": " `[5198] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5198>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:101
msgid "Output overview"
msgstr "输出概览@{"calib_text": " `[5199] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5199>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:103
msgid "To see more output, we have to run the ``pendulum_logger`` node."
msgstr "要查看更多输出，我们需要运行``pendulum_logger``节点。@{"calib_text": " `[5200] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5200>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:105
msgid "In one shell with your ``install/setup.bash`` sourced, invoke:"
msgstr "在一个已经使用``install/setup.bash``的终端中，执行以下命令：@{"calib_text": " `[5201] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5201>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:112
msgid "You should see the output message:"
msgstr "您应该会看到以下输出信息：@{"calib_text": " `[5202] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5202>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:118
msgid "In another shell with setup.bash sourced, invoke ``pendulum_demo`` again."
msgstr "在另一个已经使用setup.bash的终端中，再次执行``pendulum_demo``命令。@{"calib_text": " `[5203] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5203>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:120
msgid "As soon as this executable starts, you should see the other shell constantly printing output:"
msgstr "一旦此可执行文件启动，您应该看到另一个Shell不断地打印输出：@{"calib_text": " `[5204] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5204>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:132
msgid "The demo is controlling a very simple inverted pendulum simulation. The pendulum simulation calculates its position in its own thread. A ROS node simulates a motor encoder sensor for the pendulum and publishes its position. Another ROS node acts as a simple PID controller and calculates the next command message."
msgstr "该演示控制一个非常简单的倒立摆模拟。摆模拟在其自己的线程中计算其位置。一个ROS节点模拟摆的电机编码器传感器并发布其位置。另一个ROS节点充当简单的PID控制器，计算下一个命令消息。@{"calib_text": " `[5205] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5205>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:137
msgid "The logger node periodically prints out the pendulum's state and the runtime performance statistics of the demo during its execution phase."
msgstr "记录器节点定期打印摆的状态以及演示执行阶段的运行性能统计信息。@{"calib_text": " `[5206] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5206>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:139
msgid "After the ``pendulum_demo`` is finished, you'll have to CTRL-C out of the logger node to exit."
msgstr "在``pendulum_demo``完成后，您将需要使用CTRL-C退出记录器节点。@{"calib_text": " `[5207] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5207>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:142
msgid "Latency"
msgstr "延迟@{"calib_text": " `[5208] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5208>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:144
msgid "At the ``pendulum_demo`` execution, you'll see the final statistics collected for the demo:"
msgstr "在``pendulum_demo``执行过程中，您将看到为演示收集的最终统计信息:@{"calib_text": " `[5209] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5209>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:160
msgid "The latency fields show you the minimum, maximum, and average latency of the update loop in nanoseconds. Here, latency means the amount of time after the update was expected to occur."
msgstr "延迟字段显示了更新循环的最小、最大和平均延迟，单位为纳秒。这里的延迟指的是更新应该发生后经过的时间量。@{"calib_text": " `[5210] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5210>`_ "}@"


#, python-format
msgid "The requirements of a real-time system depend on the application, but let's say in this demo we have a 1kHz (1 millisecond) update loop, and we're aiming for a maximum allowable latency of 5% of our update period."
msgstr "实时系统的要求取决于应用程序，但在这个演示中，我们假设有一个1kHz（1毫秒）的更新循环，并且我们的目标是允许的最大延迟为更新周期的5%。@{"calib_text": " `[5211] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5211>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:165
msgid "So, our average latency was really good in this run, but the maximum latency was unacceptable because it actually exceeded our update loop! What happened?"
msgstr "所以，我们这次运行的平均延迟非常好，但是最大延迟是不可接受的，因为它实际上超过了我们的更新循环！发生了什么事？@{"calib_text": " `[5212] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5212>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:167
msgid "We may be suffering from a non-deterministic scheduler. If you're running a vanilla Linux system and you don't have the RT_PREEMPT kernel installed, you probably won't be able to meet the real-time goal we set for ourselves, because the Linux scheduler won't allow you to arbitrarily pre-empt threads at the user level."
msgstr "我们可能遇到了非确定性调度程序。如果你运行的是纯粹的Linux系统，并且没有安装RT_PREEMPT内核，那么你可能无法达到我们设定的实时目标，因为Linux调度程序不允许你在用户级别任意抢占线程。@{"calib_text": " `[5213] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5213>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:170
msgid "See the `realtime design article <https://design.ros2.org/articles/realtime_background.html#multithreaded-programming-and-synchronization>`__ for more information."
msgstr "请参阅`实时设计文章<https://design.ros2.org/articles/realtime_background.html#multithreaded-programming-and-synchronization>`__ 获取更多信息。@{"calib_text": " `[5214] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5214>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:172
msgid "The demo attempts to set the scheduler and thread priority of the demo to be suitable for real-time performance. If this operation failed, you'll see an error message: \"Couldn't set scheduling priority and policy: Operation not permitted\". You can get slightly better performance by following the instructions in the next section:"
msgstr "该演示尝试将演示的调度程序和线程优先级设置为适合实时性能。如果此操作失败，你将看到一个错误消息：“无法设置调度优先级和策略：操作不允许”。按照下一节中的说明可以获得稍微更好的性能：@{"calib_text": " `[5215] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5215>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:177
msgid "Setting permissions for the scheduler"
msgstr "设置调度器的权限@{"calib_text": " `[5216] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5216>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:185
msgid "The range of the rtprio (real-time priority) field is 0-99. However, do NOT set the limit to 99 because then your processes could interfere with important system processes that run at the top priority (e.g. watchdog). This demo will attempt to run the control loop at priority 98."
msgstr "rtprio（实时优先级）字段的范围是0-99。但是，请不要将限制值设置为99，否则您的进程可能会干扰运行在最高优先级的重要系统进程（例如看门狗）。此演示将尝试以优先级98运行控制循环。@{"calib_text": " `[5217] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5217>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:190
msgid "Plotting results"
msgstr "绘制结果@{"calib_text": " `[5218] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5218>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:192
msgid "You can plot the latency and pagefault statistics that are collected in this demo after the demo runs."
msgstr "在演示运行后，您可以绘制收集到的延迟和页面错误统计信息。@{"calib_text": " `[5219] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5219>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:194
msgid "Because the code has been instrumented with `rttest <https://github.com/ros2/rttest>`__, there are useful command line arguments available:"
msgstr "由于代码已经使用 `rttest <https://github.com/ros2/rttest>`__ 进行了工具化，因此可以使用一些有用的命令行参数：@{"calib_text": " `[5220] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5220>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:197
msgid "Command"
msgstr "命令@{"calib_text": " `[5221] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5221>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:197
msgid "Description"
msgstr "描述@{"calib_text": " `[5222] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5222>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:197
msgid "Default value"
msgstr "默认值@{"calib_text": " `[5223] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5223>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:199
msgid "-i"
msgstr "-i@{"calib_text": " `[5224] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5224>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:199
msgid "Specify how many iterations to run the real-time loop"
msgstr "指定运行实时循环的迭代次数@{"calib_text": " `[5225] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5225>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:199
msgid "1000"
msgstr "1000@{"calib_text": " `[5226] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5226>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:201
msgid "-u"
msgstr "-u@{"calib_text": " `[5227] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5227>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:201
msgid "Specify the update period with the default unit being microseconds."
msgstr "使用默认单位微秒来指定更新周期。@{"calib_text": " `[5228] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5228>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:203
msgid "Use the suffix \"s\" for seconds, \"ms\" for milliseconds,"
msgstr "使用后缀\"s\"表示秒，\"ms\"表示毫秒，@{"calib_text": " `[5229] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5229>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:205
msgid "\"us\" for microseconds, and \"ns\" for nanoseconds."
msgstr "表示微秒的后缀为\"us\"，表示纳秒的后缀为\"ns\"。@{"calib_text": " `[5230] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5230>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:201
msgid "1ms"
msgstr "1 毫秒@{"calib_text": " `[5231] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5231>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:207
msgid "-f"
msgstr "-f@{"calib_text": " `[5232] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5232>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:207
msgid "Specify the name of the file for writing the collected data."
msgstr "指定用于写入收集数据的文件名。@{"calib_text": " `[5233] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5233>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:210
msgid "Run the demo again with a filename to save results:"
msgstr "再次运行演示程序并指定要保存结果的文件名：@{"calib_text": " `[5234] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5234>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:216
msgid "Then run the ``rttest_plot`` script on the resulting file:"
msgstr "然后在生成的文件上运行“rttest_plot”脚本：@{"calib_text": " `[5235] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5235>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:222
msgid "This script will produce three files:"
msgstr "该脚本将生成三个文件：@{"calib_text": " `[5236] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5236>`_ "}@"


#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:230
msgid "You can view these plots in an image viewer of your choice."
msgstr "您可以使用您选择的图像查看器查看这些图形。@{"calib_text": " `[5237] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5237>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:7
msgid "Recording and playing back data with ``rosbag`` using the ROS 1 bridge"
msgstr "使用ROS 1桥接在`rosbag`中记录和回放数据@{"calib_text": " `[5238] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5238>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:9
msgid "This tutorial is a follow up to the *Bridge communication between ROS 1 and ROS 2* demo as can be found `here <https://github.com/ros2/ros1_bridge/blob/master/README.md>`__, and in the following it is assumed you have completed that tutorial already."
msgstr "本教程是“在ROS 1和ROS 2之间进行桥接通信”的后续教程，可以在此处找到：`https://github.com/ros2/ros1_bridge/blob/master/README.md`__，在下文中假设您已经完成了该教程。@{"calib_text": " `[5239] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5239>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:11
msgid "The ros1_bridge can be built from :doc:`source <../../How-To-Guides/Using-ros1_bridge-Jammy-upstream>` for these examples."
msgstr "对于这些示例，可以从 :doc:`源代码 <../../How-To-Guides/Using-ros1_bridge-Jammy-upstream>` 构建ros1_bridge。@{"calib_text": " `[5240] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5240>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:13
msgid "What follows is a series of additional examples, like that ones that come at the end of the aforementioned *Bridge communication between ROS 1 and ROS 2* demo."
msgstr "接下来是一系列额外的示例，类似于上述 *ROS 1和ROS 2之间的桥接通信* 演示中的示例。@{"calib_text": " `[5241] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5241>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:16
msgid "Recording topic data with rosbag and ROS 1 Bridge"
msgstr "使用rosbag和ROS 1 Bridge记录主题数据@{"calib_text": " `[5242] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5242>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:18
msgid "In this example, we'll be using the ``cam2image`` demo program that comes with ROS 2 and a Python script to emulate a simple turtlebot-like robot's sensor data so that we can bridge it to ROS 1 and use rosbag to record it."
msgstr "在这个示例中，我们将使用ROS 2附带的``cam2image``演示程序和一个Python脚本来模拟一个简单的类似于turtlebot的机器人的传感器数据，以便我们可以将其桥接到ROS 1并使用rosbag进行记录。@{"calib_text": " `[5243] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5243>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:20
msgid "First we'll run a ROS 1 ``roscore`` in a new shell:"
msgstr "首先，在新的终端窗口中运行ROS 1的``roscore``：@{"calib_text": " `[5244] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5244>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:30
msgid "Then we'll run the ROS 1 <=> ROS 2 ``dynamic_bridge`` with the ``--bridge-all-topics`` option (so we can do ``rostopic list`` and see them) in another shell:"
msgstr "然后，在另一个终端窗口中运行ROS 1 <=> ROS 2的``dynamic_bridge``，使用``--bridge-all-topics``选项（这样我们可以执行``rostopic list``并查看它们）：@{"calib_text": " `[5245] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5245>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:44
msgid "Remember to replace ``<workspace-with-bridge>`` with the path to where you either extracted the ROS 2 binary or where you built ROS 2 from source."
msgstr "请记得将``<workspace-with-bridge>``替换为你提取ROS 2二进制文件的路径或者构建ROS 2源码的路径。@{"calib_text": " `[5246] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5246>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:48
msgid "Now we can start up the ROS 2 programs that will emulate our turtlebot-like robot. First we'll run the ``cam2image`` program with the ``-b`` option so it doesn't require a camera to work:"
msgstr "现在我们可以启动模拟海龟机器人的ROS 2程序。首先，我们将使用``-b``选项运行``cam2image``程序，这样它就不需要相机就能工作：@{"calib_text": " `[5247] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5247>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:59
msgid "TODO: use namespaced topic names"
msgstr "TODO: 使用命名空间的主题名@{"calib_text": " `[5248] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5248>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:61
msgid "Then we'll run a simple Python script to emulate the ``odom`` and ``imu_data`` topics from a Kobuki base. I would use the more accurate ``~sensors/imu_data`` topic name for the imu data, but we don't have namespace support just yet in ROS 2 (it's coming!). Place this script in a file called ``emulate_kobuki_node.py``:"
msgstr "然后，我们将运行一个简单的Python脚本来模拟Kobuki基座的``odom``和``imu_data``主题。我会使用更准确的``~sensors/imu_data``主题名来表示IMU数据，但是在ROS 2中还没有命名空间支持（即将推出！）。将这个脚本保存到一个名为``emulate_kobuki_node.py``的文件中：@{"calib_text": " `[5249] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5249>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:106
msgid "You can run this python script in a new ROS 2 shell:"
msgstr "你可以在一个新的ROS 2终端中运行这个Python脚本：@{"calib_text": " `[5250] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5250>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:118
msgid "Now that all the data sources and the dynamic bridge are running, we can look at the available topics in a new ROS 1 shell:"
msgstr "现在，所有的数据源和动态桥接都在运行，我们可以在一个新的ROS 1终端中查看可用的主题：@{"calib_text": " `[5251] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5251>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:139
msgid "We can now record this data with ``rosbag record`` in the same shell:"
msgstr "我们现在可以在同一个终端中使用``rosbag record``记录这些数据：@{"calib_text": " `[5252] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5252>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:146
msgid "After a few seconds you can ``Ctrl-c`` the ``rosbag`` command and do an ``ls -lh`` to see how big the file is, you might see something like this:"
msgstr "几秒钟后，您可以使用``Ctrl-c``停止``rosbag``命令，并使用``ls -lh``查看文件的大小，您可能会看到类似以下内容：@{"calib_text": " `[5253] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5253>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:154
msgid "Though the file name will be different for your bag (since it is derived from the date and time)."
msgstr "尽管您的包文件名将不同（因为它是从日期和时间派生的）。@{"calib_text": " `[5254] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5254>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:157
msgid "Playing back topic data with rosbag and ROS 1 Bridge"
msgstr "使用rosbag和ROS 1 Bridge播放主题数据@{"calib_text": " `[5255] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5255>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:159
msgid "Now that we have a bag file you can use any of the ROS 1 tools to introspect the bag file, like ``rosbag info <bag file>``, ``rostopic list -b <bag file>``, or ``rqt_bag <bag file>``. However, we can also playback bag data into ROS 2 using ``rosbag play`` and the ROS 1 <=> ROS 2 ``dynamic_bridge``."
msgstr "现在，我们有了一个包文件，您可以使用任何ROS 1工具来检查包文件，例如``rosbag info <包文件>``, ``rostopic list -b <包文件>``, 或``rqt_bag <包文件>``。然而，我们也可以使用``rosbag play``和ROS 1 <=> ROS 2 ``dynamic_bridge``将包数据回放到ROS 2中。@{"calib_text": " `[5256] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5256>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:162
msgid "First close out all the shells you opened for the previous tutorial, stopping any running programs."
msgstr "首先关闭您为上一个教程打开的所有终端，并停止任何正在运行的程序。@{"calib_text": " `[5257] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5257>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:164
msgid "Then in a new shell start the ``roscore``:"
msgstr "然后在新的终端中启动 ``roscore``:@{"calib_text": " `[5258] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5258>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:174
msgid "Then run the ``dynamic_bridge`` in another shell:"
msgstr "然后在另一个终端中运行 ``dynamic_bridge``:@{"calib_text": " `[5259] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5259>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:188
msgid "Then play the bag data back with ``rosbag play`` in another new shell, using the ``--loop`` option so that we don't have to keep restarting it for short bags:"
msgstr "然后在另一个新的终端中使用 ``rosbag play`` 播放包数据，使用 ``--loop`` 选项，这样我们就不必为短包文件不断重新启动它:@{"calib_text": " `[5260] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5260>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:198
msgid "Make sure to replace ``path/to/bag_file`` with the path to the bag file you want to playback."
msgstr "请确保将 ``path/to/bag_file`` 替换为您要播放的包文件的路径。@{"calib_text": " `[5261] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5261>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:202
msgid "Now that the data is being played back and the bridge is running we can see the data coming across in ROS 2."
msgstr "现在数据正在回放，桥接程序正在运行，我们可以在ROS 2中看到数据传输过来。@{"calib_text": " `[5262] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5262>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:213
msgid "You should see something like:"
msgstr "您应该会看到类似以下的内容:@{"calib_text": " `[5263] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5263>`_ "}@"


#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:224
msgid "You can also see the image being played from the bag by using the ``showimage`` tool:"
msgstr "您还可以使用``showimage``工具查看从包中播放的图像：@{"calib_text": " `[5264] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5264>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:7
msgid "Experimenting with a dummy robot"
msgstr "尝试使用虚拟机器人进行实验@{"calib_text": " `[5265] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5265>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:9
msgid "In this demo, we present a simple demo robot with all components from publishing joint states over publishing fake laser data until visualizing the robot model on a map in RViz."
msgstr "在此演示中，我们使用一个简单的演示机器人，其中包括从发布关节状态到发布虚假激光数据，再到在RViz中可视化机器人模型的所有组件。@{"calib_text": " `[5266] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5266>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:12
msgid "Launching the demo"
msgstr "启动演示@{"calib_text": " `[5267] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5267>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:14
msgid "We assume your ROS 2 installation dir as ``~/ros2_ws``. Please change the directories according to your platform."
msgstr "我们假设您的ROS 2安装目录为``~/ros2_ws``。请根据您的平台更改目录。@{"calib_text": " `[5268] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5268>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:16
msgid "To start the demo, we execute the demo bringup launch file, which we are going to explain in more details in the next section."
msgstr "要启动演示，我们执行演示启动文件，我们将在下一部分中对其进行详细解释。@{"calib_text": " `[5269] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5269>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:23
msgid "You should see some prints inside your terminal along the lines of the following:"
msgstr "你应该在终端中看到一些打印输出，类似以下内容:@{"calib_text": " `[5270] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5270>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:53
msgid "If you now open in a next terminal your RViz, you'll see your robot. 🎉"
msgstr "如果你现在在另一个终端中打开RViz，你会看到你的机器人。🎉@{"calib_text": " `[5271] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5271>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:60
msgid "This opens RViz2. Assuming you have your dummy_robot_bringup still launched, you can now add the TF display plugin and configure your global frame to ``world``. Once you did that, you should see a similar picture:"
msgstr "这将打开RViz2。假设你已经启动了dummy_robot_bringup，现在你可以添加TF显示插件并将全局坐标系配置为``world``。完成后，你应该看到类似的画面:@{"calib_text": " `[5272] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5272>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:67
msgid "What's happening?"
msgstr "发生了什么事？@{"calib_text": " `[5273] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5273>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:69
msgid "If you have a closer look at the launch file, we start a couple of nodes at the same time."
msgstr "如果你仔细查看启动文件，你会发现我们同时启动了一些节点。@{"calib_text": " `[5274] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5274>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:72
msgid "dummy_map_server"
msgstr "dummy_map_server@{"calib_text": " `[5275] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5275>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:73
msgid "dummy_laser"
msgstr "dummy_laser（虚拟激光）@{"calib_text": " `[5276] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5276>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:74
msgid "dummy_joint_states"
msgstr "dummy_joint_states（虚拟关节状态）@{"calib_text": " `[5277] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5277>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:75
msgid "robot_state_publisher"
msgstr "robot_state_publisher@{"calib_text": " `[5278] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5278>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:77
msgid "The first two packages are relatively simple. The ``dummy_map_server`` constantly publishes an empty map with a periodic update. The ``dummy_laser`` does basically the same; publishing dummy fake laser scans."
msgstr "前两个软件包比较简单。``dummy_map_server``（虚拟地图服务器）会定期发布一个空地图。``dummy_laser``（虚拟激光）基本上也是一样的，会发布虚拟的激光扫描数据。@{"calib_text": " `[5279] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5279>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:79
msgid "The ``dummy_joint_states`` node is publishing fake joint state data. As we are publishing a simple RRbot with only two joints, this node publishes joint states values for these two joints."
msgstr "``dummy_joint_states``（虚拟关节状态）节点会发布虚拟的关节状态数据。由于我们只有一个简单的RRbot机器人，这个节点会发布这两个关节的关节状态值。@{"calib_text": " `[5280] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5280>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:81
msgid "The ``robot_state_publisher`` is doing the actual interesting work. It parses the given URDF file, extracts the robot model and listens to the incoming joint states. With this information, it publishes TF values for our robot which we visualize in RViz."
msgstr "``robot_state_publisher``（机器人状态发布器）才是真正有趣的部分。它会解析给定的URDF文件，提取机器人模型并监听传入的关节状态。根据这些信息，它会发布我们机器人的TF（变换）值，我们可以在RViz中进行可视化。@{"calib_text": " `[5281] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5281>`_ "}@"


#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:83
msgid "Hooray!"
msgstr "好耶！@{"calib_text": " `[5282] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5282>`_ "}@"


#: ../../source/Tutorials/Intermediate.rst:2
msgid "Intermediate"
msgstr "中级@{"calib_text": " `[5283] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5283>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:7
msgid "Composing multiple nodes in a single process"
msgstr "在单个进程中组合多个节点@{"calib_text": " `[5284] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5284>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:13
msgid "**Goal:** Compose multiple nodes into a single process."
msgstr "**目标：** 将多个节点组合成单个进程。@{"calib_text": " `[5285] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5285>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:15 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:12 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:11 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:12 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:11 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:13 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:11 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:10 ../../source/Tutorials/Intermediate/Rosdep.rst:12 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:12 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:12 ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:12 ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:12 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:12 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:12 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:12 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:12 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:12 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:12 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:12 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:12 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:12 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:12 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:12 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:12 ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:12 ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:12 ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:12 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:12 ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:12 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:12 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:12
msgid "**Tutorial level:** Intermediate"
msgstr "**教程级别：** 中级@{"calib_text": " `[5286] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5286>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:22
msgid "See the :doc:`conceptual article <../../Concepts/About-Composition>`."
msgstr "请参阅：:doc:`概念文章 <../../Concepts/About-Composition>`。@{"calib_text": " `[5287] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5287>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:25
msgid "Run the demos"
msgstr "运行演示@{"calib_text": " `[5288] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5288>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:27
msgid "The demos use executables from `rclcpp_components <https://github.com/ros2/rclcpp/tree/humble/rclcpp_components>`__, `ros2component <https://github.com/ros2/ros2cli/tree/humble/ros2component>`__, and  `composition <https://github.com/ros2/demos/tree/humble/composition>`__ packages, and can be run with the following commands."
msgstr "演示使用`rclcpp_components <https://github.com/ros2/rclcpp/tree/humble/rclcpp_components>`__、`ros2component <https://github.com/ros2/ros2cli/tree/humble/ros2component>`__和`composition <https://github.com/ros2/demos/tree/humble/composition>`__包中的可执行文件，并可以使用以下命令运行。@{"calib_text": " `[5289] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5289>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:31
msgid "Discover available components"
msgstr "发现可用组件@{"calib_text": " `[5290] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5290>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:33
msgid "To see what components are registered and available in the workspace, execute the following in a shell:"
msgstr "要查看在工作空间中注册和可用的组件，执行以下命令行命令：@{"calib_text": " `[5291] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5291>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:39
msgid "The terminal will return the list of all available components:"
msgstr "终端将返回所有可用组件的列表：@{"calib_text": " `[5292] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5292>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:54
msgid "Run-time composition using ROS services with a publisher and subscriber"
msgstr "使用带有发布者和订阅者的ROS服务进行运行时组合@{"calib_text": " `[5293] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5293>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:56 ../../source/Tutorials/Intermediate/Composition.rst:213 ../../source/Tutorials/Intermediate/Composition.rst:279
msgid "In the first shell, start the component container:"
msgstr "在第一个 shell 中，启动组件容器：@{"calib_text": " `[5294] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5294>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:62
msgid "Open the second shell and verify that the container is running via ``ros2`` command line tools:"
msgstr "打开第二个 shell 并通过 ``ros2`` 命令行工具验证容器是否正在运行：@{"calib_text": " `[5295] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5295>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:68 ../../source/Tutorials/Intermediate/Composition.rst:225
msgid "You should see a name of the component:"
msgstr "您应该看到组件的名称：@{"calib_text": " `[5296] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5296>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:74
msgid "In the second shell load the talker component (see `talker <https://github.com/ros2/demos/blob/humble/composition/src/talker_component.cpp>`__ source code):"
msgstr "在第二个 shell 中加载 talker 组件（请参阅 `talker <https://github.com/ros2/demos/blob/humble/composition/src/talker_component.cpp>`__ 源代码）：@{"calib_text": " `[5297] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5297>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:80
msgid "The command will return the unique ID of the loaded component as well as the node name:"
msgstr "该命令将返回加载组件的唯一 ID 和节点名称：@{"calib_text": " `[5298] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5298>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:86
msgid "Now the first shell should show a message that the component was loaded as well as repeated message for publishing a message."
msgstr "现在第一个 shell 应该显示一个消息，表示组件已加载，并显示用于发布消息的重复消息。@{"calib_text": " `[5299] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5299>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:88
msgid "Run another command in the second shell to load the listener component (see `listener <https://github.com/ros2/demos/blob/humble/composition/src/listener_component.cpp>`__ source code):"
msgstr "在第二个终端中运行另一个命令来加载监听器组件（参见 `listener <https://github.com/ros2/demos/blob/humble/composition/src/listener_component.cpp>`__ 源代码）：@{"calib_text": " `[5300] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5300>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:94
msgid "Terminal will return:"
msgstr "终端将返回：@{"calib_text": " `[5301] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5301>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:100
msgid "The ``ros2`` command line utility can now be used to inspect the state of the container:"
msgstr "现在可以使用 ``ros2`` 命令行工具来检查容器的状态：@{"calib_text": " `[5302] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5302>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:106
msgid "You will see the following result:"
msgstr "您将看到以下结果：@{"calib_text": " `[5303] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5303>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:114
msgid "Now the first shell should show repeated output for each received message."
msgstr "现在，第一个终端应该显示每个接收到的消息的重复输出。@{"calib_text": " `[5304] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5304>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:117
msgid "Run-time composition using ROS services with a server and client"
msgstr "使用ROS服务进行运行时组合，包括服务器和客户端@{"calib_text": " `[5305] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5305>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:119
msgid "The example with a server and a client is very similar."
msgstr "带有服务器和客户端的示例非常相似。@{"calib_text": " `[5306] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5306>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:121
msgid "In the first shell:"
msgstr "在第一个shell中：@{"calib_text": " `[5307] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5307>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:127
msgid "In the second shell (see `server <https://github.com/ros2/demos/blob/humble/composition/src/server_component.cpp>`__ and `client <https://github.com/ros2/demos/blob/humble/composition/src/client_component.cpp>`__ source code):"
msgstr "在第二个shell中（参见 `server <https://github.com/ros2/demos/blob/humble/composition/src/server_component.cpp>`__ 和 `client <https://github.com/ros2/demos/blob/humble/composition/src/client_component.cpp>`__ 的源代码）：@{"calib_text": " `[5308] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5308>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:134
msgid "In this case the client sends a request to the server, the server processes the request and replies with a response, and the client prints the received response."
msgstr "在这种情况下，客户端向服务器发送请求，服务器处理请求并回复响应，客户端打印接收到的响应。@{"calib_text": " `[5309] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5309>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:137
msgid "Compile-time composition using ROS services"
msgstr "使用ROS服务进行编译时组合@{"calib_text": " `[5310] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5310>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:139
msgid "This demos shows that the same shared libraries can be reused to compile a single executable running multiple components. The executable contains all four components from above: talker and listener as well as server and client."
msgstr "该演示表明相同的共享库可以被重复使用以编译一个包含多个组件的单个可执行文件。该可执行文件包含上述的所有四个组件：talker和listener以及server和client。@{"calib_text": " `[5311] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5311>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:142
msgid "In the shell call (see `source code <https://github.com/ros2/demos/blob/humble/composition/src/manual_composition.cpp>`__):"
msgstr "在shell调用中（参见 `源代码 <https://github.com/ros2/demos/blob/humble/composition/src/manual_composition.cpp>`__）：@{"calib_text": " `[5312] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5312>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:148
msgid "This should show repeated messages from both pairs, the talker and the listener as well as the server and the client."
msgstr "这应该显示来自两个对的重复消息，talker和listener以及server和client。@{"calib_text": " `[5313] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5313>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:152
msgid "Manually-composed components will not be reflected in the ``ros2 component list`` command line tool output."
msgstr "手动组合的组件不会在``ros2 component list``命令行工具的输出中反映出来。@{"calib_text": " `[5314] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5314>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:155
msgid "Run-time composition using dlopen"
msgstr "使用dlopen进行运行时组合@{"calib_text": " `[5315] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5315>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:157
msgid "This demo presents an alternative to run-time composition by creating a generic container process and explicitly passing the libraries to load without using ROS interfaces. The process will open each library and create one instance of each \"rclcpp::Node\" class in the library `source code <https://github.com/ros2/demos/blob/humble/composition/src/dlopen_composition.cpp>`__)."
msgstr "此演示通过创建一个通用容器进程并显式传递要加载的库来呈现一种运行时组合的替代方法，而不使用ROS接口。该进程将打开每个库并在库中创建每个\"rclcpp::Node\"类的一个实例（源代码 <https://github.com/ros2/demos/blob/humble/composition/src/dlopen_composition.cpp>`__)。@{"calib_text": " `[5316] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5316>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:180
msgid "to get the path to where composition is installed. Then call"
msgstr "来获取组合安装的路径。然后调用@{"calib_text": " `[5317] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5317>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:186
msgid "Now the shell should show repeated output for each sent and received message."
msgstr "现在，shell应该显示每个发送和接收消息的重复输出。@{"calib_text": " `[5318] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5318>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:190
msgid "dlopen-composed components will not be reflected in the ``ros2 component list`` command line tool output."
msgstr "不会在``ros2 component list``命令行工具输出中反映dlopen组合的组件。@{"calib_text": " `[5319] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5319>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:194
msgid "Composition using launch actions"
msgstr "使用启动动作进行组合@{"calib_text": " `[5320] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5320>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:196
msgid "While the command line tools are useful for debugging and diagnosing component configurations, it is frequently more convenient to start a set of components at the same time. To automate this action, we can use a `launch file <https://github.com/ros2/demos/blob/humble/composition/launch/composition_demo_launch.py>`__:"
msgstr "尽管命令行工具对于调试和诊断组件配置很有用，但同时启动一组组件通常更加方便。为了自动化这个动作，我们可以使用一个`启动文件 <https://github.com/ros2/demos/blob/humble/composition/launch/composition_demo_launch.py>`__：@{"calib_text": " `[5321] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5321>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:205
msgid "Advanced Topics"
msgstr "高级主题@{"calib_text": " `[5322] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5322>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:207
msgid "Now that we have seen the basic operation of components, we can discuss a few more advanced topics."
msgstr "既然我们已经看到了组件的基本操作，我们可以讨论一些更高级的主题。@{"calib_text": " `[5323] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5323>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:211
msgid "Unloading components"
msgstr "卸载组件@{"calib_text": " `[5324] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5324>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:219
msgid "Verify that the container is running via ``ros2`` command line tools:"
msgstr "通过 ``ros2`` 命令行工具验证容器是否正在运行：@{"calib_text": " `[5325] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5325>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:231
msgid "In the second shell load both the talker and listener as we have before:"
msgstr "在第二个终端中加载之前的 talker 和 listener：@{"calib_text": " `[5326] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5326>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:238
msgid "Use the unique ID to unload the node from the component container."
msgstr "使用唯一标识符从组件容器卸载节点。@{"calib_text": " `[5327] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5327>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:244
msgid "The terminal should return:"
msgstr "终端应该返回：@{"calib_text": " `[5328] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5328>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:251
msgid "In the first shell, verify that the repeated messages from talker and listener have stopped."
msgstr "在第一个终端中，验证来自 talker 和 listener 的重复消息是否已停止。@{"calib_text": " `[5329] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5329>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:255
msgid "Remapping container name and namespace"
msgstr "重新映射容器名称和命名空间@{"calib_text": " `[5330] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5330>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:257
msgid "The component manager name and namespace can be remapped via standard command line arguments:"
msgstr "组件管理器的名称和命名空间可以通过标准命令行参数进行重新映射：@{"calib_text": " `[5331] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5331>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:263
msgid "In a second shell, components can be loaded by using the updated container name:"
msgstr "在第二个 shell 中，可以通过更新后的容器名称来加载组件：@{"calib_text": " `[5332] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5332>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:271 ../../source/Tutorials/Intermediate/Composition.rst:323
msgid "Namespace remappings of the container do not affect loaded components."
msgstr "容器的命名空间重新映射不会影响已加载的组件。@{"calib_text": " `[5333] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5333>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:275
msgid "Remap component names and namespaces"
msgstr "重新映射组件名称和命名空间@{"calib_text": " `[5334] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5334>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:277
msgid "Component names and namespaces may be adjusted via arguments to the load command."
msgstr "可以通过加载命令的参数来调整组件的名称和命名空间。@{"calib_text": " `[5335] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5335>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:286
msgid "Some examples of how to remap names and namespaces."
msgstr "一些重新映射名称和命名空间的示例。@{"calib_text": " `[5336] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5336>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:288
msgid "Remap node name:"
msgstr "重新映射节点名称：@{"calib_text": " `[5337] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5337>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:294
msgid "Remap namespace:"
msgstr "重新映射命名空间：@{"calib_text": " `[5338] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5338>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:300
msgid "Remap both:"
msgstr "同时重新映射：@{"calib_text": " `[5339] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5339>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:306
msgid "Now use ``ros2`` command line utility:"
msgstr "现在使用``ros2``命令行工具：@{"calib_text": " `[5340] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5340>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:312
msgid "In the console you should see corresponding entries:"
msgstr "在控制台中，您应该看到相应的条目：@{"calib_text": " `[5341] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5341>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:326
msgid "Passing parameter values into components"
msgstr "将参数值传递给组件@{"calib_text": " `[5342] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5342>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:328
msgid "The ``ros2 component load`` command-line supports passing arbitrary parameters to the node as it is constructed. This functionality can be used as follows:"
msgstr "``ros2 component load`` 命令行支持在构建节点时传递任意参数。可以按以下方式使用此功能：@{"calib_text": " `[5343] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5343>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:336
msgid "Passing additional arguments into components"
msgstr "向组件传递附加参数@{"calib_text": " `[5344] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5344>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:338
msgid "The ``ros2 component load`` command-line supports passing particular options to the component manager for use when constructing the node. As of now, the only command-line option that is supported is to instantiate a node using intra-process communication. This functionality can be used as follows:"
msgstr "``ros2 component load`` 命令行支持在构建节点时向组件管理器传递特定选项。目前，唯一支持的命令行选项是使用进程内通信实例化节点。可以按以下方式使用此功能：@{"calib_text": " `[5345] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5345>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:347
msgid "Composable nodes as shared libraries"
msgstr "可组合节点作为共享库@{"calib_text": " `[5346] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5346>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:349
msgid "If you want to export a composable node as a shared library from a package and use that node in another package that does link-time composition, add code to the CMake file which imports the actual targets in downstream packages."
msgstr "如果您想从软件包中将可组合节点导出为共享库，并在另一个软件包中使用该节点进行链接时组合，请在 CMake 文件中添加代码以导入下游软件包中的实际目标。@{"calib_text": " `[5347] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5347>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:351
msgid "Then install the generated file and export the generated file."
msgstr "然后安装生成的文件并导出生成的文件。@{"calib_text": " `[5348] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5348>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:353
msgid "A practical example can be seen here: `ROS Discourse - Ament best practice for sharing libraries <https://discourse.ros.org/t/ament-best-practice-for-sharing-libraries/3602>`__"
msgstr "这里可以看到一个实际的例子：`ROS讨论区 - Ament共享库的最佳实践 <https://discourse.ros.org/t/ament-best-practice-for-sharing-libraries/3602>`__@{"calib_text": " `[5349] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5349>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:356
msgid "Composing Non-Node Derived Components"
msgstr "组合非节点派生组件@{"calib_text": " `[5350] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5350>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:358
msgid "In ROS 2, components allow for more efficient use of system resources and provide a powerful feature that enables you to create reusable functionality that is not tied to a specific node."
msgstr "在ROS 2中，组件允许更高效地使用系统资源，并提供了一个强大的功能，使您能够创建可重用的功能，而这些功能不会与特定节点绑定。@{"calib_text": " `[5351] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5351>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:360
msgid "One advantage of using components is that they allow you to create non-node derived functionality as standalone executables or shared libraries that can be loaded into the ROS system as needed."
msgstr "使用组件的一个优点是，它们允许您创建非节点派生功能，作为独立的可执行文件或共享库，可以根据需要加载到ROS系统中。@{"calib_text": " `[5352] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5352>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:362
msgid "To create a component that is not derived from a node, follow these guidelines:"
msgstr "要创建一个不是从节点派生的组件，请按照以下准则进行操作：@{"calib_text": " `[5353] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5353>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:364
msgid "Implement a constructor that takes ``const rclcpp::NodeOptions&`` as its argument."
msgstr "实现一个以 ``const rclcpp::NodeOptions&`` 作为参数的构造函数。@{"calib_text": " `[5354] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5354>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:365
msgid "Implement the ``get_node_base_interface()`` method, which should return a ``NodeBaseInterface::SharedPtr``. You can use the ``get_node_base_interface()`` method of a node that you create in your constructor to provide this interface."
msgstr "实现 ``get_node_base_interface()`` 方法，该方法应返回 ``NodeBaseInterface::SharedPtr``。您可以在构造函数中创建一个节点并使用其 ``get_node_base_interface()`` 方法来提供此接口。@{"calib_text": " `[5355] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5355>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:367
msgid "Here's an example of a component that is not derived from a node, which listens to a ROS topic: `node_like_listener_component <https://github.com/ros2/demos/blob/humble/composition/src/node_like_listener_component.cpp>`__."
msgstr "下面是一个不是从节点派生而来的组件的示例，它监听一个ROS话题：`node_like_listener_component <https://github.com/ros2/demos/blob/humble/composition/src/node_like_listener_component.cpp>`__。@{"calib_text": " `[5356] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5356>`_ "}@"


#: ../../source/Tutorials/Intermediate/Composition.rst:369
msgid "For more information on this topic, you can refer to this `discussion <https://github.com/ros2/rclcpp/issues/2110#issuecomment-1454228192>`__."
msgstr "有关此主题的更多信息，您可以参考这个 `讨论 <https://github.com/ros2/rclcpp/issues/2110#issuecomment-1454228192>`__。@{"calib_text": " `[5357] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5357>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:8
msgid "Creating an action"
msgstr "创建一个动作@{"calib_text": " `[5358] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5358>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:10
msgid "**Goal:** Define an action in a ROS 2 package."
msgstr "**目标：** 在ROS 2软件包中定义一个动作。@{"calib_text": " `[5359] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5359>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:23
msgid "You learned about actions previously in the :doc:`../Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions` tutorial. Like the other communication types and their respective interfaces (topics/msg and services/srv), you can also custom-define actions in your packages. This tutorial shows you how to define and build an action that you can use with the action server and action client you will write in the next tutorial."
msgstr "在之前的 :doc:`../Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions` 教程中，你学习了关于动作的内容。和其他通信类型及其相应的接口（topics/msg 和 services/srv）一样，你也可以在你的包中自定义定义动作。本教程将向你展示如何定义和构建一个动作，你可以在下一个教程中使用该动作服务器和动作客户端进行编写。@{"calib_text": " `[5360] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5360>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:32
msgid "You should have :doc:`ROS 2 <../../Installation>` and `colcon <https://colcon.readthedocs.org>`__ installed."
msgstr "你应该已经安装了 :doc:`ROS 2 <../../Installation>` 和 `colcon <https://colcon.readthedocs.org>`__。@{"calib_text": " `[5361] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5361>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:34
msgid "Set up a :doc:`workspace <../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>` and create a package named ``action_tutorials_interfaces``:"
msgstr "设置一个 :doc:`workspace <../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>` 并创建一个名为 ``action_tutorials_interfaces`` 的包：@{"calib_text": " `[5362] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5362>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:36
msgid "(Remember to :doc:`source your ROS 2 installation <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` first.)"
msgstr "（记得首先 :doc:`source your ROS 2 installation <../Beginner-CLI-Tools/Configuring-ROS2-Environment>`。）@{"calib_text": " `[5363] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5363>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:68
msgid "1 Defining an action"
msgstr "1 定义一个动作@{"calib_text": " `[5364] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5364>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:70
msgid "Actions are defined in ``.action`` files of the form:"
msgstr "动作在 ``.action`` 文件中定义，格式如下：@{"calib_text": " `[5365] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5365>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:80
msgid "An action definition is made up of three message definitions separated by ``---``."
msgstr "一个动作定义由三个消息定义组成，用 ``---`` 分隔。@{"calib_text": " `[5366] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5366>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:82
msgid "A *request* message is sent from an action client to an action server initiating a new goal."
msgstr "一个 *请求* 消息是从动作客户端发送到动作服务器，用于启动一个新的目标。@{"calib_text": " `[5367] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5367>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:83
msgid "A *result* message is sent from an action server to an action client when a goal is done."
msgstr "一个 *结果* 消息是从动作服务器发送到动作客户端，表示一个目标已完成。@{"calib_text": " `[5368] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5368>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:84
msgid "*Feedback* messages are periodically sent from an action server to an action client with updates about a goal."
msgstr " *反馈* 消息定期从动作服务器发送到动作客户端，提供有关目标的更新。@{"calib_text": " `[5369] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5369>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:86
msgid "An instance of an action is typically referred to as a *goal*."
msgstr "一个动作的实例通常被称为一个 *目标*。@{"calib_text": " `[5370] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5370>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:88
msgid "Say we want to define a new action \"Fibonacci\" for computing the `Fibonacci sequence <https://en.wikipedia.org/wiki/Fibonacci_number>`__."
msgstr "假设我们想要定义一个用于计算 `斐波那契数列 <https://en.wikipedia.org/wiki/Fibonacci_number>`__ 的新动作 \"Fibonacci\"。@{"calib_text": " `[5371] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5371>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:90
msgid "Create an ``action`` directory in our ROS 2 package ``action_tutorials_interfaces``:"
msgstr "在我们的ROS 2包`action_tutorials_interfaces`中创建一个名为`action`的目录：@{"calib_text": " `[5372] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5372>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:115
msgid "Within the ``action`` directory, create a file called ``Fibonacci.action`` with the following contents:"
msgstr "在`action`目录中创建一个名为`Fibonacci.action`的文件，并包含以下内容：@{"calib_text": " `[5373] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5373>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:125
msgid "The goal request is the ``order`` of the Fibonacci sequence we want to compute, the result is the final ``sequence``, and the feedback is the ``partial_sequence`` computed so far."
msgstr "目标请求是我们想要计算的斐波那契序列的`order`，结果是最终的`sequence`，反馈是到目前为止计算出的`partial_sequence`。@{"calib_text": " `[5374] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5374>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:128
msgid "2 Building an action"
msgstr "2 构建一个action@{"calib_text": " `[5375] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5375>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:130
msgid "Before we can use the new Fibonacci action type in our code, we must pass the definition to the rosidl code generation pipeline."
msgstr "在我们的代码中使用新的Fibonacci action类型之前，我们必须将定义传递给rosidl代码生成流程。@{"calib_text": " `[5376] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5376>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:132
msgid "This is accomplished by adding the following lines to our ``CMakeLists.txt`` before the ``ament_package()`` line, in the ``action_tutorials_interfaces``:"
msgstr "这可以通过在`action_tutorials_interfaces`的`CMakeLists.txt`文件中在`ament_package()`之前添加以下行来实现：@{"calib_text": " `[5377] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5377>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:142
msgid "We should also add the required dependencies to our ``package.xml``:"
msgstr "我们还需要将所需的依赖项添加到我们的 ``package.xml`` 文件中：@{"calib_text": " `[5378] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5378>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:152
msgid "Note, we need to depend on ``action_msgs`` since action definitions include additional metadata (e.g. goal IDs)."
msgstr "注意，我们需要依赖于 ``action_msgs``，因为动作定义包括附加元数据（例如目标 ID）。@{"calib_text": " `[5379] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5379>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:154
msgid "We should now be able to build the package containing the ``Fibonacci`` action definition:"
msgstr "现在，我们应该能够构建包含 ``Fibonacci`` 动作定义的软件包：@{"calib_text": " `[5380] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5380>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:163
msgid "We're done!"
msgstr "我们完成了！@{"calib_text": " `[5381] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5381>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:165
msgid "By convention, action types will be prefixed by their package name and the word ``action``. So when we want to refer to our new action, it will have the full name ``action_tutorials_interfaces/action/Fibonacci``."
msgstr "按照惯例，动作类型将以其包名称和单词 ``action`` 作为前缀。因此，当我们想引用我们的新动作时，它将具有完整的名称 ``action_tutorials_interfaces/action/Fibonacci``。@{"calib_text": " `[5382] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5382>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:168
msgid "We can check that our action built successfully with the command line tool:"
msgstr "我们可以使用命令行工具检查我们的动作是否成功构建：@{"calib_text": " `[5383] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5383>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:180
msgid "You should see the Fibonacci action definition printed to the screen."
msgstr "你应该在屏幕上看到打印出的斐波那契动作定义。@{"calib_text": " `[5384] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5384>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:185
msgid "In this tutorial, you learned the structure of an action definition. You also learned how to correctly build a new action interface using ``CMakeLists.txt`` and ``package.xml``, and how to verify a successful build."
msgstr "在本教程中，你学会了动作定义的结构。你还学会了如何正确构建一个新的动作接口，使用 ``CMakeLists.txt`` 和 ``package.xml``，以及如何验证构建的成功。@{"calib_text": " `[5385] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5385>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:192
msgid "Next, let's utilize your newly defined action interface by creating an action service and client (in :doc:`Python <Writing-an-Action-Server-Client/Py>` or :doc:`C++ <Writing-an-Action-Server-Client/Cpp>`)."
msgstr "接下来，让我们利用你新定义的动作接口来创建一个动作服务和客户端（在 :doc:`Python <Writing-an-Action-Server-Client/Py>` 或 :doc:`C++ <Writing-an-Action-Server-Client/Cpp>` 中）。@{"calib_text": " `[5386] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5386>`_ "}@"


#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:197 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:394 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:361
msgid "For more detailed information about ROS actions, please refer to the `design article <http://design.ros2.org/articles/actions.html>`__."
msgstr "有关ROS动作的更详细信息，请参阅 `设计文章 <http://design.ros2.org/articles/actions.html>`__。@{"calib_text": " `[5387] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5387>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:7
msgid "Creating a launch file"
msgstr "创建一个启动文件@{"calib_text": " `[5388] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5388>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:9
msgid "**Goal:** Create a launch file to run a complex ROS 2 system."
msgstr "**目标：** 创建一个用于运行复杂ROS 2系统的启动文件。@{"calib_text": " `[5389] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5389>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:22
msgid "This tutorial uses the :doc:`rqt_graph and turtlesim <../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>` packages."
msgstr "本教程使用 :doc:`rqt_graph 和 turtlesim <../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>` 包。@{"calib_text": " `[5390] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5390>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:24
msgid "You will also need to use a text editor of your preference."
msgstr "您还需要使用您喜欢的文本编辑器。@{"calib_text": " `[5391] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5391>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:26 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:25 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:35 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:35
msgid "As always, don’t forget to source ROS 2 in :doc:`every new terminal you open <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>`."
msgstr "如往常一样，在每次打开新的终端时不要忘记在 :doc`每个新终端中启用ROS 2环境 <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>`。@{"calib_text": " `[5392] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5392>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:31
msgid "The launch system in ROS 2 is responsible for helping the user describe the configuration of their system and then execute it as described. The configuration of the system includes what programs to run, where to run them, what arguments to pass them, and ROS-specific conventions which make it easy to reuse components throughout the system by giving them each a different configuration. It is also responsible for monitoring the state of the processes launched, and reporting and/or reacting to changes in the state of those processes."
msgstr "ROS 2中的启动系统负责帮助用户描述其系统的配置，然后按照描述的方式执行它。系统的配置包括要运行的程序，运行它们的位置，要传递给它们的参数以及ROS特定的约定，使得通过为每个组件提供不同的配置，可以在整个系统中轻松地重用组件。它还负责监视启动的进程的状态，并报告和/或响应这些进程状态的变化。@{"calib_text": " `[5393] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5393>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:35
msgid "Launch files written in Python, XML, or YAML can start and stop different nodes as well as trigger and act on various events. See :doc:`../../../How-To-Guides/Launch-file-different-formats` for a description of the different formats. The package providing this framework is ``launch_ros``, which uses the non-ROS-specific ``launch`` framework underneath."
msgstr "使用Python、XML或YAML编写的启动文件可以启动和停止不同的节点，并触发和执行各种事件。有关不同格式的描述，请参阅 :doc:`../../../How-To-Guides/Launch-file-different-formats`。提供该框架的包是 ``launch_ros``，它在ROS特定的``launch``框架下运行。@{"calib_text": " `[5394] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5394>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:39
msgid "The `design document <https://design.ros2.org/articles/roslaunch.html>`__ details the goal of the design of ROS 2's launch system (not all functionality is currently available)."
msgstr "ROS 2的启动系统的 `设计文档 <https://design.ros2.org/articles/roslaunch.html>`__ 详细介绍了其设计目标（目前未提供所有功能）。@{"calib_text": " `[5395] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5395>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:47
msgid "Create a new directory to store your launch files:"
msgstr "创建一个新目录来存储你的启动文件：@{"calib_text": " `[5396] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5396>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:54 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:247 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:258
msgid "2 Write the launch file"
msgstr "2 编写启动文件@{"calib_text": " `[5397] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5397>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:56
msgid "Let’s put together a ROS 2 launch file using the ``turtlesim`` package and its executables. As mentioned above, this can either be in Python, XML, or YAML."
msgstr "让我们使用``turtlesim``包及其可执行文件来编写一个ROS 2启动文件。如上所述，这可以是Python、XML或YAML格式。@{"calib_text": " `[5398] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5398>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:63
msgid "Copy and paste the complete code into the ``launch/turtlesim_mimic_launch.py`` file:"
msgstr "将完整的代码复制并粘贴到``launch/turtlesim_mimic_launch.py``文件中：@{"calib_text": " `[5399] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5399>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:95 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:211 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:279
msgid "XML"
msgstr "XML@{"calib_text": " `[5400] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5400>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:97
msgid "Copy and paste the complete code into the ``launch/turtlesim_mimic_launch.xml`` file:"
msgstr "将完整的代码复制并粘贴到``launch/turtlesim_mimic_launch.xml``文件中：@{"calib_text": " `[5401] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5401>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:110 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:229 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:286
msgid "YAML"
msgstr "YAML@{"calib_text": " `[5402] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5402>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:112
msgid "Copy and paste the complete code into the ``launch/turtlesim_mimic_launch.yaml`` file:"
msgstr "将完整代码复制粘贴到``launch/turtlesim_mimic_launch.yaml``文件中：@{"calib_text": " `[5403] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5403>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:144
msgid "2.1 Examine the launch file"
msgstr "2.1 检查启动文件@{"calib_text": " `[5404] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5404>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:146
msgid "All of the launch files above are launching a system of three nodes, all from the ``turtlesim`` package. The goal of the system is to launch two turtlesim windows, and have one turtle mimic the movements of the other."
msgstr "上述所有启动文件都是从``turtlesim``软件包中启动的三个节点系统。该系统的目标是启动两个turtlesim窗口，并使一个turtle模仿另一个turtle的移动。@{"calib_text": " `[5405] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5405>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:149
msgid "When launching the two turtlesim nodes, the only difference between them is their namespace values. Unique namespaces allow the system to start two nodes without node name or topic name conflicts. Both turtles in this system receive commands over the same topic and publish their pose over the same topic. With unique namespaces, messages meant for different turtles can be distinguished."
msgstr "在启动这两个turtlesim节点时，它们之间唯一的区别是它们的命名空间值。唯一的命名空间允许系统在没有节点名称或主题名称冲突的情况下启动两个节点。该系统中的两个turtle都通过相同的主题接收命令并发布它们的位姿。通过唯一的命名空间，可以区分发送给不同turtle的消息。@{"calib_text": " `[5406] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5406>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:154
msgid "The final node is also from the ``turtlesim`` package, but a different executable: ``mimic``. This node has added configuration details in the form of remappings. ``mimic``'s ``/input/pose`` topic is remapped to ``/turtlesim1/turtle1/pose`` and it's ``/output/cmd_vel`` topic to ``/turtlesim2/turtle1/cmd_vel``. This means ``mimic`` will subscribe to ``/turtlesim1/sim``'s pose topic and republish it for ``/turtlesim2/sim``'s velocity command topic to subscribe to. In other words, ``turtlesim2`` will mimic ``turtlesim1``'s movements."
msgstr "最后一个节点也来自于“turtlesim”软件包，但是是另一个可执行文件：“mimic”。该节点通过重新映射添加了配置详细信息。``mimic``的``/input/pose``话题被重新映射到``/turtlesim1/turtle1/pose``，``/output/cmd_vel``话题被重新映射到``/turtlesim2/turtle1/cmd_vel``。这意味着``mimic``将订阅``/turtlesim1/sim``的姿态话题，并将其重新发布到``/turtlesim2/sim``的速度命令话题中进行订阅。换句话说，``turtlesim2``将模仿``turtlesim1``的运动。@{"calib_text": " `[5407] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5407>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:164
msgid "These import statements pull in some Python ``launch`` modules."
msgstr "这些导入语句引入了一些Python ``launch``模块。@{"calib_text": " `[5408] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5408>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:171
msgid "Next, the launch description itself begins:"
msgstr "接下来，启动描述本身开始：@{"calib_text": " `[5409] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5409>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:180
msgid "The first two actions in the launch description launch the two turtlesim windows:"
msgstr "启动描述中的前两个操作启动了两个turtlesim窗口：@{"calib_text": " `[5410] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5410>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:197 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:220 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:248
msgid "The final action launches the mimic node with the remaps:"
msgstr "最后一个操作使用了重新映射来启动mimic节点：@{"calib_text": " `[5411] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5411>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:213 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:231
msgid "The first two actions launch the two turtlesim windows:"
msgstr "启动描述中的前两个操作启动了两个turtlesim窗口：@{"calib_text": " `[5412] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5412>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:266
msgid "3 ros2 launch"
msgstr "3 ros2 launch@{"calib_text": " `[5413] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5413>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:268
msgid "To run the launch file created above, enter into the directory you created earlier and run the following command:"
msgstr "要运行上面创建的启动文件，请进入您之前创建的目录并运行以下命令：@{"calib_text": " `[5414] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5414>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:295
msgid "It is possible to launch a launch file directly (as we do above), or provided by a package. When it is provided by a package, the syntax is:"
msgstr "可以直接启动一个启动文件（如上所示），也可以由软件包提供。当由软件包提供时，语法如下：@{"calib_text": " `[5415] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5415>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:302
msgid "You learned about creating packages in :doc:`../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package`."
msgstr "您已经学习了如何在 :doc:`../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package` 中创建软件包。@{"calib_text": " `[5416] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5416>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:306
msgid "For packages with launch files, it is a good idea to add an ``exec_depend`` dependency on the ``ros2launch`` package in your package's ``package.xml``:"
msgstr "对于具有启动文件的软件包，最好在您的软件包的 ``package.xml`` 中添加一个 ``exec_depend`` 依赖项，依赖于 ``ros2launch`` 软件包：@{"calib_text": " `[5417] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5417>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:312
msgid "This helps make sure that the ``ros2 launch`` command is available after building your package. It also ensures that all :doc:`launch file formats <../../../How-To-Guides/Launch-file-different-formats>` are recognized."
msgstr "这有助于确保在构建软件包后可以使用 ``ros2 launch`` 命令。它还确保所有 :doc:`启动文件格式 <../../../How-To-Guides/Launch-file-different-formats>` 能被识别。@{"calib_text": " `[5418] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5418>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:315
msgid "Two turtlesim windows will open, and you will see the following ``[INFO]`` messages telling you which nodes your launch file has started:"
msgstr "将会打开两个turtlesim窗口，并且您将看到以下``[INFO]``消息，告诉您启动了哪些节点的launch文件：@{"calib_text": " `[5419] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5419>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:324
msgid "To see the system in action, open a new terminal and run the ``ros2 topic pub`` command on the ``/turtlesim1/turtle1/cmd_vel`` topic to get the first turtle moving:"
msgstr "为了看到系统的运行情况，打开一个新的终端并在``/turtlesim1/turtle1/cmd_vel``主题上运行``ros2 topic pub``命令，使第一个乌龟开始移动：@{"calib_text": " `[5420] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5420>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:330
msgid "You will see both turtles following the same path."
msgstr "您将看到两只乌龟都按照相同的路径移动。@{"calib_text": " `[5421] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5421>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:335
msgid "4 Introspect the system with rqt_graph"
msgstr "4 使用rqt_graph对系统进行内省@{"calib_text": " `[5422] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5422>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:337
msgid "While the system is still running, open a new terminal and run ``rqt_graph`` to get a better idea of the relationship between the nodes in your launch file."
msgstr "当系统仍在运行时，打开一个新的终端并运行``rqt_graph``，以更好地了解launch文件中节点之间的关系。@{"calib_text": " `[5423] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5423>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:347
msgid "A hidden node (the ``ros2 topic pub`` command you ran) is publishing data to the ``/turtlesim1/turtle1/cmd_vel`` topic on the left, which the ``/turtlesim1/sim`` node is subscribed to. The rest of the graph shows what was described earlier: ``mimic`` is subscribed to ``/turtlesim1/sim``'s pose topic, and publishes to ``/turtlesim2/sim``'s velocity command topic."
msgstr "一个隐藏节点（您运行的``ros2 topic pub``命令）在左侧发布数据到``/turtlesim1/turtle1/cmd_vel``主题，而``/turtlesim1/sim``节点订阅该主题。图中的其余部分展示了之前描述的内容：``mimic``订阅``/turtlesim1/sim``的姿态主题，并发布到``/turtlesim2/sim``的速度命令主题。@{"calib_text": " `[5424] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5424>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:353
msgid "Launch files simplify running complex systems with many nodes and specific configuration details. You can create launch files using Python, XML, or YAML, and run them using the ``ros2 launch`` command."
msgstr "启动文件可以简化运行具有许多节点和特定配置细节的复杂系统。您可以使用Python、XML或YAML创建启动文件，并使用``ros2 launch``命令运行它们。@{"calib_text": " `[5425] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5425>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:9
msgid "Launch"
msgstr "启动@{"calib_text": " `[5426] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5426>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:11
msgid "ROS 2 Launch files allow you to start up and configure a number of executables containing ROS 2 nodes simultaneously."
msgstr "ROS 2启动文件允许您同时启动和配置包含ROS 2节点的多个可执行文件。@{"calib_text": " `[5427] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5427>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:22
msgid ":doc:`Creating a launch file <./Creating-Launch-Files>`."
msgstr ":doc:`创建启动文件 <./Creating-Launch-Files>`。@{"calib_text": " `[5428] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5428>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:24
msgid "Learn how to create a launch file that will start up nodes and their configurations all at once."
msgstr "了解如何创建一个启动文件，以一次性启动节点及其配置。@{"calib_text": " `[5429] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5429>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:26
msgid ":doc:`Launching and monitoring multiple nodes <./Launch-system>`."
msgstr ":doc:`启动和监视多个节点 <./Launch-system>`。@{"calib_text": " `[5430] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5430>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:28
msgid "Get a more advanced overview of how launch files work."
msgstr "了解如何更高级地使用启动文件。@{"calib_text": " `[5431] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5431>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:30
msgid ":doc:`Using substitutions <./Using-Substitutions>`."
msgstr ":doc:`使用替代项 <./Using-Substitutions>`。@{"calib_text": " `[5432] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5432>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:32
msgid "Use substitutions to provide more flexibility when describing reusable launch files."
msgstr "使用替代项来提供更多的灵活性，以便描述可重用的启动文件。@{"calib_text": " `[5433] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5433>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:34
msgid ":doc:`Using event handlers <./Using-Event-Handlers>`."
msgstr ":doc:`使用事件处理器 <./Using-Event-Handlers>`。@{"calib_text": " `[5434] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5434>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:36
msgid "Use event handlers to monitor the state of processes or to define a complex set of rules that can be used to dynamically modify the launch file."
msgstr "使用事件处理器来监控进程的状态，或者定义一组复杂的规则，可以动态修改启动文件。@{"calib_text": " `[5435] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5435>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:38
msgid ":doc:`Managing large projects <./Using-ROS2-Launch-For-Large-Projects>`."
msgstr ":doc:`管理大型项目 <./Using-ROS2-Launch-For-Large-Projects>`。@{"calib_text": " `[5436] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5436>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:40
msgid "Structure launch files for large projects so they may be reused as much as possible in different situations. See usage examples of different launch tools like parameters, YAML files, remappings, namespaces, default arguments, and RViz configs."
msgstr "为大型项目创建结构化的启动文件，以便在不同情境下尽可能地重用。查看使用不同启动工具（如参数、YAML文件、重映射、命名空间、默认参数和RViz配置）的示例。@{"calib_text": " `[5437] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5437>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:45
msgid "If you are coming from ROS 1, you can use the :doc:`ROS Launch Migration guide <../../../How-To-Guides/Launch-files-migration-guide>` to help you migrate your launch files to ROS 2."
msgstr "如果您从ROS 1迁移到ROS 2，您可以使用 :doc:`ROS启动迁移指南 <../../../How-To-Guides/Launch-files-migration-guide>` 来帮助您将启动文件迁移到ROS 2。@{"calib_text": " `[5438] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5438>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:8
msgid "Integrating launch files into ROS 2 packages"
msgstr "将启动文件集成到ROS 2包中@{"calib_text": " `[5439] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5439>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:10
msgid "**Goal:** Add a launch file to a ROS 2 package"
msgstr "**目标：**将一个启动文件添加到ROS 2包中@{"calib_text": " `[5440] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5440>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:23
msgid "You should have gone through the tutorial on how to :doc:`create a ROS 2 package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`."
msgstr "您应该已经完成了教程，学习如何 :doc:`创建一个ROS 2包 <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`。@{"calib_text": " `[5441] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5441>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:30
msgid "In the :doc:`previous tutorial <Creating-Launch-Files>`, we saw how to write a standalone launch file. This tutorial will show how to add a launch file to an existing package, and the conventions typically used."
msgstr "在 :doc:`上一个教程 <Creating-Launch-Files>` 中，我们学习了如何编写一个独立的启动文件。本教程将展示如何将一个启动文件添加到现有的包中，并介绍通常使用的约定。@{"calib_text": " `[5442] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5442>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:39
msgid "Create a workspace for the package to live in:"
msgstr "为包创建一个工作空间：@{"calib_text": " `[5443] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5443>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:66 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:86 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:203
msgid "Python package"
msgstr "Python package@{"calib_text": " `[5444] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5444>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:72 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:123 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:225
msgid "C++ package"
msgstr "C++ 包@{"calib_text": " `[5445] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5445>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:79
msgid "2 Creating the structure to hold launch files"
msgstr "2 创建用于存放启动文件的结构@{"calib_text": " `[5446] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5446>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:81
msgid "By convention, all launch files for a package are stored in the ``launch`` directory inside of the package. Make sure to create a ``launch`` directory at the top-level of the package you created above."
msgstr "按照惯例，包中的所有启动文件都存储在包内的“launch”目录中。请确保在上面创建的包的顶级目录下创建一个“launch”目录。@{"calib_text": " `[5447] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5447>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:88
msgid "For Python packages, the directory containing your package should look like this:"
msgstr "对于 Python 包，包含包的目录应该像这样：@{"calib_text": " `[5448] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5448>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:102
msgid "In order for colcon to find the launch files, we need to inform Python's setup tools of our launch files using the ``data_files`` parameter of ``setup``."
msgstr "为了让colcon能够找到启动文件，我们需要使用``setup``的``data_files``参数，向Python的设置工具提供我们的启动文件信息。@{"calib_text": " `[5449] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5449>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:104
msgid "Inside our ``setup.py`` file:"
msgstr "在我们的``setup.py``文件中：@{"calib_text": " `[5450] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5450>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:125
msgid "For C++ packages, we will only be adjusting the ``CMakeLists.txt`` file by adding:"
msgstr "对于C++包，我们只需要在``CMakeLists.txt``文件末尾（但在``ament_package()``之前）添加：@{"calib_text": " `[5451] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5451>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:135
msgid "to the end of the file (but before ``ament_package()``)."
msgstr "。@{"calib_text": " `[5452] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5452>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:139
msgid "3 Writing the launch file"
msgstr "3 编写启动文件@{"calib_text": " `[5453] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5453>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:143 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:207 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:229
msgid "Python launch file"
msgstr "Python启动文件@{"calib_text": " `[5454] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5454>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:145
msgid "Inside your ``launch`` directory, create a new launch file called ``my_script_launch.py``. ``_launch.py`` is recommended, but not required, as the file suffix for Python launch files. However, the launch file name needs to end with ``launch.py`` to be recognized and autocompleted by ``ros2 launch``."
msgstr "在你的``launch``目录中，创建一个名为``my_script_launch.py``的新启动文件。推荐使用``_launch.py``作为Python启动文件的文件后缀，但不是必需的。但是，启动文件的名称必须以``launch.py``结尾，以便被``ros2 launch``识别并自动完成。@{"calib_text": " `[5455] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5455>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:149
msgid "Your launch file should define the ``generate_launch_description()`` function which returns a ``launch.LaunchDescription()`` to be used by the ``ros2 launch`` verb."
msgstr "你的启动文件应该定义``generate_launch_description()``函数，该函数返回一个``launch.LaunchDescription()``对象，供``ros2 launch``命令使用。@{"calib_text": " `[5456] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5456>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:164 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:213 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:235
msgid "XML launch file"
msgstr "XML启动文件@{"calib_text": " `[5457] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5457>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:166
msgid "Inside your ``launch`` directory, create a new launch file called ``my_script_launch.xml``. ``_launch.xml`` is recommended, but not required, as the file suffix for XML launch files."
msgstr "在你的``launch``目录中，创建一个名为``my_script_launch.xml``的新启动文件。推荐使用``_launch.xml``作为XML启动文件的文件后缀，但不是必需的。@{"calib_text": " `[5458] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5458>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:175 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:219 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:241
msgid "YAML launch file"
msgstr "YAML启动文件@{"calib_text": " `[5459] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5459>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:177
msgid "Inside your ``launch`` directory, create a new launch file called ``my_script_launch.yaml``. ``_launch.yaml`` is recommended, but not required, as the file suffix for YAML launch files."
msgstr "在你的``launch``目录中，创建一个名为``my_script_launch.yaml``的新启动文件。推荐使用``_launch.yaml``作为YAML启动文件的文件后缀，但不是必需的。@{"calib_text": " `[5460] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5460>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:191
msgid "4 Building and running the launch file"
msgstr "4 构建和运行启动文件@{"calib_text": " `[5461] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5461>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:193
msgid "Go to the top-level of the workspace, and build it:"
msgstr "进入工作空间的顶层，并进行构建：@{"calib_text": " `[5462] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5462>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:199
msgid "After the ``colcon build`` has been successful and you've sourced the workspace, you should be able to run the launch file as follows:"
msgstr "在 ``colcon build`` 成功并且你已经载入了工作空间之后，你应该能够按照以下方式运行启动文件：@{"calib_text": " `[5463] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5463>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:249 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:305 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:391
msgid "Documentation"
msgstr "文档@{"calib_text": " `[5464] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5464>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:251
msgid "`The launch documentation <https://github.com/ros2/launch/blob/humble/launch/doc/source/architecture.rst>`__ provides more details on concepts that are also used in ``launch_ros``."
msgstr "`启动文档 <https://github.com/ros2/launch/blob/humble/launch/doc/source/architecture.rst>`__ 提供了关于 ``launch_ros`` 中也使用的概念的更多细节。@{"calib_text": " `[5465] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5465>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:253
msgid "Additional documentation/examples of launch capabilities are forthcoming. See the source code (https://github.com/ros2/launch and https://github.com/ros2/launch_ros) in the meantime."
msgstr "其他启动功能的文档/示例即将推出。在此期间，请参考源代码 (https://github.com/ros2/launch 和 https://github.com/ros2/launch_ros)。@{"calib_text": " `[5466] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5466>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:7 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:39
msgid "Using event handlers"
msgstr "使用事件处理程序@{"calib_text": " `[5467] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5467>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:9
msgid "**Goal:** Learn about event handlers in ROS 2 launch files"
msgstr "**目标：**了解ROS 2启动文件中的事件处理程序@{"calib_text": " `[5468] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5468>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:22
msgid "Launch in ROS 2 is a system that executes and manages user-defined processes. It is responsible for monitoring the state of processes it launched, as well as reporting and reacting to changes in the state of those processes. These changes are called events and can be handled by registering an event handler with the launch system. Event handlers can be registered for specific events and can be useful for monitoring the state of processes. Additionally, they can be used to define a complex set of rules which can be used to dynamically modify the launch file."
msgstr "在ROS 2中，启动是执行和管理用户定义的进程的系统。它负责监视其启动的进程的状态，以及报告和响应这些进程状态的变化。这些变化称为事件，并可以通过向启动系统注册事件处理程序来处理。事件处理程序可以注册为特定事件，并且对于监视进程的状态非常有用。此外，它们可以用于定义一组复杂的规则，用于动态修改启动文件。@{"calib_text": " `[5469] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5469>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:28
msgid "This tutorial shows usage examples of event handlers in ROS 2 launch files."
msgstr "本教程展示了ROS 2启动文件中事件处理程序的使用示例。@{"calib_text": " `[5470] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5470>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:33
msgid "This tutorial uses the :doc:`turtlesim <../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>` package. This tutorial also assumes you have :doc:`created a new package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>` of build type ``ament_python`` called ``launch_tutorial``."
msgstr "本教程使用 :doc:`turtlesim <../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>` 包。本教程还假设您已经 :doc:`创建了一个名为“launch_tutorial”的新包<../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`，其构建类型为``ament_python``。@{"calib_text": " `[5471] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5471>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:36
msgid "This tutorial extends the code shown in the :doc:`Using substitutions in launch files <./Using-Substitutions>` tutorial."
msgstr "本教程扩展了 :doc:`在启动文件中使用替换 <./Using-Substitutions>` 教程中展示的代码。@{"calib_text": " `[5472] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5472>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:42
msgid "1 Event handlers example launch file"
msgstr "1 事件处理程序示例启动文件@{"calib_text": " `[5473] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5473>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:44
msgid "Create a new file called ``example_event_handlers.launch.py`` file in the ``launch`` folder of the ``launch_tutorial`` package."
msgstr "在“launch_tutorial”包的“launch”文件夹中创建一个名为“example_event_handlers.launch.py”的新文件。@{"calib_text": " `[5474] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5474>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:183
msgid "``RegisterEventHandler`` actions for the ``OnProcessStart``, ``OnProcessIO``, ``OnExecutionComplete``, ``OnProcessExit``, and ``OnShutdown`` events were defined in the launch description."
msgstr "在启动描述中定义了“OnProcessStart”、“OnProcessIO”、“OnExecutionComplete”、“OnProcessExit”和“OnShutdown”事件的“RegisterEventHandler”操作。@{"calib_text": " `[5475] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5475>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:185
msgid "The ``OnProcessStart`` event handler is used to register a callback function that is executed when the turtlesim node starts. It logs a message to the console and executes the ``spawn_turtle`` action when the turtlesim node starts."
msgstr "“OnProcessStart”事件处理程序用于注册在turtlesim节点启动时执行的回调函数。它在turtlesim节点启动时向控制台记录一条消息，并执行“spawn_turtle”操作。@{"calib_text": " `[5476] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5476>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:200
msgid "The ``OnProcessIO`` event handler is used to register a callback function that is executed when the ``spawn_turtle`` action writes to its standard output. It logs the result of the spawn request."
msgstr "“OnProcessIO”事件处理程序用于注册在“spawn_turtle”操作写入其标准输出时执行的回调函数。它记录生成请求的结果。@{"calib_text": " `[5477] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5477>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:215
msgid "The ``OnExecutionComplete`` event handler is used to register a callback function that is executed when the ``spawn_turtle`` action completes. It logs a message to the console and executes the ``change_background_r`` and ``change_background_r_conditioned`` actions when the spawn action completes."
msgstr "“OnExecutionComplete”事件处理程序用于注册在“spawn_turtle”操作完成时执行的回调函数。它在生成操作完成时向控制台记录一条消息，并执行“change_background_r”和“change_background_r_conditioned”操作。@{"calib_text": " `[5478] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5478>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:234
msgid "The ``OnProcessExit`` event handler is used to register a callback function that is executed when the turtlesim node exits. It logs a message to the console and executes the ``EmitEvent`` action to emit a ``Shutdown`` event when the turtlesim node exits. It means that the launch process will shutdown when the turtlesim window is closed."
msgstr "``OnProcessExit`` 事件处理程序用于注册一个回调函数，当 turtlesim 节点退出时执行该函数。它将一条消息记录到控制台，并执行 ``EmitEvent`` 操作以在 turtlesim 节点退出时触发一个 ``Shutdown`` 事件。这意味着当 turtlesim 窗口关闭时，启动过程将会关闭。@{"calib_text": " `[5479] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5479>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:252
msgid "Finally, the ``OnShutdown`` event handler is used to register a callback function that is executed when the launch file is asked to shutdown. It logs a message to the console why the launch file is asked to shutdown. It logs the message with a reason for shutdown like the closure of turtlesim window or :kbd:`ctrl-c` signal made by the user."
msgstr "最后，``OnShutdown`` 事件处理程序用于注册一个回调函数，在要求关闭启动文件时执行该函数。它将一条消息记录到控制台，说明为什么要求关闭启动文件。它将消息记录为关闭的原因，例如 turtlesim 窗口的关闭或用户发出的 :kbd:`ctrl-c` 信号。@{"calib_text": " `[5480] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5480>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:268
msgid "Build the package"
msgstr "构建软件包@{"calib_text": " `[5481] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5481>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:270 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:331
msgid "Go to the root of the workspace, and build the package:"
msgstr "转到工作空间的根目录，并构建软件包：@{"calib_text": " `[5482] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5482>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:276 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:337
msgid "Also remember to source the workspace after building."
msgstr "构建完成后，请记得设置工作空间环境。@{"calib_text": " `[5483] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5483>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:279 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:340
msgid "Launching example"
msgstr "启动示例@{"calib_text": " `[5484] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5484>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:281
msgid "Now you can launch the ``example_event_handlers.launch.py`` file using the ``ros2 launch`` command."
msgstr "现在你可以使用``ros2 launch``命令来启动``example_event_handlers.launch.py``文件。@{"calib_text": " `[5485] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5485>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:287 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:348
msgid "This will do the following:"
msgstr "这将执行以下操作：@{"calib_text": " `[5486] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5486>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:289 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:350
msgid "Start a turtlesim node with a blue background"
msgstr "启动一个带有蓝色背景的turtlesim节点@{"calib_text": " `[5487] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5487>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:290 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:351
msgid "Spawn the second turtle"
msgstr "生成第二只乌龟@{"calib_text": " `[5488] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5488>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:291 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:352
msgid "Change the color to purple"
msgstr "如果提供的``background_r``参数为``200``且``use_provided_red``参数为``True``，则将颜色更改为紫色@{"calib_text": " `[5489] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5489>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:292 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:353
msgid "Change the color to pink after two seconds if the provided ``background_r`` argument is ``200`` and ``use_provided_red`` argument is ``True``"
msgstr "如果提供的``background_r``参数为``200``且``use_provided_red``参数为``True``，则在两秒后将颜色更改为粉色@{"calib_text": " `[5490] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5490>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:293
msgid "Shutdown the launch file when the turtlesim window is closed"
msgstr "当turtlesim窗口关闭时关闭启动文件@{"calib_text": " `[5491] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5491>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:295
msgid "Additionally, it will log messages to the console when:"
msgstr "此外，当以下情况发生时，它将在控制台上记录消息：@{"calib_text": " `[5492] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5492>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:297
msgid "The turtlesim node starts"
msgstr "turtlesim节点启动@{"calib_text": " `[5493] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5493>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:298
msgid "The spawn action is executed"
msgstr "执行spawn动作@{"calib_text": " `[5494] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5494>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:299
msgid "The ``change_background_r`` action is executed"
msgstr "执行``change_background_r``动作@{"calib_text": " `[5495] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5495>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:300
msgid "The ``change_background_r_conditioned`` action is executed"
msgstr "执行``change_background_r_conditioned``动作@{"calib_text": " `[5496] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5496>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:301
msgid "The turtlesim node exits"
msgstr "turtlesim节点退出@{"calib_text": " `[5497] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5497>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:302
msgid "The launch process is asked to shutdown."
msgstr "要求终止启动进程。@{"calib_text": " `[5498] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5498>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:307
msgid "`The launch documentation <https://github.com/ros2/launch/blob/humble/launch/doc/source/architecture.rst>`_ provides detailed information about available event handlers."
msgstr "`启动文档 <https://github.com/ros2/launch/blob/humble/launch/doc/source/architecture.rst>`_ 提供了关于可用事件处理程序的详细信息。@{"calib_text": " `[5499] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5499>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:312
msgid "In this tutorial, you learned about using event handlers in launch files. You learned about their syntax and usage examples to define a complex set of rules to dynamically modify launch files."
msgstr "在本教程中，您学习了如何在启动文件中使用事件处理程序。您了解了它们的语法和使用示例，以定义一组复杂的规则，以动态修改启动文件。@{"calib_text": " `[5500] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5500>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:9
msgid "Managing large projects"
msgstr "管理大型项目@{"calib_text": " `[5501] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5501>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:11
msgid "**Goal:** Learn best practices of managing large projects using ROS 2 launch files."
msgstr "**目标:** 学习使用ROS 2启动文件管理大型项目的最佳实践。@{"calib_text": " `[5502] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5502>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:24
msgid "This tutorial describes some tips for writing launch files for large projects. The focus is on how to structure launch files so they may be reused as much as possible in different situations. Additionally, it covers usage examples of different ROS 2 launch tools, like parameters, YAML files, remappings, namespaces, default arguments, and RViz configs."
msgstr "本教程介绍了编写大型项目启动文件的一些技巧。重点是如何结构化启动文件，使其在不同情况下尽可能地被重用。此外，还介绍了不同的ROS 2启动工具的使用示例，例如参数、YAML文件、重映射、命名空间、默认参数和RViz配置。@{"calib_text": " `[5503] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5503>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:31
msgid "This tutorial uses the :doc:`turtlesim <../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>` and :doc:`turtle_tf2_py <../Tf2/Introduction-To-Tf2>` packages. This tutorial also assumes you have :doc:`created a new package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>` of build type ``ament_python`` called ``launch_tutorial``."
msgstr "本教程使用了 :doc:`turtlesim <../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>` 和 :doc:`turtle_tf2_py <../Tf2/Introduction-To-Tf2>` 包。本教程还假设您已经 :doc:`创建了一个名为``launch_tutorial``的新包 <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`，其构建类型为``ament_python``。@{"calib_text": " `[5504] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5504>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:35
msgid "Introduction"
msgstr "介绍@{"calib_text": " `[5505] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5505>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:37
msgid "Large applications on a robot typically involve several interconnected nodes, each of which can have many parameters. Simulation of multiple turtles in the turtle simulator can serve as a good example. The turtle simulation consists of multiple turtle nodes, the world configuration, and the TF broadcaster and listener nodes. Between all of the nodes, there are a large number of ROS parameters that affect the behavior and appearance of these nodes. ROS 2 launch files allow us to start all nodes and set corresponding parameters in one place. By the end of a tutorial, you will build the ``launch_turtlesim.launch.py`` launch file in the ``launch_tutorial`` package. This launch file will bring up different nodes responsible for the simulation of two turtlesim simulations, starting TF broadcasters and listener, loading parameters, and launching an RViz configuration. In this tutorial, we'll go over this launch file and all related features used."
msgstr "机器人上的大型应用程序通常涉及多个相互连接的节点，每个节点可以有很多参数。多个海龟在海龟模拟器中的仿真可以作为一个很好的例子。海龟仿真由多个海龟节点、世界配置以及TF广播器和监听器节点组成。在所有节点之间，有很多ROS参数会影响这些节点的行为和外观。ROS 2启动文件允许我们在一个地方启动所有节点并设置相应的参数。在教程的最后，您将在``launch_tutorial``包中构建``launch_turtlesim.launch.py``启动文件。该启动文件将启动负责模拟两个turtlesim仿真的不同节点，启动TF广播器和监听器，加载参数，并启动RViz配置。在本教程中，我们将介绍该启动文件及其所有相关功能。@{"calib_text": " `[5506] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5506>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:47
msgid "Writing launch files"
msgstr "编写启动文件@{"calib_text": " `[5507] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5507>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:50
msgid "1 Top-level organization"
msgstr "1 顶层组织@{"calib_text": " `[5508] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5508>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:52
msgid "One of the aims in the process of writing launch files should be making them as reusable as possible. This could be done by clustering related nodes and configurations into separate launch files. Afterwards, a top-level launch file dedicated to a specific configuration could be written. This would allow moving between identical robots to be done without changing the launch files at all. Even a change such as moving from a real robot to a simulated one can be done with only a few changes."
msgstr "在编写启动文件的过程中，一个目标应该是尽可能使它们可重用。这可以通过将相关的节点和配置聚集到单独的启动文件中来实现。然后，可以编写一个专门用于特定配置的顶层启动文件。这样，即使在完全不更改启动文件的情况下，也可以在相同的机器人之间进行切换。甚至只需进行少量更改，例如从真实机器人切换到模拟机器人。@{"calib_text": " `[5509] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5509>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:58
msgid "We will now go over the top-level launch file structure that makes this possible. Firstly, we will create a launch file that will call separate launch files. To do this, let's create a ``launch_turtlesim.launch.py`` file in the ``/launch`` folder of our ``launch_tutorial`` package."
msgstr "现在我们将介绍使此功能成为可能的顶层启动文件结构。首先，我们将创建一个调用其他启动文件的启动文件。为此，请在“launch_tutorial”软件包的“/launch”文件夹中创建一个名为“launch_turtlesim.launch.py”的文件。@{"calib_text": " `[5510] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5510>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:115
msgid "This launch file includes a set of other launch files. Each of these included launch files contains nodes, parameters, and possibly, nested includes, which pertain to one part of the system. To be exact, we launch two turtlesim simulation worlds, TF broadcaster, TF listener, mimic, fixed frame broadcaster, and RViz nodes."
msgstr "该启动文件包括一组其他启动文件。这些被包含的启动文件中每一个都包含了与系统的一个部分相关的节点、参数，以及可能的嵌套包含项。确切地说，我们启动了两个turtlesim仿真世界、TF广播器、TF监听器、模仿器、固定帧广播器和RViz节点。@{"calib_text": " `[5511] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5511>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:119
msgid "Design Tip: Top-level launch files should be short, consist of includes to other files corresponding to subcomponents of the application, and commonly changed parameters."
msgstr "设计提示：顶层启动文件应该简短，由包含到应用程序的子组件对应文件的包含项组成，并包含常常更改的参数。@{"calib_text": " `[5512] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5512>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:121
msgid "Writing launch files in the following manner makes it easy to swap out one piece of the system, as we'll see later. However, there are cases when some nodes or launch files have to be launched separately due to performance and usage reasons."
msgstr "按照以下方式编写启动文件可以轻松地替换系统的某个部分，我们稍后将会看到。然而，出于性能和使用原因，有时需要单独启动某些节点或启动文件。@{"calib_text": " `[5513] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5513>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:124
msgid "Design tip: Be aware of the tradeoffs when deciding how many top-level launch files your application requires."
msgstr "设计提示：在决定应用程序需要多少个顶层启动文件时，请注意权衡。@{"calib_text": " `[5514] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5514>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:127
msgid "2 Parameters"
msgstr "2 参数@{"calib_text": " `[5515] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5515>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:130
msgid "2.1 Setting parameters in the launch file"
msgstr "2.1 在启动文件中设置参数@{"calib_text": " `[5516] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5516>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:132
msgid "We will begin by writing a launch file that will start our first turtlesim simulation. First, create a new file called ``turtlesim_world_1.launch.py``."
msgstr "我们将首先编写一个启动文件，用于启动我们的第一个turtlesim仿真。首先，创建一个名为``turtlesim_world_1.launch.py``的新文件。@{"calib_text": " `[5517] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5517>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:171
msgid "This launch file starts the ``turtlesim_node`` node, which starts the turtlesim simulation, with simulation configuration parameters that are defined and passed to the nodes."
msgstr "该启动文件启动``turtlesim_node``节点，该节点启动turtlesim仿真，并将定义和传递给节点的仿真配置参数。@{"calib_text": " `[5518] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5518>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:174
msgid "2.2 Loading parameters from YAML file"
msgstr "2.2 从YAML文件中加载参数@{"calib_text": " `[5519] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5519>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:176
msgid "In the second launch, we will start a second turtlesim simulation with a different configuration. Now create a ``turtlesim_world_2.launch.py`` file."
msgstr "在第二个启动文件中，我们将使用不同的配置启动第二个turtlesim仿真。现在创建一个``turtlesim_world_2.launch.py``文件。@{"calib_text": " `[5520] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5520>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:206
msgid "This launch file will launch the same ``turtlesim_node`` with parameter values that are loaded directly from the YAML configuration file. Defining arguments and parameters in YAML files make it easy to store and load a large number of variables. In addition, YAML files can be easily exported from the current ``ros2 param`` list. To learn how to do that, refer to the :doc:`Understand parameters <../../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` tutorial."
msgstr "这个启动文件将使用直接从YAML配置文件中加载的参数值来启动相同的``turtlesim_node``。在YAML文件中定义参数和变量可以方便地存储和加载大量的变量。此外，YAML文件可以轻松地从当前的``ros2 param``列表导出。要了解如何做到这一点，请参考 :doc:`了解参数 <../../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` 教程。@{"calib_text": " `[5521] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5521>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:211
msgid "Let's now create a configuration file, ``turtlesim.yaml``, in the ``/config`` folder of our package, which will be loaded by our launch file."
msgstr "现在让我们在包的``/config``文件夹中创建一个名为``turtlesim.yaml``的配置文件，这个文件将被我们的启动文件加载。@{"calib_text": " `[5522] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5522>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:221
msgid "If we now start the ``turtlesim_world_2.launch.py`` launch file, we will start the ``turtlesim_node`` with preconfigured background colors."
msgstr "如果我们现在启动``turtlesim_world_2.launch.py``启动文件，我们将启动带有预配置背景颜色的``turtlesim_node``。@{"calib_text": " `[5523] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5523>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:223
msgid "To learn more about using parameters and using YAML files, take a look at the :doc:`Understand parameters <../../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` tutorial."
msgstr "要了解更多关于使用参数和使用YAML文件的信息，请查看 :doc:`了解参数 <../../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` 教程。@{"calib_text": " `[5524] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5524>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:226
msgid "2.3 Using wildcards in YAML files"
msgstr "2.3 在YAML文件中使用通配符@{"calib_text": " `[5525] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5525>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:228
msgid "There are cases when we want to set the same parameters in more than one node. These nodes could have different namespaces or names but still have the same parameters. Defining separate YAML files that explicitly define namespaces and node names is not efficient. A solution is to use wildcard characters, which act as substitutions for unknown characters in a text value, to apply parameters to several different nodes."
msgstr "有些情况下，我们希望在多个节点中设置相同的参数。这些节点可能有不同的命名空间或名称，但仍具有相同的参数。定义单独的YAML文件来显式定义命名空间和节点名称是不高效的。解决方案是使用通配符字符，它们作为未知字符的替代，将参数应用于多个不同的节点。@{"calib_text": " `[5526] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5526>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:233
msgid "Now let's create a new ``turtlesim_world_3.launch.py`` file similar to ``turtlesim_world_2.launch.py`` to include one more ``turtlesim_node`` node."
msgstr "现在让我们创建一个新的 ``turtlesim_world_3.launch.py`` 文件，与 ``turtlesim_world_2.launch.py`` 类似，添加一个额外的 ``turtlesim_node`` 节点。@{"calib_text": " `[5527] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5527>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:246
msgid "Loading the same YAML file, however, will not affect the appearance of the third turtlesim world. The reason is that its parameters are stored under another namespace as shown below:"
msgstr "然而，加载相同的 YAML 文件不会影响第三个 turtlesim 世界的外观。原因是它的参数存储在另一个命名空间下，如下所示：@{"calib_text": " `[5528] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5528>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:256
msgid "Therefore, instead of creating a new configuration for the same node that use the same parameters, we can use wildcards syntax. ``/**`` will assign all the parameters in every node, despite differences in node names and namespaces."
msgstr "因此，我们可以使用通配符语法，而不是为使用相同参数的同一节点创建新的配置。``/**`` 将为每个节点分配所有参数，尽管节点名称和命名空间存在差异。@{"calib_text": " `[5529] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5529>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:259
msgid "We will now update the ``turtlesim.yaml``, in the ``/config`` folder in the following manner:"
msgstr "现在我们将按照以下方式更新 ``/config`` 文件夹中的 ``turtlesim.yaml``：@{"calib_text": " `[5530] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5530>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:269
msgid "Now include the ``turtlesim_world_3.launch.py`` launch description in our main launch file. Using that configuration file in our launch descriptions will assign ``background_b``, ``background_g``, and ``background_r`` parameters to specified values in ``turtlesim3/sim`` and ``turtlesim2/sim`` nodes."
msgstr "现在在我们的主要启动文件中包含 ``turtlesim_world_3.launch.py`` 启动描述。在我们的启动描述中使用该配置文件将为 ``turtlesim3/sim`` 和 ``turtlesim2/sim`` 节点分配 ``background_b``、``background_g`` 和 ``background_r`` 参数指定的值。@{"calib_text": " `[5531] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5531>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:273
msgid "3 Namespaces"
msgstr "3 个命名空间@{"calib_text": " `[5532] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5532>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:275
msgid "As you may have noticed, we have defined the namespace for the turlesim world in the ``turtlesim_world_2.launch.py`` file. Unique namespaces allow the system to start two similar nodes without node name or topic name conflicts."
msgstr "正如您可能已经注意到的那样，我们在``turtlesim_world_2.launch.py``文件中定义了turtlesim世界的命名空间。唯一的命名空间可以让系统在没有节点名称或主题名称冲突的情况下启动两个相似的节点。@{"calib_text": " `[5533] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5533>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:282
msgid "However, if the launch file contains a large number of nodes, defining namespaces for each of them can become tedious. To solve that issue, the ``PushRosNamespace`` action can be used to define the global namespace for each launch file description. Every nested node will inherit that namespace automatically."
msgstr "然而，如果启动文件包含大量节点，为每个节点定义命名空间可能会变得繁琐。为解决这个问题，可以使用``PushRosNamespace``操作来为每个启动文件描述定义全局命名空间。每个嵌套节点将自动继承该命名空间。@{"calib_text": " `[5534] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5534>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:286
msgid "To do that, firstly, we need to remove the ``namespace='turtlesim2'`` line from the ``turtlesim_world_2.launch.py`` file. Afterwards, we need to update the ``launch_turtlesim.launch.py`` to include the following lines:"
msgstr "要实现这一点，首先，我们需要从``turtlesim_world_2.launch.py``文件中移除``namespace='turtlesim2'``行。然后，我们需要更新``launch_turtlesim.launch.py``文件，包含以下行：@{"calib_text": " `[5535] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5535>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:307
msgid "Finally, we replace the ``turtlesim_world_2`` to ``turtlesim_world_2_with_namespace`` in the ``return LaunchDescription`` statement. As a result, each node in the ``turtlesim_world_2.launch.py`` launch description will have a ``turtlesim2`` namespace."
msgstr "最后，在``return LaunchDescription``语句中将``turtlesim_world_2``替换为``turtlesim_world_2_with_namespace``。结果是，``turtlesim_world_2.launch.py``启动描述中的每个节点都将具有``turtlesim2``命名空间。@{"calib_text": " `[5536] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5536>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:311
msgid "4 Reusing nodes"
msgstr "4 重复使用节点@{"calib_text": " `[5537] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5537>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:313
msgid "Now create a ``broadcaster_listener.launch.py`` file."
msgstr "现在创建一个``broadcaster_listener.launch.py``文件。@{"calib_text": " `[5538] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5538>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:357
msgid "In this file, we have declared the ``target_frame`` launch argument with a default value of ``turtle1``. The default value means that the launch file can receive an argument to forward to its nodes, or in case the argument is not provided, it will pass the default value to its nodes."
msgstr "在该文件中，我们使用默认值``turtle1``声明了``target_frame``的启动参数。默认值意味着启动文件可以接收一个参数并传递给其节点，或者在未提供参数的情况下，将默认值传递给其节点。@{"calib_text": " `[5539] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5539>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:360
msgid "Afterwards, we use the ``turtle_tf2_broadcaster`` node two times using different names and parameters during launch. This allows us to duplicate the same node without conflicts."
msgstr "之后，我们在启动过程中两次使用了不同名称和参数的``turtle_tf2_broadcaster``节点。这样可以在不冲突的情况下复制相同的节点。@{"calib_text": " `[5540] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5540>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:363
msgid "We also start a ``turtle_tf2_listener`` node and set its ``target_frame`` parameter that we declared and acquired above."
msgstr "我们还启动了一个``turtle_tf2_listener``节点，并设置了先前声明和获取的``target_frame``参数。@{"calib_text": " `[5541] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5541>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:366
msgid "5 Parameter overrides"
msgstr "5 参数覆盖@{"calib_text": " `[5542] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5542>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:368
msgid "Recall that we called the ``broadcaster_listener.launch.py`` file in our top-level launch file. In addition to that, we have passed it ``target_frame`` launch argument as shown below:"
msgstr "回想一下，在我们的顶层启动文件中调用了``broadcaster_listener.launch.py``文件。除此之外，我们还传递了``target_frame``启动参数，如下所示：@{"calib_text": " `[5543] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5543>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:380
msgid "This syntax allows us to change the default goal target frame to ``carrot1``. If you would like ``turtle2`` to follow ``turtle1`` instead of the ``carrot1``, just remove the line that defines ``launch_arguments``. This will assign ``target_frame`` its default value, which is ``turtle1``."
msgstr "这个语法允许我们将默认目标框架更改为``carrot1``。如果你希望``turtle2``跟随``turtle1``而不是``carrot1``，只需删除定义``launch_arguments``的那一行。这将将``target_frame``分配为其默认值，即``turtle1``。@{"calib_text": " `[5544] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5544>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:387
msgid "Now create a ``mimic.launch.py`` file."
msgstr "现在创建一个 ``mimic.launch.py`` 文件。@{"calib_text": " `[5545] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5545>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:408
msgid "This launch file will start the ``mimic`` node, which will give commands to one turtlesim to follow the other. The node is designed to receive the target pose on the topic ``/input/pose``. In our case, we want to remap the target pose from ``/turtle2/pose`` topic. Finally, we remap the ``/output/cmd_vel`` topic to ``/turtlesim2/turtle1/cmd_vel``. This way ``turtle1`` in our ``turtlesim2`` simulation world will follow ``turtle2`` in our initial turtlesim world."
msgstr "这个启动文件将启动 ``mimic`` 节点，该节点将向一个 turtlesim 发送指令，让它跟随另一个 turtlesim。该节点设计用于在主题 ``/input/pose`` 上接收目标姿态。在我们的情况下，我们希望将目标姿态重映射到 ``/turtle2/pose`` 主题上。最后，我们将 ``/output/cmd_vel`` 主题重映射到 ``/turtlesim2/turtle1/cmd_vel``。这样，在我们的 ``turtlesim2`` 模拟世界中的 ``turtle1`` 将跟随我们初始 turtlesim 世界中的 ``turtle2``。@{"calib_text": " `[5546] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5546>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:415
msgid "7 Config files"
msgstr "7 配置文件@{"calib_text": " `[5547] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5547>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:417
msgid "Let's now create a file called ``turtlesim_rviz.launch.py``."
msgstr "现在让我们创建一个名为 ``turtlesim_rviz.launch.py`` 的文件。@{"calib_text": " `[5548] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5548>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:445
msgid "This launch file will start the RViz with the configuration file defined in the ``turtle_tf2_py`` package. This RViz configuration will set the world frame, enable TF visualization, and start RViz with a top-down view."
msgstr "这个启动文件将使用 ``turtle_tf2_py`` 包中定义的配置文件启动 RViz。这个 RViz 配置将设置世界坐标系，启用 TF 可视化，并以俯视图启动 RViz。@{"calib_text": " `[5549] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5549>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:449
msgid "8 Environment Variables"
msgstr "8 环境变量@{"calib_text": " `[5550] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5550>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:451
msgid "Let's now create the last launch file called ``fixed_broadcaster.launch.py`` in our package."
msgstr "现在我们来创建最后一个启动文件，名为``fixed_broadcaster.launch.py``，放在我们的包中。@{"calib_text": " `[5551] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5551>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:475
msgid "This launch file shows the way environment variables can be called inside the launch files. Environment variables can be used to define or push namespaces for distinguishing nodes on different computers or robots."
msgstr "该启动文件展示了在启动文件中如何调用环境变量。环境变量可用于定义或推送命名空间，以区分不同计算机或机器人上的节点。@{"calib_text": " `[5552] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5552>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:479
msgid "Running launch files"
msgstr "运行启动文件@{"calib_text": " `[5553] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5553>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:482
msgid "1 Update setup.py"
msgstr "1 更新 setup.py@{"calib_text": " `[5554] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5554>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:484
msgid "Open ``setup.py`` and add the following lines so that the launch files from the ``launch/`` folder and configuration file from the ``config/`` would be installed. The ``data_files`` field should now look like this:"
msgstr "打开``setup.py``并添加以下行，以便安装``launch/``文件夹中的启动文件和``config/``中的配置文件。``data_files``字段现在应该如下所示：@{"calib_text": " `[5555] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5555>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:500
msgid "To finally see the result of our code, build the package and launch the top-level launch file using the following command:"
msgstr "为了最终看到我们代码的结果，请使用以下命令构建包并启动顶层启动文件：@{"calib_text": " `[5556] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5556>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:506
msgid "You will now see the two turtlesim simulations started. There are two turtles in the first one and one in the second one. In the first simulation, ``turtle2`` is spawned in the bottom-left part of the world. Its aim is to reach the ``carrot1`` frame which is five meters away on the x-axis relative to the ``turtle1`` frame."
msgstr "现在您将看到两个turtlesim模拟开始运行。第一个模拟中有两只乌龟，第二个模拟中只有一只乌龟。在第一个模拟中，“turtle2”被生成在世界的左下角。它的目标是相对于“turtle1”框架在x轴上距离为五米的“carrot1”框架。@{"calib_text": " `[5557] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5557>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:511
msgid "The ``turtlesim2/turtle1`` in the second is designed to mimic the behavior of the ``turtle2``."
msgstr "第二个模拟中的“turtlesim2/turtle1”被设计成模仿“turtle2”的行为。@{"calib_text": " `[5558] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5558>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:513
msgid "If you want to control the ``turtle1``, run the teleop node."
msgstr "如果您想控制“turtle1”，请运行teleop节点。@{"calib_text": " `[5559] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5559>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:519
msgid "As a result, you will see a similar picture:"
msgstr "结果，您将看到类似的画面：@{"calib_text": " `[5560] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5560>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:523
msgid "In addition to that, the RViz should have started. It will show all turtle frames relative to the ``world`` frame, whose origin is at the bottom-left corner."
msgstr "除此之外，RViz应该已经启动。它将显示所有相对于“world”框架的乌龟框架，其原点位于左下角。@{"calib_text": " `[5561] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5561>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:531
msgid "In this tutorial, you learned about various tips and practices of managing large projects using ROS 2 launch files."
msgstr "在本教程中，您学习了使用ROS 2 launch文件管理大型项目的各种提示和实践。@{"calib_text": " `[5562] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5562>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:7 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:38
msgid "Using substitutions"
msgstr "使用替代项@{"calib_text": " `[5563] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5563>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:9
msgid "**Goal:** Learn about substitutions in ROS 2 launch files."
msgstr "**目标：**了解ROS 2启动文件中的替代项。@{"calib_text": " `[5564] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5564>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:22
msgid "Launch files are used to start nodes, services and execute processes. This set of actions may have arguments, which affect their behavior. Substitutions can be used in arguments to provide more flexibility when describing reusable launch files. Substitutions are variables that are only evaluated during execution of the launch description and can be used to acquire specific information like a launch configuration, an environment variable, or to evaluate an arbitrary Python expression."
msgstr "启动文件用于启动节点、服务和执行进程。这组操作可能有参数，这些参数会影响它们的行为。在参数中可以使用替代项，以提供更多的灵活性，描述可重复使用的启动文件。替代项是仅在启动描述执行期间评估的变量，可以用于获取特定的信息，比如启动配置、环境变量，或者评估任意的Python表达式。@{"calib_text": " `[5565] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5565>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:27
msgid "This tutorial shows usage examples of substitutions in ROS 2 launch files."
msgstr "本教程展示了在ROS 2启动文件中使用替代项的用法示例。@{"calib_text": " `[5566] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5566>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:32
msgid "This tutorial uses the :doc:`turtlesim <../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>` package. This tutorial also assumes you are familiar with :doc:`creating packages <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`."
msgstr "本教程使用了 :doc:`turtlesim <../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>` 包。同时假设你已经熟悉 :doc:`创建包 <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`。@{"calib_text": " `[5567] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5567>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:41
msgid "1 Create and setup the package"
msgstr "1 创建并设置包@{"calib_text": " `[5568] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5568>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:43
msgid "Create a new package of build_type ``ament_python`` called ``launch_tutorial``:"
msgstr "创建一个名为``launch_tutorial``的新构建类型为``ament_python``的软件包：@{"calib_text": " `[5569] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5569>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:49
msgid "Inside of that package, create a directory called ``launch``:"
msgstr "在该软件包中创建一个名为``launch``的目录：@{"calib_text": " `[5570] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5570>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:71
msgid "Finally, make sure to add in changes to the ``setup.py`` of the package so that the launch files will be installed:"
msgstr "最后，确保在软件包的``setup.py``中添加更改，以便安装启动文件：@{"calib_text": " `[5571] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5571>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:92
msgid "2 Parent launch file"
msgstr "2. 父级启动文件@{"calib_text": " `[5572] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5572>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:94
msgid "Let's create a launch file that will call and pass arguments to another launch file. To do this, create an ``example_main.launch.py`` file in the ``launch`` folder of the ``launch_tutorial`` package."
msgstr "让我们创建一个启动文件，调用并传递参数给另一个启动文件。为此，在``launch_tutorial``软件包的``launch``文件夹中创建一个名为``example_main.launch.py``的文件。@{"calib_text": " `[5573] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5573>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:130
msgid "In the ``example_main.launch.py`` file, the ``FindPackageShare`` substitution is used to find the path to the ``launch_tutorial`` package. The ``PathJoinSubstitution`` substitution is then used to join the path to that package path with the ``example_substitutions.launch.py`` file name."
msgstr "在``example_main.launch.py``文件中，使用``FindPackageShare``替代找到``launch_tutorial``软件包的路径。然后，使用``PathJoinSubstitution``替代将该软件包路径与``example_substitutions.launch.py``文件名连接起来。@{"calib_text": " `[5574] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5574>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:141
msgid "The ``launch_arguments`` dictionary with ``turtlesim_ns`` and ``use_provided_red`` arguments is passed to the ``IncludeLaunchDescription`` action. The ``TextSubstitution`` substitution is used to define the ``new_background_r`` argument with the value of the ``background_r`` key in the ``colors`` dictionary."
msgstr "将具有 ``turtlesim_ns`` 和 ``use_provided_red`` 参数的 ``launch_arguments`` 字典传递给 ``IncludeLaunchDescription`` 动作。使用 ``TextSubstitution`` 替代方式来定义具有 ``colors`` 字典中 ``background_r`` 键的值的 ``new_background_r`` 参数。@{"calib_text": " `[5575] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5575>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:153
msgid "3 Substitutions example launch file"
msgstr "3个替代方式示例的启动文件@{"calib_text": " `[5576] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5576>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:155
msgid "Now create an ``example_substitutions.launch.py`` file in the same folder."
msgstr "现在在相同文件夹中创建一个名为 ``example_substitutions.launch.py`` 的文件。@{"calib_text": " `[5577] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5577>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:241
msgid "In the ``example_substitutions.launch.py`` file, ``turtlesim_ns``, ``use_provided_red``, and ``new_background_r`` launch configurations are defined. They are used to store values of launch arguments in the above variables and to pass them to required actions. These ``LaunchConfiguration`` substitutions allow us to acquire the value of the launch argument in any part of the launch description."
msgstr "在 ``example_substitutions.launch.py`` 文件中，定义了 ``turtlesim_ns``、``use_provided_red`` 和 ``new_background_r`` 的启动配置。它们用于在上述变量中存储启动参数的值，并将其传递给所需的动作。这些 ``LaunchConfiguration`` 替代方式允许我们在启动描述的任何部分中获取启动参数的值。@{"calib_text": " `[5578] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5578>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:245
msgid "``DeclareLaunchArgument`` is used to define the launch argument that can be passed from the above launch file or from the console."
msgstr "使用 ``DeclareLaunchArgument`` 定义可以从上述启动文件或控制台传递的启动参数。@{"calib_text": " `[5579] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5579>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:266
msgid "The ``turtlesim_node`` node with the ``namespace`` set to ``turtlesim_ns`` ``LaunchConfiguration`` substitution is defined."
msgstr "定义了具有 ``namespace`` 设置为 ``turtlesim_ns`` 的 ``turtlesim_node`` 节点，并使用 ``LaunchConfiguration`` 替代方式。@{"calib_text": " `[5580] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5580>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:277
msgid "Afterwards, the ``ExecuteProcess`` action called ``spawn_turtle`` is defined with the corresponding ``cmd`` argument. This command makes a call to the spawn service of the turtlesim node."
msgstr "之后，定义了``ExecuteProcess``动作``spawn_turtle``，并提供相应的``cmd``参数。此命令调用了turtlesim节点的spawn服务。@{"calib_text": " `[5581] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5581>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:280
msgid "Additionally, the ``LaunchConfiguration`` substitution is used to get the value of the ``turtlesim_ns`` launch argument to construct a command string."
msgstr "此外，使用``LaunchConfiguration``替代方式获取``turtlesim_ns``启动参数的值，以构建命令字符串。@{"calib_text": " `[5582] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5582>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:295
msgid "The same approach is used for the ``change_background_r`` and ``change_background_r_conditioned`` actions that change the turtlesim background's red color parameter. The difference is that the ``change_background_r_conditioned`` action is only executed if the provided ``new_background_r`` argument equals ``200`` and the ``use_provided_red`` launch argument is set to ``True``. The evaluation inside the ``IfCondition`` is done using the ``PythonExpression`` substitution."
msgstr "同样的方法被用于更改turtlesim背景红色参数的``change_background_r``和``change_background_r_conditioned``动作。区别在于，只有当提供的``new_background_r``参数等于``200``并且``use_provided_red``启动参数设置为``True``时，才会执行``change_background_r_conditioned``动作。在``IfCondition``内部的评估使用``PythonExpression``替代方式完成。@{"calib_text": " `[5583] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5583>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:329
msgid "4 Build the package"
msgstr "4 构建软件包@{"calib_text": " `[5584] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5584>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:342
msgid "Now you can launch the ``example_main.launch.py`` file using the ``ros2 launch`` command."
msgstr "现在可以使用``ros2 launch``命令启动``example_main.launch.py``文件。@{"calib_text": " `[5585] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5585>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:356
msgid "Modifying launch arguments"
msgstr "修改启动参数@{"calib_text": " `[5586] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5586>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:358
msgid "If you want to change the provided launch arguments, you can either update them in ``launch_arguments`` dictionary in the ``example_main.launch.py`` or launch the ``example_substitutions.launch.py`` with preferred arguments. To see arguments that may be given to the launch file, run the following command:"
msgstr "如果您想要更改提供的启动参数，您可以在``example_main.launch.py``中的``launch_arguments``字典中更新它们，或者使用首选参数启动``example_substitutions.launch.py``。要查看可能提供给启动文件的参数，请运行以下命令：@{"calib_text": " `[5587] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5587>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:365
msgid "This will show the arguments that may be given to the launch file and their default values."
msgstr "这将显示可能提供给启动文件的参数及其默认值。@{"calib_text": " `[5588] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5588>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:383
msgid "Now you can pass the desired arguments to the launch file as follows:"
msgstr "现在，您可以按以下方式传递所需的参数给启动文件：@{"calib_text": " `[5589] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5589>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:393
msgid "`The launch documentation <https://github.com/ros2/launch/blob/humble/launch/doc/source/architecture.rst>`_ provides detailed information about available substitutions."
msgstr "``The launch documentation <https://github.com/ros2/launch/blob/humble/launch/doc/source/architecture.rst>`_ 提供了有关可用替换的详细信息。@{"calib_text": " `[5590] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5590>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:398
msgid "In this tutorial, you learned about using substitutions in launch files. You learned about their possibilities and capabilities to create reusable launch files."
msgstr "在本教程中，您了解了如何在启动文件中使用替换。您了解了它们的可能性和能力，以创建可重用的启动文件。@{"calib_text": " `[5591] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5591>`_ "}@"


#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:401
msgid "You can now learn more about :doc:`using event handlers in launch files <./Using-Event-Handlers>` which are used to define a complex set of rules which can be used to dynamically modify the launch file."
msgstr "您现在可以了解更多关于 :doc:`在启动文件中使用事件处理程序 <./Using-Event-Handlers>` 的信息，它们用于定义一组复杂的规则，可用于动态修改启动文件。@{"calib_text": " `[5592] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5592>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:6
msgid "Monitoring for parameter changes (C++)"
msgstr "监视参数变化（C++）@{"calib_text": " `[5593] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5593>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:8
msgid "**Goal:** Learn to use the ParameterEventHandler class to monitor and respond to parameter changes."
msgstr "**目标：**学习使用ParameterEventHandler类监视并响应参数变化。@{"calib_text": " `[5594] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5594>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:14
msgid "**Minimum Platform:** Galactic"
msgstr "**最低平台要求：**Galactic@{"calib_text": " `[5595] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5595>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:23
msgid "Often a node needs to respond to changes to its own parameters or another node's parameters. The ParameterEventHandler class makes it easy to listen for parameter changes so that your code can respond to them. This tutorial will show you how to use the C++ version of the ParameterEventHandler class to monitor for changes to a node's own parameters as well as changes to another node's parameters."
msgstr "通常节点需要对自己的参数或其他节点的参数变化做出响应。ParameterEventHandler类使得监听参数变化并响应变得容易。本教程将展示如何使用C++版本的ParameterEventHandler类来监视节点自身参数的变化以及其他节点的参数变化。@{"calib_text": " `[5596] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5596>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:30
msgid "Before starting this tutorial, you should first complete the following tutorials:"
msgstr "在开始本教程之前，您应该先完成以下教程：@{"calib_text": " `[5597] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5597>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:32
msgid ":doc:`../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters`"
msgstr ":doc:`../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters`@{"calib_text": " `[5598] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5598>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:33
msgid ":doc:`../Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP`"
msgstr ":doc:`../Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP`@{"calib_text": " `[5599] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5599>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:35
msgid "In addition, you must be running the Galactic distribution of ROS 2."
msgstr "另外，您必须使用 ROS 2 的 Galactic 版本。@{"calib_text": " `[5600] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5600>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:40
msgid "In this tutorial, you will create a new package to contain some sample code, write some C++ code to use the ParameterEventHandler class, and test the resulting code."
msgstr "在本教程中，您将创建一个新的包以包含一些示例代码，编写一些 C++ 代码来使用 ParameterEventHandler 类，并测试生成的代码。@{"calib_text": " `[5601] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5601>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:46
msgid "First, open a new terminal and :doc:`source your ROS 2 installation <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` so that ``ros2`` commands will work."
msgstr "首先，打开一个新的终端并 :doc:`source your ROS 2 installation <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` 以便 ``ros2`` 命令能够正常工作。@{"calib_text": " `[5602] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5602>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:50
msgid "Recall that packages should be created in the ``src`` directory, not the root of the workspace. So, navigate into ``ros2_ws/src`` and then create a new package there:"
msgstr "请记住，包应该创建在 ``src`` 目录中，而不是工作空间的根目录。因此，进入 ``ros2_ws/src``，然后在那里创建一个新的包：@{"calib_text": " `[5603] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5603>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:57
msgid "Your terminal will return a message verifying the creation of your package ``cpp_parameter_event_handler`` and all its necessary files and folders."
msgstr "您的终端将返回一个消息，验证您的包 ``cpp_parameter_event_handler`` 及其所有必要的文件和文件夹的创建。@{"calib_text": " `[5604] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5604>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:64
msgid "Because you used the ``--dependencies`` option during package creation, you don’t have to manually add dependencies to ``package.xml`` or ``CMakeLists.txt``. As always, though, make sure to add the description, maintainer email and name, and license information to ``package.xml``."
msgstr "因为您在创建软件包时使用了``--dependencies``选项，所以您不需要手动将依赖项添加到``package.xml``或``CMakeLists.txt``中。不过，您仍需确保将描述、维护者电子邮件和姓名以及许可信息添加到``package.xml``中。@{"calib_text": " `[5605] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5605>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:76
msgid "Inside the ``ros2_ws/src/cpp_parameter_event_handler/src`` directory, create a new file called ``parameter_event_handler.cpp`` and paste the following code within:"
msgstr "在``ros2_ws/src/cpp_parameter_event_handler/src``目录中创建一个名为``parameter_event_handler.cpp``的新文件，并将以下代码粘贴其中：@{"calib_text": " `[5606] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5606>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:123
msgid "The first statement, ``#include <memory>`` is included so that the code can utilize the std::make_shared template. The next, ``#include \"rclcpp/rclcpp.hpp\"`` is included to allow the code to reference the various functionality provided by the rclcpp interface, including the ParameterEventHandler class."
msgstr "第一条语句``#include <memory>``是为了让代码可以利用std::make_shared模板。接下来的``#include \"rclcpp/rclcpp.hpp\"``是为了让代码可以引用rclcpp接口提供的各种功能，包括ParameterEventHandler类。@{"calib_text": " `[5607] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5607>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:126
msgid "After the class declaration, the code defines a class, ``SampleNodeWithParameters``. The constructor for the class declares an integer parameter ``an_int_param``, with a default value of 0. Next, the code creates a ``ParameterEventHandler`` that will be used to monitor changes to parameters. Finally, the code creates a lambda function and sets it as the callback to invoke whenever ``an_int_param`` is updated."
msgstr "在类声明之后，代码定义了一个名为``SampleNodeWithParameters``的类。该类的构造函数声明了一个整型参数``an_int_param``，默认值为0。接下来，代码创建了一个将用于监视参数变化的``ParameterEventHandler``。最后，代码创建了一个lambda函数，并将其设置为在``an_int_param``更新时调用的回调函数。@{"calib_text": " `[5608] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5608>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:133
msgid "It is very important to save the handle that is returned by ``add_parameter_callback``; otherwise, the callback will not be properly registered."
msgstr "非常重要的一点是要保存``add_parameter_callback``返回的句柄；否则，回调函数将无法正确注册。@{"calib_text": " `[5609] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5609>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:157
msgid "Following the ``SampleNodeWithParameters`` is a typical ``main`` function which initializes ROS, spins the sample node so that it can send and receive messages, and then shuts down after the user enters ^C at the console."
msgstr "在``SampleNodeWithParameters``之后是一个典型的``main``函数，它初始化ROS，使示例节点能够发送和接收消息，然后在用户在控制台输入^C后关闭。@{"calib_text": " `[5610] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5610>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:174
msgid "To build this code, first open the ``CMakeLists.txt`` file and add the following lines of code below the dependency ``find_package(rclcpp REQUIRED)``"
msgstr "要构建此代码，首先打开``CMakeLists.txt``文件，并在依赖项``find_package(rclcpp REQUIRED)``下添加以下代码行@{"calib_text": " `[5611] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5611>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:241
msgid "The node is now active and has a single parameter and will print a message whenever this parameter is updated. To test this, open up another terminal and source the ROS setup file as before (. install/setup.bash) and execute the following command:"
msgstr "该节点现已激活并具有一个参数，每当更新该参数时，它将打印一条消息。要进行测试，打开另一个终端并像以前一样设置ROS环境（``. install/setup.bash``），然后执行以下命令：@{"calib_text": " `[5612] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5612>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:248
msgid "The terminal running the node will display a message similar to the following:"
msgstr "运行节点的终端将显示类似以下内容的消息：@{"calib_text": " `[5613] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5613>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:254
msgid "The callback we set previously in the node has been invoked and has displayed the new updated value. You can now terminate the running parameter_event_handler sample using ^C in the terminal."
msgstr "我们之前在节点中设置的回调函数已被调用，并显示了新的更新值。现在，您可以使用终端中的``^C``终止运行的``parameter_event_handler``示例。@{"calib_text": " `[5614] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5614>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:258
msgid "3.1 Monitor changes to another node's parameters"
msgstr "3.1 监视另一个节点的参数变化@{"calib_text": " `[5615] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5615>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:260
msgid "You can also use the ParameterEventHandler to monitor parameter changes to another node's parameters. Let's update the SampleNodeWithParameters class to also monitor for changes to a parameter in another node. We will use the parameter_blackboard demo application to host a double parameter that we will monitor for updates."
msgstr "您还可以使用``ParameterEventHandler``来监视另一个节点的参数变化。让我们更新``SampleNodeWithParameters``类，以便还监视另一个节点的参数更改。我们将使用``parameter_blackboard``演示应用程序来托管一个双精度参数，并监视其更新。@{"calib_text": " `[5616] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5616>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:264
msgid "First update the constructor to add the following code after the existing code:"
msgstr "首先在构造函数中添加以下代码，放在现有代码之后: @{"calib_text": " `[5617] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5617>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:282
msgid "Then add another member variable, ``cb_handle2`` for the additional callback handle:"
msgstr "然后添加另一个成员变量，``cb_handle2``，用于额外的回调句柄: @{"calib_text": " `[5618] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5618>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:293
msgid "In a terminal, navigate back to the root of your workspace, ``ros2_ws``, and build your updated package as before:"
msgstr "在终端中，返回到工作空间根目录``ros2_ws``，并像以前一样构建更新的软件包: @{"calib_text": " `[5619] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5619>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:299
msgid "Then source the setup files:"
msgstr "然后加载设置文件: @{"calib_text": " `[5620] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5620>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:321
msgid "Now, to test monitoring of remote parameters, first run the newly-built parameter_event_handler code:"
msgstr "现在，为了测试远程参数的监视功能，首先运行新构建的 parameter_event_handler 代码: @{"calib_text": " `[5621] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5621>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:327
msgid "Next, from another teminal (with ROS initialized), run the parameter_blackboard demo application, as follows:"
msgstr "接下来，在另一个已初始化 ROS 的终端中，运行 parameter_blackboard 演示应用程序，如下所示: @{"calib_text": " `[5622] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5622>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:333
msgid "Finally, from a third terminal (with ROS initialized), let's set a parameter on the parameter_blackboard node:"
msgstr "最后，在第三个终端（已初始化ROS），让我们在parameter_blackboard节点上设置一个参数：@{"calib_text": " `[5623] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5623>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:339
msgid "Upon executing this command, you should see output in the parameter_event_handler window, indicating that the callback function was invoked upon the parameter update:"
msgstr "执行此命令后，你应该在parameter_event_handler窗口中看到输出，表示在参数更新时调用了回调函数：@{"calib_text": " `[5624] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5624>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:348
msgid "You created a node with a parameter and used the ParameterEventHandler class to set a callback to monitor changes to that parameter. You also used the same class to monitor changes to a remote node. The ParameterEventHandler is a convenient way to monitor for parameter changes so that you can then respond to the updated values."
msgstr "你创建了一个带有参数的节点，并使用ParameterEventHandler类设置了一个回调函数来监控该参数的变化。你还使用相同的类监控了远程节点的变化。ParameterEventHandler是一种方便的方法，用于监控参数的变化，以便你可以对更新的值做出响应。@{"calib_text": " `[5625] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5625>`_ "}@"


#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:355
msgid "To learn how to adapt ROS 1 parameter files for ROS 2, see the :doc:`Migrating YAML parameter files from ROS 1 to ROS2 <../../How-To-Guides/Parameters-YAML-files-migration-guide>` tutorial."
msgstr "要了解如何将ROS 1参数文件适应ROS 2，请参阅：:doc:`从ROS 1迁移YAML参数文件到ROS 2的教程 <../../How-To-Guides/Parameters-YAML-files-migration-guide>`。@{"calib_text": " `[5626] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5626>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:8
msgid "Managing Dependencies with rosdep"
msgstr "使用rosdep管理依赖关系@{"calib_text": " `[5627] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5627>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:10
msgid "**Goal:** Manage external dependencies using ``rosdep``."
msgstr "**目标：** 使用``rosdep``管理外部依赖项。@{"calib_text": " `[5628] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5628>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:20
msgid "Author: Steve Macenski"
msgstr "作者：Steve Macenski@{"calib_text": " `[5629] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5629>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:22
msgid "This tutorial will explain how to manage external dependencies using ``rosdep``."
msgstr "本教程将解释如何使用``rosdep``管理外部依赖项。@{"calib_text": " `[5630] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5630>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:25
msgid "What is rosdep?"
msgstr "什么是rosdep？@{"calib_text": " `[5631] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5631>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:27
msgid "``rosdep`` is ROS's dependency management utility that can work with ROS packages and external libraries. ``rosdep`` is a command-line utility for identifying and installing dependencies to build or install a package. It can be or is invoked when:"
msgstr "``rosdep``是ROS的依赖项管理工具，可与ROS软件包和外部库一起使用。``rosdep``是一个命令行实用程序，用于识别和安装构建或安装软件包所需的依赖项。在以下情况下可以调用它：@{"calib_text": " `[5632] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5632>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:31
msgid "Building a workspace and needing appropriate dependencies to build the packages within"
msgstr "构建工作空间并需要适当的依赖项来构建其中的软件包时@{"calib_text": " `[5633] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5633>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:32
msgid "Install packages (e.g. ``sudo apt install ros-humble-demo-nodes-cpp``) to check the dependencies needed for it to execute"
msgstr "安装软件包（例如``sudo apt install ros-humble-demo-nodes-cpp``）以检查执行所需的依赖项@{"calib_text": " `[5634] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5634>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:33
msgid "and more!"
msgstr "及更多！@{"calib_text": " `[5635] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5635>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:35
msgid "It has the ability to work over a single package or over a directory of packages (e.g. workspace)."
msgstr "它具有在单个软件包或软件包目录（例如工作空间）上工作的能力。@{"calib_text": " `[5636] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5636>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:38
msgid "A little about package.xml files"
msgstr "关于 package.xml 文件的一点说明@{"calib_text": " `[5637] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5637>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:40
msgid "A package's ``package.xml`` file contains a set of dependencies. The dependencies in this file are generally referred to as \"rosdep keys\". These are represented in the tags ``<depend>``, ``<test_depend>``, ``<exec_depend>``, ``<build_depend>``, and ``<build_export_depend>``. They specify in what situation each of the dependencies are required in."
msgstr "软件包的 ``package.xml`` 文件包含一组依赖项。该文件中的依赖项通常被称为“rosdep键”。它们在标签 ``<depend>``, ``<test_depend>``, ``<exec_depend>``, ``<build_depend>`` 和 ``<build_export_depend>`` 中表示。它们指定了每个依赖项在什么情况下是必需的。@{"calib_text": " `[5638] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5638>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:45
msgid "For dependencies only used in testing the code (e.g. ``gtest``), use ``test_depend``."
msgstr "对于仅在代码测试中使用的依赖项（例如 ``gtest``），请使用 ``test_depend``。@{"calib_text": " `[5639] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5639>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:46
msgid "For dependencies only used in building the code, use ``build_depend``."
msgstr "对于仅在代码构建中使用的依赖项，请使用 ``build_depend``。@{"calib_text": " `[5640] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5640>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:47
msgid "For dependencies needed by headers the code exports, use ``build_export_depend``."
msgstr "对于代码导出所需的头文件依赖项，请使用``build_export_depend``。@{"calib_text": " `[5641] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5641>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:48
msgid "For dependencies only used when running the code, use ``exec_depend``."
msgstr "对于仅在运行代码时使用的依赖项，请使用``exec_depend``。@{"calib_text": " `[5642] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5642>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:49
msgid "For mixed purposes, use ``depend``, which covers build, export, and execution time dependencies."
msgstr "对于混合用途，请使用``depend``，它包括构建、导出和执行时的依赖项。@{"calib_text": " `[5643] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5643>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:51
msgid "These dependencies are manually populated in the ``package.xml`` file by the package's creators and should be an exhaustive list of any non-builtin libraries and packages it requires."
msgstr "这些依赖项由软件包的创建者在``package.xml``文件中手动填充，应该是所需的任何非内置库和软件包的详尽列表。@{"calib_text": " `[5644] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5644>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:54
msgid "How does rosdep work?"
msgstr "``rosdep``是如何工作的？@{"calib_text": " `[5645] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5645>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:56
msgid "``rosdep`` will check for ``package.xml`` files in its path or for a specific package and find the rosdep keys stored within. These keys are then cross-referenced against a central index to find the appropriate ROS package or software library in various package managers. Finally, once the packages are found, they are installed and ready to go!"
msgstr "``rosdep``将在其路径或特定软件包中检查``package.xml``文件，并查找其中存储的rosdep键。然后，这些键将与中央索引进行交叉引用，以在各种软件包管理器中找到适当的ROS软件包或软件库。最后，一旦找到这些软件包，它们将被安装并准备就绪！@{"calib_text": " `[5646] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5646>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:60
msgid "The central index is known as ``rosdistro``, which `may be found here <https://github.com/ros/rosdistro>`_. We'll explore that more in the next section."
msgstr "中心索引被称为``rosdistro``，可以在此处找到：<https://github.com/ros/rosdistro>。我们将在下一节中更详细地探讨这个问题。@{"calib_text": " `[5647] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5647>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:64
msgid "How do I know what keys to put in my package.xml?"
msgstr "我怎么知道要在我的``package.xml``文件中放入哪些键呢？@{"calib_text": " `[5648] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5648>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:66
msgid "Great question, I'm glad you asked!"
msgstr "很好的问题，我很高兴你问了！@{"calib_text": " `[5649] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5649>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:68
msgid "For ROS packages (e.g. ``nav2_bt_navigator``), you may simply place the name of the package. You can find a list of all released ROS packages in ``rosdistro`` at ``<distro>/distribution.yaml`` for your given ROS distribution."
msgstr "对于ROS包（例如``nav2_bt_navigator``），你可以直接放置包的名称。你可以在给定的ROS发行版的``rosdistro``中的``<distro>/distribution.yaml``中找到所有已发布的ROS包的列表。@{"calib_text": " `[5650] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5650>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:71
msgid "For non-ROS package system dependencies, we will need to find the keys for a particular library. In general, there are two files of interest: ``rosdep/base.yaml`` and ``rosdep/python.yaml``. ``base.yaml`` in general contains the ``apt`` system dependencies. ``python.yaml`` in general contains the ``pip`` python dependencies."
msgstr "对于非ROS包系统依赖，我们需要找到特定库的键。一般来说，有两个感兴趣的文件：``rosdep/base.yaml``和``rosdep/python.yaml``。``base.yaml``通常包含``apt``系统依赖项。``python.yaml``通常包含``pip``的Python依赖项。@{"calib_text": " `[5651] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5651>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:76
msgid "To find a key, search for your library in this file and find the name in ``yaml`` that contains it. This is the key to put in a ``package.xml`` file."
msgstr "要找到一个键，在文件中搜索你的库，并找到包含它的``yaml``中的名称。这就是要放在``package.xml``文件中的键。@{"calib_text": " `[5652] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5652>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:79
msgid "For example, imagine a package had a dependency on ``doxygen`` because it is a great piece of software that cares about quality documentation (hint hint). We would search ``base.yaml`` for ``doxygen`` and come across:"
msgstr "例如，假设一个软件包依赖于``doxygen``，因为它是一款关注文档质量的优秀软件（暗示暗示）。我们会在``base.yaml``中搜索``doxygen``，然后找到如下内容：@{"calib_text": " `[5653] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5653>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:97
msgid "That means our rosdep key is ``doxygen``, which would resolve to those various names in different operating system's package managers for installation."
msgstr "这意味着我们的rosdep键是``doxygen``，在不同操作系统的软件包管理器中，它会解析为不同的名称进行安装。@{"calib_text": " `[5654] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5654>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:100
msgid "What if my library isn't in rosdistro?"
msgstr "如果我的库不在rosdistro中怎么办？@{"calib_text": " `[5655] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5655>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:102
msgid "If your library isn't in ``rosdistro``, you can experience the greatness that is open-source software development: you can add it yourself! Pull requests for rosdistro are typically merged well within a week."
msgstr "如果你的库不在``rosdistro``中，你可以体验开源软件开发的伟大之处：你可以自己添加！通常，针对rosdistro的拉取请求在一周内就会合并。@{"calib_text": " `[5656] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5656>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:105
msgid "`Detailed instructions may be found here <https://github.com/ros/rosdistro/blob/master/CONTRIBUTING.md#rosdep-rules-contributions>`_ for how to contribute new rosdep keys. If for some reason these may not be contributed openly, it is possible to fork rosdistro and maintain a alternate index for use."
msgstr "关于如何贡献新的rosdep键，可以在此处找到详细说明：<https://github.com/ros/rosdistro/blob/master/CONTRIBUTING.md#rosdep-rules-contributions>。如果由于某些原因无法公开贡献，也可以fork rosdistro并维护一个备用索引供使用。@{"calib_text": " `[5657] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5657>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:110
msgid "How do I use the rosdep tool?"
msgstr "如何使用rosdep工具？@{"calib_text": " `[5658] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5658>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:112
msgid "Now that we have some understanding of ``rosdep``, ``package.xml``, and ``rosdistro``, we're ready to use the utility itself! Firstly, if this is the first time using ``rosdep``, it must be initialized via:"
msgstr "现在我们对``rosdep``、``package.xml``和``rosdistro``有了一些了解，我们准备好使用这个工具了！首先，如果这是第一次使用``rosdep``，必须通过以下命令进行初始化：@{"calib_text": " `[5659] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5659>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:120
msgid "This will initialize rosdep and ``update`` will update the locally cached rosdistro index. It is a good idea to ``update`` rosdep on occasion to get the latest index."
msgstr "这将初始化``rosdep``，``update``将更新本地缓存的``rosdistro``索引。定期执行``update``命令以获取最新的索引是一个好主意。@{"calib_text": " `[5660] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5660>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:123
msgid "Finally, we can run ``rosdep install`` to install dependencies. Typically, this is run over a workspace with many packages in a single call to install all dependencies. A call for that would appear as the following, if in the root of the workspace with directory ``src`` containing source code."
msgstr "最后，我们可以运行``rosdep install``来安装依赖项。通常，我们会在一个工作空间上运行此命令，通过单个调用安装所有依赖项。如果在包含源代码的``src``目录下的工作空间根目录运行该命令，命令如下所示：@{"calib_text": " `[5661] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5661>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:131
msgid "Breaking that down:"
msgstr "对此进行解释：@{"calib_text": " `[5662] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5662>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:133
msgid "``--from-paths src`` specifies the path to check for ``package.xml`` files to resolve keys for"
msgstr "``--from-paths src``指定要检查以解析键的``package.xml``文件的路径@{"calib_text": " `[5663] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5663>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:134
msgid "``-y`` means to default yes to all prompts from the package manager to install without prompts"
msgstr "``-y``表示在包管理器的提示中默认全部回答为“是”，无需提示即可安装@{"calib_text": " `[5664] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5664>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:135
msgid "``--ignore-src`` means to ignore installing dependencies, even if a rosdep key exists, if the package itself is also in the workspace."
msgstr "``--ignore-src`` 表示忽略安装依赖项，即使存在 rosdep 键，也会忽略，如果包本身也在工作空间中。@{"calib_text": " `[5665] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5665>`_ "}@"


#: ../../source/Tutorials/Intermediate/Rosdep.rst:137
msgid "There are additional arguments and options available. Use ``rosdep -h`` to see them."
msgstr "还有其他可用的参数和选项。使用 ``rosdep -h`` 查看它们。@{"calib_text": " `[5666] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5666>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:4
msgid "Running Tests in ROS 2 from the Command Line"
msgstr "从命令行中运行 ROS 2 中的测试@{"calib_text": " `[5667] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5667>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:7
msgid "Build and run your tests"
msgstr "构建并运行你的测试@{"calib_text": " `[5668] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5668>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:9
msgid "To compile and run the tests, simply run the `test <https://colcon.readthedocs.io/en/released/reference/verb/test.html>`__ verb from ``colcon``."
msgstr "要编译并运行测试，只需从 ``colcon`` 中运行 `test <https://colcon.readthedocs.io/en/released/reference/verb/test.html>`__ 命令。@{"calib_text": " `[5669] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5669>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:15
msgid "(where ``package_selection_args`` are optional package selection arguments for ``colcon`` to limit which packages are built and run)"
msgstr "（其中 ``package_selection_args`` 是可选的用于 ``colcon`` 的包选择参数，用于限制构建和运行哪些包）@{"calib_text": " `[5670] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5670>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:17
msgid ":ref:`Sourcing the workspace <colcon-tutorial-source-the-environment>` before testing should not be necessary. ``colcon test`` makes sure that the tests run with the right environment, have access to their dependencies, etc."
msgstr ":ref:`在测试之前引用工作空间 <colcon-tutorial-source-the-environment>` 应该是不必要的。 ``colcon test`` 会确保测试在正确的环境中运行，并且可以访问它们的依赖项等。@{"calib_text": " `[5671] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5671>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:21
msgid "Examine Test Results"
msgstr "检查测试结果@{"calib_text": " `[5672] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5672>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:23
msgid "To see the results, simply run the `test-result <https://colcon.readthedocs.io/en/released/reference/verb/test-result.html>`__ verb from ``colcon``."
msgstr "要查看结果，只需从 ``colcon`` 运行 `test-result <https://colcon.readthedocs.io/en/released/reference/verb/test-result.html>`__ 命令。@{"calib_text": " `[5673] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5673>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:29
msgid "To see the exact test cases which fail, use the ``--verbose`` flag:"
msgstr "要查看确切失败的测试用例，使用 ``--verbose`` 标志：@{"calib_text": " `[5674] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5674>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:4
msgid "Writing Basic Tests with C++ with GTest"
msgstr "使用 GTest 编写基本的 C++ 测试@{"calib_text": " `[5675] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5675>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:6
msgid "Starting point: we'll assume you have a :ref:`basic ament_cmake package<CreatePkg>` set up already and you want to add some tests to it."
msgstr "起点：我们假设您已经设置了一个 :ref:`基本的 ament_cmake 包<CreatePkg>`，并且您想在其中添加一些测试。@{"calib_text": " `[5676] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5676>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:8
msgid "In this tutorial, we'll be using `gtest <https://google.github.io/googletest/primer.html>`__."
msgstr "在本教程中，我们将使用 `gtest <https://google.github.io/googletest/primer.html>`__。@{"calib_text": " `[5677] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5677>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:11 ../../source/Tutorials/Intermediate/Testing/Python.rst:12
msgid "Package Setup"
msgstr "软件包设置@{"calib_text": " `[5678] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5678>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:14
msgid "Source Code"
msgstr "源代码@{"calib_text": " `[5679] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5679>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:15
msgid "We'll start off with our code in a file called ``test/tutorial_test.cpp``"
msgstr "我们将从名为 ``test/tutorial_test.cpp`` 的文件中开始编写代码。@{"calib_text": " `[5680] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5680>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:34
msgid "package.xml"
msgstr "package.xml@{"calib_text": " `[5681] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5681>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:35
msgid "Add the following line to ``package.xml``"
msgstr "将以下行添加到 ``package.xml`` 中@{"calib_text": " `[5682] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5682>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:42
msgid "CMakeLists.txt"
msgstr "CMakeLists.txt@{"calib_text": " `[5683] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5683>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:59
msgid "The testing code is wrapped in the ``if/endif`` block to avoid building tests where possible. ``ament_add_gtest`` functions much like ``add_executable`` so you'll need to call ``target_include_directories``, ``ament_target_dependencies`` and ``target_link_libraries`` as you normally would."
msgstr "测试代码被包含在 ``if/endif`` 块中，以避免在可能的情况下构建测试。``ament_add_gtest`` 的功能与 ``add_executable`` 类似，因此您需要像平常一样调用 ``target_include_directories``、``ament_target_dependencies`` 和 ``target_link_libraries``。@{"calib_text": " `[5684] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5684>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:63 ../../source/Tutorials/Intermediate/Testing/Python.rst:60
msgid "Running Tests"
msgstr "运行测试@{"calib_text": " `[5685] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5685>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:65 ../../source/Tutorials/Intermediate/Testing/Python.rst:62
msgid "See the :doc:`tutorial on how to run tests from the command line <CLI>` for more information on running the tests and inspecting the test results."
msgstr "有关如何从命令行运行测试和检查测试结果的详细信息，请参阅 :doc:`教程<CLI>`。@{"calib_text": " `[5686] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5686>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Python.rst:4
msgid "Writing Basic Tests with Python"
msgstr "使用Python编写基本测试@{"calib_text": " `[5687] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5687>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Python.rst:6
msgid "Starting point: we'll assume you have a :ref:`basic ament_python package<CreatePkg>` set up already and you want to add some tests to it."
msgstr "起点：我们假设您已经设置了一个 :ref:`基本的ament_python包<CreatePkg>`，并且您想为其添加一些测试。@{"calib_text": " `[5688] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5688>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Python.rst:8
msgid "If you are using ament_cmake_python, refer to the the :doc:`ament_cmake_python docs<../../../How-To-Guides/Ament-CMake-Python-Documentation>` for how to make tests dicoverable. The test contents and invocation with ``colcon`` remain the same."
msgstr "如果您使用的是 `ament_cmake_python`，请参考 `ament_cmake_python 文档<../../../How-To-Guides/Ament-CMake-Python-Documentation>` 了解如何使测试可被发现。测试的内容和使用 ``colcon`` 运行测试的方式保持不变。@{"calib_text": " `[5689] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5689>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Python.rst:15
msgid "setup.py"
msgstr "setup.py@{"calib_text": " `[5690] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5690>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Python.rst:17
msgid "Your ``setup.py`` must a test dependency on ``pytest`` within the call to ``setup(...)``:"
msgstr "您的 ``setup.py`` 在调用 ``setup(...)`` 时必须添加对 ``pytest`` 的测试依赖：@{"calib_text": " `[5691] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5691>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Python.rst:24
msgid "Test Files and Folders"
msgstr "测试文件和文件夹@{"calib_text": " `[5692] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5692>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Python.rst:26
msgid "Your test code needs to go in a folder named ``tests`` in the root of your package."
msgstr "您的测试代码需要放在包的根目录下名为 ``tests`` 的文件夹中。@{"calib_text": " `[5693] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5693>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Python.rst:28
msgid "Any file that contains tests that you want to run must have the pattern ``test_FOO.py`` where ``FOO`` can be replaced with anything."
msgstr "任何包含您想要运行的测试的文件必须符合 ``test_FOO.py`` 的模式，其中的 ``FOO`` 可以替换为任何内容。@{"calib_text": " `[5694] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5694>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Python.rst:31
msgid "Example package layout:"
msgstr "示例软件包布局：@{"calib_text": " `[5695] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5695>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Python.rst:49
msgid "Test Contents"
msgstr "测试内容@{"calib_text": " `[5696] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5696>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Python.rst:51
msgid "You can now write tests to your heart's content. There are `plenty of resources on pytest <https://docs.pytest.org>`__, but in short, you can write functions with the ``test_`` prefix and include whatever assert statements you'd like."
msgstr "您现在可以尽情编写测试。pytest <https://docs.pytest.org>`__ 提供了很多资源，简单来说，您可以编写以 ``test_`` 前缀开头的函数，并包含任何您想要的 assert 语句。@{"calib_text": " `[5697] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5697>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Python.rst:65
msgid "Special Commands"
msgstr "特殊命令@{"calib_text": " `[5698] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5698>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Python.rst:67
msgid "Beyond the :doc:`standard colcon testing commands <CLI>` you can also specify arguments to the ``pytest`` framework from the command line with the ``--pytest-args`` flag. For example, you can specify the name of the function to run with"
msgstr "除了 :doc:`标准 colcon 测试命令 <CLI>` 之外，您还可以通过命令行使用 ``--pytest-args`` 标志指定 ``pytest`` 框架的参数。例如，您可以指定要运行的函数的名称：@{"calib_text": " `[5699] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5699>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Python.rst:75
msgid "To see the pytest output while running the tests, use these flags:"
msgstr "要在运行测试时查看 pytest 输出，请使用以下标志：@{"calib_text": " `[5700] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5700>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:4
msgid "Testing"
msgstr "测试@{"calib_text": " `[5701] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5701>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:7
msgid "Why automatic tests?"
msgstr "为什么需要自动化测试？@{"calib_text": " `[5702] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5702>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:9
msgid "Here are some of the many good reasons why should we have automated tests:"
msgstr "以下是为什么我们应该进行自动化测试的许多重要原因：@{"calib_text": " `[5703] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5703>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:11
msgid "You can make incremental updates to your code more quickly. ROS has hundreds of packages with many interdependencies, so it can be hard to anticipate the problems a small change might cause. If your change passes the unit tests, you can be more confident that you haven't introduced problems — or at least the problems aren't your fault."
msgstr "您可以更快地对代码进行增量更新。ROS有数百个包，其中存在许多相互依赖关系，因此很难预测小改动可能引起的问题。如果您的更改通过了单元测试，那么您可以更加自信地认为您没有引入问题——或者至少问题不是您造成的。@{"calib_text": " `[5704] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5704>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:12
msgid "You can refactor your code with greater confidence. Passing the unit tests verifies that you haven't introduced any bugs while refactoring. This gives you this wonderful freedom from change fear!"
msgstr "您可以更有信心地重构代码。通过通过单元测试可以验证在重构过程中是否引入了任何错误。这使您摆脱了对变更的恐惧感！@{"calib_text": " `[5705] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5705>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:13
msgid "It leads to better designed code. Unit tests force you to write your code so that it can be more easily tested. This often means keeping your underlying functions and framework separate, which is one of our design goals with ROS code."
msgstr "它可以导致更好的设计代码。单元测试迫使您编写更易于测试的代码。这通常意味着将底层函数和框架分离，这是我们在ROS代码中的设计目标之一。@{"calib_text": " `[5706] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5706>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:14
msgid "They prevent recurring bugs (bug regressions). It's a good practice to write a unit test for every bug you fix. In fact, write the unit test before you fix the bug. This will help you to precisely, or even deterministically, reproduce the bug, and much more precisely understand what the problem is. As a result, you will also create a better patch, which you can then test with your regression test to verify that the bug is fixed. That way the bug won't accidentally get reintroduced if the code gets modified later on. It also means that it will be easier to convince the reviewer of the patch that the problem is solved, and the contribution is of high quality."
msgstr "它可以防止重现的错误（回归错误）。对于您修复的每个错误，编写单元测试是一种良好的实践。实际上，在修复错误之前编写单元测试。这将帮助您精确地或甚至是确定性地重现错误，并更加准确地理解问题所在。结果，您还将创建一个更好的补丁，然后可以使用回归测试来验证错误是否已修复。这样，如果以后修改了代码，错误就不会被意外重新引入。这还意味着更容易说服补丁的审阅者问题已得到解决，贡献的质量较高。@{"calib_text": " `[5707] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5707>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:15
msgid "Other people can work on your code more easily (an automatic form of documentation). It can be hard to figure out whether or not you've broken someone else's code when you make a change. The unit tests are a tool for other developers to validate their changes. Automatic tests document your coding decisions, and communicate to other developers automatically about their violation. Thus tests become documentation for your code — a documentation that does not need to be read for the most time, and when it does need to be inspected the test system will precisely indicate what to read (which tests fail). By writing automatic tests you make other contributors faster. This improves the entire ROS project."
msgstr "其他人可以更轻松地在你的代码上工作（自动文档的形式）。当你进行更改时，很难弄清楚你是否破坏了其他人的代码。单元测试是其他开发人员验证其更改的工具。自动化测试记录了你的编码决策，并自动向其他开发人员传达了有关违规情况的信息。因此，测试成为你代码的文档-一种无需大部分时间阅读的文档，而当需要检查时，测试系统将准确指示要阅读的内容（哪些测试失败）。通过编写自动化测试，你使其他贡献者更快速。这改进了整个ROS项目。@{"calib_text": " `[5708] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5708>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:16
msgid "It is much easier to become a contributor to ROS if we have automated unit tests. It is very difficult for new external developers to contribute to your components. When they make changes to code, they are often doing it in the blind, driven by a lot of guesswork. By providing a harness of automated tests, you help them in the task. They get immediate feedback for their changes. It becomes easier to contribute to a project, and new contributors to join more easily. Also their first contributions are of higher quality, which decreases the workload on maintainers. A win-win!"
msgstr "如果我们有自动化的单元测试，成为ROS的贡献者将容易得多。对于新的外部开发人员来说，很难为你的组件做出贡献。当他们更改代码时，通常是在盲目操作，靠很多猜测。通过提供一套自动化测试的支持，你可以帮助他们完成任务。他们会立即获得对其更改的反馈。这使得为项目做出贡献变得更容易，新的贡献者也更容易加入。此外，他们的首次贡献质量更高，这减轻了维护者的工作负担。双赢！@{"calib_text": " `[5709] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5709>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:17
msgid "Automatic tests simplify maintainership. Especially for mature packages, which change more slowly, and mostly need to be updated to new dependencies, an automatic test suite helps to very quickly establish whether the package still works. This makes it much easier to decide whether the package is still supported or not."
msgstr "自动化测试简化了维护工作。对于成熟的软件包而言，变化较慢，主要需要更新到新的依赖项，自动化测试套件有助于快速确定软件包是否仍然可用。这使得决定软件包是否仍然受支持变得更容易。@{"calib_text": " `[5710] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5710>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:18
msgid "Automatic tests amplify the value of Continuous Integration. Regression tests, along with normal scenario-based requirements tests, contribute to overall body of automated tests for your component. Your component is better tested against evolution of other APIs that it depends on (CI servers will tell you better and more precisely what problems develop in your code)."
msgstr "自动化测试放大了持续集成的价值。回归测试以及基于常规场景的需求测试一起，为组件的整体自动化测试体系做出了贡献。你的组件在与其所依赖的其他API的演化方面得到了更好的测试（CI服务器将更好、更准确地告知你代码中存在的问题）。@{"calib_text": " `[5711] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5711>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:20
msgid "Perhaps the most important benefit of writing tests is that tests make you a good citizen. Tests influence quality in the long term. It is a well accepted practice in many open-source projects. By writing regressions tests, you are contributing to long term quality of the ROS ecosystem."
msgstr "编写测试的最重要的好处也许是让你成为一个良好的开发者。测试对长期的质量产生影响。这是许多开源项目中被广泛接受的实践。通过编写回归测试，你正在为ROS生态系统的长期质量做出贡献。@{"calib_text": " `[5712] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5712>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:26
msgid "Is this all coming for free?"
msgstr "这一切都是免费的吗？@{"calib_text": " `[5713] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5713>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:28
msgid "Of course, there is never free lunch. To get the benefits of testing, some investment is necessary."
msgstr "当然，天下没有免费的午餐。要享受测试的好处，就需要进行一些投入。@{"calib_text": " `[5714] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5714>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:31
msgid "You need to develop a test, which sometimes may be difficult or costly. Sometimes it might also be nontrivial, as the test should be automatic. Things get particularly hairy if your tests should involve special hardware (they should not: try to use simulation, mock the hardware, or narrow down the test to a smaller software problem) or require external environment, for instance human operators."
msgstr "你需要开发一个测试，有时可能会很困难或昂贵。有时候它也可能不是那么简单，因为测试应该是自动化的。如果你的测试涉及特殊硬件（不应该涉及：尝试使用模拟、模拟硬件或将测试范围缩小到较小的软件问题），或者需要外部环境，例如人工操作员，情况会变得非常复杂。@{"calib_text": " `[5715] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5715>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:32
msgid "Regression tests and other automatic tests need to be maintained. When the design of the component changes, a lot of tests become invalidated (for instance they no longer compile, or throw runtime exceptions related to the API design). These tests fail not only because the redesign re-introduced bugs but also because they need to be updated to the new design. Occasionally, with bigger redesigns, old regression tests should be dropped."
msgstr "回归测试和其他自动化测试需要进行维护。当组件的设计发生变化时，许多测试变得无效（例如，它们不再编译，或者抛出与API设计相关的运行时异常）。这些测试失败不仅因为重新设计引入了错误，还因为它们需要更新到新的设计。偶尔，在进行较大的重新设计时，旧的回归测试应该被删除。@{"calib_text": " `[5716] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5716>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:33
msgid "Large bodies of tests can take a long time to run, which can increase Continuous Integration server costs."
msgstr "大量的测试可能需要很长时间才能运行，这可能会增加持续集成服务器的成本。@{"calib_text": " `[5717] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5717>`_ "}@"


#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:36
msgid "Available Tutorials:"
msgstr "可用的教程：@{"calib_text": " `[5718] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5718>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:8
msgid "Adding a frame (C++)"
msgstr "添加一个框架（C++）@{"calib_text": " `[5719] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5719>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:10 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:10
msgid "**Goal:** Learn how to to add an extra frame to tf2."
msgstr "**目标:** 学习如何在tf2中添加额外的帧。@{"calib_text": " `[5720] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5720>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:23
msgid "In previous tutorials, we recreated the turtle demo by writing a :doc:`tf2 broadcaster <./Writing-A-Tf2-Broadcaster-Cpp>` and a :doc:`tf2 listener <Writing-A-Tf2-Listener-Cpp>`. This tutorial will teach you how to add extra fixed and dynamic frames to the transformation tree. In fact, adding a frame in tf2 is very similar to creating the tf2 broadcaster, but this example will show you some additional features of tf2."
msgstr "在之前的教程中，我们通过编写 :doc:`tf2广播器 <./Writing-A-Tf2-Broadcaster-Cpp>` 和 :doc:`tf2监听器 <Writing-A-Tf2-Listener-Cpp>` 重新创建了乌龟演示。本教程将教你如何向转换树中添加额外的固定帧和动态帧。实际上，添加tf2帧与创建tf2广播器非常相似，但是这个示例将展示tf2的一些附加功能。@{"calib_text": " `[5721] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5721>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:27 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:27
msgid "For many tasks related to transformations, it is easier to think inside a local frame. For example, it is easiest to reason about laser scan measurements in a frame at the center of the laser scanner. tf2 allows you to define a local frame for each sensor, link, or joint in your system. When transforming from one frame to another, tf2 will take care of all the hidden intermediate frame transformations that are introduced."
msgstr "对于与变换相关的许多任务，以本地帧为基础更容易思考。例如，在激光扫描测量中，最容易理解的是以激光扫描仪中心的帧为基准。tf2允许你为系统中的每个传感器、链接或关节定义一个本地帧。在从一个帧转换到另一个帧时，tf2将处理引入的所有隐藏中间帧变换。@{"calib_text": " `[5722] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5722>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:33 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:33
msgid "tf2 tree"
msgstr "tf2树@{"calib_text": " `[5723] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5723>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:35 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:35
msgid "tf2 builds up a tree structure of frames and, thus, does not allow a closed loop in the frame structure. This means that a frame only has one single parent, but it can have multiple children. Currently, our tf2 tree contains three frames: ``world``, ``turtle1`` and ``turtle2``. The two turtle frames are children of the ``world`` frame. If we want to add a new frame to tf2, one of the three existing frames needs to be the parent frame, and the new one will become its child frame."
msgstr "tf2构建了一个帧的树结构，因此不允许帧结构中存在闭环。这意味着一个帧只有一个父帧，但可以有多个子帧。目前，我们的tf2树包含三个帧：``world``、``turtle1`` 和 ``turtle2``。两个乌龟帧是 ``world`` 帧的子帧。如果我们想要在tf2中添加一个新的帧，需要选择三个现有帧中的一个作为父帧，新的帧将成为其子帧。@{"calib_text": " `[5724] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5724>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:47 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:47
msgid "1 Write the fixed frame broadcaster"
msgstr "1. 编写固定帧广播器@{"calib_text": " `[5725] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5725>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:49 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:49
msgid "In our turtle example, we'll add a new frame ``carrot1``, which will be the child of the ``turtle1``. This frame will serve as the goal for the second turtle."
msgstr "在我们的乌龟示例中，我们将添加一个名为“carrot1”的新框架，它将是“turtle1”的子框架。这个框架将作为第二只乌龟的目标。@{"calib_text": " `[5726] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5726>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:52
msgid "Let's first create the source files. Go to the ``learning_tf2_cpp`` package we created in the previous tutorials. Download the fixed frame broadcaster code by entering the following command:"
msgstr "首先创建源文件。转到我们在之前教程中创建的“learning_tf2_cpp”包。通过输入以下命令下载固定框架广播代码：@{"calib_text": " `[5727] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5727>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:83
msgid "Now open the file called ``fixed_frame_tf2_broadcaster.cpp``."
msgstr "现在打开名为“fixed_frame_tf2_broadcaster.cpp”的文件。@{"calib_text": " `[5728] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5728>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:139 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:129
msgid "The code is very similar to the tf2 broadcaster tutorial example and the only difference is that the transform here does not change over time."
msgstr "这段代码与tf2广播器教程示例非常相似，唯一的区别是这里的变换不随时间改变。@{"calib_text": " `[5729] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5729>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:144 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:134
msgid "Let's take a look at the key lines in this piece of code. Here we create a new transform, from the parent ``turtle1`` to the new child ``carrot1``. The ``carrot1`` frame is 2 meters offset in y axis in terms of the ``turtle1`` frame."
msgstr "让我们看一下这段代码中的关键部分。在这里，我们创建了一个新的变换，从父框架“turtle1”到新的子框架“carrot1”。相对于“turtle1”框架，框架“carrot1”在y轴上偏移了2米。@{"calib_text": " `[5730] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5730>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:162 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:451 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:222 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:307 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:249
msgid "Navigate one level back to the ``learning_tf2_cpp`` directory, where the ``CMakeLists.txt`` and ``package.xml`` files are located."
msgstr "导航到“learning_tf2_cpp”目录的上一级，其中包含“CMakeLists.txt”和“package.xml”文件。@{"calib_text": " `[5731] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5731>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:164
msgid "Now open the ``CMakeLists.txt`` add the executable and name it ``fixed_frame_tf2_broadcaster``."
msgstr "现在打开``CMakeLists.txt``文件，添加可执行文件，并将其命名为``fixed_frame_tf2_broadcaster``。@{"calib_text": " `[5732] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5732>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:185 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:162
msgid "1.3 Write the launch file"
msgstr "1.3 编写启动文件@{"calib_text": " `[5733] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5733>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:187
msgid "Now let's create a launch file for this example. With your text editor, create a new file called ``turtle_tf2_fixed_frame_demo.launch.py``, and add the following lines:"
msgstr "现在我们为这个示例创建一个启动文件。使用文本编辑器创建一个名为``turtle_tf2_fixed_frame_demo.launch.py``的新文件，并添加以下行：@{"calib_text": " `[5734] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5734>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:220 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:197
msgid "This launch file imports the required packages and then creates a ``demo_nodes`` variable that will store nodes that we created in the previous tutorial's launch file."
msgstr "该启动文件导入所需的包，然后创建一个``demo_nodes``变量，用于存储我们在上一教程的启动文件中创建的节点。@{"calib_text": " `[5735] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5735>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:222 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:199
msgid "The last part of the code will add our fixed ``carrot1`` frame to the turtlesim world using our ``fixed_frame_tf2_broadcaster`` node."
msgstr "代码的最后一部分将使用我们的``fixed_frame_tf2_broadcaster``节点将固定的``carrot1``帧添加到turtlesim世界中。@{"calib_text": " `[5736] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5736>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:233 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:211 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:272
msgid "1.4 Build"
msgstr "1.4 构建@{"calib_text": " `[5737] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5737>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:235 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:511 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:213 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:467 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:274 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:594 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:336 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:357 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:330 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:283
msgid "Run ``rosdep`` in the root of your workspace to check for missing dependencies."
msgstr "在你的工作空间的根目录中运行 ``rosdep``，以检查缺少的依赖项。@{"calib_text": " `[5738] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5738>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:247 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:251 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:523 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:527 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:225 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:229 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:479 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:483 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:286 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:290 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:606 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:610 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:348 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:352 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:369 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:373 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:342 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:346 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:295 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:299 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:299 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:303 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:318 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:322
msgid "rosdep only runs on Linux, so you will need to install ``geometry_msgs`` and ``turtlesim`` dependencies yourself"
msgstr "``rosdep`` 只能在 Linux 上运行，所以你需要自己安装 ``geometry_msgs`` 和 ``turtlesim`` 依赖项。@{"calib_text": " `[5739] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5739>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:253 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:529 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:354 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:348
msgid "From the root of your workspace, build your updated package:"
msgstr "从你的工作空间的根目录中构建更新的软件包：@{"calib_text": " `[5740] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5740>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:275 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:551 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:253 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:507 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:634 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:376 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:397 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:370 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:323 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:327 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:346
msgid "Open a new terminal, navigate to the root of your workspace, and source the setup files:"
msgstr "打开一个新终端，进入你的工作空间的根目录，并源化设置文件：@{"calib_text": " `[5741] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5741>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:302 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:280 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:534
msgid "1.5 Run"
msgstr "1.5 运行@{"calib_text": " `[5742] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5742>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:304
msgid "Now you can start the turtle broadcaster demo:"
msgstr "现在你可以开始运行海龟广播器演示：@{"calib_text": " `[5743] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5743>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:310 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:288
msgid "You should notice that the new ``carrot1`` frame appeared in the transformation tree."
msgstr "请注意新的 ``carrot1`` 帧已经出现在转换树中。@{"calib_text": " `[5744] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5744>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:314 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:292
msgid "If you drive the first turtle around, you should notice that the behavior didn't change from the previous tutorial, even though we added a new frame. That's because adding an extra frame does not affect the other frames and our listener is still using the previously defined frames."
msgstr "如果你让第一个海龟四处移动，你会注意到行为与上一个教程中没有改变，即使我们添加了一个新的帧。这是因为添加额外的帧不会影响其他帧，我们的监听器仍然使用先前定义的帧。@{"calib_text": " `[5745] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5745>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:317 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:295
msgid "Therefore if we want our second turtle to follow the carrot instead of the first turtle, we need to change value of the ``target_frame``. This can be done two ways. One way is to pass the ``target_frame`` argument to the launch file directly from the console:"
msgstr "因此，如果我们希望第二只海龟跟随胡萝卜而不是第一只海龟，我们需要更改 ``target_frame`` 的值。有两种方法可以做到这一点。一种方法是直接从控制台将 ``target_frame`` 参数传递给启动文件：@{"calib_text": " `[5746] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5746>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:325 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:303
msgid "The second way is to update the launch file. To do so, open the ``turtle_tf2_fixed_frame_demo.launch.py`` file, and add the ``'target_frame': 'carrot1'`` parameter via ``launch_arguments`` argument."
msgstr "第二种方法是更新启动文件。为此，打开 ``turtle_tf2_fixed_frame_demo.launch.py`` 文件，并通过 ``launch_arguments`` 参数添加 ``'target_frame': 'carrot1'`` 参数。@{"calib_text": " `[5747] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5747>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:336
msgid "Now rebuild the package, restart the ``turtle_tf2_fixed_frame_demo.launch.py``, and you'll see the second turtle following the carrot instead of the first turtle!"
msgstr "现在重新构建包，重新启动 ``turtle_tf2_fixed_frame_demo.launch.py``，你将看到第二只海龟跟随胡萝卜而不是第一只海龟！@{"calib_text": " `[5748] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5748>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:341 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:319
msgid "2 Write the dynamic frame broadcaster"
msgstr "2 编写动态帧广播器@{"calib_text": " `[5749] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5749>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:343 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:321
msgid "The extra frame we published in this tutorial is a fixed frame that doesn't change over time in relation to the parent frame. However, if you want to publish a moving frame you can code the broadcaster to change the frame over time. Let's change our ``carrot1`` frame so that it changes relative to ``turtle1`` frame over time. Now download the dynamic frame broadcaster code by entering the following command:"
msgstr "在本教程中，我们发布的额外帧是一个固定的帧，相对于父帧不会随时间变化。然而，如果你想要发布一个移动的帧，你可以编写广播器以随时间改变帧。让我们将``carrot1``帧改变成相对于``turtle1``帧随时间变化的帧。现在通过输入以下命令下载动态帧广播器的代码：@{"calib_text": " `[5750] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5750>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:376
msgid "Now open the file called ``dynamic_frame_tf2_broadcaster.cpp``:"
msgstr "现在打开名为``dynamic_frame_tf2_broadcaster.cpp``的文件：@{"calib_text": " `[5751] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5751>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:439 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:407
msgid "Instead of a fixed definition of our x and y offsets, we are using the ``sin()`` and ``cos()`` functions on the current time so that the offset of ``carrot1`` is constantly changing."
msgstr "我们不再使用固定的x和y偏移量定义，而是使用``sin()``和``cos()``函数来根据当前时间不断改变``carrot1``的偏移量。@{"calib_text": " `[5752] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5752>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:449
msgid "2.2 CMakeLists.txt"
msgstr "2.2 CMakeLists.txt@{"calib_text": " `[5753] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5753>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:453
msgid "Now open the ``CMakeLists.txt`` add the executable and name it ``dynamic_frame_tf2_broadcaster``."
msgstr "现在打开``CMakeLists.txt``，添加可执行文件并将其命名为``dynamic_frame_tf2_broadcaster``。@{"calib_text": " `[5754] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5754>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:474 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:430
msgid "2.3 Write the launch file"
msgstr "2.3 编写启动文件@{"calib_text": " `[5755] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5755>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:476
msgid "To test this code, create a new launch file ``turtle_tf2_dynamic_frame_demo.launch.py`` and paste the following code:"
msgstr "为了测试这段代码，请创建一个名为``turtle_tf2_dynamic_frame_demo.launch.py``的新启动文件，并粘贴以下代码：@{"calib_text": " `[5756] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5756>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:509 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:465 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:592
msgid "2.4 Build"
msgstr "2.4 构建@{"calib_text": " `[5757] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5757>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:578
msgid "2.5 Run"
msgstr "2.5 运行@{"calib_text": " `[5758] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5758>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:580
msgid "Now you can start the dynamic frame demo:"
msgstr "现在你可以启动动态框架演示：@{"calib_text": " `[5759] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5759>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:586 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:542
msgid "You should see that the second turtle is following the carrot's position that is constantly changing."
msgstr "你应该看到第二只乌龟正在跟随不断变化的胡萝卜位置。@{"calib_text": " `[5760] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5760>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:594 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:549
msgid "In this tutorial, you learned about the tf2 transformation tree, its structure, and its features. You also learned that it is easiest to think inside a local frame, and learned to add extra fixed and dynamic frames for that local frame."
msgstr "在本教程中，你学习了tf2变换树的结构和特性。你还学会了在一个本地框架内进行思考，并学会为该本地框架添加额外的固定和动态框架。@{"calib_text": " `[5761] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5761>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:8
msgid "Adding a frame (Python)"
msgstr "添加一个帧（Python）@{"calib_text": " `[5762] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5762>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:23
msgid "In previous tutorials, we recreated the turtle demo by writing a :doc:`tf2 broadcaster <./Writing-A-Tf2-Broadcaster-Py>` and a :doc:`tf2 listener <./Writing-A-Tf2-Listener-Py>`. This tutorial will teach you how to add extra fixed and dynamic frames to the transformation tree. In fact, adding a frame in tf2 is very similar to creating the tf2 broadcaster, but this example will show you some additional features of tf2."
msgstr "在之前的教程中，我们通过编写 :doc:`tf2 广播器 <./Writing-A-Tf2-Broadcaster-Py>` 和 :doc:`tf2 监听器 <./Writing-A-Tf2-Listener-Py>` 重新创建了乌龟演示。本教程将教你如何向转换树中添加额外的固定帧和动态帧。实际上，向 tf2 中添加帧非常类似于创建 tf2 广播器，但是这个示例将展示 tf2 的一些附加功能。@{"calib_text": " `[5763] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5763>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:52
msgid "Let's first create the source files. Go to the ``learning_tf2_py`` package we created in the previous tutorials. Download the fixed frame broadcaster code by entering the following command:"
msgstr "首先，我们创建源文件。进入之前教程中创建的 ``learning_tf2_py`` 包。通过输入以下命令下载固定帧广播器的代码：@{"calib_text": " `[5764] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5764>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:83
msgid "Now open the file called ``fixed_frame_tf2_broadcaster.py``."
msgstr "现在打开名为 ``fixed_frame_tf2_broadcaster.py`` 的文件。@{"calib_text": " `[5765] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5765>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:150 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:246 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:217
msgid "1.2 Add an entry point"
msgstr "1.2 添加入口点@{"calib_text": " `[5766] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5766>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:152 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:420 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:263 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:248 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:219 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:295
msgid "To allow the ``ros2 run`` command to run your node, you must add the entry point to ``setup.py`` (located in the ``src/learning_tf2_py`` directory)."
msgstr "为了让 ``ros2 run`` 命令能够运行你的节点，你必须在 ``setup.py``（位于 ``src/learning_tf2_py`` 目录中）中添加入口点。@{"calib_text": " `[5767] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5767>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:155 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:423 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:251
msgid "Finally, add the following line between the ``'console_scripts':`` brackets:"
msgstr "最后，在``'console_scripts':``括号之间添加以下行：@{"calib_text": " `[5768] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5768>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:164
msgid "Now let's create a launch file for this example. With your text editor, create a new file called ``launch/turtle_tf2_fixed_frame_demo.launch.py``, and add the following lines:"
msgstr "现在让我们为这个示例创建一个启动文件。使用文本编辑器创建一个名为``launch/turtle_tf2_fixed_frame_demo.launch.py``的新文件，并添加以下行：@{"calib_text": " `[5769] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5769>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:231 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:485 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:375 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:301
msgid "Still in the root of your workspace, build your package:"
msgstr "仍然在工作空间的根目录中，构建您的软件包：@{"calib_text": " `[5770] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5770>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:282 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:536
msgid "Now you are ready to run the launch file:"
msgstr "现在您已经准备好运行启动文件：@{"calib_text": " `[5771] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5771>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:314
msgid "Now just rebuild the package, restart the ``turtle_tf2_fixed_frame_demo.launch.py``, and you'll see the second turtle following the carrot instead of the first turtle!"
msgstr "现在只需重新构建软件包，重新启动``turtle_tf2_fixed_frame_demo.launch.py``，您将看到第二只乌龟跟随胡萝卜而不是第一只乌龟！@{"calib_text": " `[5772] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5772>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:354
msgid "Now open the file called ``dynamic_frame_tf2_broadcaster.py``:"
msgstr "现在打开名为``dynamic_frame_tf2_broadcaster.py``的文件：@{"calib_text": " `[5773] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5773>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:432
msgid "To test this code, create a new launch file ``launch/turtle_tf2_dynamic_frame_demo.launch.py`` and paste the following code:"
msgstr "要测试此代码，请创建一个新的启动文件 `launch/turtle_tf2_dynamic_frame_demo.launch.py`，并粘贴以下代码：@{"calib_text": " `[5774] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5774>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:8
msgid "Debugging"
msgstr "调试@{"calib_text": " `[5775] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5775>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:10
msgid "**Goal:** Learn how to use a systematic approach for debugging tf2 related problems."
msgstr "**目标：**学习如何使用系统化方法来调试与tf2相关的问题。@{"calib_text": " `[5776] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5776>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:23
msgid "This tutorial walks you through the steps to debug a typical tf2 problem. It will also use many of the tf2 debugging tools, such as ``tf2_echo``, ``tf2_monitor``, and ``view_frames``. This tutorial assumes you have completed the :doc:`learning tf2 <./Tf2-Main>` tutorials."
msgstr "本教程将引导您逐步调试一个典型的tf2问题。它还将使用许多tf2调试工具，如 `tf2_echo`、`tf2_monitor` 和 `view_frames`。本教程假设您已经完成了 :doc:`学习tf2 <./Tf2-Main>` 教程。@{"calib_text": " `[5777] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5777>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:28
msgid "Debugging example"
msgstr "调试示例@{"calib_text": " `[5778] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5778>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:31
msgid "1 Setting and starting the example"
msgstr "1 设置并启动示例@{"calib_text": " `[5779] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5779>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:33
msgid "For this tutorial we will set up a demo application that has a number of problems. The goal of this tutorial is to apply a systematic approach to find and tackle these problems. First, let's create the source file."
msgstr "在本教程中，我们将设置一个演示应用程序，该应用程序存在一些问题。本教程的目标是应用系统化的方法来发现和解决这些问题。首先，让我们创建源文件。@{"calib_text": " `[5780] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5780>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:37
msgid "Go to the ``learning_tf2_cpp`` package we created in :doc:`tf2 tutorials <./Tf2-Main>`. Inside the ``src`` directory make a copy of the source file ``turtle_tf2_listener.cpp`` and rename it to ``turtle_tf2_listener_debug.cpp``."
msgstr "进入我们在 :doc:`tf2 tutorials <./Tf2-Main>` 中创建的 ``learning_tf2_cpp`` 包。在 ``src`` 目录中复制源文件 ``turtle_tf2_listener.cpp``，并将其重命名为 ``turtle_tf2_listener_debug.cpp``。@{"calib_text": " `[5781] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5781>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:40
msgid "Open the file using your preferred text editor, and change line 67 from"
msgstr "使用您首选的文本编辑器打开该文件，并将第67行更改为@{"calib_text": " `[5782] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5782>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:46 ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:63
msgid "to"
msgstr "更改为@{"calib_text": " `[5783] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5783>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:52
msgid "and change ``lookupTransform()`` call in lines 75-79 from"
msgstr "并将第75-79行中的 ``lookupTransform()`` 调用更改为@{"calib_text": " `[5784] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5784>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:74
msgid "And save changes to the file. In order to run this demo, we need to create a launch file ``start_tf2_debug_demo.launch.py`` in the ``launch`` subdirectory of package ``learning_tf2_cpp``:"
msgstr "并保存文件更改。为了运行这个演示，我们需要在 ``learning_tf2_cpp`` 包的 ``launch`` 子目录中创建一个名为 ``start_tf2_debug_demo.launch.py`` 的启动文件：@{"calib_text": " `[5785] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5785>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:123
msgid "Don't forget to add the ``turtle_tf2_listener_debug`` executable to the ``CMakeLists.txt`` and build the package."
msgstr "不要忘记将``turtle_tf2_listener_debug``可执行文件添加到``CMakeLists.txt``中并构建软件包。@{"calib_text": " `[5786] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5786>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:125
msgid "Now let's run it to see what happens:"
msgstr "现在让我们运行它看看会发生什么：@{"calib_text": " `[5787] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5787>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:131
msgid "You will now see that the turtlesim came up. At the same time, if you run the ``turtle_teleop_key`` in another terminal window, you can use the arrow keys to drive the ``turtle1`` around."
msgstr "现在你会看到turtlesim启动了。同时，如果你在另一个终端窗口中运行``turtle_teleop_key``，你可以使用箭头键来控制``turtle1``移动。@{"calib_text": " `[5788] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5788>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:138
msgid "You will also notice that there is a second turtle in the lower, left corner. If the demo would be working correctly, this second turtle should be following the turtle you can command with the arrow keys. However, it is not the case because we have to solve some problems first. You should notice the following message:"
msgstr "你还会注意到在左下角有一只第二只海龟。如果演示工作正常，这只第二只海龟应该会跟随你用箭头键控制的海龟移动。然而，事实并非如此，因为我们首先需要解决一些问题。你应该注意到以下消息：@{"calib_text": " `[5789] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5789>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:150
msgid "2 Finding the tf2 request"
msgstr "2 寻找tf2请求@{"calib_text": " `[5790] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5790>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:152
msgid "Firstly, we need to find out what exactly we are asking tf2 to do. Therefore, we go into the part of the code that is using tf2. Open the ``src/turtle_tf2_listener_debug.cpp`` file, and take a look at line 67:"
msgstr "首先，我们需要弄清楚我们具体要求tf2做什么。因此，我们进入正在使用tf2的代码部分。打开``src/turtle_tf2_listener_debug.cpp``文件，并查看第67行：@{"calib_text": " `[5791] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5791>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:160
msgid "and lines 75-79:"
msgstr "并且在第75至79行中：@{"calib_text": " `[5792] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5792>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:171
msgid "Here we do the actual request to tf2. The three arguments tell us directly what we are asking tf2: transform from frame ``turtle3`` to frame ``turtle1`` at time ``now``."
msgstr "在这里，我们实际向tf2发出请求。这三个参数直接告诉我们向tf2询问的内容：在时间``now``下从坐标系``turtle3``到坐标系``turtle1``的变换。@{"calib_text": " `[5793] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5793>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:174
msgid "Now, let's take a look at why this request to tf2 is failing."
msgstr "现在，让我们看看为什么这个向tf2的请求失败了。@{"calib_text": " `[5794] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5794>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:177
msgid "3 Checking the frames"
msgstr "3 检查坐标系@{"calib_text": " `[5795] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5795>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:179
msgid "Firstly, to find out if tf2 knows about our transform between ``turtle3`` and ``turtle1``, we will use ``tf2_echo`` tool."
msgstr "首先，为了确定tf2是否知道我们在``turtle3``和``turtle1``之间的变换，我们将使用``tf2_echo``工具。@{"calib_text": " `[5796] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5796>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:185
msgid "The output tells us that frame ``turtle3`` does not exist:"
msgstr "输出告诉我们``turtle3``坐标系不存在：@{"calib_text": " `[5797] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5797>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:193
msgid "Then what frames do exist? If you like to get a graphical representation of this, use ``view_frames`` tool."
msgstr "那么存在哪些帧？如果您想以图形方式查看，请使用“view_frames”工具。@{"calib_text": " `[5798] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5798>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:200
msgid "Open the generated ``frames.pdf`` file to see the following output:"
msgstr "打开生成的“frames.pdf”文件，查看以下输出：@{"calib_text": " `[5799] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5799>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:204
msgid "So obviously the problem is that we are requesting transform from frame ``turtle3``, which does not exist. To fix this bug, just replace ``turtle3`` with ``turtle2`` in line 67."
msgstr "显然问题是我们正在请求从“turtle3”帧到“turtle2”帧的变换，但“turtle3”帧不存在。要修复此错误，请在第67行将“turtle3”替换为“turtle2”。@{"calib_text": " `[5800] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5800>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:207
msgid "And now stop the running demo, build it, and run it again:"
msgstr "现在停止正在运行的演示程序，进行构建，然后再次运行：@{"calib_text": " `[5801] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5801>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:213
msgid "And right away we run into the next problem:"
msgstr "然后立即遇到下一个问题：@{"calib_text": " `[5802] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5802>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:223
msgid "4 Checking the timestamp"
msgstr "4 检查时间戳@{"calib_text": " `[5803] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5803>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:225
msgid "Now that we solved the frame name problem, it is time to look at the timestamps. Remember, we are trying to get the transform between ``turtle2`` and ``turtle1`` at the current time (i.e., ``now``). To get statistics on the timing, call ``tf2_monitor`` with corresponding frames."
msgstr "现在我们已经解决了帧名称的问题，是时候看一下时间戳了。记住，我们要在当前时间（即“now”）获取“turtle2”和“turtle1”之间的变换。要获取有关时间统计的信息，请调用相应帧的“tf2_monitor”。@{"calib_text": " `[5804] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5804>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:233
msgid "The result should look something like this:"
msgstr "结果应该是这样的：@{"calib_text": " `[5805] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5805>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:247
msgid "The key part here is the delay for the chain from ``turtle2`` to ``turtle1``. The output shows there is an average delay of about 3 milliseconds. This means that tf2 can only transform between the turtles after 3 milliseconds are passed. So, if we would be asking tf2 for the transformation between the turtles 3 milliseconds ago instead of ``now``, tf2 would be able to give us an answer sometimes. Let's test this quickly by changing lines 75-79 to:"
msgstr "这里的关键部分是从“turtle2”到“turtle1”的延迟。输出显示平均延迟约为3毫秒。这意味着tf2只能在经过3毫秒后才能在这些海龟之间进行变换。因此，如果我们询问tf2在3毫秒前而不是“now”时的变换，有时tf2能给出答案。让我们通过将75-79行更改为以下内容来快速测试：@{"calib_text": " `[5806] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5806>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:262
msgid "In the new code we are asking for the transform between the turtles 100 milliseconds ago. It is usual to use a longer periods, just to make sure that the transform will arrive. Stop the demo, build and run:"
msgstr "在新代码中，我们要求在100毫秒之前的时间获取这些海龟之间的变换。通常使用更长的时间段，只是为了确保变换会到达。停止演示，构建和运行：@{"calib_text": " `[5807] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5807>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:270
msgid "And you should finally see the turtle move!"
msgstr "你应该最终看到海龟在移动！@{"calib_text": " `[5808] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5808>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:274
msgid "That last fix we made is not really what you want to do, it was just to make sure that was our problem. The real fix would look like this:"
msgstr "我们刚才进行的最后修复不是你想要做的，只是为了确保这是我们的问题。真正的修复将如下所示：@{"calib_text": " `[5809] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5809>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:286
msgid "Or like this:"
msgstr "或者像这样：@{"calib_text": " `[5810] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5810>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:297
msgid "You can learn more about timeouts in the :doc:`Using time <./Learning-About-Tf2-And-Time-Cpp>` tutorial, and use them as below:"
msgstr "你可以在:doc:`使用时间<./Learning-About-Tf2-And-Time-Cpp>`教程中了解更多关于超时的信息，并按照以下方式使用它们：@{"calib_text": " `[5811] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5811>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:312
msgid "In this tutorial you learned how to use a systematic approach for debugging tf2 related problems. You also learned how to use tf2 debugging tools, such as ``tf2_echo``, ``tf2_monitor``, and ``view_frames`` to help you debug those tf2 problems."
msgstr "在本教程中，您学习了如何使用系统性的方法来调试与tf2相关的问题。您还学习了如何使用tf2调试工具，例如``tf2_echo``、``tf2_monitor``和``view_frames``来帮助您调试这些tf2问题。@{"calib_text": " `[5812] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5812>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:8
msgid "Introducing ``tf2``"
msgstr "介绍``tf2``@{"calib_text": " `[5813] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5813>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:10
msgid "**Goal:** Run a turtlesim demo and see some of the power of tf2 in a multi-robot example using turtlesim."
msgstr "**目标：** 运行一个turtlesim演示，并在使用turtlesim的多机器人示例中展示tf2的部分功能。@{"calib_text": " `[5814] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5814>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:23
msgid "Let's start by installing the demo package and its dependencies."
msgstr "让我们首先安装演示包及其依赖项。@{"calib_text": " `[5815] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5815>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:41
msgid "Running the demo"
msgstr "运行演示@{"calib_text": " `[5816] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5816>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:43
msgid "Now that we've installed the ``turtle_tf2_py`` tutorial package let's run the demo. First, open a new terminal and :doc:`source your ROS 2 installation <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>` so that ``ros2`` commands will work. Then run the following command:"
msgstr "既然我们已经安装了``turtle_tf2_py``教程包，让我们来运行演示。首先，打开一个新的终端并：doc:`配置你的ROS 2环境 <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>`，这样``ros2``命令就能正常工作了。然后运行以下命令：@{"calib_text": " `[5817] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5817>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:51
msgid "You will see the turtlesim start with two turtles."
msgstr "你将看到turtlesim启动并有两只海龟。@{"calib_text": " `[5818] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5818>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:55 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:411 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:432
msgid "In the second terminal window type the following command:"
msgstr "在第二个终端窗口中输入以下命令：@{"calib_text": " `[5819] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5819>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:61
msgid "Once the turtlesim is started you can drive the central turtle around in the turtlesim using the keyboard arrow keys, select the second terminal window so that your keystrokes will be captured to drive the turtle."
msgstr "一旦turtlesim启动，你可以使用键盘的箭头键驱动中央的海龟在turtlesim中移动，选择第二个终端窗口，这样你的按键操作将被捕捉到来驱动海龟。@{"calib_text": " `[5820] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5820>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:66
msgid "You can see that one turtle continuously moves to follow the turtle you are driving around."
msgstr "你会看到一只海龟不断地跟随着你驱动的海龟移动。@{"calib_text": " `[5821] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5821>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:69
msgid "What is happening?"
msgstr "发生了什么事？@{"calib_text": " `[5822] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5822>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:71
msgid "This demo is using the tf2 library to create three coordinate frames: a ``world`` frame, a ``turtle1`` frame, and a ``turtle2`` frame. This tutorial uses a tf2 broadcaster to publish the turtle coordinate frames and a tf2 listener to compute the difference in the turtle frames and move one turtle to follow the other."
msgstr "此演示使用tf2库创建了三个坐标系：``world``坐标系、``turtle1``坐标系和``turtle2``坐标系。本教程使用tf2广播器发布乌龟坐标系，并使用tf2监听器计算乌龟坐标系之间的差异，并使一只乌龟跟随另一只乌龟移动。@{"calib_text": " `[5823] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5823>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:75
msgid "tf2 tools"
msgstr "tf2工具@{"calib_text": " `[5824] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5824>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:77
msgid "Now let's look at how tf2 is being used to create this demo. We can use ``tf2_tools`` to look at what tf2 is doing behind the scenes."
msgstr "现在让我们看看tf2是如何用于创建这个演示的。我们可以使用``tf2_tools``来查看tf2在幕后的工作。@{"calib_text": " `[5825] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5825>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:81
msgid "1 Using view_frames"
msgstr "1 使用view_frames@{"calib_text": " `[5826] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5826>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:83
msgid "``view_frames`` creates a diagram of the frames being broadcast by tf2 over ROS."
msgstr "``view_frames``会创建一个图示，显示tf2通过ROS广播的坐标系。@{"calib_text": " `[5827] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5827>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:89
msgid "You will see:"
msgstr "您将看到：@{"calib_text": " `[5828] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5828>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:96
msgid "Here a tf2 listener is listening to the frames that are being broadcast over ROS and drawing a tree of how the frames are connected. To view the tree, open the resulting ``frames.pdf`` with your favorite PDF viewer."
msgstr "这里有一个 tf2 监听器在监听通过 ROS 广播的帧，并绘制连接帧的树形结构。要查看树形结构，请使用您喜欢的 PDF 查看器打开生成的“frames.pdf”文件。@{"calib_text": " `[5829] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5829>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:101
msgid "Here we can see three frames that are broadcasted by tf2: ``world``, ``turtle1``, and ``turtle2``. The ``world`` here is the parent of the ``turtle1`` and ``turtle2`` frames. ``view_frames`` also report some diagnostic information about when the oldest and most recent frame transforms were received and how fast the tf2 frame is published to tf2 for debugging purposes."
msgstr "这里我们可以看到由 tf2 广播的三个帧：``world``、``turtle1``和``turtle2``。``world`` 是``turtle1``和``turtle2``帧的父级。``view_frames``还报告了一些诊断信息，包括接收到的最旧和最新帧变换的时间以及用于调试目的将 tf2 帧发布到 tf2 的速度。@{"calib_text": " `[5830] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5830>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:107
msgid "2 Using tf2_echo"
msgstr "2 使用 tf2_echo@{"calib_text": " `[5831] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5831>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:109
msgid "``tf2_echo`` reports the transform between any two frames broadcasted over ROS."
msgstr "``tf2_echo`` 报告了在 ROS 上广播的任意两个帧之间的变换。@{"calib_text": " `[5832] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5832>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:111
msgid "Usage:"
msgstr "用法：@{"calib_text": " `[5833] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5833>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:117
msgid "Let's look at the transform of the ``turtle2`` frame with respect to ``turtle1`` frame which is equivalent to:"
msgstr "让我们看看“turtle2”相对于“turtle1”帧的变换，它等同于：@{"calib_text": " `[5834] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5834>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:123
msgid "You will see the transform displayed as the ``tf2_echo`` listener receives the frames broadcasted over ROS 2."
msgstr "当“tf2_echo”监听器接收到在ROS 2上广播的帧时，您将看到变换显示出来。@{"calib_text": " `[5835] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5835>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:134
msgid "As you drive your turtle around you will see the transform change as the two turtles move relative to each other."
msgstr "当您驱动乌龟移动时，您将看到变换随着两只乌龟相对移动而改变。@{"calib_text": " `[5836] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5836>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:137
msgid "rviz and tf2"
msgstr "rviz和tf2@{"calib_text": " `[5837] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5837>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:139
msgid "``rviz`` is a visualization tool that is useful for examining tf2 frames. Let's look at our turtle frames using rviz. Let's start rviz with the ``turtle_rviz.rviz`` configuration file using the ``-d`` option:"
msgstr "“rviz”是一个可用于检查tf2帧的可视化工具。让我们使用rviz来查看我们的乌龟帧。使用“-d”选项，启动“rviz”，并使用“turtle_rviz.rviz”配置文件：@{"calib_text": " `[5838] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5838>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:149
msgid "In the side bar you will see the frames broadcasted by tf2. As you drive the turtle around you will see the frames move in rviz."
msgstr "在侧边栏中，您将看到tf2广播的帧。当您驱动乌龟时，您将看到这些帧在rviz中移动。@{"calib_text": " `[5839] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5839>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:8
msgid "Using time (C++)"
msgstr "使用时间（C++）@{"calib_text": " `[5840] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5840>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:10
msgid "**Goal:** Learn how to get a transform at a specific time and wait for a transform to be available on the tf2 tree using ``lookupTransform()`` function."
msgstr "**目标：** 学习如何使用 ``lookupTransform()`` 函数在特定时间获取变换，并等待 tf2 树上的变换可用。@{"calib_text": " `[5841] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5841>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:23
msgid "In previous tutorials, we recreated the turtle demo by writing a :doc:`tf2 broadcaster <Writing-A-Tf2-Broadcaster-Cpp>` and a :doc:`tf2 listener <Writing-A-Tf2-Listener-Cpp>`. We also learned how to :doc:`add a new frame to the transformation tree <./Adding-A-Frame-Cpp>` and learned how tf2 keeps track of a tree of coordinate frames. This tree changes over time, and tf2 stores a time snapshot for every transform (for up to 10 seconds by default). Until now we used the ``lookupTransform()`` function to get access to the latest available transforms in that tf2 tree, without knowing at what time that transform was recorded. This tutorial will teach you how to get a transform at a specific time."
msgstr "在之前的教程中，我们通过编写 :doc:`tf2 广播器 <Writing-A-Tf2-Broadcaster-Cpp>` 和 :doc:`tf2 监听器 <Writing-A-Tf2-Listener-Cpp>` 来重新创建了乌龟演示。我们还学习了如何 :doc:`向变换树中添加新帧 <./Adding-A-Frame-Cpp>`，以及如何使用 tf2 来跟踪坐标帧的树结构。这个树随着时间的推移而改变，tf2 为每个变换存储了一个时间快照（默认为最近的 10 秒）。到目前为止，我们使用 ``lookupTransform()`` 函数来获取在 tf2 树中最新可用的变换，而不知道该变换是在何时记录的。本教程将教你如何在特定时间获取变换。@{"calib_text": " `[5842] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5842>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:33
msgid "1 tf2 and time"
msgstr "1 tf2 和时间@{"calib_text": " `[5843] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5843>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:35
msgid "So let's go back to where we ended in the :doc:`adding a frame tutorial <./Adding-A-Frame-Cpp>`. Go to ``learning_tf2_cpp`` package. Open ``turtle_tf2_listener.cpp`` and take a look at the ``lookupTransform()`` call:"
msgstr "让我们回到上一个教程 :doc:`添加一个帧 <./Adding-A-Frame-Cpp>` 结束的地方。打开 ``learning_tf2_cpp`` 包中的 ``turtle_tf2_listener.cpp``，并查看 ``lookupTransform()`` 的调用：@{"calib_text": " `[5844] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5844>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:46
msgid "You can see that we specified a time equal to 0 by calling ``tf2::TimePointZero``."
msgstr "你可以看到我们通过调用 ``tf2::TimePointZero`` 指定了时间为 0。@{"calib_text": " `[5845] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5845>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:50
msgid "The ``tf2`` package has it's own time type ``tf2::TimePoint``, which is different from ``rclcpp::Time``. Many APIs in the package ``tf2_ros`` automatically convert between ``rclcpp::Time`` and ``tf2::TimePoint``."
msgstr "``tf2`` 包有自己的时间类型 ``tf2::TimePoint``，与 ``rclcpp::Time`` 不同。在 ``tf2_ros`` 包中，许多 API 自动在 ``rclcpp::Time`` 和 ``tf2::TimePoint`` 之间进行转换。@{"calib_text": " `[5846] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5846>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:53
msgid "``rclcpp::Time(0, 0, this->get_clock()->get_clock_type())`` could have been used here, but it would have been converted to ``tf2::TimePointZero`` anyways."
msgstr "``rclcpp::Time(0, 0, this->get_clock()->get_clock_type())`` 可以在此处使用，但它最终会被转换为 ``tf2::TimePointZero``。@{"calib_text": " `[5847] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5847>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:55
msgid "For tf2, time 0 means \"the latest available\" transform in the buffer. Now, change this line to get the transform at the current time, ``this->get_clock()->now()``:"
msgstr "对于 tf2，时间 0 表示缓冲区中的“最新可用”变换。现在，将此行更改为获取当前时间的变换，即 ``this->get_clock()->now()``:@{"calib_text": " `[5848] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5848>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:66
msgid "Now try to run the launch file."
msgstr "现在尝试运行启动文件。@{"calib_text": " `[5849] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5849>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:72
msgid "You will notice that it fails and outputs something similar to this:"
msgstr "您会注意到它失败并输出类似于以下内容：@{"calib_text": " `[5850] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5850>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:80
msgid "It tells you that the frame does not exist or that the data is in the future."
msgstr "它告诉您该帧不存在或数据位于未来。@{"calib_text": " `[5851] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5851>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:82
msgid "To understand why is this happening we need to understand how buffers work. Firstly, each listener has a buffer where it stores all the coordinate transforms coming from the different tf2 broadcasters. Secondly, when a broadcaster sends out a transform, it takes some time before that transform gets into the buffer (usually a couple of milliseconds). As a result, when you request a frame transform at time \"now\", you should wait a few milliseconds for that information to arrive."
msgstr "要理解为什么会发生这种情况，我们需要了解缓冲区的工作原理。首先，每个监听器都有一个缓冲区，用于存储来自不同tf2广播器的所有坐标转换。其次，当广播器发送一个转换时，需要一些时间才能将该转换放入缓冲区（通常需要几毫秒）。因此，当您在“现在”时间请求帧转换时，您应该等待几毫秒，以便该信息到达。@{"calib_text": " `[5852] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5852>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:88
msgid "2 Wait for transforms"
msgstr "2 等待转换@{"calib_text": " `[5853] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5853>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:90
msgid "tf2 provides a nice tool that will wait until a transform becomes available. You use this by adding a timeout parameter to ``lookupTransform()``. To fix this, edit your code as shown below (add the last timeout parameter):"
msgstr "tf2提供了一个很好的工具，可以等待直到转换可用。您可以通过向“lookupTransform()”添加一个超时参数来使用该工具。要修复这个问题，请按照下面的代码进行编辑（添加最后一个超时参数）：@{"calib_text": " `[5854] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5854>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:103
msgid "The ``lookupTransform()`` can take four arguments, where the last one is an optional timeout. It will block for up to that duration waiting for it to timeout."
msgstr "``lookupTransform()``可以接受四个参数，其中最后一个是可选的超时参数。它会阻塞最多该持续时间，直到超时。@{"calib_text": " `[5855] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5855>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:107
msgid "3 Checking the results"
msgstr "3 检查结果@{"calib_text": " `[5856] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5856>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:109 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:87
msgid "You can now run the launch file."
msgstr "现在您可以运行启动文件。@{"calib_text": " `[5857] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5857>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:115
msgid "You should notice that ``lookupTransform()`` will actually block until the transform between the two turtles becomes available (this will usually take a few milliseconds). Once the timeout has been reached (fifty milliseconds in this case), an exception will be raised only if the transform is still not available."
msgstr "请注意，``lookupTransform()`` 函数将阻塞直到两个乌龟之间的变换可用（通常需要几毫秒）。一旦超时时间到达（此例中为50毫秒），仅当变换仍不可用时才会引发异常。@{"calib_text": " `[5858] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5858>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:121
msgid "In this tutorial, you learned how to acquire a transform at a specific timestamp and how to wait for a transform to be available on the tf2 tree when using the ``lookupTransform()`` function."
msgstr "在本教程中，您学会了如何在特定时间戳获取变换，并在使用``lookupTransform()``函数时等待变换在tf2树上可用。@{"calib_text": " `[5859] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5859>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:8
msgid "Using time (Python)"
msgstr "使用时间（Python）@{"calib_text": " `[5860] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5860>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:10
msgid "**Goal:** Learn to use the ``timeout`` in ``lookup_transform`` function to wait for a transform to be available on the tf2 tree."
msgstr "**目标：**学习如何在``lookup_transform``函数中使用``timeout``参数来等待变换在tf2树上可用。@{"calib_text": " `[5861] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5861>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:23
msgid "In previous tutorials, we recreated the turtle demo by writing a :doc:`tf2 broadcaster <./Writing-A-Tf2-Broadcaster-Py>` and a :doc:`tf2 listener <./Writing-A-Tf2-Listener-Py>`. We also learned how to :doc:`add a new frame to the transformation tree <./Adding-A-Frame-Py>`. Now we will learn more about the ``timeout`` argument which makes the ``lookup_transform`` wait for the specified transform for up to the specified duration before throwing an exception. This tool can be useful to listen for transforms that are published at varying rates or those incoming source with unreliable networking and non negligible latency. This tutorial will teach you how use the timeout in ``lookup_transform`` function to wait for a transform to be available on the tf2 tree."
msgstr "在之前的教程中，我们通过编写 :doc:`tf2广播器 <./Writing-A-Tf2-Broadcaster-Py>`和 :doc:`tf2监听器 <./Writing-A-Tf2-Listener-Py>`来重现了乌龟演示。我们还学习了如何 :doc:`向变换树添加新的坐标系 <./Adding-A-Frame-Py>`。现在我们将更深入了解``timeout``参数，它使``lookup_transform``在指定的持续时间内等待指定的变换，然后才抛出异常。这个工具对于监听以不同速率发布的变换或具有不可靠网络和非常大延迟的传入源非常有用。本教程将教您如何使用``lookup_transform``函数中的timeout来等待tf2树上的变换可用。@{"calib_text": " `[5862] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5862>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:33
msgid "1 Update the listener node"
msgstr "1. 更新监听器节点@{"calib_text": " `[5863] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5863>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:35
msgid "Edit ``turtle_tf2_listener.py`` and remove the ``timeout=Duration(seconds=1.0)`` parameter that is passed to the ``lookup_transform()`` call on line 76. It should look like shown below:"
msgstr "编辑 ``turtle_tf2_listener.py`` 并删除传递给第 76 行的 ``lookup_transform()`` 调用的 ``timeout=Duration(seconds=1.0)`` 参数。修改后的代码应如下所示：@{"calib_text": " `[5864] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5864>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:45
msgid "Moreover, import additional exceptions that we will handle in the beginning of the file:"
msgstr "此外，在文件开头导入额外的异常，我们将在文件开头处理它们：@{"calib_text": " `[5865] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5865>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:51
msgid "Edit the exception handling on line 81 by adding newly imported exceptions and ``raise`` statement to see the exception:"
msgstr "通过添加新导入的异常和 ``raise`` 语句，编辑第 81 行的异常处理以查看异常信息：@{"calib_text": " `[5866] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5866>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:60
msgid "If you now try to run the launch file, you will notice that it is failing:"
msgstr "如果你现在尝试运行启动文件，你会注意到它执行失败：@{"calib_text": " `[5867] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5867>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:67
msgid "2 Fix the listener node"
msgstr "2 修复监听节点@{"calib_text": " `[5868] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5868>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:69
msgid "You now should notice that ``lookup_transform()`` is failing. It tells you that the frame does not exist or that the data is in the future. To fix this, edit your code on line 76 as shown below (return the ``timeout`` parameter):"
msgstr "现在你应该注意到 ``lookup_transform()`` 执行失败。它告诉你帧不存在或数据在未来。为了修复这个问题，在第 76 行的代码中做如下修改（返回 ``timeout`` 参数）：@{"calib_text": " `[5869] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5869>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:80
msgid "The ``lookup_transform`` can take four arguments, where the last one is an optional timeout. It will block for up to that duration waiting for it to timeout."
msgstr "``lookup_transform`` 可以接受四个参数，其中最后一个是可选的超时时间。它将阻塞等待，最多等待指定的时长后超时。@{"calib_text": " `[5870] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5870>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:85
msgid "Once this change is made, remove the ``raise`` line from the ``except()`` block that we added above or the code will continue to fail."
msgstr "在进行这个更改后，从上面添加的 ``except()`` 块中移除 ``raise`` 行，否则代码将继续失败。@{"calib_text": " `[5871] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5871>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:93
msgid "You should notice that ``lookup_transform()`` will actually block until the transform between the two turtles becomes available (this will usually take a few milli-seconds). Once the timeout has been reached (one second in this case), an exception will be raised only if the transform is still not available."
msgstr "你应该注意到，``lookup_transform()`` 实际上会阻塞，直到两个 turtle 之间的变换可用（通常需要几毫秒）。一旦达到超时时间（在本例中为一秒），只有当变换仍然不可用时才会引发异常。@{"calib_text": " `[5872] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5872>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:99
msgid "In this tutorial you learned more about the ``lookup_transform`` function and its timeout features. You also learned how to catch and handle additional exceptions that can be thrown by tf2."
msgstr "在本教程中，你学习了关于 ``lookup_transform`` 函数及其超时特性的更多内容。你还学会了如何捕获和处理 tf2 可能抛出的其他异常。@{"calib_text": " `[5873] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5873>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:8
msgid "Quaternion fundamentals"
msgstr "四元数基础知识@{"calib_text": " `[5874] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5874>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:10
msgid "**Goal:** Learn the basics of quaternion usage in ROS 2."
msgstr "**目标：**学习 ROS 2 中四元数的基本用法。@{"calib_text": " `[5875] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5875>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:23
msgid "A quaternion is a 4-tuple representation of orientation, which is more concise than a rotation matrix. Quaternions are very efficient for analyzing situations where rotations in three dimensions are involved. Quaternions are used widely in robotics, quantum mechanics, computer vision, and 3D animation."
msgstr "四元数是表示方向的四元组表示法，比旋转矩阵更简洁。四元数在涉及三维旋转的情况下非常高效。四元数广泛应用于机器人技术、量子力学、计算机视觉和3D动画。@{"calib_text": " `[5876] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5876>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:27
msgid "You can learn more about the underlying mathematical concept on `Wikipedia <https://en.wikipedia.org/wiki/Quaternion>`_. You can also take a look at an explorable video series `Visualizing quaternions <https://eater.net/quaternions>`_ made by `3blue1brown <https://www.youtube.com/3blue1brown>`_."
msgstr "您可以在 `维基百科 <https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%85%83%E6%95%B0>`_ 上了解更多有关底层数学概念的内容。您还可以观看 `3blue1brown <https://www.youtube.com/3blue1brown>`_ 制作的可视化四元数视频系列 `Visualizing quaternions <https://eater.net/quaternions>`_。@{"calib_text": " `[5877] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5877>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:30
msgid "In this tutorial, you will learn how quaternions and conversion methods work in ROS 2."
msgstr "在本教程中，您将学习ROS 2中四元数和转换方法的工作原理。@{"calib_text": " `[5878] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5878>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:35
msgid "However, this is not a hard requirement and you can stick to any other geometric transfromation library that suit you best. You can take a look at libraries like `transforms3d <https://github.com/matthew-brett/transforms3d>`_, `scipy.spatial.transform <https://github.com/scipy/scipy/tree/master/scipy/spatial/transform>`_, `pytransform3d <https://github.com/rock-learning/pytransform3d>`_, `numpy-quaternion <https://github.com/moble/quaternion>`_ or `blender.mathutils <https://docs.blender.org/api/master/mathutils.html>`_."
msgstr "然而，这不是硬性要求，您可以选择最适合您的任何其他几何变换库。您可以查看像 `transforms3d <https://github.com/matthew-brett/transforms3d>`_、`scipy.spatial.transform <https://github.com/scipy/scipy/tree/master/scipy/spatial/transform>`_、`pytransform3d <https://github.com/rock-learning/pytransform3d>`_、`numpy-quaternion <https://github.com/moble/quaternion>`_ 或 `blender.mathutils <https://docs.blender.org/api/master/mathutils.html>`_ 这样的库。@{"calib_text": " `[5879] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5879>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:39
msgid "Components of a quaternion"
msgstr "四元数的组成部分@{"calib_text": " `[5880] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5880>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:41
msgid "ROS 2 uses quaternions to track and apply rotations. A quaternion has 4 components ``(x, y, z, w)``. In ROS 2, ``w`` is last, but in some libraries like Eigen, ``w`` can be placed at the first position. The commonly-used unit quaternion that yields no rotation about the x/y/z axes is ``(0, 0, 0, 1)``, and can be created in a following way:"
msgstr "ROS 2使用四元数来跟踪和应用旋转。一个四元数有四个分量 ``(x, y, z, w)``。在ROS 2中，``w`` 在最后一位，但在一些库中如Eigen中，``w`` 可以放在第一位。常用的单位四元数在x/y/z轴上不产生旋转，表示为 ``(0, 0, 0, 1)``，可以用以下方式创建：@{"calib_text": " `[5881] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5881>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:58
msgid "The magnitude of a quaternion should always be one. If numerical errors cause a quaternion magnitude other than one, ROS 2 will print warnings. To avoid these warnings, normalize the quaternion:"
msgstr "四元数的模应该始终为1。如果数值误差导致四元数模不为1，ROS 2将打印警告。为避免这些警告，请对四元数进行归一化：@{"calib_text": " `[5882] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5882>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:67
msgid "Quaternion types in ROS 2"
msgstr "ROS 2中的四元数类型@{"calib_text": " `[5883] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5883>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:69
msgid "ROS 2 uses two quaternion datatypes: ``tf2::Quaternion`` and its equivalent ``geometry_msgs::msg::Quaternion``. To convert between them in C++, use the methods of ``tf2_geometry_msgs``."
msgstr "ROS 2使用两种四元数数据类型：``tf2::Quaternion``和它的等效类型``geometry_msgs::msg::Quaternion``。在C++中进行类型转换，可以使用``tf2_geometry_msgs``中的方法。@{"calib_text": " `[5884] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5884>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:105
msgid "Quaternion operations"
msgstr "四元数操作@{"calib_text": " `[5885] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5885>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:108
msgid "1 Think in RPY then convert to quaternion"
msgstr "1. 首先按照RPY（滚转、俯仰、偏航）的思维进行计算，然后再转换为四元数。@{"calib_text": " `[5886] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5886>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:110
msgid "It's easy for us to think of rotations about axes, but hard to think in terms of quaternions. A suggestion is to calculate target rotations in terms of roll (about an X-axis), pitch (about the Y-axis), and yaw (about the Z-axis), and then convert to a quaternion."
msgstr "我们更容易以轴旋转的方式思考，但很难用四元数来思考。一个建议是首先按照滚转（绕X轴）、俯仰（绕Y轴）和偏航（绕Z轴）计算目标旋转，然后再将其转换为四元数。@{"calib_text": " `[5887] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5887>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:121
msgid "2 Applying a quaternion rotation"
msgstr "2 应用四元数旋转@{"calib_text": " `[5888] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5888>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:123
msgid "To apply the rotation of one quaternion to a pose, simply multiply the previous quaternion of the pose by the quaternion representing the desired rotation. The order of this multiplication matters."
msgstr "要将一个四元数的旋转应用于姿势，只需将姿势的先前四元数乘以表示所需旋转的四元数。此乘法的顺序很重要。@{"calib_text": " `[5889] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5889>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:152
msgid "3 Inverting a quaternion"
msgstr "3 反转一个四元数@{"calib_text": " `[5890] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5890>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:154
msgid "An easy way to invert a quaternion is to negate the w-component:"
msgstr "反转一个四元数的简单方法是对 w 分量取负：@{"calib_text": " `[5891] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5891>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:161
msgid "4 Relative rotations"
msgstr "4 相对旋转@{"calib_text": " `[5892] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5892>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:163
msgid "Say you have two quaternions from the same frame, ``q_1`` and ``q_2``. You want to find the relative rotation, ``q_r``, that converts ``q_1`` to ``q_2`` in a following manner:"
msgstr "假设您有来自同一帧的两个四元数 `q_1` 和 `q_2`。您希望找到相对旋转 `q_r`，它以以下方式将 `q_1` 转换为 `q_2`：@{"calib_text": " `[5893] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5893>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:170
msgid "You can solve for ``q_r`` similarly to solving a matrix equation. Invert ``q_1`` and right-multiply both sides. Again, the order of multiplication is important:"
msgstr "你可以类似于解矩阵方程来解``q_r``。求``q_1``的逆矩阵，并将两边右乘。再次强调，乘法的顺序很重要：@{"calib_text": " `[5894] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5894>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:177
msgid "Here's an example to get the relative rotation from the previous robot pose to the current robot pose in python:"
msgstr "下面是一个示例，用Python计算从之前的机器人姿态到当前机器人姿态的相对旋转：@{"calib_text": " `[5895] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5895>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:232
msgid "In this tutorial, you learned about the fundamental concepts of a quaternion and its related mathematical operations, like inversion and rotation. You also learned about its usage examples in ROS 2 and conversion methods between two separate Quaternion classes."
msgstr "在本教程中，你学习了四元数的基本概念及其相关的数学运算，如求逆和旋转。你还学习了ROS 2中的使用示例以及两个独立四元数类之间的转换方法。@{"calib_text": " `[5896] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5896>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:8
msgid "``tf2``"
msgstr "``tf2``@{"calib_text": " `[5897] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5897>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:10
msgid "Many of the tf2 tutorials are available for both C++ and Python. The tutorials are streamlined to complete either the C++ track or the Python track. If you want to learn both C++ and Python, you should go through the tutorials once for C++ and once for Python."
msgstr "许多``tf2``教程都提供C++和Python两种语言的版本。教程分别针对C++和Python进行了优化。如果你想学习C++和Python，你应该先完成一遍C++的教程，然后再完成一遍Python的教程。@{"calib_text": " `[5898] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5898>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:39
msgid "Workspace setup"
msgstr "工作空间设置@{"calib_text": " `[5899] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5899>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:41
msgid "If you have not yet created a workspace in which to complete the tutorials, :doc:`follow this tutorial <../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>`."
msgstr "如果您还没有创建用于完成教程的工作空间，请 :doc:`按照此教程 <../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>` 创建一个。@{"calib_text": " `[5900] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5900>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:44
msgid "Learning tf2"
msgstr "学习 tf2@{"calib_text": " `[5901] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5901>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:46
msgid ":doc:`Introduction to tf2 <./Introduction-To-Tf2>`."
msgstr ":doc:`tf2 简介 <./Introduction-To-Tf2>`。@{"calib_text": " `[5902] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5902>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:48
msgid "This tutorial will give you a good idea of what tf2 can do for you. It shows off some of the tf2 power in a multi-robot example using turtlesim. This also introduces using ``tf2_echo``, ``view_frames``, and ``rviz``."
msgstr "本教程将让您对 tf2 的功能有一个很好的了解。它展示了使用 turtlesim 进行多机器人示例的一些 tf2 功能。还介绍了如何使用 ``tf2_echo``、``view_frames`` 和 ``rviz``。@{"calib_text": " `[5903] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5903>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:52
msgid "Writing a static broadcaster :doc:`(Python) <./Writing-A-Tf2-Static-Broadcaster-Py>` :doc:`(C++) <./Writing-A-Tf2-Static-Broadcaster-Cpp>`."
msgstr "编写静态广播器： :doc:`(Python 版本) <./Writing-A-Tf2-Static-Broadcaster-Py>` :doc:`(C++ 版本) <./Writing-A-Tf2-Static-Broadcaster-Cpp>`。@{"calib_text": " `[5904] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5904>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:54
msgid "This tutorial teaches you how to broadcast static coordinate frames to tf2."
msgstr "本教程将教您如何向 tf2 广播静态坐标系。@{"calib_text": " `[5905] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5905>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:56
msgid "Writing a broadcaster :doc:`(Python) <./Writing-A-Tf2-Broadcaster-Py>` :doc:`(C++) <Writing-A-Tf2-Broadcaster-Cpp>`."
msgstr "编写广播器 :doc:`(Python) <./Writing-A-Tf2-Broadcaster-Py>` :doc:`(C++) <Writing-A-Tf2-Broadcaster-Cpp>`.@{"calib_text": " `[5906] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5906>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:58
msgid "This tutorial teaches you how to broadcast the state of a robot to tf2."
msgstr "本教程将教你如何将机器人的状态广播到tf2。@{"calib_text": " `[5907] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5907>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:60
msgid "Writing a listener :doc:`(Python) <./Writing-A-Tf2-Listener-Py>` :doc:`(C++) <./Writing-A-Tf2-Listener-Cpp>`."
msgstr "编写监听器 :doc:`(Python) <./Writing-A-Tf2-Listener-Py>` :doc:`(C++) <./Writing-A-Tf2-Listener-Cpp>`.@{"calib_text": " `[5908] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5908>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:62
msgid "This tutorial teaches you how to use tf2 to get access to frame transformations."
msgstr "本教程将教你如何使用tf2来获取帧变换。@{"calib_text": " `[5909] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5909>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:64
msgid "Adding a frame :doc:`(Python) <./Adding-A-Frame-Py>` :doc:`(C++) <Adding-A-Frame-Cpp>`."
msgstr "添加一个帧 :doc:`(Python) <./Adding-A-Frame-Py>` :doc:`(C++) <Adding-A-Frame-Cpp>`.@{"calib_text": " `[5910] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5910>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:66
msgid "This tutorial teaches you how to add an extra fixed frame to tf2."
msgstr "本教程将教你如何向tf2中添加额外的固定帧。@{"calib_text": " `[5911] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5911>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:68
msgid "Using time :doc:`(Python) <Learning-About-Tf2-And-Time-Py>` :doc:`(C++) <Learning-About-Tf2-And-Time-Cpp>`."
msgstr "使用时间 :doc:`(Python) <Learning-About-Tf2-And-Time-Py>` :doc:`(C++) <Learning-About-Tf2-And-Time-Cpp>`。@{"calib_text": " `[5912] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5912>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:70
msgid "This tutorial teaches you to use the timeout in ``lookup_transform`` function to wait for a transform to be available on the tf2 tree."
msgstr "本教程教你如何在 tf2 树上使用 ``lookup_transform`` 函数的超时功能，等待一个变换可用。@{"calib_text": " `[5913] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5913>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:73
msgid "Traveling in time :doc:`(Python) <./Time-Travel-With-Tf2-Py>` :doc:`(C++) <./Time-Travel-With-Tf2-Cpp>`."
msgstr "时光旅行 :doc:`(Python) <./Time-Travel-With-Tf2-Py>` :doc:`(C++) <./Time-Travel-With-Tf2-Cpp>`。@{"calib_text": " `[5914] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5914>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:75
msgid "This tutorial teaches you about advanced time travel features of tf2."
msgstr "本教程教你关于 tf2 的高级时光旅行功能。@{"calib_text": " `[5915] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5915>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:78
msgid "Debugging tf2"
msgstr "调试 tf2@{"calib_text": " `[5916] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5916>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:80
msgid ":doc:`Quaternion fundamentals <./Quaternion-Fundamentals>`."
msgstr ":doc:`四元数基础知识 <./Quaternion-Fundamentals>`。@{"calib_text": " `[5917] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5917>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:82
msgid "This tutorial teaches you basics of quaternion usage in ROS 2."
msgstr "本教程教你ROS 2中四元数的基础用法。@{"calib_text": " `[5918] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5918>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:84
msgid ":doc:`Debugging tf2 problems <./Debugging-Tf2-Problems>`."
msgstr ":doc:`调试 tf2 问题 <./Debugging-Tf2-Problems>`。@{"calib_text": " `[5919] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5919>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:86
msgid "This tutorial teaches you about a systematic approach for debugging tf2 related problems."
msgstr "本教程教你一种系统化的方法来调试与 tf2 相关的问题。@{"calib_text": " `[5920] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5920>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:89
msgid "Using sensor messages with tf2"
msgstr "使用传感器消息与 tf2@{"calib_text": " `[5921] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5921>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:91
msgid ":doc:`Using stamped datatypes with tf2_ros::MessageFilter <./Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter>`."
msgstr ":doc:`使用带时间戳的数据类型与 tf2_ros::MessageFilter <./Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter>`。@{"calib_text": " `[5922] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5922>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:93
msgid "This tutorial teaches you how to use ``tf2_ros::MessageFilter`` to process stamped datatypes."
msgstr "本教程教你如何使用 ``tf2_ros::MessageFilter`` 处理带时间戳的数据类型。@{"calib_text": " `[5923] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5923>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:8
msgid "Traveling in time (C++)"
msgstr "时间旅行（C++）@{"calib_text": " `[5924] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5924>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:10 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:10
msgid "**Goal:** Learn about advanced time travel features of tf2."
msgstr "**目标：**学习有关tf2高级时间旅行功能的知识。@{"calib_text": " `[5925] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5925>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:23
msgid "In the previous tutorial, we discussed the :doc:`basics of tf2 and time <./Learning-About-Tf2-And-Time-Cpp>`. This tutorial will take us one step further and expose a powerful tf2 trick: the time travel. In short, one of the key features of tf2 library is that it is able to transform data in time as well as in space."
msgstr "在前面的教程中，我们讨论了:doc:`tf2和时间的基础知识 <./Learning-About-Tf2-And-Time-Cpp>`。本教程将带我们迈出一步，并介绍一个强大的tf2技巧：时间旅行。简而言之，tf2库的一个关键功能是它能够在时间和空间上对数据进行转换。@{"calib_text": " `[5926] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5926>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:27 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:27
msgid "This tf2 time travel feature can be useful for various tasks, like monitoring the pose of the robot for a long period of time or building a follower robot that will follow the \"steps\" of the leader. We will use that time travel feature to look up transforms back in time and program ``turtle2`` to follow 5 seconds behind ``carrot1``."
msgstr "这个tf2时间旅行功能在各种任务中都很有用，比如长时间监测机器人的姿态或构建一个会跟随领导者“步伐”的跟随机器人。我们将利用这个时间旅行功能，在时间上回溯并编程“turtle2”在“carrot1”之后追踪5秒钟。@{"calib_text": " `[5927] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5927>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:31 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:31
msgid "Time travel"
msgstr "时间旅行@{"calib_text": " `[5928] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5928>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:33
msgid "First, let's go back to where we ended in the previous tutorial :doc:`Using time <./Learning-About-Tf2-And-Time-Cpp>`. Go to your ``learning_tf2_cpp`` package."
msgstr "首先，让我们回到上一教程 :doc:`使用时间 <./Learning-About-Tf2-And-Time-Cpp>`结束的地方。进入你的``learning_tf2_cpp``软件包。@{"calib_text": " `[5929] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5929>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:36
msgid "Now, instead of making the second turtle go to where the carrot is now, we will make the second turtle go to where the first carrot was 5 seconds ago. Edit the ``lookupTransform()`` call in ``turtle_tf2_listener.cpp`` file to"
msgstr "现在，不再让第二只乌龟去当前胡萝卜所在的位置，而是让第二只乌龟去第一个胡萝卜5秒钟前所在的位置。在``turtle_tf2_listener.cpp``文件中编辑``lookupTransform()``调用：@{"calib_text": " `[5930] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5930>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:48 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:48
msgid "Now if you run this, during the first 5 seconds, the second turtle would not know where to go because we do not yet have a 5-second history of poses of the carrot. But what happens after these 5 seconds? Let's just give it a try:"
msgstr "如果现在运行这段代码，在前5秒钟内，第二只乌龟将不知道该去哪里，因为我们还没有5秒钟的胡萝卜位置历史记录。但是在这5秒钟之后会发生什么呢？让我们试一试：@{"calib_text": " `[5931] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5931>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:57 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:57
msgid "You should now notice that your turtle is driving around uncontrollably like in this screenshot. Let's try to understand reason behind that behavior."
msgstr "现在你应该注意到，你的乌龟在像这个截图中一样无法控制地四处移动。让我们试着理解背后的原因。@{"calib_text": " `[5932] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5932>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:59 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:59
msgid "In our code we asked tf2 the following question: \"What was the pose of ``carrot1`` 5 seconds ago, relative to ``turtle2`` 5 seconds ago?\". This means we are controlling the second turtle based on where it was 5 seconds ago as well as where the first carrot was 5 seconds ago."
msgstr "在我们的代码中，我们向tf2提出了以下问题：“相对于5秒前的``turtle2``，``carrot1``的姿势是什么？” 这意味着我们控制第二只乌龟的位置是基于它5秒钟前的位置以及第一个胡萝卜5秒钟前的位置。@{"calib_text": " `[5933] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5933>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:61 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:61
msgid "However, what we really want to ask is: \"What was the pose of ``carrot1`` 5 seconds ago, relative to the current position of the ``turtle2``?\"."
msgstr "然而，我们真正想要问的是：“相对于当前``turtle2``的位置，``carrot1``在5秒钟前的姿势是什么？”@{"calib_text": " `[5934] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5934>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:64
msgid "Advanced API for lookupTransform()"
msgstr "高级API用于查找变换（lookupTransform()）@{"calib_text": " `[5935] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5935>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:66
msgid "To ask the tf2 that particular question, we will use an advanced API that gives us the power to say explicitly when to acquire the specified transformations. This is done by calling the ``lookupTransform()`` method with additional parameters. Your code now would look like this:"
msgstr "为了询问tf2这个特定问题，我们将使用一个高级API，使我们能够明确地指定何时获取指定的转换。这是通过调用``lookupTransform()``方法并使用附加参数来实现的。你的代码现在应该是这样的：@{"calib_text": " `[5936] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5936>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:82
msgid "The advanced API for ``lookupTransform()`` takes six arguments:"
msgstr "``lookupTransform()``的高级API接受六个参数：@{"calib_text": " `[5937] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5937>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:84 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:83 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:231 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:200
msgid "Target frame"
msgstr "目标帧@{"calib_text": " `[5938] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5938>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:86 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:85
msgid "The time to transform to"
msgstr "要进行转换的时间@{"calib_text": " `[5939] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5939>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:88 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:87 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:233 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:202
msgid "Source frame"
msgstr "源帧@{"calib_text": " `[5940] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5940>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:90 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:89
msgid "The time at which source frame will be evaluated"
msgstr "评估源帧的时间@{"calib_text": " `[5941] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5941>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:92 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:91
msgid "Frame that does not change over time, in this case the ``world`` frame"
msgstr "在这种情况下，``world``帧是随时间不变的帧@{"calib_text": " `[5942] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5942>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:94 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:93
msgid "Time to wait for the target frame to become available"
msgstr "等待目标帧可用的时间@{"calib_text": " `[5943] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5943>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:96 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:95
msgid "To sum up, tf2 does the following in the background. In the past, it computes the transform from the ``carrot1`` to the ``world``. In the ``world`` frame, tf2 time travels from the past to now. And at the current time, tf2 computes the transform from the ``world`` to the ``turtle2``."
msgstr "总结一下，在后台，tf2会进行以下操作：它会计算从``carrot1``到``world``的变换。在``world``帧中，tf2会在过去到现在的时间上进行移动。而在当前时间，tf2会计算从``world``到``turtle2``的变换。@{"calib_text": " `[5944] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5944>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:102 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:101
msgid "Checking the results"
msgstr "检查结果@{"calib_text": " `[5945] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5945>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:104 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:103
msgid "Let's run the simulation again, this time with the advanced time-travel API:"
msgstr "让我们再次运行模拟，这次使用高级的时间旅行API：@{"calib_text": " `[5946] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5946>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:112 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:111
msgid "And yes, the second turtle is directed to where the first carrot was 5 seconds ago!"
msgstr "是的，第二只乌龟被定向到了第一根胡萝卜5秒前的位置！@{"calib_text": " `[5947] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5947>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:117
msgid "In this tutorial, you have seen one of the advanced features of tf2. You learned that tf2 can transform data in time and learned how to do that with turtlesim example. tf2 allowed you to go back in time and make frame transformations between old and current poses of turtles by using the advanced ``lookupTransform()`` API."
msgstr "在本教程中，您已经了解了tf2的一项高级功能。您了解到tf2可以在时间上对数据进行转换，并学习了如何在turtlesim示例中实现该功能。tf2允许您回溯时间，并通过使用高级的``lookupTransform()`` API在旧的和当前的乌龟姿势之间进行帧转换。@{"calib_text": " `[5948] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5948>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:8
msgid "Traveling in time (Python)"
msgstr "时间旅行（Python）@{"calib_text": " `[5949] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5949>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:23
msgid "In the previous tutorial, we discussed the :doc:`basics of tf2 and time <./Learning-About-Tf2-And-Time-Py>`. This tutorial will take us one step further and expose a powerful tf2 trick: the time travel. In short, one of the key features of tf2 library is that it is able to transform data in time as well as in space."
msgstr "在前面的教程中，我们讨论了tf2和时间的基础知识。本教程将进一步介绍一个强大的tf2技巧：时间旅行。简而言之，tf2库的一个关键特性是它能够在时间和空间上对数据进行转换。@{"calib_text": " `[5950] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5950>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:33
msgid "First, let's go back to where we ended in the previous tutorial :doc:`Using time <./Learning-About-Tf2-And-Time-Py>`. Go to your ``learning_tf2_py`` package."
msgstr "首先，让我们回到上一教程中结束的地方。转到您的``learning_tf2_py``包。@{"calib_text": " `[5951] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5951>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:36
msgid "Now, instead of making the second turtle go to where the carrot is now, we will make the second turtle go to where the first carrot was 5 seconds ago. Edit the ``lookup_transform()`` call in ``turtle_tf2_listener.py`` file to"
msgstr "现在，我们不再让第二只乌龟去当前胡萝卜的位置，而是让第二只乌龟去5秒前第一只胡萝卜的位置。在``turtle_tf2_listener.py``文件中编辑``lookup_transform()``的调用为：@{"calib_text": " `[5952] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5952>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:64
msgid "Advanced API for lookup_transform()"
msgstr "lookup_transform()的高级API@{"calib_text": " `[5953] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5953>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:66
msgid "To ask the tf2 that particular question, we will use an advanced API that gives us the power to say explicitly when to acquire the specified transformations. This is done by calling the ``lookup_transform_full()`` method with additional parameters. Your code now would look like this:"
msgstr "要向tf2提出特定的问题，我们将使用一个高级API，该API赋予我们显式指定何时获取指定的转换的能力。通过调用带有额外参数的``lookup_transform_full()``方法来实现。您的代码现在将如下所示：@{"calib_text": " `[5954] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5954>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:81
msgid "The advanced API for ``lookup_transform_full()`` takes six arguments:"
msgstr "``lookup_transform_full()``的高级API接受六个参数：@{"calib_text": " `[5955] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5955>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:116
msgid "In this tutorial, you have seen one of the advanced features of tf2. You learned that tf2 can transform data in time and learned how to do that with turtlesim example. tf2 allowed you to go back in time and make frame transformations between old and current poses of turtles by using the advanced ``lookup_transform_full()`` API."
msgstr "在本教程中，您已经看到了tf2的一项高级功能。您了解到tf2可以对数据进行时间转换，并学习了如何在turtlesim示例中进行转换。通过使用高级的``lookup_transform_full()``API，tf2允许您在时间上进行回溯，并在乌龟的旧姿势和当前姿势之间进行帧转换。@{"calib_text": " `[5956] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5956>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:8
msgid "Using stamped datatypes with ``tf2_ros::MessageFilter``"
msgstr "使用带时间戳的数据类型与``tf2_ros::MessageFilter``@{"calib_text": " `[5957] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5957>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:10
msgid "**Goal:** Learn how to use ``tf2_ros::MessageFilter`` to process stamped datatypes."
msgstr "**目标：**了解如何使用``tf2_ros::MessageFilter``处理带时间戳的数据类型。@{"calib_text": " `[5958] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5958>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:23
msgid "This tutorial explains how to use sensor data with tf2. Some real-world examples of sensor data are:"
msgstr "本教程解释了如何在tf2中使用传感器数据。一些传感器数据的真实世界示例包括：@{"calib_text": " `[5959] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5959>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:26
msgid "cameras, both mono and stereo"
msgstr "摄像头，包括单目和双目@{"calib_text": " `[5960] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5960>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:28
msgid "laser scans"
msgstr "激光扫描@{"calib_text": " `[5961] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5961>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:30
msgid "Suppose that a new turtle named ``turtle3`` is created and it doesn't have good odometry, but there is an overhead camera tracking its position and publishing it as a ``PointStamped`` message in relation to the ``world`` frame."
msgstr "假设创建了一个名为“turtle3”的新海龟，它没有良好的里程计，但有一台高空摄像头跟踪它的位置，并将其作为与“world”坐标系相关的“PointStamped”消息发布。@{"calib_text": " `[5962] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5962>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:32
msgid "``turtle1`` wants to know where ``turtle3`` is compared to itself."
msgstr "“turtle1”想知道相对于自己，"turtle3"在哪里。@{"calib_text": " `[5963] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5963>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:34
msgid "To do this ``turtle1`` must listen to the topic where ``turtle3``'s pose is being published, wait until transforms into the desired frame are ready, and then do its operations. To make this easier the ``tf2_ros::MessageFilter`` is very useful. The ``tf2_ros::MessageFilter`` will take a subscription to any ROS 2 message with a header and cache it until it is possible to transform it into the target frame."
msgstr "为了实现这一点，“turtle1”必须订阅发布“turtle3”姿态的主题，等待直到可以将其转换为所需坐标系，然后执行相应操作。为了简化此过程，“tf2_ros::MessageFilter”非常有用。“tf2_ros::MessageFilter”将订阅具有头信息的任何ROS 2消息，并将其缓存，直到可以将其转换为目标坐标系。@{"calib_text": " `[5964] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5964>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:42
msgid "1 Write the broadcaster node of PointStamped messages"
msgstr "1、编写发布PointStamped消息的广播节点@{"calib_text": " `[5965] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5965>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:44
msgid "For this tutorial we will set up a demo application which has a node (in Python) to broadcast the ``PointStamped`` position messages of ``turtle3``."
msgstr "在本教程中，我们将设置一个演示应用程序，其中包含一个用Python编写的节点，用于广播“turtle3”的“PointStamped”位置消息。@{"calib_text": " `[5966] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5966>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:46
msgid "First, let's create the source file."
msgstr "首先，让我们创建源文件。@{"calib_text": " `[5967] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5967>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:48
msgid "Go to the ``learning_tf2_py`` :doc:`package <./Writing-A-Tf2-Static-Broadcaster-Py>` we created in the previous tutorial. Inside the ``src/learning_tf2_py/learning_tf2_py`` directory download the example sensor message broadcaster code by entering the following command:"
msgstr "进入我们在之前教程中创建的“learning_tf2_py”包的“src/learning_tf2_py/learning_tf2_py”目录，并通过输入以下命令下载示例传感器消息广播器代码：@{"calib_text": " `[5968] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5968>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:171
msgid "Now let's take a look at the code. First, in the ``on_timer`` callback function, we spawn the ``turtle3`` by asynchronously calling the ``Spawn`` service of ``turtlesim``, and initialize its position at (4, 2, 0), when the turtle spawning service is ready."
msgstr "现在让我们来看一下代码。首先，在“on_timer”回调函数中，我们通过异步调用“turtlesim”的“Spawn”服务来生成“turtle3”，并在准备好龟生成服务时将其位置初始化为（4，2，0）。@{"calib_text": " `[5969] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5969>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:186
msgid "Afterward, the node publishes the topic ``turtle3/cmd_vel``, topic ``turtle3/turtle_point_stamped``, and subscribes to topic ``turtle3/pose`` and runs callback function ``handle_turtle_pose`` on every incoming message."
msgstr "之后，该节点发布“turtle3/cmd_vel”主题、“turtle3/turtle_point_stamped”主题，并订阅“turtle3/pose”主题，并在每次接收到消息时运行回调函数“handle_turtle_pose”。@{"calib_text": " `[5970] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5970>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:194
msgid "Finally, in the callback function ``handle_turtle_pose``, we initialize the ``Twist`` messages of ``turtle3`` and publish them, which will make the ``turtle3`` move along a circle. Then we fill up the ``PointStamped`` messages of ``turtle3`` with incoming ``Pose`` messages and publish them."
msgstr "最后，在回调函数“handle_turtle_pose”中，我们初始化“turtle3”的“Twist”消息并发布它们，这将使“turtle3”沿着一个圆形运动。然后，我们使用传入的“Pose”消息填充“turtle3”的“PointStamped”消息并发布它们。@{"calib_text": " `[5971] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5971>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:213
msgid "1.2 Write the launch file"
msgstr "1.2 编写启动文件@{"calib_text": " `[5972] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5972>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:215
msgid "In order to run this demo, we need to create a launch file ``turtle_tf2_sensor_message.launch.py`` in the ``launch`` subdirectory of package ``learning_tf2_py``:"
msgstr "为了运行此演示，我们需要在包 ``learning_tf2_py`` 的 ``launch`` 子目录中创建一个名为 ``turtle_tf2_sensor_message.launch.py`` 的启动文件：@{"calib_text": " `[5973] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5973>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:261
msgid "1.3 Add an entry point"
msgstr "1.3 添加入口点@{"calib_text": " `[5974] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5974>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:292
msgid "And then we can build the package:"
msgstr "然后我们可以构建该包：@{"calib_text": " `[5975] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5975>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:316
msgid "2 Writing the message filter/listener node"
msgstr "2 编写消息过滤器/监听器节点@{"calib_text": " `[5976] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5976>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:318
msgid "Now, to get the streaming ``PointStamped`` data of ``turtle3`` in the frame of ``turtle1`` reliably, we will create the source file of the message filter/listener node."
msgstr "现在，为了可靠地获取 ``turtle3`` 在 ``turtle1`` 坐标系下的实时流 ``PointStamped`` 数据，我们将创建消息过滤器/监听器节点的源文件。@{"calib_text": " `[5977] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5977>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:320
msgid "Go to the ``learning_tf2_cpp`` :doc:`package <./Writing-A-Tf2-Static-Broadcaster-Cpp>` we created in the previous tutorial. Inside the ``src/learning_tf2_cpp/src`` directory download file ``turtle_tf2_message_filter.cpp`` by entering the following command:"
msgstr "进入之前教程中创建的``learning_tf2_cpp`` :doc:`package <./Writing-A-Tf2-Static-Broadcaster-Cpp>`。在``src/learning_tf2_cpp/src``目录下，通过输入以下命令下载文件``turtle_tf2_message_filter.cpp``：@{"calib_text": " `[5978] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5978>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:440
msgid "First, you must include the ``tf2_ros::MessageFilter`` headers from the ``tf2_ros`` package, as well as the previously used ``tf2`` and ``ros2`` related headers."
msgstr "首先，您必须包含``tf2_ros``包中的``tf2_ros::MessageFilter``头文件，以及先前使用过的``tf2``和``ros2``相关头文件。@{"calib_text": " `[5979] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5979>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:458
msgid "Second, there needs to be persistent instances of ``tf2_ros::Buffer``, ``tf2_ros::TransformListener`` and ``tf2_ros::MessageFilter``."
msgstr "其次，需要有``tf2_ros::Buffer``、``tf2_ros::TransformListener``和``tf2_ros::MessageFilter``的持久实例。@{"calib_text": " `[5980] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5980>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:469
msgid "Third, the ROS 2 ``message_filters::Subscriber`` must be initialized with the topic. And the ``tf2_ros::MessageFilter`` must be initialized with that ``Subscriber`` object. The other arguments of note in the ``MessageFilter`` constructor are the ``target_frame`` and the callback function. The target frame is the frame into which it will make sure ``canTransform`` will succeed. And the callback function is the function that will be called when the data is ready."
msgstr "第三，ROS 2中的``message_filters::Subscriber``必须使用该主题进行初始化。并且``tf2_ros::MessageFilter``必须使用该``Subscriber``对象进行初始化。``MessageFilter``构造函数中的其他值得注意的参数是``target_frame``和回调函数。目标框架是它将确保``canTransform``成功的框架。回调函数是数据准备就绪时将调用的函数。@{"calib_text": " `[5981] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5981>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:504
msgid "And last, the callback method will call ``tf2_buffer_->transform`` when the data is ready and print output to the console."
msgstr "最后，当数据准备就绪时，回调方法将调用``tf2_buffer_->transform``并将输出打印到控制台。@{"calib_text": " `[5982] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5982>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:530
msgid "Before building the package ``learning_tf2_cpp``, please add two another dependencies in the ``package.xml`` file of this package:"
msgstr "在构建``learning_tf2_cpp``包之前，请在该包的``package.xml``文件中添加另外两个依赖项：@{"calib_text": " `[5983] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5983>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:540
msgid "And in the ``CMakeLists.txt`` file, add two lines below the existing dependencies:"
msgstr "在``CMakeLists.txt``文件中，在现有依赖项下面添加两行：@{"calib_text": " `[5984] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5984>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:547
msgid "The lines below will deal with differences between ROS distributions:"
msgstr "以下行将处理ROS版本之间的差异：@{"calib_text": " `[5985] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5985>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:564
msgid "After that, add the executable and name it ``turtle_tf2_message_filter``, which you'll use later with ``ros2 run``."
msgstr "之后，添加可执行文件，并将其命名为``turtle_tf2_message_filter``，稍后将在``ros2 run``中使用。@{"calib_text": " `[5986] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5986>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:583
msgid "Finally, add the ``install(TARGETS…)`` section (below other existing nodes) so ``ros2 run`` can find your executable:"
msgstr "最后，在其他现有节点下面添加``install(TARGETS…)``部分，以便``ros2 run``可以找到您的可执行文件：@{"calib_text": " `[5987] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5987>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:612
msgid "Now open a new terminal, navigate to the root of your workspace, and rebuild the package with command:"
msgstr "现在打开一个新的终端，导航到您的工作空间的根目录，并使用以下命令重新构建软件包：@{"calib_text": " `[5988] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5988>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:661
msgid "3 Run"
msgstr "3 运行@{"calib_text": " `[5989] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5989>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:663
msgid "First we need to run several nodes (including the broadcaster node of PointStamped messages) by launching the launch file ``turtle_tf2_sensor_message.launch.py``:"
msgstr "首先，我们需要通过启动启动文件``turtle_tf2_sensor_message.launch.py``来运行多个节点（包括PointStamped消息的广播节点）：@{"calib_text": " `[5990] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5990>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:669
msgid "This will bring up the ``turtlesim`` window with two turtles, where ``turtle3`` is moving along a circle, while ``turtle1`` isn't moving at first. But you can run the ``turtle_teleop_key`` node in another terminal to drive ``turtle1`` to move:"
msgstr "这将在``turtlesim``窗口中带来两只乌龟，其中``turtle3``沿着一个圆圈移动，而``turtle1``起初不动。但是你可以在另一个终端中运行``turtle_teleop_key``节点来驱动``turtle1``移动：@{"calib_text": " `[5991] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5991>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:678
msgid "Now if you echo the topic ``turtle3/turtle_point_stamped``:"
msgstr "现在，如果你回显主题``turtle3/turtle_point_stamped``：@{"calib_text": " `[5992] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5992>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:684
msgid "Then there will be output like this:"
msgstr "那么将会有如下输出：@{"calib_text": " `[5993] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5993>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:719
msgid "When the demo is running, open another terminal and run the message filter/listener node:"
msgstr "当演示运行时，打开另一个终端并运行消息过滤器/监听器节点：@{"calib_text": " `[5994] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5994>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:725
msgid "If it's running correctly you should see streaming data like this:"
msgstr "如果运行正确，你应该会看到像下面这样的流式数据：@{"calib_text": " `[5995] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5995>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:741
msgid "In this tutorial you learned how to use sensor data/messages in tf2. Specifically speaking, you learned how to publish ``PointStamped`` messages on a topic, and how to listen to the topic and transform the frame of ``PointStamped`` messages with ``tf2_ros::MessageFilter``."
msgstr "在本教程中，您学习了如何在tf2中使用传感器数据/消息。具体来说，您学习了如何在一个话题上发布“PointStamped”消息，以及如何监听该话题并使用“tf2_ros::MessageFilter”转换“PointStamped”消息的帧。@{"calib_text": " `[5996] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5996>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:8
msgid "Writing a broadcaster (C++)"
msgstr "编写广播器（C++）@{"calib_text": " `[5997] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5997>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:10 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:10
msgid "**Goal:** Learn how to broadcast the state of a robot to tf2."
msgstr "**目标：**学习如何将机器人的状态广播到tf2。@{"calib_text": " `[5998] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5998>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:23 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:23
msgid "In the next two tutorials we will write the code to reproduce the demo from the :doc:`Introduction to tf2 <./Introduction-To-Tf2>` tutorial. After that, following tutorials focus on extending the demo with more advanced tf2 features, including the usage of timeouts in transformation lookups and time travel."
msgstr "在接下来的两个教程中，我们将编写代码来重现 :doc:`Introduction to tf2 <./Introduction-To-Tf2>` 教程中的演示。之后，后续教程将重点介绍如何使用更高级的tf2功能扩展演示，包括在转换查找中使用超时和时间旅行。@{"calib_text": " `[5999] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=5999>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:29
msgid "This tutorial assumes you have a working knowledge of ROS 2 and you have completed the :doc:`Introduction to tf2 tutorial <./Introduction-To-Tf2>` and :doc:`tf2 static broadcaster tutorial (C++) <./Writing-A-Tf2-Static-Broadcaster-Cpp>`. In previous tutorials, you learned how to :doc:`create a workspace <../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>` and :doc:`create a package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`. You also have created the ``learning_tf2_cpp`` :doc:`package <./Writing-A-Tf2-Static-Broadcaster-Cpp>`, which is where we will continue working from."
msgstr "本教程假设您已经具备ROS 2的工作知识，并且已经完成了 :doc:`Introduction to tf2 教程 <./Introduction-To-Tf2>` 和 :doc:`tf2静态广播器教程 (C++) <./Writing-A-Tf2-Static-Broadcaster-Cpp>`。在之前的教程中，您学习了如何 :doc:`创建工作空间 <../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>` 和 :doc:`创建软件包 <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`。您还创建了“learning_tf2_cpp” :doc:`软件包 <./Writing-A-Tf2-Static-Broadcaster-Cpp>`，我们将从这里继续工作。@{"calib_text": " `[6000] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6000>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:37 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:37
msgid "1 Write the broadcaster node"
msgstr "1. 编写广播器节点@{"calib_text": " `[6001] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6001>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:39
msgid "Let's first create the source files. Go to the ``learning_tf2_cpp`` package we created in the previous tutorial. Inside the ``src`` directory download the example broadcaster code by entering the following command:"
msgstr "首先我们要创建源文件。进入我们在上一个教程中创建的 ``learning_tf2_cpp`` 包。在 ``src`` 目录中下载示例广播器的代码，输入以下命令：@{"calib_text": " `[6002] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6002>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:157 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:175
msgid "Now, let's take a look at the code that is relevant to publishing the turtle pose to tf2. Firstly, we define and acquire a single parameter ``turtlename``, which specifies a turtle name, e.g. ``turtle1`` or ``turtle2``."
msgstr "现在，让我们来看一下与将海龟位姿发布到 tf2 相关的代码。首先，我们定义并获取一个参数 ``turtlename``，它指定了一个海龟的名称，例如 ``turtle1`` 或者 ``turtle2``。@{"calib_text": " `[6003] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6003>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:164 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:183
msgid "Afterward, the node subscribes to topic ``turtleX/pose`` and runs function ``handle_turtle_pose`` on every incoming message."
msgstr "接下来，节点订阅了 ``turtleX/pose`` 主题，并在每个传入的消息上运行函数 ``handle_turtle_pose``。@{"calib_text": " `[6004] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6004>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:172 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:193
msgid "Now, we create a ``TransformStamped`` object and give it the appropriate metadata."
msgstr "现在，我们创建一个 ``TransformStamped`` 对象，并为其添加适当的元数据。@{"calib_text": " `[6005] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6005>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:174
msgid "We need to give the transform being published a timestamp, and we'll just stamp it with the current time by calling ``this->get_clock()->now()``. This will return the current time used by the ``Node``."
msgstr "我们需要为发布的变换设置一个时间戳，通过调用 ``this->get_clock()->now()`` 将其标记为当前时间。这将返回 ``Node`` 使用的当前时间。@{"calib_text": " `[6006] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6006>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:176 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:197
msgid "Then we need to set the name of the parent frame of the link we're creating, in this case ``world``."
msgstr "然后，我们需要设置正在创建的链接的父帧的名称，本例中为 ``world``。@{"calib_text": " `[6007] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6007>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:178 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:199
msgid "Finally, we need to set the name of the child node of the link we're creating, in this case this is the name of the turtle itself."
msgstr "最后，我们需要设置链接创建的子节点的名称，这里的子节点名称就是乌龟自身的名称。@{"calib_text": " `[6008] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6008>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:180 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:201
msgid "The handler function for the turtle pose message broadcasts this turtle's translation and rotation, and publishes it as a transform from frame ``world`` to frame ``turtleX``."
msgstr "处理乌龟姿态消息的处理函数会广播该乌龟的平移和旋转，并将其发布为从帧``world``到帧``turtleX``的变换。@{"calib_text": " `[6009] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6009>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:192 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:213
msgid "Here we copy the information from the 3D turtle pose into the 3D transform."
msgstr "在这里，我们将3D乌龟姿态的信息复制到3D变换中。@{"calib_text": " `[6010] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6010>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:212 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:232
msgid "Finally we take the transform that we constructed and pass it to the ``sendTransform`` method of the ``TransformBroadcaster`` that will take care of broadcasting."
msgstr "最后，我们将构建的变换传递给``TransformBroadcaster``的``sendTransform``方法，它会负责广播。@{"calib_text": " `[6011] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6011>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:224
msgid "Now open the ``CMakeLists.txt`` add the executable and name it ``turtle_tf2_broadcaster``, which you'll use later with ``ros2 run``."
msgstr "现在打开``CMakeLists.txt``，添加可执行文件并将其命名为``turtle_tf2_broadcaster``，稍后可以在``ros2 run``中使用它。@{"calib_text": " `[6012] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6012>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:249 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:260
msgid "Now create a launch file for this demo. With your text editor, create a new file called ``turtle_tf2_demo.launch.py`` in the ``launch`` folder, and add the following lines:"
msgstr "现在为此演示创建一个启动文件。使用文本编辑器，在``launch``文件夹中创建一个名为``turtle_tf2_demo.launch.py``的新文件，并添加以下内容：@{"calib_text": " `[6013] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6013>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:278 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:289
msgid "First we import required modules from the ``launch`` and ``launch_ros`` packages. It should be noted that ``launch`` is a generic launching framework (not ROS 2 specific) and ``launch_ros`` has ROS 2 specific things, like nodes that we import here."
msgstr "首先我们从 ``launch`` 和 ``launch_ros`` 包中导入所需的模块。需要注意的是，``launch`` 是一个通用的启动框架（不特定于ROS 2），而 ``launch_ros`` 则有ROS 2特定的功能，例如在这里我们导入的节点。@{"calib_text": " `[6014] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6014>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:286 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:297
msgid "Now we run our nodes that start the turtlesim simulation and broadcast ``turtle1`` state to the tf2 using our ``turtle_tf2_broadcaster`` node."
msgstr "现在我们运行节点，启动turtlesim仿真，并使用我们的 ``turtle_tf2_broadcaster`` 节点将 ``turtle1`` 状态广播到tf2。@{"calib_text": " `[6015] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6015>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:309 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:320
msgid "Open ``package.xml`` with your text editor. Add the following dependencies corresponding to your launch file's import statements:"
msgstr "使用文本编辑器打开 ``package.xml``。根据你的启动文件的导入语句，添加以下依赖项：@{"calib_text": " `[6016] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6016>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:317 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:328
msgid "This declares the additional required ``launch`` and ``launch_ros`` dependencies when its code is executed."
msgstr "当执行其代码时，这将声明额外所需的 ``launch`` 和 ``launch_ros`` 依赖项。@{"calib_text": " `[6017] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6017>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:324
msgid "Reopen ``CMakeLists.txt`` and add the line so that the launch files from the ``launch/`` folder would be installed."
msgstr "重新打开 ``CMakeLists.txt`` 并添加该行，以便安装 ``launch/`` 文件夹中的启动文件。@{"calib_text": " `[6018] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6018>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:331 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:352
msgid "You can learn more about creating launch files in :doc:`this tutorial <../Launch/Creating-Launch-Files>`."
msgstr "你可以在 :doc:`这个教程 <../Launch/Creating-Launch-Files>` 中了解更多关于创建启动文件的信息。@{"calib_text": " `[6019] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6019>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:334 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:355 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:328 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:281 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:285 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:304
msgid "3 Build"
msgstr "3 构建@{"calib_text": " `[6020] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6020>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:403 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:424 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:397 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:350 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:354 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:373
msgid "4 Run"
msgstr "4 运行@{"calib_text": " `[6021] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6021>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:405 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:426
msgid "Now run the launch file that will start the turtlesim simulation node and ``turtle_tf2_broadcaster`` node:"
msgstr "现在运行启动文件，启动turtlesim仿真节点和``turtle_tf2_broadcaster``节点:@{"calib_text": " `[6022] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6022>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:417 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:438
msgid "You will now see that the turtlesim simulation have started with one turtle that you can control."
msgstr "你会看到turtlesim仿真已经启动，并且有一只你可以控制的乌龟。@{"calib_text": " `[6023] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6023>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:421 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:442
msgid "Now, use the ``tf2_echo`` tool to check if the turtle pose is actually getting broadcast to tf2:"
msgstr "现在，使用``tf2_echo``工具检查乌龟的姿态是否真的被广播到tf2:@{"calib_text": " `[6024] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6024>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:427 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:448
msgid "This should show you the pose of the first turtle. Drive around the turtle using the arrow keys (make sure your ``turtle_teleop_key`` terminal window is active, not your simulator window). In your console output you will see something similar to this:"
msgstr "这应该会显示第一只乌龟的姿态。使用箭头键驱动乌龟（确保你的``turtle_teleop_key``终端窗口处于活动状态，而不是仿真器窗口）。在控制台输出中，你会看到类似于以下内容:@{"calib_text": " `[6025] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6025>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:446 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:467
msgid "If you run ``tf2_echo`` for the transform between the ``world`` and ``turtle2``, you should not see a transform, because the second turtle is not there yet. However, as soon as we add the second turtle in the next tutorial, the pose of ``turtle2`` will be broadcast to tf2."
msgstr "如果你对``world``和``turtle2``之间的变换运行``tf2_echo``命令，你将不会看到任何变换，因为第二只乌龟尚未出现。然而，一旦我们在下一个教程中添加第二只乌龟，``turtle2``的位姿将会被广播到tf2。@{"calib_text": " `[6026] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6026>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:452
msgid "In this tutorial you learned how to broadcast the pose of the robot (position and orientation of the turtle) to tf2 and how to use the ``tf2_echo`` tool. To actually use the transforms broadcasted to tf2, you should move on to the next tutorial about creating a :doc:`tf2 listener <./Writing-A-Tf2-Listener-Cpp>`."
msgstr "在本教程中，你学会了如何将机器人的位姿（乌龟的位置和方向）广播到tf2，并学会了如何使用``tf2_echo``工具。要实际使用广播到tf2的变换，请继续进行下一个教程，了解如何创建一个：``tf2 listener``。@{"calib_text": " `[6027] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6027>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:8
msgid "Writing a broadcaster (Python)"
msgstr "编写广播器（Python）@{"calib_text": " `[6028] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6028>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:29
msgid "This tutorial assumes you have a working knowledge of ROS 2 and you have completed the :doc:`Introduction to tf2 tutorial <./Introduction-To-Tf2>`. In previous tutorials, you learned how to :doc:`create a workspace <../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>` and :doc:`create a package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`. You also have created the ``learning_tf2_py`` :doc:`package <./Writing-A-Tf2-Static-Broadcaster-Py>`, which is where we will continue working from."
msgstr "本教程假设你具有ROS 2的基本知识，并且已经完成了：``Introduction to tf2 tutorial``。在之前的教程中，你学会了如何创建工作空间和软件包。你还创建了``learning_tf2_py``包，我们将从这里继续工作。@{"calib_text": " `[6029] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6029>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:39
msgid "Let's first create the source files. Go to the ``learning_tf2_py`` package we created in the previous tutorial. Inside the ``src/learning_tf2_py/learning_tf2_py`` directory download the example broadcaster code by entering the following command:"
msgstr "首先，让我们创建源代码文件。进入之前创建的``learning_tf2_py``软件包。在``src/learning_tf2_py/learning_tf2_py``目录中，通过输入以下命令下载示例广播器代码：@{"calib_text": " `[6030] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6030>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:195
msgid "We need to give the transform being published a timestamp, and we'll just stamp it with the current time by calling ``self.get_clock().now()``. This will return the current time used by the ``Node``."
msgstr "我们需要给要发布的变换添加时间戳，我们将使用``self.get_clock().now()``调用来将其标记为当前时间。这将返回``Node``使用的当前时间。@{"calib_text": " `[6031] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6031>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:241
msgid "You can also publish static transforms with the same pattern by instantiating a ``tf2_ros.StaticTransformBroadcaster`` instead of a ``tf2_ros.TransformBroadcaster``. The static transforms will be published on the ``/tf_static`` topic and will be sent only when required, not periodically. For more details see :doc:`here <./Writing-A-Tf2-Static-Broadcaster-Py>`."
msgstr "你也可以通过实例化``tf2_ros.StaticTransformBroadcaster``而不是``tf2_ros.TransformBroadcaster``来发布相同模式的静态变换。静态变换将发布到``/tf_static``话题，并且仅在需要时发送，而不是周期性地发送。有关更多详细信息，请参阅：:doc:`此处 <./Writing-A-Tf2-Static-Broadcaster-Py>`。@{"calib_text": " `[6032] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6032>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:318
msgid "Navigate one level back to the ``src/learning_tf2_py`` directory, where the ``setup.py``, ``setup.cfg``, and ``package.xml`` files are located."
msgstr "返回到``src/learning_tf2_py``目录的上一级，该目录中包含``setup.py``、``setup.cfg``和``package.xml``文件。@{"calib_text": " `[6033] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6033>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:333
msgid "2.3 Update setup.py"
msgstr "2.3 更新 setup.py@{"calib_text": " `[6034] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6034>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:335
msgid "Reopen ``setup.py`` and add the line so that the launch files from the ``launch/`` folder would be installed. The ``data_files`` field should now look like this:"
msgstr "重新打开``setup.py``并添加以下行，以便安装``launch/``文件夹中的启动文件。``data_files``字段现在应该如下所示：@{"calib_text": " `[6035] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6035>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:345
msgid "Also add the appropriate imports at the top of the file:"
msgstr "还要在文件顶部添加适当的导入：@{"calib_text": " `[6036] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6036>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:473
msgid "In this tutorial you learned how to broadcast the pose of the robot (position and orientation of the turtle) to tf2 and how to use the ``tf2_echo`` tool. To actually use the transforms broadcasted to tf2, you should move on to the next tutorial about creating a :doc:`tf2 listener <./Writing-A-Tf2-Listener-Py>`."
msgstr "在本教程中，您学习了如何将机器人的姿态（乌龟的位置和方向）广播到tf2，以及如何使用``tf2_echo``工具。要实际使用广播到tf2的变换，请继续下一个有关创建:doc:`tf2监听器 <./Writing-A-Tf2-Listener-Py>`的教程。@{"calib_text": " `[6037] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6037>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:8
msgid "Writing a listener (C++)"
msgstr "编写监听器（C++）@{"calib_text": " `[6038] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6038>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:10 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:10
msgid "**Goal:** Learn how to use tf2 to get access to frame transformations."
msgstr "**目标：**学习如何使用tf2来获取帧变换的访问权限。@{"calib_text": " `[6039] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6039>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:23 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:23
msgid "In previous tutorials we created a tf2 broadcaster to publish the pose of a turtle to tf2."
msgstr "在之前的教程中，我们创建了一个tf2广播器，将乌龟的姿态发布到tf2中。@{"calib_text": " `[6040] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6040>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:25 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:25
msgid "In this tutorial we'll create a tf2 listener to start using tf2."
msgstr "在本教程中，我们将创建一个tf2监听器，开始使用tf2。@{"calib_text": " `[6041] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6041>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:30
msgid "This tutorial assumes you have completed the :doc:`tf2 static broadcaster tutorial (C++) <./Writing-A-Tf2-Static-Broadcaster-Cpp>` and the :doc:`tf2 broadcaster tutorial (C++) <./Writing-A-Tf2-Broadcaster-Cpp>`. In the previous tutorial, we created a ``learning_tf2_cpp`` package, which is where we will continue working from."
msgstr "本教程假设您已经完成了：doc:`tf2静态广播器教程（C++）<./Writing-A-Tf2-Static-Broadcaster-Cpp>`和：doc:`tf2广播器教程（C++）<./Writing-A-Tf2-Broadcaster-Cpp>`。在之前的教程中，我们创建了一个``learning_tf2_cpp``软件包，我们将从这里继续工作。@{"calib_text": " `[6042] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6042>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:37 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:37
msgid "1 Write the listener node"
msgstr "1 编写监听器节点@{"calib_text": " `[6043] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6043>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:39
msgid "Let's first create the source files. Go to the ``learning_tf2_cpp`` package we created in the previous tutorial. Inside the ``src`` directory download the example listener code by entering the following command:"
msgstr "首先，我们需要创建源文件。转到我们在上一个教程中创建的“learning_tf2_cpp”包。在“src”目录中，通过输入以下命令来下载示例监听器代码：@{"calib_text": " `[6044] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6044>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:213
msgid "To understand how the service behind spawning turtle works, please refer to :doc:`writing a simple service and client (C++) <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client>` tutorial."
msgstr "要了解生成海龟背后的服务是如何工作的，请参考:doc:`编写一个简单的服务和客户端（C++）<../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client>` 教程。@{"calib_text": " `[6045] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6045>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:215
msgid "Now, let's take a look at the code that is relevant to get access to frame transformations. The ``tf2_ros`` contains a ``TransformListener`` header file implementation that makes the task of receiving transforms easier."
msgstr "现在，让我们看一下与获取帧变换相关的代码。``tf2_ros``包含了一个``TransformListener``头文件的实现，使得接收变换的任务更加容易。@{"calib_text": " `[6046] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6046>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:222 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:192
msgid "Here, we create a ``TransformListener`` object. Once the listener is created, it starts receiving tf2 transformations over the wire, and buffers them for up to 10 seconds."
msgstr "在这里，我们创建了一个``TransformListener``对象。一旦创建了监听器，它就开始通过网络接收tf2变换，并将其缓冲最多10秒。@{"calib_text": " `[6047] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6047>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:229 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:198
msgid "Finally, we query the listener for a specific transformation. We call ``lookup_transform`` method with following arguments:"
msgstr "最后，我们查询监听器以获取特定的变换。我们使用以下参数调用``lookup_transform``方法：@{"calib_text": " `[6048] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6048>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:235 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:204
msgid "The time at which we want to transform"
msgstr "我们想要进行变换的时间@{"calib_text": " `[6049] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6049>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:237
msgid "Providing ``tf2::TimePointZero()`` will just get us the latest available transform. All this is wrapped in a try-catch block to handle possible exceptions."
msgstr "提供 ``tf2::TimePointZero()`` 将获取最新可用的变换。所有这些都包装在 try-catch 块中，以处理可能的异常。@{"calib_text": " `[6050] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6050>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:251
msgid "Now open the ``CMakeLists.txt`` add the executable and name it ``turtle_tf2_listener``, which you'll use later with ``ros2 run``."
msgstr "现在打开 ``CMakeLists.txt``，添加可执行文件并将其命名为 ``turtle_tf2_listener``，稍后您将在 ``ros2 run`` 中使用它。@{"calib_text": " `[6051] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6051>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:274 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:227
msgid "2 Update the launch file"
msgstr "2 更新启动文件@{"calib_text": " `[6052] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6052>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:276 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:229
msgid "Open the launch file called ``turtle_tf2_demo.launch.py`` with your text editor, add two new nodes to the launch description, add a launch argument, and add the imports. The resulting file should look like:"
msgstr "使用文本编辑器打开名为 ``turtle_tf2_demo.launch.py`` 的启动文件，向启动描述中添加两个新节点，添加一个启动参数，并添加导入语句。结果文件应如下所示：@{"calib_text": " `[6053] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6053>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:325 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:277
msgid "This will declare a ``target_frame`` launch argument, start a broadcaster for second turtle that we will spawn and listener that will subscribe to those transformations."
msgstr "这将声明一个 ``target_frame`` 启动参数，启动一个我们将要生成的第二只乌龟的广播器和订阅这些变换的监听器。@{"calib_text": " `[6054] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6054>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:399 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:352
msgid "Now you're ready to start your full turtle demo:"
msgstr "现在您可以开始完整的乌龟演示了：@{"calib_text": " `[6055] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6055>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:405 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:358
msgid "You should see the turtle sim with two turtles. In the second terminal window type the following command:"
msgstr "你应该能看到带有两只乌龟的乌龟模拟器。在第二个终端窗口中输入以下命令：@{"calib_text": " `[6056] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6056>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:412 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:365
msgid "To see if things work, simply drive around the first turtle using the arrow keys (make sure your terminal window is active, not your simulator window), and you'll see the second turtle following the first one!"
msgstr "为了测试是否正常工作，只需使用箭头键驱动第一只乌龟（确保你的终端窗口处于活动状态，而不是模拟器窗口），你将看到第二只乌龟跟随着第一只乌龟！@{"calib_text": " `[6057] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6057>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:417 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:370
msgid "In this tutorial you learned how to use tf2 to get access to frame transformations. You also have finished writing your own turtlesim demo that you first tried in :doc:`Introduction to tf2 <./Introduction-To-Tf2>` tutorial."
msgstr "在本教程中，你学会了如何使用tf2获取帧变换的访问权限。你还完成了自己编写的乌龟模拟器演示，该演示首次在 :doc:`tf2介绍教程 <./Introduction-To-Tf2>` 中尝试。@{"calib_text": " `[6058] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6058>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:8
msgid "Writing a listener (Python)"
msgstr "编写监听器（Python）@{"calib_text": " `[6059] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6059>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:30
msgid "This tutorial assumes you have completed the :doc:`tf2 broadcaster tutorial (Python) <./Writing-A-Tf2-Broadcaster-Py>`. In the previous tutorial, we created a ``learning_tf2_py`` package, which is where we will continue working from."
msgstr "本教程假设你已经完成了 :doc:`tf2广播器教程（Python） <./Writing-A-Tf2-Broadcaster-Py>`。在前一个教程中，我们创建了一个名为``learning_tf2_py``的软件包，在这里我们将继续工作。@{"calib_text": " `[6060] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6060>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:39
msgid "Let's first create the source files. Go to the ``learning_tf2_py`` package we created in the previous tutorial. Inside the ``src/learning_tf2_py/learning_tf2_py`` directory download the example listener code by entering the following command:"
msgstr "让我们首先创建源文件。转到前一个教程中创建的``learning_tf2_py``软件包。在``src/learning_tf2_py/learning_tf2_py``目录中，通过输入以下命令下载示例监听器代码：@{"calib_text": " `[6061] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6061>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:183
msgid "To understand how the service behind spawning turtle works, please refer to :doc:`writing a simple service and client (Python) <../../Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client>` tutorial."
msgstr "要了解生成海龟背后的服务如何工作，请参考 :doc:`编写简单服务和客户端（Python）<../../Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client>` 教程。@{"calib_text": " `[6062] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6062>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:185
msgid "Now, let's take a look at the code that is relevant to get access to frame transformations. The ``tf2_ros`` package provides an implementation of a ``TransformListener`` to help make the task of receiving transforms easier."
msgstr "现在，让我们看一下与获取帧转换相关的代码。``tf2_ros`` 包提供了一个 ``TransformListener`` 的实现，以帮助简化接收转换的任务。@{"calib_text": " `[6063] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6063>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:206
msgid "Providing ``rclpy.time.Time()`` will just get us the latest available transform. All this is wrapped in a try-except block to handle possible exceptions."
msgstr "提供 ``rclpy.time.Time()`` 只会获取最新可用的转换。所有这些都包装在 try-except 块中，以处理可能的异常。@{"calib_text": " `[6064] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6064>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:8
msgid "Writing a static broadcaster (C++)"
msgstr "编写静态广播器（C++）@{"calib_text": " `[6065] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6065>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:10 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:10
msgid "**Goal:** Learn how to broadcast static coordinate frames to tf2."
msgstr "**目标：**学习如何向 tf2 广播静态坐标框架。@{"calib_text": " `[6066] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6066>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:23 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:23
msgid "Publishing static transforms is useful to define the relationship between a robot base and its sensors or non-moving parts. For example, it is easiest to reason about laser scan measurements in a frame at the center of the laser scanner."
msgstr "发布静态转换对于定义机器人底盘与其传感器或静止部件之间的关系非常有用。例如，对于在激光扫描仪中心的坐标框架中的激光扫描测量，最容易进行推理。@{"calib_text": " `[6067] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6067>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:26 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:26
msgid "This is a standalone tutorial covering the basics of static transforms, which consists of two parts. In the first part we will write code to publish static transforms to tf2. In the second part we will explain how to use the commandline ``static_transform_publisher`` executable tool in ``tf2_ros``."
msgstr "这是一个独立的教程，介绍了静态变换的基础知识，由两部分组成。在第一部分中，我们将编写代码将静态变换发布到tf2。在第二部分中，我们将解释如何使用命令行中的 ``static_transform_publisher`` 可执行工具，该工具位于 ``tf2_ros`` 中。@{"calib_text": " `[6068] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6068>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:30 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:30
msgid "In the next two tutorials we will write the code to reproduce the demo from the :doc:`Introduction to tf2 <./Introduction-To-Tf2>` tutorial. After that, the following tutorials focus on extending the demo with more advanced tf2 features."
msgstr "在接下来的两个教程中，我们将编写代码以重现 :doc:`Introduction to tf2 <./Introduction-To-Tf2>` 教程中的演示。之后，下面的教程将侧重于使用更高级的tf2功能扩展演示。@{"calib_text": " `[6069] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6069>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:36 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:36
msgid "In previous tutorials, you learned how to :doc:`create a workspace <../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>` and :doc:`create a package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`."
msgstr "在之前的教程中，您学习了如何 :doc:`创建工作空间 <../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>` 和 :doc:`创建包 <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`。@{"calib_text": " `[6070] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6070>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:44
msgid "First we will create a package that will be used for this tutorial and the following ones. The package called ``learning_tf2_cpp`` will depend on ``geometry_msgs``, ``rclcpp``, ``tf2``, ``tf2_ros``, and ``turtlesim``. Code for this tutorial is stored `here <https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_cpp/src/static_turtle_tf2_broadcaster.cpp>`_."
msgstr "首先，我们将创建一个用于本教程和后续教程的包。该包名为 ``learning_tf2_cpp``，它将依赖于 ``geometry_msgs``、``rclcpp``、``tf2``、``tf2_ros`` 和 ``turtlesim``。本教程的代码存储在 `此处 <https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_cpp/src/static_turtle_tf2_broadcaster.cpp>`_。@{"calib_text": " `[6071] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6071>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:48 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:48
msgid "Open a new terminal and :doc:`source your ROS 2 installation <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>` so that ``ros2`` commands will work. Navigate to workspace's ``src`` folder and create a new package:"
msgstr "打开一个新的终端，并 :doc:`source ROS 2 安装目录 <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>`，以使 ``ros2`` 命令可用。导航到工作空间的 ``src`` 文件夹并创建一个新的包：@{"calib_text": " `[6072] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6072>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:55
msgid "Your terminal will return a message verifying the creation of your package ``learning_tf2_cpp`` and all its necessary files and folders."
msgstr "终端将返回一条消息，确认已成功创建包 ``learning_tf2_cpp`` 及其所需的所有文件和文件夹。@{"calib_text": " `[6073] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6073>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:58 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:58
msgid "2 Write the static broadcaster node"
msgstr "2 编写静态广播节点@{"calib_text": " `[6074] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6074>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:60
msgid "Let's first create the source files. Inside the ``src/learning_tf2_cpp/src`` directory download the example static broadcaster code by entering the following command:"
msgstr "首先创建源文件。在``src/learning_tf2_cpp/src``目录下，通过输入以下命令下载示例静态广播代码：@{"calib_text": " `[6075] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6075>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:172
msgid "Now let's look at the code that is relevant to publishing the static turtle pose to tf2. The first lines include the required header files. First we include ``geometry_msgs/msg/transform_stamped.hpp`` to access the ``TransformStamped`` message type, which we will publish to the transformation tree."
msgstr "现在我们来看一下与发布静态海龟姿态到tf2有关的代码。首先包含所需的头文件。首先我们包含``geometry_msgs/msg/transform_stamped.hpp``以访问``TransformStamped``消息类型，我们将把它发布到变换树中。@{"calib_text": " `[6076] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6076>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:180
msgid "Afterward, ``rclcpp`` is included so its ``rclcpp::Node`` class can be used."
msgstr "随后，包含``rclcpp``，以便可以使用其``rclcpp::Node``类。@{"calib_text": " `[6077] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6077>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:186
msgid "``tf2::Quaternion`` is a class for a quaternion that provides convenient functions for converting Euler angles to quaternions and vice versa. We also include ``tf2_ros/static_transform_broadcaster.h`` to use the ``StaticTransformBroadcaster`` to make the publishing of static transforms easy."
msgstr "``tf2::Quaternion``是一个用于四元数的类，提供了方便的函数来将欧拉角转换为四元数和反之。我们还包含``tf2_ros/static_transform_broadcaster.h``以使用``StaticTransformBroadcaster``来简化发布静态变换。@{"calib_text": " `[6078] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6078>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:194 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:218
msgid "The ``StaticFramePublisher`` class constructor initializes the node with the name ``static_turtle_tf2_broadcaster``. Then, ``StaticTransformBroadcaster`` is created, which will send one static transformation upon the startup."
msgstr "``StaticFramePublisher``类的构造函数使用名称``static_turtle_tf2_broadcaster``初始化节点。然后创建``StaticTransformBroadcaster``，它将在启动时发送一个静态变换。@{"calib_text": " `[6079] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6079>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:203 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:226
msgid "Here we create a ``TransformStamped`` object, which will be the message we will send over once populated. Before passing the actual transform values we need to give it the appropriate metadata."
msgstr "在这里，我们创建了一个``TransformStamped``对象，这将是我们在填充后发送的消息。在传递实际的变换值之前，我们需要为其提供适当的元数据。@{"calib_text": " `[6080] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6080>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:206
msgid "We need to give the transform being published a timestamp and we'll just stamp it with the current time, ``this->get_clock()->now()``"
msgstr "我们需要为发布的变换设置时间戳，并且我们将使用当前时间戳进行标记，``this->get_clock()->now()``。@{"calib_text": " `[6081] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6081>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:208 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:231
msgid "Then we need to set the name of the parent frame of the link we're creating, in this case ``world``"
msgstr "然后，我们需要设置链接的父框架的名称，这里是``world``。@{"calib_text": " `[6082] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6082>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:210 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:233
msgid "Finally, we need to set the name of the child frame of the link we're creating"
msgstr "最后，我们需要设置链接的子框架的名称。@{"calib_text": " `[6083] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6083>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:220 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:243
msgid "Here we populate the 6D pose (translation and rotation) of the turtle."
msgstr "在这里，我们填充了海龟的6D姿态（平移和旋转）。@{"calib_text": " `[6084] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6084>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:237 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:257
msgid "Finally, we broadcast static transform using the ``sendTransform()`` function."
msgstr "最后，我们使用``sendTransform()``函数广播静态变换。@{"calib_text": " `[6085] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6085>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:246
msgid "Navigate one level back to the ``src/learning_tf2_cpp`` directory, where the ``CMakeLists.txt`` and ``package.xml`` files have been created for you."
msgstr "返回上一级目录``src/learning_tf2_cpp``，其中已为您创建了``CMakeLists.txt``和``package.xml``文件。@{"calib_text": " `[6086] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6086>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:250 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:270
msgid "As mentioned in the :doc:`Create a package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>` tutorial, make sure to fill in the ``<description>``, ``<maintainer>`` and ``<license>`` tags:"
msgstr "如在:doc:`创建包教程 <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`中所述，请确保填写``<description>``, ``<maintainer>``和``<license>``标签：@{"calib_text": " `[6087] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6087>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:263
msgid "Add the executable to the CMakeLists.txt and name it ``static_turtle_tf2_broadcaster``, which you'll use later with ``ros2 run``."
msgstr "在CMakeLists.txt中添加可执行文件并命名为``static_turtle_tf2_broadcaster``，您稍后将使用``ros2 run``命令使用它。@{"calib_text": " `[6088] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6088>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:287 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:306
msgid "It's good practice to run ``rosdep`` in the root of your workspace to check for missing dependencies before building:"
msgstr "在工作区根目录中运行``rosdep``以检查构建前是否缺少依赖项是一个好习惯：@{"calib_text": " `[6089] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6089>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:305 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:324
msgid "Still in the root of your workspace, build your new package:"
msgstr "在工作区根目录中构建您的新包：@{"calib_text": " `[6090] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6090>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:356 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:375
msgid "Now run the ``static_turtle_tf2_broadcaster`` node:"
msgstr "现在运行``static_turtle_tf2_broadcaster``节点：@{"calib_text": " `[6091] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6091>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:362 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:381
msgid "This sets a turtle pose broadcast for ``mystaticturtle`` to float 1 meter above the ground."
msgstr "这将为``mystaticturtle``设置一个海龟姿态广播，使其浮在地面上方1米处。@{"calib_text": " `[6092] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6092>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:364 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:383
msgid "We can now check that the static transform has been published by echoing the ``tf_static`` topic"
msgstr "现在我们可以通过回显``tf_static``话题来检查静态变换是否已发布。@{"calib_text": " `[6093] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6093>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:370 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:389
msgid "If everything went well you should see a single static transform"
msgstr "如果一切正常，你应该看到一个单独的静态变换。@{"calib_text": " `[6094] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6094>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:393 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:412
msgid "The proper way to publish static transforms"
msgstr "发布静态变换的正确方法。@{"calib_text": " `[6095] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6095>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:395 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:414
msgid "This tutorial aimed to show how ``StaticTransformBroadcaster`` can be used to publish static transforms. In your real development process you shouldn't have to write this code yourself and should use the dedicated ``tf2_ros`` tool to do so. ``tf2_ros`` provides an executable named ``static_transform_publisher`` that can be used either as a commandline tool or a node that you can add to your launchfiles."
msgstr "本教程旨在展示如何使用``StaticTransformBroadcaster``发布静态变换。在实际开发过程中，你不应该自己编写这段代码，而应该使用专用的``tf2_ros``工具来完成。``tf2_ros``提供了一个名为``static_transform_publisher``的可执行文件，可以作为命令行工具或作为你可以添加到启动文件中的节点来使用。@{"calib_text": " `[6096] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6096>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:399 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:418
msgid "Publish a static coordinate transform to tf2 using an x/y/z offset in meters and roll/pitch/yaw in radians. In our case, roll/pitch/yaw refers to rotation about the x/y/z-axis, respectively."
msgstr "使用以米为单位的x/y/z偏移量和以弧度为单位的roll/pitch/yaw来将静态坐标变换发布到tf2。在我们的例子中，roll/pitch/yaw分别指的是绕x/y/z轴的旋转。@{"calib_text": " `[6097] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6097>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:406 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:425
msgid "Publish a static coordinate transform to tf2 using an x/y/z offset in meters and quaternion."
msgstr "使用米为单位的 x/y/z 偏移量和四元数在 tf2 中发布一个静态坐标变换。@{"calib_text": " `[6098] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6098>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:412 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:431
msgid "``static_transform_publisher`` is designed both as a command-line tool for manual use, as well as for use within ``launch`` files for setting static transforms. For example:"
msgstr "``static_transform_publisher`` 既可以作为命令行工具进行手动使用，也可以在 ``launch`` 文件中用于设置静态变换。例如：@{"calib_text": " `[6099] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6099>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:428 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:447
msgid "Note that all arguments except for ``--frame-id`` and ``--child-frame-id`` are optional; if a particular option isn't specified, then the identity will be assumed."
msgstr "请注意，除了 ``--frame-id`` 和 ``--child-frame-id`` 之外的所有参数都是可选的；如果没有指定特定的选项，将假设为恒等变换。@{"calib_text": " `[6100] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6100>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:433 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:452
msgid "In this tutorial you learned how static transforms are useful to define static relationships between frames, like ``mystaticturtle`` in relation to the ``world`` frame. In addition, you learned how static transforms can be useful for understanding sensor data, such as from laser scanners, by relating the data to a common coordinate frame. Finally, you wrote your own node to publish static transforms to tf2 and learned how to publish required static transformations using ``static_transform_publisher`` executable and launch files."
msgstr "在本教程中，您学习了静态变换如何有助于定义帧之间的静态关系，例如相对于 ``world`` 帧的 ``mystaticturtle``。此外，您还学习了静态变换如何有助于理解传感器数据，例如激光扫描仪的数据，通过将数据与公共坐标帧关联起来。最后，您编写了自己的节点以将静态变换发布到 tf2，并学习了如何使用 ``static_transform_publisher`` 可执行文件和 launch 文件来发布所需的静态变换。@{"calib_text": " `[6101] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6101>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:8
msgid "Writing a static broadcaster (Python)"
msgstr "编写静态广播器（Python）@{"calib_text": " `[6102] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6102>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:44
msgid "First we will create a package that will be used for this tutorial and the following ones. The package called ``learning_tf2_py`` will depend on ``geometry_msgs``, ``python3-numpy``, ``rclpy``, ``tf2_ros_py``, and ``turtlesim``. Code for this tutorial is stored `here <https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/static_turtle_tf2_broadcaster.py>`_."
msgstr "首先，我们将创建一个用于本教程和接下来的教程的软件包。该软件包名为 ``learning_tf2_py``，它将依赖于 ``geometry_msgs``、``python3-numpy``、``rclpy``、``tf2_ros_py`` 和 ``turtlesim``。本教程的代码存储在 `这里 <https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/static_turtle_tf2_broadcaster.py>`_。@{"calib_text": " `[6103] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6103>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:55
msgid "Your terminal will return a message verifying the creation of your package ``learning_tf2_py`` and all its necessary files and folders."
msgstr "您的终端将返回一条消息，验证您的软件包``learning_tf2_py``及其所有必要的文件和文件夹的创建。@{"calib_text": " `[6104] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6104>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:60
msgid "Let's first create the source files. Inside the ``src/learning_tf2_py/learning_tf2_py`` directory download the example static broadcaster code by entering the following command:"
msgstr "首先让我们创建源文件。在``src/learning_tf2_py/learning_tf2_py``目录中，通过输入以下命令下载示例静态广播器代码：@{"calib_text": " `[6105] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6105>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:196
msgid "Now let's look at the code that is relevant to publishing the static turtle pose to tf2. The first lines import required packages. First we import the ``TransformStamped`` from the ``geometry_msgs``, which provides us a template for the message that we will publish to the transformation tree."
msgstr "现在让我们来看一下与将静态海龟姿势发布到tf2有关的代码。首先导入所需的软件包。首先从``geometry_msgs``中导入``TransformStamped``，它为我们提供了一个要发布到变换树的消息模板。@{"calib_text": " `[6106] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6106>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:204
msgid "Afterward, ``rclpy`` is imported so its ``Node`` class can be used."
msgstr "然后导入``rclpy``，以便可以使用其``Node``类。@{"calib_text": " `[6107] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6107>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:211
msgid "The ``tf2_ros`` package provides a ``StaticTransformBroadcaster`` to make the publishing of static transforms easy. To use the ``StaticTransformBroadcaster``, we need to import it from the ``tf2_ros`` module."
msgstr "``tf2_ros``软件包提供了一个``StaticTransformBroadcaster``，用于简化发布静态变换。要使用``StaticTransformBroadcaster``，我们需要从``tf2_ros``模块中导入它。@{"calib_text": " `[6108] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6108>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:229
msgid "We need to give the transform being published a timestamp and we'll just stamp it with the current time, ``self.get_clock().now()``"
msgstr "我们需要给正在发布的变换添加一个时间戳，我们将使用当前时间进行标记，``self.get_clock().now()``。@{"calib_text": " `[6109] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6109>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:266
msgid "Navigate one level back to the ``src/learning_tf2_py`` directory, where the ``setup.py``, ``setup.cfg``, and ``package.xml`` files have been created for you."
msgstr "导航到``src/learning_tf2_py``目录的上一级，其中已为您创建了``setup.py``、``setup.cfg``和``package.xml``文件。@{"calib_text": " `[6110] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6110>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:278
msgid "After the lines above, add the following dependencies corresponding to your node’s import statements:"
msgstr "在上述行之后，添加与您节点的导入语句对应的以下依赖项：@{"calib_text": " `[6111] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6111>`_ "}@"


#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:288
msgid "This declares the required ``geometry_msgs``, ``python3-numpy``, ``rclpy``, ``tf2_ros_py``, and ``turtlesim`` dependencies when its code is executed."
msgstr "当执行节点的代码时，这将声明所需的``geometry_msgs``、``python3-numpy``、``rclpy``、``tf2_ros_py``和``turtlesim``依赖项。@{"calib_text": " `[6112] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6112>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:8
msgid "Adding physical and collision properties"
msgstr "添加物理和碰撞属性@{"calib_text": " `[6113] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6113>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:10
msgid "**Goal:** Learn how to add collision and inertial properties to links, and how to add joint dynamics to joints."
msgstr "**目标：**学习如何为链接添加碰撞和惯性属性，以及如何为关节添加关节动力学。@{"calib_text": " `[6114] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6114>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:20
msgid "In this tutorial, we’ll look at how to add some basic physical properties to your URDF model and how to specify its collision properties."
msgstr "在本教程中，我们将介绍如何为URDF模型添加一些基本的物理属性，并指定其碰撞属性。@{"calib_text": " `[6115] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6115>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:23
msgid "Collision"
msgstr "碰撞@{"calib_text": " `[6116] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6116>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:25
msgid "So far, we’ve only specified our links with a single sub-element, ``visual``, which defines (not surprisingly) what the robot looks like. However, in order to get collision detection to work or to simulate the robot, we need to define a ``collision`` element as well. `Here is the new urdf <https://raw.githubusercontent.com/ros/urdf_tutorial/master/urdf/07-physics.urdf>`_ with collision and physical properties."
msgstr "到目前为止，我们只为链接指定了一个子元素“visual”，它定义了机器人的外观。然而，为了使碰撞检测工作或者模拟机器人，我们还需要定义一个“collision”元素。`这是带有碰撞和物理属性的新URDF文件 <https://raw.githubusercontent.com/ros/urdf_tutorial/master/urdf/07-physics.urdf>`_。@{"calib_text": " `[6117] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6117>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:29
msgid "Here is the code for our new base link."
msgstr "这是我们新基本链接的代码。@{"calib_text": " `[6118] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6118>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:49
msgid "The collision element is a direct subelement of the link object, at the same level as the visual tag."
msgstr "碰撞元素是链接对象的直接子元素，与视觉标签处于同一级别。@{"calib_text": " `[6119] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6119>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:50
msgid "The collision element defines its shape the same way the visual element does, with a geometry tag. The format for the geometry tag is exactly the same here as with the visual."
msgstr "碰撞元素的形状定义方式与视觉元素相同，都是使用geometry标签。在这里，geometry标签的格式与视觉元素完全相同。@{"calib_text": " `[6120] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6120>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:52
msgid "You can also specify an origin in the same way as a subelement of the collision tag (as with the visual)."
msgstr "您还可以像在视觉元素中一样，在碰撞标签的子元素中指定一个起点。@{"calib_text": " `[6121] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6121>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:54
msgid "In many cases, you’ll want the collision geometry and origin to be exactly the same as the visual geometry and origin. However, there are two main cases where you wouldn’t:"
msgstr "在许多情况下，您希望碰撞几何体和原点与视觉几何体和原点完全相同。然而，有两种情况下您不会这样做：@{"calib_text": " `[6122] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6122>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:57
msgid "**Quicker Processing**. Doing collision detection for two meshes is a lot more computational complex than for two simple geometries. Hence, you may want to replace the meshes with simpler geometries in the collision element."
msgstr "**更快的处理速度**。检测两个网格的碰撞要比检测两个简单几何体复杂得多。因此，您可能希望将网格替换为碰撞元素中的简单几何体。@{"calib_text": " `[6123] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6123>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:59
msgid "**Safe Zones**. You may want to restrict movement close to sensitive equipment. For instance, if we didn’t want anything to collide with R2D2’s head, we might define the collision geometry to be a cylinder encasing his head to prevent anything from getting too close to his head."
msgstr "**安全区域**。您可能希望限制靠近敏感设备的移动。例如，如果我们不希望任何物体与R2D2的头碰撞，我们可以将碰撞几何体定义为一个包围他头部的圆柱体，以防止任何物体靠近他的头部。@{"calib_text": " `[6124] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6124>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:63
msgid "Physical Properties"
msgstr "物理属性@{"calib_text": " `[6125] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6125>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:64
msgid "In order to get your model to simulate properly, you need to define several physical properties of your robot, i.e. the properties that a physics engine like Gazebo would need."
msgstr "为了使您的模型能够正确模拟，您需要定义机器人的几个物理属性，即像Gazebo这样的物理引擎需要的属性。@{"calib_text": " `[6126] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6126>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:68
msgid "Inertia"
msgstr "惯性@{"calib_text": " `[6127] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6127>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:69
msgid "Every link element being simulated needs an inertial tag. Here is a simple one."
msgstr "每个被模拟的链接元素都需要一个惯性标签。这是一个简单的标签。@{"calib_text": " `[6128] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6128>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:94
msgid "This element is also a subelement of the link object."
msgstr "该元素也是链接对象的子元素。@{"calib_text": " `[6129] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6129>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:95
msgid "The mass is defined in kilograms."
msgstr "质量以千克为单位定义。@{"calib_text": " `[6130] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6130>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:96
msgid "The 3x3 rotational inertia matrix is specified with the inertia element. Since this is symmetrical, it can be represented by only 6 elements, as such."
msgstr "3x3旋转惯性矩阵由惯性元素指定。由于它是对称的，只需要用6个元素来表示。@{"calib_text": " `[6131] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6131>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:100
msgid "**ixx**"
msgstr "**ixx**@{"calib_text": " `[6132] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6132>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:100
msgid "**ixy**"
msgstr "**ixy**@{"calib_text": " `[6133] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6133>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:100
msgid "**ixz**"
msgstr "**ixz**@{"calib_text": " `[6134] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6134>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:102
msgid "ixy"
msgstr "ixy@{"calib_text": " `[6135] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6135>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:102
msgid "**iyy**"
msgstr "**iyy**@{"calib_text": " `[6136] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6136>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:102
msgid "**iyz**"
msgstr "**iyz**@{"calib_text": " `[6137] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6137>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:104
msgid "ixz"
msgstr "ixz@{"calib_text": " `[6138] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6138>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:104
msgid "iyz"
msgstr "iyz@{"calib_text": " `[6139] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6139>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:104
msgid "**izz**"
msgstr "**izz**@{"calib_text": " `[6140] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6140>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:107
msgid "This information can be provided to you by modeling programs such as MeshLab. The inertia of geometric primitives (cylinder, box, sphere) can be computed using Wikipedia's `list of moment of inertia tensors <https://en.wikipedia.org/wiki/List_of_moments_of_inertia#List_of_3D_inertia_tensors>`_ (and is used in the above example)."
msgstr "这些信息可以由诸如MeshLab之类的建模程序提供。可以使用维基百科的`惯性矩张量列表<https://en.wikipedia.org/wiki/List_of_moments_of_inertia#List_of_3D_inertia_tensors>`_来计算几何原始体（圆柱体、长方体、球体）的惯性（在上面的示例中使用）。@{"calib_text": " `[6141] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6141>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:109
msgid "The inertia tensor depends on both the mass and the distribution of mass of the object. A good first approximation is to assume equal distribution of mass in the volume of the object and compute the inertia tensor based on the object's shape, as outlined above."
msgstr "惯性张量取决于物体的质量和质量分布。一个很好的第一近似是假设物体的质量在体积上均匀分布，并基于物体的形状计算惯性张量，如上所述。@{"calib_text": " `[6142] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6142>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:111
msgid "If unsure what to put, a matrix with ixx/iyy/izz=1e-3 or smaller is often a reasonable default for a mid-sized link (it corresponds to a box of 0.1 m side length with a mass of 0.6 kg). The identity matrix is a particularly bad choice, since it is often much too high (it corresponds to a box of 0.1 m side length with a mass of 600 kg!)."
msgstr "如果不确定应该填写什么，一个常见的中等大小连接的合理默认值是ixx/iyy/izz=1e-3或更小（它对应于一边长为0.1米、质量为0.6千克的长方体）。恒等矩阵是一个特别糟糕的选择，因为它通常太大（它对应于一边长为0.1米、质量为600千克的长方体）。@{"calib_text": " `[6143] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6143>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:113
msgid "You can also specify an origin tag to specify the center of gravity and the inertial reference frame (relative to the link's reference frame)."
msgstr "您还可以指定一个原点标签，以指定重心和惯性参考系（相对于链接的参考系）。@{"calib_text": " `[6144] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6144>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:114
msgid "When using realtime controllers, inertia elements of zero (or almost zero) can cause the robot model to collapse without warning, and all links will appear with their origins coinciding with the world origin."
msgstr "在使用实时控制器时，惯性元素为零（或几乎为零）可能导致机器人模型突然崩溃，并且所有链接将与世界原点重合。@{"calib_text": " `[6145] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6145>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:117
msgid "Contact Coefficients"
msgstr "接触系数@{"calib_text": " `[6146] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6146>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:118
msgid "You can also define how the links behave when they are in contact with one another. This is done with a subelement of the collision tag called contact_coefficients. There are three attributes to specify:"
msgstr "您还可以定义链接在彼此接触时的行为。这可以通过碰撞标签的子元素contact_coefficients来实现。有三个属性需要指定：@{"calib_text": " `[6147] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6147>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:122
msgid "mu - `Friction coefficient <https://simple.wikipedia.org/wiki/Coefficient_of_friction>`_"
msgstr "mu - `摩擦系数 <https://simple.wikipedia.org/wiki/Coefficient_of_friction>`_@{"calib_text": " `[6148] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6148>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:123
msgid "kp - `Stiffness coefficient <https://en.wikipedia.org/wiki/Stiffness>`_"
msgstr "kp - `刚度系数 <https://en.wikipedia.org/wiki/Stiffness>`_@{"calib_text": " `[6149] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6149>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:124
msgid "kd - `Dampening coefficient <https://en.wikipedia.org/wiki/Damping_ratio#Damping_ratio_definition>`_"
msgstr "kd - `阻尼系数 <https://en.wikipedia.org/wiki/Damping_ratio#Damping_ratio_definition>`_@{"calib_text": " `[6150] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6150>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:127
msgid "Joint Dynamics"
msgstr "关节动力学@{"calib_text": " `[6151] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6151>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:128
msgid "How the joint moves is defined by the dynamics tag for the joint. There are two attributes here:"
msgstr "关节的运动由关节的动力学标签定义。这里有两个属性：@{"calib_text": " `[6152] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6152>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:131
msgid "``friction`` - The physical static friction. For prismatic joints, the units are Newtons. For revolving joints, the units are Newton meters."
msgstr "``摩擦`` - 物理静摩擦力。对于平移关节，单位为牛顿；对于旋转关节，单位为牛顿·米。@{"calib_text": " `[6153] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6153>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:134
msgid "``damping`` - The physical damping value. For prismatic joints, the units are Newton seconds per meter. For revolving joints, Newton meter seconds per radian."
msgstr "``阻尼`` - 物理阻尼值。对于平移关节，单位为牛顿秒/米；对于旋转关节，单位为牛顿·米秒/弧度。@{"calib_text": " `[6154] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6154>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:138
msgid "If not specified, these coefficients default to zero."
msgstr "如果未指定，则这些系数默认为零。@{"calib_text": " `[6155] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6155>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:141
msgid "Other Tags"
msgstr "其他标签@{"calib_text": " `[6156] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6156>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:142
msgid "In the realm of pure URDF (i.e. excluding Gazebo-specific tags), there are two remaining tags to help define the joints: calibration and safety controller. Check out the `spec <https://wiki.ros.org/urdf/XML/joint>`_, as they are not included in this tutorial."
msgstr "在纯URDF领域（即不包括Gazebo特定标签的情况下），还有两个剩余的标签可用于定义关节：校准和安全控制器。请查看`规范 <https://wiki.ros.org/urdf/XML/joint>`_，因为它们在本教程中没有包含。@{"calib_text": " `[6157] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6157>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:146
msgid "Next Steps"
msgstr "下一步@{"calib_text": " `[6158] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6158>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:147
msgid "Reduce the amount of code and annoying math you have to do by :doc:`using xacro <./Using-Xacro-to-Clean-Up-a-URDF-File>`."
msgstr "通过 :doc:`使用xacro <./Using-Xacro-to-Clean-Up-a-URDF-File>` 减少您需要编写的代码和繁琐的数学计算量。@{"calib_text": " `[6159] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6159>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:8
msgid "Building a movable robot model"
msgstr "构建一个可移动的机器人模型。@{"calib_text": " `[6160] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6160>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:10
msgid "**Goal:** Learn how to define movable joints in URDF."
msgstr "**目标：**学习如何在URDF中定义可移动关节。@{"calib_text": " `[6161] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6161>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:20
msgid "In this tutorial, we’re going to revise the R2D2 model we made in the :doc:`previous tutorial <./Building-a-Visual-Robot-Model-with-URDF-from-Scratch>` so that it has movable joints. In the previous model, all of the joints were fixed. Now we’ll explore three other important types of joints: continuous, revolute and prismatic."
msgstr "在本教程中，我们将对在 :doc:`上一个教程 <./Building-a-Visual-Robot-Model-with-URDF-from-Scratch>` 中创建的R2D2模型进行修改，使其具有可移动关节。在之前的模型中，所有的关节都是固定的。现在我们将探索其他三种重要的关节类型：连续关节、旋转关节和平移关节。@{"calib_text": " `[6162] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6162>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:24
msgid "Make sure you have installed all prerequisites before continuing. See the :doc:`previous tutorial <./Building-a-Visual-Robot-Model-with-URDF-from-Scratch>` for information on what is required."
msgstr "在继续之前，请确保您已安装了所有先决条件。有关所需内容，请参阅 :doc:`上一个教程 <./Building-a-Visual-Robot-Model-with-URDF-from-Scratch>`。@{"calib_text": " `[6163] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6163>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:27
msgid "Again, all of the robot models mentioned in this tutorial can be found in the `urdf_tutorial <https://index.ros.org/p/urdf_tutorial>`_ package."
msgstr "同样，本教程中提到的所有机器人模型都可以在 `urdf_tutorial <https://index.ros.org/p/urdf_tutorial>`_ 包中找到。@{"calib_text": " `[6164] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6164>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:29
msgid "`Here is the new urdf <https://github.com/ros/urdf_tutorial/blob/ros2/urdf/06-flexible.urdf>`_ with flexible joints. You can compare it to the previous version to see everything that has changed, but we’re just going to focus on three example joints."
msgstr "这里是带有灵活关节的新URDF文件，您可以将其与先前版本进行比较，看看发生了哪些变化，但我们将只关注三个示例关节。@{"calib_text": " `[6165] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6165>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:32
msgid "To visualize and control this model, run the same command as the last tutorial:"
msgstr "要可视化和控制此模型，请运行与上一个教程相同的命令：@{"calib_text": " `[6166] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6166>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:38
msgid "However now this will also pop up a GUI that allows you to control the values of all the non-fixed joints. Play with the model some and see how it moves. Then, we can take a look at how we accomplished this."
msgstr "然而，现在这将会弹出一个GUI界面，允许您控制所有非固定关节的值。试着动一下模型，看看它如何移动。然后，我们可以看看我们是如何实现这一点的。@{"calib_text": " `[6167] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6167>`_ "}@"


msgid "Screenshot of Flexible Model"
msgstr "灵活模型的截图@{"calib_text": " `[6168] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6168>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:47
msgid "The Head"
msgstr "头部@{"calib_text": " `[6169] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6169>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:58
msgid "The connection between the body and the head is a continuous joint, meaning that it can take on any angle from negative infinity to positive infinity. The wheels are also modeled like this, so that they can roll in both directions forever."
msgstr "身体和头部之间的连接是一个连续关节，意味着它可以取负无穷到正无穷的任意角度。车轮也是这样建模的，因此它们可以永远向两个方向滚动。@{"calib_text": " `[6170] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6170>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:61
msgid "The only additional information we have to add is the axis of rotation, here specified by an xyz triplet, which specifies a vector around which the head will rotate. Since we want it to go around the z axis, we specify the vector \"0 0 1\"."
msgstr "我们要补充的唯一附加信息是旋转轴，这里用一个xyz三元组来指定，它指定了头部将绕其旋转的矢量。由于我们希望它绕z轴旋转，我们指定矢量\"0 0 1\"。@{"calib_text": " `[6171] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6171>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:65
msgid "The Gripper"
msgstr "夹爪@{"calib_text": " `[6172] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6172>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:77
msgid "Both the right and the left gripper joints are modeled as revolute joints. This means that they rotate in the same way that the continuous joints do, but they have strict limits. Hence, we must include the limit tag specifying the upper and lower limits of the joint (in radians). We also must specify a maximum velocity and effort for this joint but the actual values don't matter for our purposes here."
msgstr "右夹爪和左夹爪关节都被建模为旋转关节。这意味着它们以与连续关节相同的方式旋转，但它们有严格的限制。因此，我们必须包含限制标签，指定关节的上限和下限（以弧度为单位）。我们还必须为该关节指定最大速度和力量，但实际值对我们这里的目的不重要。@{"calib_text": " `[6173] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6173>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:83
msgid "The Gripper Arm"
msgstr "夹爪臂@{"calib_text": " `[6174] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6174>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:94
msgid "The gripper arm is a different kind of joint, namely a prismatic joint. This means that it moves along an axis, not around it. This translational movement is what allows our robot model to extend and retract its gripper arm."
msgstr "夹爪臂是一种不同类型的关节，即移动关节。这意味着它沿一个轴线移动，而不是围绕轴旋转。这种平移运动使我们的机器人模型能够伸展和收缩夹爪臂。@{"calib_text": " `[6175] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6175>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:98
msgid "The limits of the prismatic arm are specified in the same way as a revolute joint, except that the units are meters, not radians."
msgstr "与旋转关节相同，平移臂的限制也是以相同的方式指定，只是单位是米，而不是弧度。@{"calib_text": " `[6176] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6176>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:101
msgid "Other Types of Joints"
msgstr "其他类型的关节@{"calib_text": " `[6177] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6177>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:103
msgid "There are two other kinds of joints that move around in space. Whereas the prismatic joint can only move along one dimension, a planar joint can move around in a plane, or two dimensions. Furthermore, a floating joint is unconstrained, and can move around in any of the three dimensions. These joints cannot be specified by just one number, and therefore aren’t included in this tutorial."
msgstr "还有另外两种可以在空间中移动的关节。与棱柱关节只能沿一个维度移动不同，平面关节可以在平面内或两个维度上移动。此外，浮动关节没有限制，可以在三个维度中移动。这些关节不能仅通过一个数值来指定，因此在本教程中不包括它们。@{"calib_text": " `[6178] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6178>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:109
msgid "Specifying the Pose"
msgstr "指定姿态@{"calib_text": " `[6179] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6179>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:111
msgid "As you move the sliders around in the GUI, the model moves in Rviz. How is this done? First the `GUI <https://index.ros.org/p/joint_state_publisher_gui>`_ parses the URDF and finds all the non-fixed joints and their limits. Then, it uses the values of the sliders to publish `sensor_msgs/msg/JointState <https://github.com/ros2/common_interfaces/blob/eloquent/sensor_msgs/msg/JointState.msg>`_ messages. Those are then used by `robot_state_publisher <https://index.ros.org/p/robot_state_publisher>`_ to calculate all of transforms between the different parts. The resulting transform tree is then used to display all of the shapes in Rviz."
msgstr "当您在GUI中移动滑块时，模型会在Rviz中移动。这是如何实现的？首先，`GUI <https://index.ros.org/p/joint_state_publisher_gui>`_解析URDF并找到所有非固定关节及其限制。然后，它使用滑块的值发布`sensor_msgs/msg/JointState <https://github.com/ros2/common_interfaces/blob/eloquent/sensor_msgs/msg/JointState.msg>`_消息。然后，`robot_state_publisher <https://index.ros.org/p/robot_state_publisher>`_使用这些消息计算不同部分之间的所有变换。生成的变换树然后用于在Rviz中显示所有形状。@{"calib_text": " `[6180] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6180>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:120
msgid "Now that you have a visibly functional model, you can :doc:`add in some physical properties <./Adding-Physical-and-Collision-Properties-to-a-URDF-Model>`, or :doc:`start using xacro to simplify your code <./Using-Xacro-to-Clean-Up-a-URDF-File>`."
msgstr "现在您已经拥有一个可见的功能模型，您可以:doc:`添加一些物理属性 <./Adding-Physical-and-Collision-Properties-to-a-URDF-Model>`，或者:doc:`开始使用xacro来简化您的代码 <./Using-Xacro-to-Clean-Up-a-URDF-File>`。@{"calib_text": " `[6181] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6181>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:8
msgid "Building a visual robot model from scratch"
msgstr "从头开始构建一个可视化的机器人模型@{"calib_text": " `[6182] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6182>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:10
msgid "**Goal:** Learn how to build a visual model of a robot that you can view in Rviz"
msgstr "**目标:** 学习如何构建一个机器人的可视化模型，可以在 Rviz 中查看@{"calib_text": " `[6183] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6183>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:20
msgid "This tutorial assumes you know how to write well-formatted XML code"
msgstr "本教程假设您已经知道如何编写格式良好的 XML 代码@{"calib_text": " `[6184] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6184>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:22
msgid "In this tutorial, we’re going to build a visual model of a robot that vaguely looks like R2D2. In later tutorials, you’ll learn how to :doc:`articulate the model <./Building-a-Movable-Robot-Model-with-URDF>`, :doc:`add in some physical properties <./Adding-Physical-and-Collision-Properties-to-a-URDF-Model>`, and :doc:`generate neater code with xacro <./Using-Xacro-to-Clean-Up-a-URDF-File>`, but for now, we’re going to focus on getting the visual geometry correct."
msgstr "在本教程中，我们将构建一个类似 R2D2 的机器人的可视化模型。在后续的教程中，您将学习如何：:doc:`描述模型 <./Building-a-Movable-Robot-Model-with-URDF>`，:doc:`添加一些物理属性 <./Adding-Physical-and-Collision-Properties-to-a-URDF-Model>`，和 :doc:`使用 xacro 生成更整洁的代码 <./Using-Xacro-to-Clean-Up-a-URDF-File>`，但现在，我们将专注于确保视觉几何正确。@{"calib_text": " `[6185] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6185>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:25
msgid "Before continuing, make sure you have the `joint_state_publisher <https://index.ros.org/p/joint_state_publisher>`_ package installed. If you installed `urdf_tutorial <https://index.ros.org/p/urdf_tutorial>`_ binaries, this should already be the case. If not, please update your installation to include that package (use ``rosdep`` to check)."
msgstr "在继续之前，请确保您已安装了 `joint_state_publisher <https://index.ros.org/p/joint_state_publisher>`_ 包。如果您安装了 `urdf_tutorial <https://index.ros.org/p/urdf_tutorial>`_ 的二进制文件，这应该已经是满足条件的。如果没有，请更新您的安装以包含该包（使用 ``rosdep`` 进行检查）。@{"calib_text": " `[6186] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6186>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:29
msgid "All of the robot models mentioned in this tutorial (and the source files) can be found in the `urdf_tutorial <https://index.ros.org/p/urdf_tutorial>`_ package."
msgstr "本教程中提到的所有机器人模型（以及源文件）都可以在 `urdf_tutorial <https://index.ros.org/p/urdf_tutorial>`_ 包中找到。@{"calib_text": " `[6187] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6187>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:32
msgid "One Shape"
msgstr "一个形状@{"calib_text": " `[6188] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6188>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:34
msgid "First, we’re just going to explore one simple shape. Here’s about as simple as a urdf as you can make. `[Source: 01-myfirst.urdf] <https://github.com/ros/urdf_tutorial/blob/ros2/urdf/01-myfirst.urdf>`_"
msgstr "首先，我们将只探索一个简单的形状。以下是一个最简单的 URDF 示例。`[来源：01-myfirst.urdf] <https://github.com/ros/urdf_tutorial/blob/ros2/urdf/01-myfirst.urdf>`_@{"calib_text": " `[6189] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6189>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:51
msgid "To translate the XML into English, this is a robot with the name ``myfirst``, that contains only one link (a.k.a. part), whose visual component is just a cylinder 0.6 meters long with a 0.2 meter radius. This may seem like a lot of enclosing tags for a simple “hello world” type example, but it will get more complicated, trust me."
msgstr "要将 XML 翻译成英文，这是一个名为``myfirst``的机器人，它只包含一个链接（即部件），其可视组件只是一个长为 0.6 米、半径为 0.2 米的圆柱体。对于一个简单的“hello world”类型的示例来说，这可能看起来有很多封闭标签，但信任我，它会变得更加复杂。@{"calib_text": " `[6190] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6190>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:54
msgid "To examine the model, launch the ``display.launch.py`` file:"
msgstr "要查看模型，请启动``display.launch.py``文件：@{"calib_text": " `[6191] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6191>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:60
msgid "This does three things:"
msgstr "这做了三件事：@{"calib_text": " `[6192] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6192>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:62
msgid "Loads the specified model and saves it as a parameter"
msgstr "加载指定的模型并将其保存为参数@{"calib_text": " `[6193] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6193>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:63
msgid "Runs nodes to publish `sensor_msgs/msg/JointState <https://github.com/ros2/common_interfaces/blob/eloquent/sensor_msgs/msg/JointState.msg>`_ and transforms (more on these later)"
msgstr "运行节点以发布`sensor_msgs/msg/JointState <https://github.com/ros2/common_interfaces/blob/eloquent/sensor_msgs/msg/JointState.msg>`_和变换（稍后会介绍更多相关内容）@{"calib_text": " `[6194] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6194>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:64
msgid "Starts Rviz with a configuration file"
msgstr "使用配置文件启动Rviz@{"calib_text": " `[6195] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6195>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:66
msgid "Note that the launch command above assumes that you are executing it from the `urdf_tutorial <https://index.ros.org/p/urdf_tutorial>`_ package directory (ie: the ``urdf`` directory is a direct child of the current working directory). If that is not the case, the relative path to ``01-myfirst.urdf`` will not be valid, and you'll receive an error as soon as the launcher tries to load the urdf as a parameter."
msgstr "请注意，上面的启动命令假设您是从`urdf_tutorial <https://index.ros.org/p/urdf_tutorial>`_包目录中执行的（即：``urdf``目录是当前工作目录的直接子目录）。如果不是这种情况，``01-myfirst.urdf``的相对路径将无效，并且当启动程序尝试将urdf作为参数加载时，您将收到错误提示。@{"calib_text": " `[6196] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6196>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:69
msgid "A slightly modified argument allows this to work regardless of the current working directory:"
msgstr "稍作修改的参数使其可以在任何当前工作目录下正常工作：@{"calib_text": " `[6197] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6197>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:75
msgid "You'll have to change all example launch commands given in these tutorials if you are not running them from the ``urdf_tutorial`` package location."
msgstr "如果您不是从``urdf_tutorial``包位置运行这些教程，请更改所有示例启动命令。@{"calib_text": " `[6198] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6198>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:77
msgid "After launching ``display.launch.py``, you should end up with RViz showing you the following:"
msgstr "在启动``display.launch.py``之后，您将看到RViz显示如下内容：@{"calib_text": " `[6199] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6199>`_ "}@"


msgid "my first image"
msgstr "我的第一张图片@{"calib_text": " `[6200] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6200>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:87
msgid "Things to note:"
msgstr "需要注意的事项：@{"calib_text": " `[6201] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6201>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:84
msgid "The fixed frame is the transform frame where the center of the grid is located. Here, it’s a frame defined by our one link, base_link."
msgstr "固定框架是网格中心所在的变换框架。这里，它是由我们的一个链接`base_link`定义的框架。@{"calib_text": " `[6202] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6202>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:86
msgid "The visual element (the cylinder) has its origin at the center of its geometry as a default. Hence, half the cylinder is below the grid."
msgstr "可视元素（圆柱体）的原点默认位于其几何形状的中心。因此，圆柱体的一半位于网格下方。@{"calib_text": " `[6203] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6203>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:90
msgid "Multiple Shapes"
msgstr "多个形状@{"calib_text": " `[6204] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6204>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:92
msgid "Now let’s look at how to add multiple shapes/links. If we just add more link elements to the urdf, the parser won’t know where to put them. So, we have to add joints. Joint elements can refer to both flexible and inflexible joints. We’ll start with inflexible, or fixed joints. `[Source: 02-multipleshapes.urdf] <https://github.com/ros/urdf_tutorial/blob/ros2/urdf/02-multipleshapes.urdf>`_"
msgstr "现在让我们看一下如何添加多个形状/链接。如果我们只是向URDF添加更多的链接元素，解析器将不知道如何安排它们。因此，我们必须添加关节。关节元素可以引用灵活关节和不可弯曲关节。我们将从不可弯曲或固定关节开始。`[来源：02-multipleshapes.urdf] <https://github.com/ros/urdf_tutorial/blob/ros2/urdf/02-multipleshapes.urdf>`_@{"calib_text": " `[6205] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6205>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:126
msgid "Note how we defined a 0.6m x 0.1m x 0.2m box"
msgstr "请注意我们如何定义一个0.6米 x 0.1米 x 0.2米的盒子@{"calib_text": " `[6206] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6206>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:127
msgid "The joint is defined in terms of a parent and a child. URDF is ultimately a tree structure with one root link. This means that the leg’s position is dependent on the base_link’s position."
msgstr "关节是由父节点和子节点定义的。URDF最终是一棵树状结构，只有一个根链接。这意味着腿的位置取决于base_link的位置。@{"calib_text": " `[6207] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6207>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:139
msgid "Both of the shapes overlap with each other, because they share the same origin. If we want them not to overlap we must define more origins."
msgstr "两个形状彼此重叠，因为它们共享相同的起点。如果我们不想让它们重叠，我们必须定义更多的起点。@{"calib_text": " `[6208] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6208>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:143
msgid "Origins"
msgstr "起点@{"calib_text": " `[6209] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6209>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:145
msgid "R2D2’s leg attaches to the top half of his torso, on the side. So that’s where we specify the origin of the JOINT to be. Also, it doesn’t attach to the middle of the leg, it attaches to the upper part, so we must offset the origin for the leg as well. We also rotate the leg so it is upright. `[Source: 03-origins.urdf] <https://github.com/ros/urdf_tutorial/blob/ros2/urdf/03-origins.urdf>`_"
msgstr "R2D2的腿连接到他的上半身的侧面。所以我们要指定关节的起点。另外，它不是连接到腿的中间部分，而是连接到上部分，所以我们必须为腿的起点偏移。我们还将腿旋转，使其直立。[来源：03-origins.urdf](https://github.com/ros/urdf_tutorial/blob/ros2/urdf/03-origins.urdf)@{"calib_text": " `[6210] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6210>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:180
msgid "Let’s start by examining the joint’s origin. It is defined in terms of the parent’s reference frame. So we are -0.22 meters in the y direction (to our left, but to the right relative to the axes) and 0.25 meters in the z direction (up). This means that the origin for the child link will be up and to the right, regardless of the child link’s visual origin tag. Since we didn’t specify a rpy (roll pitch yaw) attribute, the child frame will be default have the same orientation as the parent frame."
msgstr "让我们从关节的起点开始分析。它是以父节点的参考坐标系为基准来定义的。所以我们在y方向向左偏移0.22米（相对于坐标轴向右），在z方向向上偏移0.25米。这意味着无论子链接的可视起点标签如何，子链接的起点都将位于右上方。由于我们没有指定rpy（滚转俯仰）属性，子坐标系的方向将默认与父坐标系相同。@{"calib_text": " `[6211] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6211>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:185
msgid "Now, looking at the leg’s visual origin, it has both a xyz and rpy offset. This defines where the center of the visual element should be, relative to its origin. Since we want the leg to attach at the top, we offset the origin down by setting the z offset to be -0.3 meters. And since we want the long part of the leg to be parallel to the z axis, we rotate the visual part PI/2 around the Y axis."
msgstr "现在，看一下腿的可视起点，它具有xyz和rpy偏移量。这定义了可视元素的中心相对于其起点的位置。由于我们希望腿连接在顶部，我们通过将z偏移设置为-0.3米来偏移起点向下。由于我们希望腿的长部分与z轴平行，我们将可视部分绕Y轴旋转PI/2。@{"calib_text": " `[6212] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6212>`_ "}@"


msgid "Origins Screenshot"
msgstr "Origins Screenshot@{"calib_text": " `[6213] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6213>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:198
msgid "The launch file runs packages that will create TF frames for each link in your model based on your URDF. Rviz uses this information to figure out where to display each shape."
msgstr "启动文件会运行一些包，这些包将根据URDF为模型的每个链接创建TF帧。Rviz使用这些信息来确定每个形状的显示位置。@{"calib_text": " `[6214] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6214>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:200
msgid "If a TF frame does not exist for a given URDF link, then it will be placed at the origin in white (ref. `related question <http://answers.ros.org/question/207947/how-do-you-use-externally-defined-materials-in-a-urdfxacro-file/>`_)."
msgstr "如果给定的URDF链接没有TF帧，则会将其放置在白色的原点位置上（参考`相关问题<http://answers.ros.org/question/207947/how-do-you-use-externally-defined-materials-in-a-urdfxacro-file/>`_）。@{"calib_text": " `[6215] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6215>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:203
msgid "Material Girl"
msgstr "Material Girl@{"calib_text": " `[6216] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6216>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:205
msgid "“Alright,” I hear you say. “That’s very cute, but not everyone owns a B21. My robot and R2D2 are not red!” That’s a good point. Let’s take a look at the material tag. `[Source: 04-materials.urdf] <https://github.com/ros/urdf_tutorial/blob/ros2/urdf/04-materials.urdf>`_"
msgstr "“好吧，”你们会说，“这很可爱，但并不是每个人都拥有一台B21。我的机器人和R2D2不是红色的！” 这是个好观点。让我们看一下材质标签。`[来源：04-materials.urdf] <https://github.com/ros/urdf_tutorial/blob/ros2/urdf/04-materials.urdf>`_@{"calib_text": " `[6217] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6217>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:268
msgid "The body is now blue. We’ve defined a new material called “blue”, with the red, green, blue and alpha channels defined as 0,0,0.8 and 1 respectively. All of the values can be in the range [0,1]. This material is then referenced by the base_link's visual element. The white material is defined similarly."
msgstr "主体现在是蓝色的。我们定义了一个名为“蓝色”的新材质，红色、绿色、蓝色和透明度通道分别定义为0、0、0.8和1。所有的值都可以在范围[0,1]内。然后，这个材质被base_link的可视元素引用。白色的材质定义方式类似。@{"calib_text": " `[6218] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6218>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:273
msgid "You could also define the material tag from within the visual element, and even reference it in other links. No one will even complain if you redefine it though."
msgstr "你还可以在可视元素内定义材质标签，甚至在其他链接中引用它。如果重新定义它，也没有人会抱怨。@{"calib_text": " `[6219] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6219>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:275
msgid "You can also use a texture to specify an image file to be used for coloring the object"
msgstr "你还可以使用纹理来指定用于给对象着色的图像文件。@{"calib_text": " `[6220] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6220>`_ "}@"


msgid "Materials Screenshot"
msgstr "材料截图@{"calib_text": " `[6221] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6221>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:286
msgid "Finishing the Model"
msgstr "完成模型@{"calib_text": " `[6222] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6222>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:288
msgid "Now we finish the model off with a few more shapes: feet, wheels, and head. Most notably, we add a sphere and a some meshes. We’ll also add few other pieces that we’ll use later. `[Source: 05-visual.urdf] <https://github.com/ros/urdf_tutorial/blob/ros2/urdf/05-visual.urdf>`_"
msgstr "现在，我们用一些其他形状来完成模型：脚、轮子和头部。值得注意的是，我们添加了一个球体和一些网格。我们还会添加一些稍后会用到的其他零件。[来源：05-visual.urdf](https://github.com/ros/urdf_tutorial/blob/ros2/urdf/05-visual.urdf)@{"calib_text": " `[6223] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6223>`_ "}@"


msgid "Visual Screenshot"
msgstr "可视化截图@{"calib_text": " `[6224] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6224>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:549
msgid "How to add the sphere should be fairly self explanatory:"
msgstr "如何添加球体应该是相当容易理解的：@{"calib_text": " `[6225] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6225>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:562
msgid "The meshes here were borrowed from the PR2. They are separate files which you have to specify the path for. You should use the ``package://NAME_OF_PACKAGE/path`` notation. The meshes for this tutorial are located within the ``urdf_tutorial`` package, in a folder called meshes."
msgstr "这里的网格是从PR2借来的。它们是单独的文件，您需要指定路径。您应该使用``package://NAME_OF_PACKAGE/path``的表示方法。本教程中的网格位于``urdf_tutorial``包中的一个名为meshes的文件夹中。@{"calib_text": " `[6226] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6226>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:578
msgid "The meshes can be imported in a number of different formats. STL is fairly common, but the engine also supports DAE, which can have its own color data, meaning you don’t have to specify the color/material. Often these are in separate files. These meshes reference the ``.tif`` files also in the meshes folder."
msgstr "这些网格可以以多种不同的格式导入。STL是相当常见的，但引擎还支持DAE，它可以具有自己的颜色数据，这意味着您不必指定颜色/材质。通常这些是在单独的文件中。这些网格还引用了meshes文件夹中的``.tif``文件。@{"calib_text": " `[6227] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6227>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:582
msgid "Meshes can also be sized using relative scaling parameters or a bounding box size."
msgstr "网格还可以使用相对缩放参数或边界框大小进行调整。@{"calib_text": " `[6228] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6228>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:583
msgid "We could have also referred to meshes in a completely different package."
msgstr "我们还可以引用完全不同包中的网格。@{"calib_text": " `[6229] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6229>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:585
msgid "There you have it. A R2D2-like URDF model. Now you can continue on to the next step, :doc:`making it move <./Building-a-Movable-Robot-Model-with-URDF>`."
msgstr "就是这样。一个类似R2D2的URDF模型。现在您可以继续下一步，:doc:`使其移动 <./Building-a-Movable-Robot-Model-with-URDF>`。@{"calib_text": " `[6230] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6230>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/URDF-Main.rst:8
msgid "URDF"
msgstr "URDF@{"calib_text": " `[6231] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6231>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/URDF-Main.rst:10
msgid "URDF (Unified Robot Description Format) is a file format for specifying the geometry and organization of robots in ROS."
msgstr "URDF（Unified Robot Description Format）是一种用于在ROS中指定机器人的几何形状和组织的文件格式。@{"calib_text": " `[6232] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6232>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:8
msgid "Using URDF with ``robot_state_publisher``"
msgstr "使用URDF和``robot_state_publisher``@{"calib_text": " `[6233] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6233>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:10
msgid "**Goal:** Simulate a walking robot modeled in URDF and view it in Rviz."
msgstr "**目标：**模拟使用URDF建模的行走机器人，并在Rviz中查看。@{"calib_text": " `[6234] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6234>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:23
msgid "This tutorial will show you how to model a walking robot, publish the state as a `tf2 <https://wiki.ros.org/tf2>`__ message and view the simulation in Rviz. First, we create the URDF model describing the robot assembly. Next we write a node which simulates the motion and publishes the JointState and transforms. We then use ``robot_state_publisher`` to publish the entire robot state to ``/tf2``."
msgstr "本教程将向您展示如何建模行走机器人，将其状态发布为 `tf2 <https://wiki.ros.org/tf2>`__ 消息，并在Rviz中进行仿真查看。首先，我们创建描述机器人装配的URDF模型。接下来，我们编写一个节点来模拟运动并发布JointState和变换。然后，我们使用``robot_state_publisher``将整个机器人状态发布到``/tf2``。@{"calib_text": " `[6235] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6235>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:33
msgid "`rviz2 <https://index.ros.org/p/rviz2/>`__"
msgstr "`rviz2 <https://index.ros.org/p/rviz2/>`__@{"calib_text": " `[6236] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6236>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:50
msgid "You should now see a ``urdf_tutorial_r2d2`` folder. Next you will make several changes to it."
msgstr "您现在应该看到一个``urdf_tutorial_r2d2``文件夹。接下来，您将对其进行几处更改。@{"calib_text": " `[6237] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6237>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:54
msgid "2 Create the URDF File"
msgstr "2 创建URDF文件@{"calib_text": " `[6238] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6238>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:56
msgid "Create the directory where we will store some assets:"
msgstr "创建存储某些资源的目录：@{"calib_text": " `[6239] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6239>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:62
msgid "Download the :download:`URDF file <documents/r2d2.urdf.xml>` and save it as ``~/second_ros2_ws/src/urdf_tutorial_r2d2/urdf/r2d2.urdf.xml``. Download the :download:`Rviz configuration file <documents/r2d2.rviz>` and save it as ``~/second_ros2_ws/src/urdf_tutorial_r2d2/urdf/r2d2.rviz``."
msgstr "下载:download:`URDF文件 <documents/r2d2.urdf.xml>`，并将其保存为``~/second_ros2_ws/src/urdf_tutorial_r2d2/urdf/r2d2.urdf.xml``。下载:download:`Rviz配置文件 <documents/r2d2.rviz>`，并将其保存为``~/second_ros2_ws/src/urdf_tutorial_r2d2/urdf/r2d2.rviz``。@{"calib_text": " `[6240] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6240>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:66
msgid "3 Publish the state"
msgstr "3 发布状态@{"calib_text": " `[6241] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6241>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:68
msgid "Now we need a method for specifying what state the robot is in. To do this, we must specify all three joints and the overall odometry."
msgstr "现在我们需要一种方法来指定机器人所处的状态。为此，我们必须指定所有三个关节和整体里程计。@{"calib_text": " `[6242] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6242>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:71
msgid "Fire up your favorite editor and paste the following code into ``~/second_ros2_ws/src/urdf_tutorial_r2d2/urdf_tutorial_r2d2/state_publisher.py``"
msgstr "启动您喜欢的编辑器，并将以下代码粘贴到``~/second_ros2_ws/src/urdf_tutorial_r2d2/urdf_tutorial_r2d2/state_publisher.py``中@{"calib_text": " `[6243] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6243>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:165
msgid "4 Create a launch file"
msgstr "4 创建一个launch文件@{"calib_text": " `[6244] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6244>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:167
msgid "Create a new ``~/second_ros2_ws/src/urdf_tutorial_r2d2/launch`` folder. Open your editor and paste the following code, saving it as ``~/second_ros2_ws/src/urdf_tutorial_r2d2/launch/demo.launch.py``"
msgstr "创建一个新的``~/second_ros2_ws/src/urdf_tutorial_r2d2/launch``文件夹。打开您的编辑器并将以下代码粘贴到其中，保存为``~/second_ros2_ws/src/urdf_tutorial_r2d2/launch/demo.launch.py``@{"calib_text": " `[6245] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6245>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:211
msgid "5 Edit the setup.py file"
msgstr "5 编辑setup.py文件@{"calib_text": " `[6246] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6246>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:213
msgid "You must tell the **colcon** build tool how to install your Python package. Edit the ``~/second_ros2_ws/src/urdf_tutorial_r2d2/setup.py`` file as follows:"
msgstr "您必须告诉**colcon**构建工具如何安装您的Python包。请按照以下方式编辑``~/second_ros2_ws/src/urdf_tutorial_r2d2/setup.py``文件：@{"calib_text": " `[6247] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6247>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:216
msgid "include these import statements"
msgstr "包括以下导入语句@{"calib_text": " `[6248] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6248>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:225
msgid "append these 2 lines inside ``data_files``"
msgstr "在 ``data_files`` 中添加这两行@{"calib_text": " `[6249] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6249>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:235
msgid "modify the ``entry_points`` table so you can later run 'state_publisher' from a console"
msgstr "修改 ``entry_points`` 表，以便稍后可以从控制台运行 'state_publisher'@{"calib_text": " `[6250] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6250>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:243
msgid "Save the ``setup.py`` file with your changes."
msgstr "保存修改后的 ``setup.py`` 文件@{"calib_text": " `[6251] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6251>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:246
msgid "6 Install the package"
msgstr "6 安装包@{"calib_text": " `[6252] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6252>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:256
msgid "7 View the results"
msgstr "7 查看结果@{"calib_text": " `[6253] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6253>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:258
msgid "Launch the package"
msgstr "启动包@{"calib_text": " `[6254] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6254>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:264
msgid "Open a new terminal, the run Rviz using"
msgstr "打开一个新的终端窗口，然后运行 Rviz 使用@{"calib_text": " `[6255] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6255>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:270
msgid "See the `User Guide <http://wiki.ros.org/rviz/UserGuide>`__ for details on how to use Rviz."
msgstr "详细了解如何使用 Rviz，请参阅 `用户指南 <http://wiki.ros.org/rviz/UserGuide>`__。@{"calib_text": " `[6256] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6256>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:275
msgid "You created a JointState publisher node and coupled it with ``robot_state_publisher`` to simulate a walking robot. The code used in these examples can be found `here <https://github.com/benbongalon/ros2-migration/tree/master/urdf_tutorial>`__."
msgstr "您创建了一个 JointState 发布器节点，并将其与 ``robot_state_publisher`` 配对以模拟行走机器人。这些示例中使用的代码可以在 `这里 <https://github.com/benbongalon/ros2-migration/tree/master/urdf_tutorial>`__ 找到。@{"calib_text": " `[6257] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6257>`_ "}@"


#, python-format
msgid "Credit is given to the authors of this `ROS 1 tutorial <http://wiki.ros.org/urdf/Tutorials/Using%20urdf%20with%20robot_state_publisher>`__ from which some content was reused."
msgstr "本文的部分内容是从这个 `ROS 1 教程 <http://wiki.ros.org/urdf/Tutorials/Using%20urdf%20with%20robot_state_publisher>`__ 中重用的，对该教程的作者表示感谢。@{"calib_text": " `[6258] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6258>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:8
msgid "Using Xacro to clean up your code"
msgstr "使用 Xacro 清理您的代码@{"calib_text": " `[6259] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6259>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:10
msgid "**Goal:** Learn some tricks to reduce the amount of code in a URDF file using Xacro"
msgstr "**目标：** 学习使用 Xacro 减少 URDF 文件中的代码量的一些技巧@{"calib_text": " `[6260] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6260>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:20
msgid "By now, if you’re following all these steps at home with your own robot design, you might be sick of doing all sorts of math to get very simple robot descriptions to parse correctly. Fortunately, you can use the `xacro <https://index.ros.org/p/xacro>`_ package to make your life simpler. It does three things that are very helpful."
msgstr "到目前为止，如果你在家里跟着这些步骤自己设计机器人，你可能已经对进行各种数学计算来正确解析非常简单的机器人描述感到厌烦了。幸运的是，你可以使用 `xacro <https://index.ros.org/p/xacro>`_ 包来简化你的生活。它有三个非常有帮助的功能。@{"calib_text": " `[6261] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6261>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:24 ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:66
msgid "Constants"
msgstr "常量@{"calib_text": " `[6262] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6262>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:25
msgid "Simple Math"
msgstr "简单数学@{"calib_text": " `[6263] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6263>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:26 ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:145
msgid "Macros"
msgstr "宏@{"calib_text": " `[6264] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6264>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:28
msgid "In this tutorial, we take a look at all these shortcuts to help reduce the overall size of the URDF file and make it easier to read and maintain."
msgstr "在本教程中，我们将介绍所有这些快捷方式，以帮助减少URDF文件的整体大小，并使其更易于阅读和维护。@{"calib_text": " `[6265] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6265>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:31
msgid "Using Xacro"
msgstr "使用Xacro@{"calib_text": " `[6266] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6266>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:32
msgid "As its name implies, `xacro <https://index.ros.org/p/xacro>`_ is a macro language for XML. The xacro program runs all of the macros and outputs the result. Typical usage looks something like this:"
msgstr "正如其名称所示，`xacro <https://index.ros.org/p/xacro>`_ 是一种用于 XML 的宏语言。xacro 程序运行所有的宏并输出结果。典型的用法如下所示：@{"calib_text": " `[6267] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6267>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:40
msgid "You can also automatically generate the urdf in a launch file. This is convenient because it stays up to date and doesn’t use up hard drive space. However, it does take time to generate, so be aware that your launch file might take longer to start up."
msgstr "您还可以在启动文件中自动生成 URDF。这很方便，因为它会保持最新状态并且不占用硬盘空间。然而，生成过程需要时间，所以请注意您的启动文件可能需要更长的启动时间。@{"calib_text": " `[6268] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6268>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:57
msgid "At the top of the URDF file, you must specify a namespace in order for the file to parse properly. For example, these are the first two lines of a valid xacro file:"
msgstr "在 URDF 文件的顶部，您必须指定一个命名空间，以便文件能够正确解析。例如，下面是有效 xacro 文件的前两行：@{"calib_text": " `[6269] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6269>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:67
msgid "Let’s take a quick look at our base_link in R2D2."
msgstr "让我们快速查看一下 R2D2 中的 base_link。@{"calib_text": " `[6270] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6270>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:85
msgid "The information here is a little redundant. We specify the length and radius of the cylinder twice. Worse, if we want to change that, we need to do so in two different places."
msgstr "这里的信息有些冗余。我们重复指定了圆柱体的长度和半径。更糟糕的是，如果我们想要更改它，我们需要在两个不同的位置进行修改。@{"calib_text": " `[6271] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6271>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:89
msgid "Fortunately, xacro allows you to specify properties which act as constants. Instead, of the above code, we can write this."
msgstr "幸运的是，xacro 允许您指定属性作为常量。因此，我们可以将上述代码改写为以下形式。@{"calib_text": " `[6272] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6272>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:110
msgid "The two values are specified in the first two lines. They can be defined just about anywhere (assuming valid XML), at any level, before or after they are used. Usually they go at the top."
msgstr "两个值在前两行中指定。它们可以在任何地方（假设是有效的XML），在任何级别上定义，并且可以在使用之前或之后定义。通常它们放在顶部。@{"calib_text": " `[6273] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6273>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:113
msgid "Instead of specifying the actual radius in the geometry element, we use a dollar sign and curly brackets to signify the value."
msgstr "在geometry元素中，我们使用美元符号和大括号表示值，而不是指定实际半径。@{"calib_text": " `[6274] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6274>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:114
msgid "This code will generate the same code shown above."
msgstr "此代码将生成上述显示的相同代码。@{"calib_text": " `[6275] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6275>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:116
msgid "The value of the contents of the ${} construct are then used to replace the ${}. This means you can combine it with other text in the attribute."
msgstr "然后使用${}构造的内容值来替换${}。这意味着您可以将其与属性中的其他文本组合使用。@{"calib_text": " `[6276] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6276>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:124
msgid "This will generate"
msgstr "这将生成@{"calib_text": " `[6277] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6277>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:130
msgid "However, the contents in the ${} don’t have to only be a property, which brings us to our next point..."
msgstr "然而，${}中的内容不仅限于属性，这引出了我们的下一个要点...@{"calib_text": " `[6278] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6278>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:133
msgid "Math"
msgstr "数学@{"calib_text": " `[6279] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6279>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:134
msgid "You can build up arbitrarily complex expressions in the ${} construct using the four basic operations (+,-,*,/), the unary minus, and parenthesis. Examples:"
msgstr "您可以使用四种基本运算符（+、-、*、/）、一元减号和括号在 ${} 结构中构建任意复杂的表达式。例如：@{"calib_text": " `[6280] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6280>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:142
msgid "You can also use more than the basic mathematical operations, like ``sin`` and ``cos``."
msgstr "您还可以使用更多的基本数学运算，例如 ``sin`` 和 ``cos``。@{"calib_text": " `[6281] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6281>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:146
msgid "Here’s the biggest and most useful component to the xacro package."
msgstr "这是 xacro 包中最大且最有用的组件。@{"calib_text": " `[6282] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6282>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:149
msgid "Simple Macro"
msgstr "简单宏@{"calib_text": " `[6283] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6283>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:150
msgid "Let’s take a look at a simple useless macro."
msgstr "让我们来看一个简单无用的宏。@{"calib_text": " `[6284] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6284>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:159
msgid "(This is useless, since if the origin is not specified, it has the same value as this.) This code will generate the following."
msgstr "(这是无用的，因为如果未指定原点，它与此值相同。) 此代码将生成以下内容。@{"calib_text": " `[6285] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6285>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:165
msgid "The name is not technically a required element, but you need to specify it to be able to use it."
msgstr "从技术上讲，名称不是必需的元素，但您需要指定它才能使用它。@{"calib_text": " `[6286] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6286>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:166
msgid "Every instance of the ``<xacro:$NAME />`` is replaced with the contents of the ``xacro:macro`` tag."
msgstr "每个``<xacro:$NAME />``的实例都将替换为``xacro:macro``标记的内容。@{"calib_text": " `[6287] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6287>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:167
msgid "Note that even though its not exactly the same (the two attributes have switched order), the generated XML is equivalent."
msgstr "请注意，即使它们不完全相同（两个属性的顺序已交换），生成的 XML 是等效的。@{"calib_text": " `[6288] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6288>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:168
msgid "If the xacro with a specified name is not found, it will not be expanded and will NOT generate an error."
msgstr "如果找不到具有指定名称的 xacro，则不会扩展它，并且不会生成错误。@{"calib_text": " `[6289] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6289>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:171
msgid "Parameterized Macro"
msgstr "参数化宏@{"calib_text": " `[6290] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6290>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:172
msgid "You can also parameterize macros so that they don’t generate the same exact text every time. When combined with the math functionality, this is even more powerful."
msgstr "你还可以对宏进行参数化，这样它们每次生成的文本就不会完全相同。当与数学功能结合使用时，这更加强大。@{"calib_text": " `[6291] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6291>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:175
msgid "First, let’s take an example of a simple macro used in R2D2."
msgstr "首先，让我们以一个在R2D2中使用的简单宏的例子来说明。@{"calib_text": " `[6292] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6292>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:188
msgid "This can be used with the code"
msgstr "可以与以下代码一起使用@{"calib_text": " `[6293] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6293>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:194
msgid "The parameters act just like properties, and you can use them in expressions"
msgstr "参数的作用类似于属性，你可以在表达式中使用它们。@{"calib_text": " `[6294] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6294>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:196
msgid "You can also use entire blocks as parameters too."
msgstr "你还可以使用整个代码块作为参数。@{"calib_text": " `[6295] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6295>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:220
msgid "To specify a block parameter, include an asterisk before its parameter name."
msgstr "要指定一个代码块参数，在其参数名之前加上一个星号。@{"calib_text": " `[6296] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6296>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:221
msgid "A block can be inserted using the insert_block command"
msgstr "可以使用insert_block命令插入一个块@{"calib_text": " `[6297] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6297>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:222
msgid "Insert the block as many times as you wish."
msgstr "按需插入块，可以插入多次@{"calib_text": " `[6298] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6298>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:225
msgid "Practical Usage"
msgstr "实际应用@{"calib_text": " `[6299] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6299>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:226
msgid "The xacro language is rather flexible in what it allows you to do. Here are a few useful ways that xacro is used in the `R2D2 model <https://github.com/ros/urdf_tutorial/blob/master/urdf/08-macroed.urdf.xacro>`_, in addition to the default inertial macro shown above."
msgstr "xacro语言非常灵活，允许你做很多事情。除了上面显示的默认惯性宏之外，在`R2D2模型 <https://github.com/ros/urdf_tutorial/blob/master/urdf/08-macroed.urdf.xacro>`_ 中还有一些有用的使用xacro的方法。@{"calib_text": " `[6300] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6300>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:229
msgid "To see the model generated by a xacro file, run the same command as with previous tutorials:"
msgstr "要查看由xacro文件生成的模型，请运行与之前教程相同的命令：@{"calib_text": " `[6301] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6301>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:235
msgid "(The launch file has been running the xacro command this whole time, but since there were no macros to expand, it didn't matter)"
msgstr "(启动文件一直在运行xacro命令，但是因为没有需要扩展的宏，所以没有关系)@{"calib_text": " `[6302] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6302>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:238
msgid "Leg macro"
msgstr "腿宏@{"calib_text": " `[6303] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6303>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:239
msgid "Often you want to create multiple similar looking objects in different locations. You can use a macro and some simple math to reduce the amount of code you have to write, like we do with R2’s two legs."
msgstr "通常情况下，您希望在不同位置创建多个外观相似的对象。您可以使用宏和一些简单的数学计算来减少需要编写的代码量，就像我们在 R2 的两条腿上所做的一样。@{"calib_text": " `[6304] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6304>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:272
msgid "Common Trick 1: Use a name prefix to get two similarly named objects."
msgstr "常见技巧 1：使用名称前缀获取两个名称相似的对象。@{"calib_text": " `[6305] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6305>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:273
msgid "Common Trick 2: Use math to calculate joint origins. In the case that you change the size of your robot, changing a property with some math to calculate the joint offset will save a lot of trouble."
msgstr "常见技巧 2：使用数学计算来计算关节起源。在改变机器人的尺寸时，通过使用一些数学计算来计算关节偏移量的属性，可以节省很多麻烦。@{"calib_text": " `[6306] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6306>`_ "}@"


#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:275
msgid "Common Trick 3: Using a reflect parameter, and setting it to 1 or -1. See how we use the reflect parameter to put the legs on either side of the body in the base_to_${prefix}_leg origin."
msgstr "常见技巧 3：使用反射参数，并将其设置为 1 或 -1。请看看我们如何使用反射参数将腿放置在身体的 base_to_${prefix}_leg 起源的两侧。@{"calib_text": " `[6307] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6307>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:8
msgid "Writing an action server and client (C++)"
msgstr "编写一个动作服务器和客户端（C++）@{"calib_text": " `[6308] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6308>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:10
msgid "**Goal:** Implement an action server and client in C++."
msgstr "**目标：** 在C++中实现一个动作服务器和客户端。@{"calib_text": " `[6309] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6309>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:23
msgid "Actions are a form of asynchronous communication in ROS. *Action clients* send goal requests to *action servers*. *Action servers* send goal feedback and results to *action clients*."
msgstr "动作是ROS中的一种异步通信形式。*动作客户端*向*动作服务器*发送目标请求。*动作服务器*向*动作客户端*发送目标反馈和结果。@{"calib_text": " `[6310] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6310>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:30 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:30
msgid "You will need the ``action_tutorials_interfaces`` package and the ``Fibonacci.action`` interface defined in the previous tutorial, :doc:`../Creating-an-Action`."
msgstr "你需要使用``action_tutorials_interfaces``包和前面教程中定义的``Fibonacci.action``接口。参见 :doc:`../Creating-an-Action`。@{"calib_text": " `[6311] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6311>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:37
msgid "1 Creating the action_tutorials_cpp package"
msgstr "1 创建 action_tutorials_cpp 包@{"calib_text": " `[6312] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6312>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:39
msgid "As we saw in the :doc:`../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package` tutorial, we need to create a new package to hold our C++ and supporting code."
msgstr "正如我们在 :doc:`../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package` 教程中所看到的，我们需要创建一个新的包来保存我们的C++代码和支持代码。@{"calib_text": " `[6313] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6313>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:42
msgid "1.1 Creating the action_tutorials_cpp package"
msgstr "1.1 创建 action_tutorials_cpp 包@{"calib_text": " `[6314] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6314>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:44
msgid "Go into the action workspace you created in the :doc:`previous tutorial <../Creating-an-Action>` (remember to source the workspace), and create a new package for the C++ action server:"
msgstr "进入你在 :doc:`上一个教程 <../Creating-an-Action>` 中创建的操作工作空间（记得要加载工作空间），并为C++操作服务器创建一个新包：@{"calib_text": " `[6315] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6315>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:71
msgid "1.2 Adding in visibility control"
msgstr "1.2 添加可见性控制@{"calib_text": " `[6316] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6316>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:73
msgid "In order to make the package compile and work on Windows, we need to add in some \"visibility control\". For more details, see :ref:`Windows Symbol Visibility in the Windows Tips and Tricks document <Windows_Symbol_Visibility>`."
msgstr "为了使该包在Windows上编译和工作，我们需要添加一些\"可见性控制\"。更多详细信息，请参阅 :ref:`Windows Tips and Tricks文档中的Windows符号可见性 <Windows_Symbol_Visibility>`。@{"calib_text": " `[6317] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6317>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:76
msgid "Open up ``action_tutorials_cpp/include/action_tutorials_cpp/visibility_control.h``, and put the following code in:"
msgstr "打开 ``action_tutorials_cpp/include/action_tutorials_cpp/visibility_control.h``，并添加以下代码：@{"calib_text": " `[6318] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6318>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:126
msgid "2 Writing an action server"
msgstr "2 编写一个操作服务器@{"calib_text": " `[6319] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6319>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:128 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:39
msgid "Let's focus on writing an action server that computes the Fibonacci sequence using the action we created in the :doc:`../Creating-an-Action` tutorial."
msgstr "让我们专注于编写一个使用我们在 :doc:`../Creating-an-Action` 教程中创建的操作来计算斐波那契数列的操作服务器。@{"calib_text": " `[6320] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6320>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:131
msgid "2.1 Writing the action server code"
msgstr "2.1 编写动作服务器代码@{"calib_text": " `[6321] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6321>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:133
msgid "Open up ``action_tutorials_cpp/src/fibonacci_action_server.cpp``, and put the following code in:"
msgstr "打开 ``action_tutorials_cpp/src/fibonacci_action_server.cpp`` 文件，并将以下代码放入其中：@{"calib_text": " `[6322] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6322>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:138 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:264
msgid "The first few lines include all of the headers we need to compile."
msgstr "前几行包含了我们编译所需的所有头文件。@{"calib_text": " `[6323] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6323>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:140 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:266
msgid "Next we create a class that is a derived class of ``rclcpp::Node``:"
msgstr "接下来，我们创建一个派生自 ``rclcpp::Node`` 的类：@{"calib_text": " `[6324] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6324>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:146
msgid "The constructor for the ``FibonacciActionServer`` class initializes the node name as ``fibonacci_action_server``:"
msgstr "``FibonacciActionServer`` 类的构造函数将节点名称初始化为 ``fibonacci_action_server``：@{"calib_text": " `[6325] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6325>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:152
msgid "The constructor also instantiates a new action server:"
msgstr "构造函数还实例化了一个新的动作服务器：@{"calib_text": " `[6326] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6326>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:158
msgid "An action server requires 6 things:"
msgstr "一个动作服务器需要6个要素：@{"calib_text": " `[6327] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6327>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:160 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:286
msgid "The templated action type name: ``Fibonacci``."
msgstr "模板化的动作类型名称：``Fibonacci``。@{"calib_text": " `[6328] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6328>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:161
msgid "A ROS 2 node to add the action to: ``this``."
msgstr "要添加动作的ROS 2节点：``this``。@{"calib_text": " `[6329] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6329>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:162 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:288 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:70
msgid "The action name: ``'fibonacci'``."
msgstr "动作名称：``'fibonacci'``。@{"calib_text": " `[6330] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6330>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:163
msgid "A callback function for handling goals: ``handle_goal``"
msgstr "处理目标的回调函数：``handle_goal``。@{"calib_text": " `[6331] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6331>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:164
msgid "A callback function for handling cancellation: ``handle_cancel``."
msgstr "处理取消的回调函数：``handle_cancel``。@{"calib_text": " `[6332] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6332>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:165
msgid "A callback function for handling goal accept: ``handle_accept``."
msgstr "处理目标接受的回调函数：``handle_accept``。@{"calib_text": " `[6333] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6333>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:167
msgid "The implementation of the various callbacks is next in the file. Note that all of the callbacks need to return quickly, otherwise we risk starving the executor."
msgstr "接下来是对各种回调函数的实现。请注意，所有回调函数都需要快速返回，否则我们可能会导致执行程序饥饿。@{"calib_text": " `[6334] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6334>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:170
msgid "We start with the callback for handling new goals:"
msgstr "我们首先处理处理新目标的回调函数：@{"calib_text": " `[6335] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6335>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:176
msgid "This implementation just accepts all goals."
msgstr "这个实现只是接受所有目标。@{"calib_text": " `[6336] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6336>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:178
msgid "Next up is the callback for dealing with cancellation:"
msgstr "接下来是处理取消的回调函数：@{"calib_text": " `[6337] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6337>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:184
msgid "This implementation just tells the client that it accepted the cancellation."
msgstr "这个实现只是告诉客户端它接受了取消请求。@{"calib_text": " `[6338] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6338>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:186
msgid "The last of the callbacks accepts a new goal and starts processing it:"
msgstr "最后一个回调函数接受一个新的目标并开始处理它：@{"calib_text": " `[6339] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6339>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:192
msgid "Since the execution is a long-running operation, we spawn off a thread to do the actual work and return from ``handle_accepted`` quickly."
msgstr "由于执行是一个长时间运行的操作，我们创建一个线程来执行实际的工作，并快速从``handle_accepted``返回。@{"calib_text": " `[6340] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6340>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:194
msgid "All further processing and updates are done in the ``execute`` method in the new thread:"
msgstr "所有进一步的处理和更新都在新线程的``execute``方法中进行：@{"calib_text": " `[6341] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6341>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:200
msgid "This work thread processes one sequence number of the Fibonacci sequence every second, publishing a feedback update for each step. When it has finished processing, it marks the ``goal_handle`` as succeeded, and quits."
msgstr "该工作线程每秒处理斐波那契数列的一个序列数，对每一步都发布一个反馈更新。当它完成处理时，将``goal_handle``标记为成功并退出。@{"calib_text": " `[6342] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6342>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:203
msgid "We now have a fully functioning action server.  Let's get it built and running."
msgstr "现在我们有一个完全功能的动作服务器。让我们构建并运行它。@{"calib_text": " `[6343] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6343>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:206
msgid "2.2 Compiling the action server"
msgstr "2.2 编译动作服务器@{"calib_text": " `[6344] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6344>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:208
msgid "In the previous section we put the action server code into place. To get it to compile and run, we need to do a couple of additional things."
msgstr "在前一节中，我们已经放置了动作服务器的代码。为了使其编译和运行，我们还需要进行一些额外的操作。@{"calib_text": " `[6345] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6345>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:211
msgid "First we need to setup the CMakeLists.txt so that the action server is compiled. Open up ``action_tutorials_cpp/CMakeLists.txt``, and add the following right after the ``find_package`` calls:"
msgstr "首先，我们需要设置CMakeLists.txt以便编译动作服务器。打开``action_tutorials_cpp/CMakeLists.txt``文件，在``find_package``调用之后添加以下内容：@{"calib_text": " `[6346] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6346>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:235 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:363
msgid "And now we can compile the package.  Go to the top-level of the ``ros2_ws``, and run:"
msgstr "现在我们可以编译该软件包。进入``ros2_ws``的顶级目录，运行以下命令：@{"calib_text": " `[6347] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6347>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:241
msgid "This should compile the entire workspace, including the ``fibonacci_action_server`` in the ``action_tutorials_cpp`` package."
msgstr "这将编译整个工作空间，包括``action_tutorials_cpp``软件包中的``fibonacci_action_server``。@{"calib_text": " `[6348] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6348>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:244
msgid "2.3 Running the action server"
msgstr "2.3 运行动作服务器@{"calib_text": " `[6349] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6349>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:246
msgid "Now that we have the action server built, we can run it. Source the workspace we just built (``ros2_ws``), and try to run the action server:"
msgstr "现在我们已经构建了动作服务器，可以运行它了。源激活我们刚刚构建的工作空间（``ros2_ws``），并尝试运行动作服务器：@{"calib_text": " `[6350] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6350>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:254
msgid "3 Writing an action client"
msgstr "3 编写动作客户端@{"calib_text": " `[6351] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6351>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:257
msgid "3.1 Writing the action client code"
msgstr "3.1 编写动作客户端代码@{"calib_text": " `[6352] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6352>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:259
msgid "Open up ``action_tutorials_cpp/src/fibonacci_action_client.cpp``, and put the following code in:"
msgstr "打开 ``action_tutorials_cpp/src/fibonacci_action_client.cpp``，并将以下代码放入其中：@{"calib_text": " `[6353] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6353>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:272
msgid "The constructor for the ``FibonacciActionClient`` class initializes the node name as ``fibonacci_action_client``:"
msgstr "``FibonacciActionClient`` 类的构造函数将节点名称初始化为 ``fibonacci_action_client``：@{"calib_text": " `[6354] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6354>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:278
msgid "The constructor also instantiates a new action client:"
msgstr "构造函数还实例化了一个新的动作客户端：@{"calib_text": " `[6355] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6355>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:284
msgid "An action client requires 3 things:"
msgstr "动作客户端需要三样东西：@{"calib_text": " `[6356] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6356>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:287
msgid "A ROS 2 node to add the action client to: ``this``."
msgstr "一个用于添加动作客户端的ROS 2节点：``this``。@{"calib_text": " `[6357] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6357>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:290
msgid "We also instantiate a ROS timer that will kick off the one and only call to ``send_goal``:"
msgstr "我们还实例化了一个ROS定时器，它将触发对``send_goal``的唯一调用：@{"calib_text": " `[6358] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6358>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:296
msgid "When the timer expires, it will call ``send_goal``:"
msgstr "当定时器到期时，它将调用``send_goal``：@{"calib_text": " `[6359] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6359>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:302
msgid "This function does the following:"
msgstr "此函数执行以下操作：@{"calib_text": " `[6360] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6360>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:304
msgid "Cancels the timer (so it is only called once)."
msgstr "取消定时器的操作（因此只调用一次）。@{"calib_text": " `[6361] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6361>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:305
msgid "Waits for the action server to come up."
msgstr "等待动作服务器启动。@{"calib_text": " `[6362] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6362>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:306
msgid "Instantiates a new ``Fibonacci::Goal``."
msgstr "实例化一个新的 ``Fibonacci::Goal``。@{"calib_text": " `[6363] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6363>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:307
msgid "Sets the response, feedback, and result callbacks."
msgstr "设置响应、反馈和结果的回调函数。@{"calib_text": " `[6364] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6364>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:308
msgid "Sends the goal to the server."
msgstr "将目标发送到服务器。@{"calib_text": " `[6365] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6365>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:310
msgid "When the server receives and accepts the goal, it will send a response to the client. That response is handled by ``goal_response_callback``:"
msgstr "当服务器接收并接受目标后，它将向客户端发送响应。这个响应由 ``goal_response_callback`` 处理：@{"calib_text": " `[6366] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6366>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:317
msgid "Assuming the goal was accepted by the server, it will start processing. Any feedback to the client will be handled by the ``feedback_callback``:"
msgstr "假设服务器接受了目标，它将开始处理。任何对客户端的反馈将由 ``feedback_callback`` 处理：@{"calib_text": " `[6367] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6367>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:324
msgid "When the server is finished processing, it will return a result to the client. The result is handled by the ``result_callback``:"
msgstr "当服务器处理完成后，将向客户端返回结果。结果由 ``result_callback`` 处理：@{"calib_text": " `[6368] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6368>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:331
msgid "We now have a fully functioning action client.  Let's get it built and running."
msgstr "我们现在拥有一个完全运行的动作客户端。让我们来构建和运行它吧。@{"calib_text": " `[6369] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6369>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:334
msgid "3.2 Compiling the action client"
msgstr "3.2 编译动作客户端@{"calib_text": " `[6370] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6370>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:336
msgid "In the previous section we put the action client code into place. To get it to compile and run, we need to do a couple of additional things."
msgstr "在前一节中，我们已经放置了动作客户端的代码。为了使其编译和运行，我们需要进行一些额外的操作。@{"calib_text": " `[6371] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6371>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:339
msgid "First we need to setup the CMakeLists.txt so that the action client is compiled. Open up ``action_tutorials_cpp/CMakeLists.txt``, and add the following right after the ``find_package`` calls:"
msgstr "首先，我们需要设置 CMakeLists.txt，以便编译动作客户端。打开 ``action_tutorials_cpp/CMakeLists.txt``，在 ``find_package`` 调用之后添加以下内容：@{"calib_text": " `[6372] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6372>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:369
msgid "This should compile the entire workspace, including the ``fibonacci_action_client`` in the ``action_tutorials_cpp`` package."
msgstr "这将编译整个工作空间，包括 ``action_tutorials_cpp`` 包中的 ``fibonacci_action_client``。@{"calib_text": " `[6373] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6373>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:372
msgid "3.3 Running the action client"
msgstr "3.3 运行动作客户端@{"calib_text": " `[6374] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6374>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:374
msgid "Now that we have the action client built, we can run it. First make sure that an action server is running in a separate terminal. Now source the workspace we just built (``ros2_ws``), and try to run the action client:"
msgstr "现在我们已经构建了动作客户端，可以运行它了。首先确保在单独的终端中运行了一个动作服务器。现在，源代码工作空间我们刚刚构建的（``ros2_ws``），然后尝试运行动作客户端：@{"calib_text": " `[6375] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6375>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:382
msgid "You should see logged messages for the goal being accepted, feedback being printed, and the final result."
msgstr "您应该看到有关目标被接受、反馈被打印和最终结果的日志消息。@{"calib_text": " `[6376] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6376>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:387
msgid "In this tutorial, you put together a C++ action server and action client line by line, and configured them to exchange goals, feedback, and results."
msgstr "在本教程中，您逐行组合了一个C++动作服务器和动作客户端，并配置它们交换目标、反馈和结果。@{"calib_text": " `[6377] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6377>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:392
msgid "There are several ways you could write an action server and client in C++; check out the ``minimal_action_server`` and ``minimal_action_client`` packages in the `ros2/examples <https://github.com/ros2/examples/tree/humble/rclcpp>`_ repo."
msgstr "您可以使用几种方法在C++中编写动作服务器和客户端；请查看`ros2/examples <https://github.com/ros2/examples/tree/humble/rclcpp>`_ repo中的``minimal_action_server``和``minimal_action_client``包。@{"calib_text": " `[6378] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6378>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:8
msgid "Writing an action server and client (Python)"
msgstr "编写一个动作服务器和客户端（Python）@{"calib_text": " `[6379] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6379>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:10
msgid "**Goal:** Implement an action server and client in Python."
msgstr "**目标：** 在Python中实现一个动作服务器和客户端。@{"calib_text": " `[6380] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6380>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:23
msgid "Actions are a form of asynchronous communication in ROS 2. *Action clients* send goal requests to *action servers*. *Action servers* send goal feedback and results to *action clients*."
msgstr "在ROS 2中，动作是一种异步通信形式。*动作客户端*向*动作服务器*发送目标请求。*动作服务器*向*动作客户端*发送目标反馈和结果。@{"calib_text": " `[6381] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6381>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:37
msgid "1 Writing an action server"
msgstr "1 编写动作服务器@{"calib_text": " `[6382] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6382>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:42
msgid "Until now, you've created packages and used ``ros2 run`` to run your nodes. To keep things simple in this tutorial, however, we’ll scope the action server to a single file. If you'd like to see what a complete package for the actions tutorials looks like, check out `action_tutorials <https://github.com/ros2/demos/tree/humble/action_tutorials>`__."
msgstr "到目前为止，您已经创建了包并使用``ros2 run``运行节点。但是，在本教程中，为了保持简单，我们将将动作服务器限定在一个单独的文件中。如果您想查看动作教程的完整包是什么样子，请查看`action_tutorials <https://github.com/ros2/demos/tree/humble/action_tutorials>`__。@{"calib_text": " `[6383] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6383>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:47
msgid "Open a new file in your home directory, let's call it ``fibonacci_action_server.py``, and add the following code:"
msgstr "在您的主目录中打开一个新文件，我们将其命名为``fibonacci_action_server.py``，然后添加以下代码：@{"calib_text": " `[6384] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6384>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:53
msgid "Line 8 defines a class ``FibonacciActionServer`` that is a subclass of ``Node``. The class is initialized by calling the ``Node`` constructor, naming our node ``fibonacci_action_server``:"
msgstr "第8行定义了一个名为``FibonacciActionServer``的类，它是``Node``的子类。通过调用``Node``构造函数来初始化该类，并将节点命名为``fibonacci_action_server``：@{"calib_text": " `[6385] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6385>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:60
msgid "In the constructor we also instantiate a new action server:"
msgstr "在构造函数中，我们还实例化了一个新的动作服务器：@{"calib_text": " `[6386] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6386>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:66
msgid "An action server requires four arguments:"
msgstr "一个操作服务器需要四个参数：@{"calib_text": " `[6387] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6387>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:68
msgid "A ROS 2 node to add the action client to: ``self``."
msgstr "要添加操作客户端的ROS 2节点：``self``。@{"calib_text": " `[6388] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6388>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:69
msgid "The type of the action: ``Fibonacci`` (imported in line 5)."
msgstr "操作的类型：``Fibonacci``（在第5行导入）。@{"calib_text": " `[6389] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6389>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:71
msgid "A callback function for executing accepted goals: ``self.execute_callback``. This callback **must** return a result message for the action type."
msgstr "用于执行已接受的目标的回调函数：``self.execute_callback``。该回调函数**必须**返回该操作类型的结果消息。@{"calib_text": " `[6390] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6390>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:74
msgid "We also define an ``execute_callback`` method in our class:"
msgstr "我们还在类中定义了一个``execute_callback``方法：@{"calib_text": " `[6391] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6391>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:80
msgid "This is the method that will be called to execute a goal once it is accepted."
msgstr "这是一旦接受目标就会被调用来执行目标的方法。@{"calib_text": " `[6392] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6392>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:82
msgid "Let's try running our action server:"
msgstr "让我们尝试运行我们的动作服务器：@{"calib_text": " `[6393] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6393>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:104
msgid "In another terminal, we can use the command line interface to send a goal:"
msgstr "在另一个终端中，我们可以使用命令行界面发送一个目标：@{"calib_text": " `[6394] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6394>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:110
msgid "In the terminal that is running the action server, you should see a logged message \"Executing goal...\" followed by a warning that the goal state was not set. By default, if the goal handle state is not set in the execute callback it assumes the *aborted* state."
msgstr "在正在运行动作服务器的终端中，您应该看到一个记录的消息“正在执行目标...”，然后是一个警告，说明目标状态未设置。默认情况下，如果在执行回调中未设置目标处理状态，则假定为“中止”状态。@{"calib_text": " `[6395] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6395>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:113
msgid "We can use the method `succeed() <http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.server.ServerGoalHandle.succeed>`_ on the goal handle to indicate that the goal was successful:"
msgstr "我们可以使用方法` succeed() <http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.server.ServerGoalHandle.succeed>`_ 来表示目标已成功：@{"calib_text": " `[6396] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6396>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:120
msgid "Now if you restart the action server and send another goal, you should see the goal finished with the status ``SUCCEEDED``."
msgstr "现在，如果重新启动动作服务器并发送另一个目标，您应该看到目标以``SUCCEEDED``状态完成。@{"calib_text": " `[6397] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6397>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:122
msgid "Now let's make our goal execution actually compute and return the requested Fibonacci sequence:"
msgstr "现在让我们实际计算并返回请求的斐波那契数列：@{"calib_text": " `[6398] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6398>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:129
msgid "After computing the sequence, we assign it to the result message field before returning."
msgstr "计算序列后，我们在返回之前将其分配给结果消息字段。@{"calib_text": " `[6399] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6399>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:131
msgid "Again, restart the action server and send another goal. You should see the goal finish with the proper result sequence."
msgstr "然后重新启动动作服务器并发送另一个目标。您应该看到目标以正确的结果序列完成。@{"calib_text": " `[6400] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6400>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:135
msgid "1.2 Publishing feedback"
msgstr "1.2 发布反馈@{"calib_text": " `[6401] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6401>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:137
msgid "One of the nice things about actions is the ability to provide feedback to an action client during goal execution. We can make our action server publish feedback for action clients by calling the goal handle's `publish_feedback() <http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.server.ServerGoalHandle.publish_feedback>`_ method."
msgstr "动作的一个好处是在目标执行期间向动作客户端提供反馈。我们可以通过调用目标处理器的 `publish_feedback() <http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.server.ServerGoalHandle.publish_feedback>`_ 方法，使我们的动作服务器为动作客户端发布反馈。@{"calib_text": " `[6402] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6402>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:140
msgid "We'll replace the ``sequence`` variable, and use a feedback message to store the sequence instead. After every update of the feedback message in the for-loop, we publish the feedback message and sleep for dramatic effect:"
msgstr "我们将替换 ``sequence`` 变量，并使用反馈消息来存储序列。在 for 循环中每次更新反馈消息后，我们都会发布反馈消息并休眠以产生戏剧效果：@{"calib_text": " `[6403] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6403>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:147
msgid "After restarting the action server, we can confirm that feedback is now published by using the command line tool with the ``--feedback`` option:"
msgstr "重新启动动作服务器后，我们可以使用带有 ``--feedback`` 选项的命令行工具来确认现在已发布反馈：@{"calib_text": " `[6404] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6404>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:154
msgid "2 Writing an action client"
msgstr "2 编写一个动作客户端@{"calib_text": " `[6405] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6405>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:156
msgid "We'll also scope the action client to a single file. Open a new file, let's call it ``fibonacci_action_client.py``, and add the following boilerplate code:"
msgstr "我们还将将动作客户端限定在单个文件范围内。打开一个新文件，我们称之为``fibonacci_action_client.py``，然后添加以下样板代码：@{"calib_text": " `[6406] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6406>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:162
msgid "We've defined a class ``FibonacciActionClient`` that is a subclass of ``Node``. The class is initialized by calling the ``Node`` constructor, naming our node ``fibonacci_action_client``:"
msgstr "我们定义了一个名为``FibonacciActionClient``的类，它是``Node``的子类。通过调用``Node``构造函数来初始化该类，将我们的节点命名为``fibonacci_action_client``：@{"calib_text": " `[6407] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6407>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:169
msgid "Also in the class constructor, we create an action client using the custom action definition from the previous tutorial on :doc:`../Creating-an-Action`:"
msgstr "在类的构造函数中，我们还使用之前教程中的自定义动作定义来创建一个动作客户端： :doc:`../Creating-an-Action`@{"calib_text": " `[6408] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6408>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:175
msgid "We create an ``ActionClient`` by passing it three arguments:"
msgstr "我们通过传递三个参数来创建一个``ActionClient``：@{"calib_text": " `[6409] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6409>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:177
msgid "A ROS 2 node to add the action client to: ``self``"
msgstr "要添加动作客户端的 ROS 2 节点：``self``@{"calib_text": " `[6410] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6410>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:178
msgid "The type of the action: ``Fibonacci``"
msgstr "动作的类型：``Fibonacci``@{"calib_text": " `[6411] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6411>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:179
msgid "The action name: ``'fibonacci'``"
msgstr "动作的名称：``'fibonacci'``@{"calib_text": " `[6412] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6412>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:181
msgid "Our action client will be able to communicate with action servers of the same action name and type."
msgstr "我们的动作客户端将能够与具有相同名称和类型的动作服务器进行通信。@{"calib_text": " `[6413] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6413>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:183
msgid "We also define a method ``send_goal`` in the ``FibonacciActionClient`` class:"
msgstr "我们还在``FibonacciActionClient``类中定义了一个方法``send_goal``：@{"calib_text": " `[6414] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6414>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:189
msgid "This method waits for the action server to be available, then sends a goal to the server. It returns a future that we can later wait on."
msgstr "该方法等待动作服务器可用，然后向服务器发送一个目标。它返回一个未来对象，我们可以稍后等待该对象。@{"calib_text": " `[6415] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6415>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:192
msgid "After the class definition, we define a function ``main()`` that initializes ROS 2 and creates an instance of our ``FibonacciActionClient`` node. It then sends a goal and waits until that goal has been completed."
msgstr "在类定义之后，我们定义了一个函数``main()``，它初始化ROS 2并创建``FibonacciActionClient``节点的一个实例。然后它发送一个目标并等待该目标完成。@{"calib_text": " `[6416] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6416>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:196
msgid "Finally, we call ``main()`` in the entry point of our Python program."
msgstr "最后，在我们的Python程序入口点调用``main()``。@{"calib_text": " `[6417] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6417>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:198
msgid "Let's test our action client by first running the action server built earlier:"
msgstr "让我们通过首先运行之前构建的动作服务器来测试我们的动作客户端：@{"calib_text": " `[6418] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6418>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:220
msgid "In another terminal, run the action client:"
msgstr "在另一个终端中运行动作客户端：@{"calib_text": " `[6419] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6419>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:242
msgid "You should see messages printed by the action server as it successfully executes the goal:"
msgstr "当动作服务器成功执行目标时，您应该会看到由其打印的消息：@{"calib_text": " `[6420] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6420>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:253
msgid "The action client should start up, and then quickly finish. At this point, we have a functioning action client, but we don't see any results or get any feedback."
msgstr "动作客户端应该启动，并快速完成。此时，我们拥有一个功能齐全的动作客户端，但我们看不到任何结果或获得任何反馈。@{"calib_text": " `[6421] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6421>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:257
msgid "2.1 Getting a result"
msgstr "2.1 获取结果@{"calib_text": " `[6422] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6422>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:259
msgid "So we can send a goal, but how do we know when it is completed? We can get the result information with a couple steps. First, we need to get a goal handle for the goal we sent. Then, we can use the goal handle to request the result."
msgstr "那么我们可以发送一个目标，但我们如何知道何时完成呢？我们可以通过以下几个步骤获取结果信息。首先，我们需要为发送的目标获取一个目标句柄。然后，我们可以使用目标句柄来请求结果。@{"calib_text": " `[6423] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6423>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:264 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:329
msgid "Here's the complete code for this example:"
msgstr "以下是这个示例的完整代码：@{"calib_text": " `[6424] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6424>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:269
msgid "The `ActionClient.send_goal_async() <http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.client.ActionClient.send_goal_async>`_ method returns a future to a goal handle. First we register a callback for when the future is complete:"
msgstr "`ActionClient.send_goal_async() <http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.client.ActionClient.send_goal_async>`_ 方法返回一个对目标句柄的 future。首先，我们为 future 完成时注册一个回调函数：@{"calib_text": " `[6425] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6425>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:276
msgid "Note that the future is completed when an action server accepts or rejects the goal request. Let's look at the ``goal_response_callback`` in more detail. We can check to see if the goal was rejected and return early since we know there will be no result:"
msgstr "请注意，当一个动作服务器接受或拒绝目标请求时，future 将会完成。让我们更详细地查看 ``goal_response_callback``。我们可以检查目标是否被拒绝，并在此处提前返回，因为我们知道将不会有结果：@{"calib_text": " `[6426] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6426>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:284
msgid "Now that we've got a goal handle, we can use it to request the result with the method `get_result_async() <http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.client.ClientGoalHandle.get_result_async>`_. Similar to sending the goal, we will get a future that will complete when the result is ready. Let's register a callback just like we did for the goal response:"
msgstr "现在我们已经获得了一个目标句柄，我们可以使用它来使用 `get_result_async() <http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.client.ClientGoalHandle.get_result_async>`_ 方法请求结果。与发送目标类似，我们将得到一个 future，该 future 将在结果准备好时完成。让我们注册一个与目标响应时类似的回调函数：@{"calib_text": " `[6427] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6427>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:292
msgid "In the callback, we log the result sequence and shutdown ROS 2 for a clean exit:"
msgstr "在回调函数中，我们记录结果序列并优雅地关闭 ROS 2 以完成退出：@{"calib_text": " `[6428] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6428>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:298
msgid "With an action server running in a separate terminal, go ahead and try running our Fibonacci action client!"
msgstr "在一个独立的终端中运行动作服务器后，可以尝试运行我们的斐波那契动作客户端！@{"calib_text": " `[6429] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6429>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:320
msgid "You should see logged messages for the goal being accepted and the final result."
msgstr "你应该会看到记录的消息，显示目标已被接受和最终结果。@{"calib_text": " `[6430] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6430>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:323
msgid "2.2 Getting feedback"
msgstr "2.2 获取反馈@{"calib_text": " `[6431] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6431>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:325
msgid "Our action client can send goals. Nice! But it would be great if we could get some feedback about the goals we send from the action server."
msgstr "我们的动作客户端可以发送目标。很好！但是如果我们能够从动作服务器获取一些关于发送的目标的反馈信息就更好了。@{"calib_text": " `[6432] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6432>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:334
msgid "Here's the callback function for feedback messages:"
msgstr "这是用于反馈消息的回调函数：@{"calib_text": " `[6433] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6433>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:340
msgid "In the callback we get the feedback portion of the message and print the ``partial_sequence`` field to the screen."
msgstr "在回调函数中，我们获取消息的反馈部分并将``partial_sequence``字段打印到屏幕上。@{"calib_text": " `[6434] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6434>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:342
msgid "We need to register the callback with the action client. This is achieved by additionally passing the callback to the action client when we send a goal:"
msgstr "我们需要在动作客户端中注册回调函数。当我们发送一个目标时，可以通过将回调函数附加到动作客户端来实现：@{"calib_text": " `[6435] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6435>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:349
msgid "We're all set. If we run our action client, you should see feedback being printed to the screen."
msgstr "一切准备就绪。如果我们运行我们的动作客户端，你应该会在屏幕上看到打印出的反馈信息。@{"calib_text": " `[6436] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6436>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:354
msgid "In this tutorial, you put together a Python action server and action client line by line, and configured them to exchange goals, feedback, and results."
msgstr "在本教程中，你逐行组装了一个Python动作服务器和动作客户端，并配置它们进行目标、反馈和结果的交换。@{"calib_text": " `[6437] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6437>`_ "}@"


#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:359
msgid "There are several ways you could write an action server and client in Python; check out the ``minimal_action_server`` and ``minimal_action_client`` packages in the `ros2/examples <https://github.com/ros2/examples/tree/humble/rclpy/actions>`_ repo."
msgstr "你可以用多种方式在Python中编写动作服务器和客户端；请查看`ros2/examples <https://github.com/ros2/examples/tree/humble/rclpy/actions>`_ 仓库中的``minimal_action_server``和``minimal_action_client``软件包。@{"calib_text": " `[6438] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6438>`_ "}@"


#: ../../source/Tutorials/Miscellaneous.rst:2
msgid "Miscellaneous"
msgstr "杂项@{"calib_text": " `[6439] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6439>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:6
msgid "Building a package with Eclipse 2021-06"
msgstr "使用Eclipse 2021-06构建软件包@{"calib_text": " `[6440] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6440>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:12
msgid "You cannot create a ROS 2 package with eclipse, you need to create it with commandline tools. Follow the :doc:`Create a package <../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>` tutorial."
msgstr "你不能使用Eclipse创建ROS 2软件包，你需要使用命令行工具进行创建。请按照 :doc:`创建软件包 <../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>` 教程操作。@{"calib_text": " `[6441] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6441>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:15
msgid "After you created your project, you can edit the source code and build it with eclipse."
msgstr "在创建项目之后，你可以使用Eclipse编辑源代码并进行构建。@{"calib_text": " `[6442] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6442>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:17
msgid "We start eclipse and select a eclipse-workspace."
msgstr "我们启动Eclipse并选择一个Eclipse工作空间。@{"calib_text": " `[6443] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6443>`_ "}@"


msgid "eclipse_work_dir"
msgstr "eclipse_work_dir@{"calib_text": " `[6444] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6444>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:23
msgid "We create a C++ project"
msgstr "我们创建一个C++项目。@{"calib_text": " `[6445] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6445>`_ "}@"


msgid "eclipse_create_c++_project"
msgstr "eclipse_create_c++_project@{"calib_text": " `[6446] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6446>`_ "}@"


msgid "eclipse_c++_project_select_type"
msgstr "eclipse_c++_project_select_type@{"calib_text": " `[6447] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6447>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:34
msgid "We see that we got C++ includes."
msgstr "我们看到我们获得了C++的包含文件。@{"calib_text": " `[6448] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6448>`_ "}@"


msgid "eclipse_c++_project_includes"
msgstr "eclipse_c++_project_includes@{"calib_text": " `[6449] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6449>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:41
msgid "We now import our ROS 2 project. The code is still in the old place."
msgstr "我们现在导入我们的ROS 2项目。代码仍然位于旧位置。@{"calib_text": " `[6450] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6450>`_ "}@"


msgid "eclipse_import_project"
msgstr "eclipse_import_project@{"calib_text": " `[6451] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6451>`_ "}@"


msgid "eclipse_import_filesystem"
msgstr "eclipse_import_filesystem@{"calib_text": " `[6452] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6452>`_ "}@"


msgid "eclipse_import_select_my_package"
msgstr "eclipse_import_select_my_package@{"calib_text": " `[6453] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6453>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:58
msgid "We see in the source code that the C++ includes got resolved but not the ROS 2 ones."
msgstr "我们在源代码中看到C++的包含已经解决了，但ROS 2的还没有。@{"calib_text": " `[6454] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6454>`_ "}@"


msgid "eclipse_c++_wo_ros_includes"
msgstr "eclipse_c++_wo_ros_includes@{"calib_text": " `[6455] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6455>`_ "}@"


msgid "eclipse_c++_path_and_symbols"
msgstr "eclipse_c++_path_and_symbols@{"calib_text": " `[6456] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6456>`_ "}@"


msgid "eclipse_c++_add_directory_path"
msgstr "eclipse_c++_add_directory_path@{"calib_text": " `[6457] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6457>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:75
msgid "We now see that the ROS 2 includes got resolved too."
msgstr "现在我们看到ROS 2的包含也已经解决了。@{"calib_text": " `[6458] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6458>`_ "}@"


msgid "eclipse_c++_indexer_ok"
msgstr "eclipse_c++_indexer_ok@{"calib_text": " `[6459] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6459>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:82
msgid "Adding Builder colcon, so that we can build with right-click on project and \"Build project\"."
msgstr "添加 Builder colcon，以便我们可以在项目上右键单击并选择“构建项目”进行构建。@{"calib_text": " `[6460] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6460>`_ "}@"


msgid "eclipse_c++_properties_builders"
msgstr "eclipse_c++_properties_builders@{"calib_text": " `[6461] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6461>`_ "}@"


msgid "eclipse_c++_builder_main"
msgstr "eclipse_c++_builder_main@{"calib_text": " `[6462] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6462>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:94
msgid "With PYTHONPATH you can also build python projects."
msgstr "使用 PYTHONPATH，您还可以构建 Python 项目。@{"calib_text": " `[6463] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6463>`_ "}@"


msgid "eclipse_c++_builder_env"
msgstr "eclipse_c++_builder_env@{"calib_text": " `[6464] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6464>`_ "}@"


msgid "eclipse_c++_properties_builders_with_colcon"
msgstr "eclipse_c++_properties_builders_with_colcon@{"calib_text": " `[6465] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6465>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:106
msgid "Right-click on the project and select \"Build Project\"."
msgstr "右键单击项目，然后选择\"构建项目\"。@{"calib_text": " `[6466] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6466>`_ "}@"


msgid "eclipse_c++_build_project_with_colcon"
msgstr "eclipse_c++_build_project_with_colcon@{"calib_text": " `[6467] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6467>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:7
msgid "Building a real-time Linux kernel [community-contributed]"
msgstr "构建实时Linux内核[社区贡献]@{"calib_text": " `[6468] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6468>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:9
msgid "This tutorial begins with a clean Ubuntu 20.04.1 install on Intel x86_64. Actual kernel is 5.4.0-54-generic, but we will install the Latest Stable RT_PREEMPT Version. To build the kernel you need at least 30GB free disk space."
msgstr "本教程以在 Intel x86_64 上进行干净的 Ubuntu 20.04.1安装为起点。实际内核版本为 5.4.0-54-generic，但我们将安装最新稳定的 RT_PREEMPT 版本。要构建内核，您需要至少 30 GB 的可用磁盘空间。@{"calib_text": " `[6469] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6469>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:11
msgid "Check https://wiki.linuxfoundation.org/realtime/start for the latest stable version, at the time of writing this is \"Latest Stable Version 5.4-rt\". If we click on the `link <http://cdn.kernel.org/pub/linux/kernel/projects/rt/5.4/>`_, we get the exact version. Currently it is patch-5.4.78-rt44.patch.gz."
msgstr "请查看https://wiki.linuxfoundation.org/realtime/start，了解最新的稳定版本。目前是\"Latest Stable Version 5.4-rt\"。如果我们点击`链接 <http://cdn.kernel.org/pub/linux/kernel/projects/rt/5.4/>`_，我们将得到确切的版本。目前的版本是patch-5.4.78-rt44.patch.gz。@{"calib_text": " `[6470] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6470>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:17
msgid "We create a directory in our home dir with"
msgstr "我们在我们的主目录中创建一个目录，名称为@{"calib_text": " `[6471] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6471>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:23
msgid "and switch into it with"
msgstr "并切换到该目录，使用@{"calib_text": " `[6472] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6472>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:29
msgid "We can go with a browser to https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/ and see if the version is there. You can download it from the site and move it manually from /Downloads to the /kernel folder, or download it using wget by right clicking the link using \"copy link location\". Example:"
msgstr "我们可以使用浏览器访问 https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/ ，查看该版本是否存在。您可以从该网站下载并手动将其从/Downloads移动到/kernel文件夹中，或者使用wget下载，方法是右键点击链接并选择“复制链接地址”。示例：@{"calib_text": " `[6473] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6473>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:35 ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:47
msgid "unpack it with"
msgstr "使用以下命令解压缩@{"calib_text": " `[6474] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6474>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:41
msgid "download rt_preempt patch matching the Kernel version we just downloaded over at http://cdn.kernel.org/pub/linux/kernel/projects/rt/5.4/"
msgstr "在 http://cdn.kernel.org/pub/linux/kernel/projects/rt/5.4/ 下载与刚刚下载的内核版本匹配的rt_preempt补丁@{"calib_text": " `[6475] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6475>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:53
msgid "Then switch into the linux directory with"
msgstr "然后切换到linux目录，使用命令@{"calib_text": " `[6476] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6476>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:59
msgid "and patch the kernel with the realtime patch"
msgstr "并使用实时补丁对内核进行补丁@{"calib_text": " `[6477] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6477>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:65
msgid "We simply want to use the config of our Ubuntu installation, so we get the Ubuntu config with"
msgstr "我们只想使用我们的Ubuntu安装的配置，所以我们使用以下命令获取Ubuntu的配置@{"calib_text": " `[6478] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6478>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:71
msgid "Open Software & Updates. in the Ubuntu Software menu tick the 'Source code' box"
msgstr "在Ubuntu软件菜单中的“开放软件和更新”中勾选“源代码”框@{"calib_text": " `[6479] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6479>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:73
msgid "We need some tools to build kernel, install them with"
msgstr "我们需要一些构建内核的工具，使用以下命令进行安装@{"calib_text": " `[6480] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6480>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:80
msgid "To enable all Ubuntu configurations, we simply use"
msgstr "为了启用所有的Ubuntu配置，我们只需要使用以下命令@{"calib_text": " `[6481] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6481>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:86
msgid "Then we need to enable rt_preempt in the kernel. We call"
msgstr "然后我们需要在内核中启用rt_preempt。我们调用以下命令@{"calib_text": " `[6482] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6482>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:92
msgid "and set the following"
msgstr "设置以下内容@{"calib_text": " `[6483] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6483>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:124
msgid "Save and exit menuconfig. Now we're going to build the kernel which will take quite some time. (10-30min on a modern cpu)"
msgstr "保存并退出 menuconfig。现在我们要构建内核，这将需要相当长的时间。（在现代CPU上大约需要10-30分钟）@{"calib_text": " `[6484] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6484>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:130
msgid "After the build is finished check the debian packages"
msgstr "构建完成后，检查 Debian 软件包@{"calib_text": " `[6485] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6485>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:138
msgid "Then we install all kernel debian packages"
msgstr "然后安装所有内核 Debian 软件包@{"calib_text": " `[6486] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6486>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:144
msgid "Now the real time kernel should be installed. Reboot the system and check the new kernel version"
msgstr "现在应该已经安装了实时内核。重新启动系统并检查新的内核版本@{"calib_text": " `[6487] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6487>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:7
msgid "Deploying on IBM Cloud Kubernetes [community-contributed]"
msgstr "在 IBM Cloud Kubernetes 上部署 [社区贡献]@{"calib_text": " `[6488] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6488>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:15
msgid "About"
msgstr "关于@{"calib_text": " `[6489] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6489>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:17
msgid "This article describes how to get ROS2 running on IBM Cloud using Docker files. It first gives a brief overview of docker images and how they work locally and then explores IBM Cloud and how the user can deploy their containers on it. Afterwards, a short description of how the user can use their own custom packages for ROS2 from github on IBM Cloud is provided. A walkthrough of how to create a cluster and utilize Kubernetes on IBM Cloud is provided and finally the Docker image is deployed on the cluster. Originally published `here <https://github.com/mm-nasr/ros2_ibmcloud>`__ and `here <https://medium.com/@mahmoud-nasr/running-ros2-on-ibm-cloud-1b1284cbd487>`__."
msgstr "本文介绍如何使用Docker文件在IBM Cloud上运行ROS2。首先简要概述了Docker镜像及其在本地环境中的工作原理，然后探讨了IBM Cloud以及用户如何在其中部署其容器。之后，提供了有关用户如何在IBM Cloud上使用其自定义的ROS2软件包（来自GitHub）的简短描述。提供了有关如何创建集群并在IBM Cloud上利用Kubernetes的步骤，最后将Docker镜像部署到该集群上。本文最初发布于`这里 <https://github.com/mm-nasr/ros2_ibmcloud>`__ 和 `这里 <https://medium.com/@mahmoud-nasr/running-ros2-on-ibm-cloud-1b1284cbd487>`__。@{"calib_text": " `[6490] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6490>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:23
msgid "ROS2 on IBM Cloud"
msgstr "在IBM Cloud上运行ROS2@{"calib_text": " `[6491] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6491>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:25
msgid "In this tutorial, we show how you can easily integrate and run ROS2 on IBM Cloud with your custom packages."
msgstr "在本教程中，我们将展示如何轻松地将ROS2与自定义软件包集成并在IBM Cloud上运行。@{"calib_text": " `[6492] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6492>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:28
msgid "ROS2 is the new generation of ROS which gives more control over multi-robot formations. With the advancements of cloud computing, cloud robotics are becoming more important in today's age. In this tutorial, we will go through a short introduction on running ROS2 on IBM Cloud. By the end of the tutorial, you will be able to create your own packages in ROS2 and deploy them to the cloud using docker files."
msgstr "ROS2是ROS的新一代版本，它在多机器人形成方面提供了更多控制能力。随着云计算的发展，云机器人在当今时代变得越来越重要。在本教程中，我们将简要介绍如何在IBM Cloud上运行ROS2。通过本教程的学习，您将能够在ROS2中创建自己的软件包，并使用Docker文件将其部署到云端。@{"calib_text": " `[6493] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6493>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:35
msgid "The following instructions assume you're using Linux and have been tested with Ubuntu 18.04 (Bionic Beaver)."
msgstr "以下说明假定您使用的是Linux系统，并已经在Ubuntu 18.04（Bionic Beaver）上进行了测试。@{"calib_text": " `[6494] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6494>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:39
msgid "Step 1: Setting up your system"
msgstr "步骤1：设置您的系统@{"calib_text": " `[6495] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6495>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:41
msgid "Before we go into how the exact process works, lets first make sure all the required software is properly installed. We'll point you towards the appropriate sources to set up your system and only highlight the details that pertain to our use-case."
msgstr "在我们详细介绍具体过程之前，让我们先确保所有所需软件已正确安装。我们将指引您到适当的来源以设置您的系统，并仅强调与我们使用场景相关的细节。@{"calib_text": " `[6496] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6496>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:47
msgid "a) Docker files?"
msgstr "a) Docker文件？@{"calib_text": " `[6497] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6497>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:49
msgid "Docker files are a form of containers that can run separate from your system, this way, you can set-up potentially hundreds of different projects without affecting one another. You can even set-up different versions of Linux on one machine, without the need for virtual machine. Docker files have an advantage of saving space and only utilizing your system resources when running. In addition, dockers are versatile and transferable. They contain all the required pre-requisites to run separately, meaning that you can easily use a docker file for a specific system or service without any cubersome steps!"
msgstr "Docker文件是一种容器形式，可以独立于您的系统运行。这样，您可以设置可能有数百个不同项目而彼此不受影响。您甚至可以在一台机器上设置不同版本的Linux，而无需使用虚拟机。Docker文件具有节省空间和仅在运行时利用您的系统资源的优势。此外，Docker具有灵活和可转移的特性。它们包含所有运行所需的预设条件，这意味着您可以轻松地为特定的系统或服务使用Docker文件，而无需进行任何复杂的步骤！@{"calib_text": " `[6498] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6498>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:59
msgid "Excited yet? Let's start off by installing docker to your system by following the following `link <https://docs.docker.com/get-docker/>`__. From the tutorial, you should have done some sanity checks to make sure docker is properly set-up. Just in case, however, let's run the following command once again that uses the hello-world docker image:"
msgstr "感到兴奋了吗？让我们从按照以下 `链接 <https://docs.docker.com/get-docker/>`__ 安装docker到您的系统开始吧。根据教程，您应该进行一些健全性检查以确保docker已正确设置。然而，为了保险起见，让我们再次运行以下命令，使用hello-world docker映像：@{"calib_text": " `[6499] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6499>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:69
msgid "You should obtain the following output:"
msgstr "您应该得到以下输出：@{"calib_text": " `[6500] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6500>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:95
msgid "b) ROS2 Image"
msgstr "b) ROS2 Image@{"calib_text": " `[6501] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6501>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:97
msgid "ROS `announced <https://discourse.ros.org/t/announcing-official-docker-images-for-ros2/7381/2>`__ image containers for several ROS distributions in January 2019. More detailed instructions on the use of ROS2 docker images can be found `here <https://hub.docker.com/_/ros/>`__."
msgstr "ROS `宣布 <https://discourse.ros.org/t/announcing-official-docker-images-for-ros2/7381/2>`__ 2019年1月发布了几个ROS发行版的官方Docker镜像容器。有关使用ROS2 Docker镜像的详细说明，请参阅 `此处 <https://hub.docker.com/_/ros/>`__。@{"calib_text": " `[6502] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6502>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:103
msgid "Let's skip through that and get to real-deal right away; creating a local ROS2 docker. We'll create our own Dockerfile (instead of using a ready Image) since we'll need this method for deployment on IBM Cloud. First, we create a new directory which will hold our Dockerfile and any other files we need later on and navigate to it. Using your favorite $EDITOR of choice, open a new file named *Dockerfile* (make sure the file naming is correct):"
msgstr "让我们直接跳过这些，立即开始创建本地ROS2 Docker。由于我们需要将其部署到IBM Cloud上，我们将创建自己的Dockerfile（而不是使用现成的镜像）。首先，创建一个新目录，用于保存我们的Dockerfile和稍后需要的任何其他文件，并进入该目录。使用您喜欢的$EDITOR，打开一个名为*Dockerfile*的新文件（确保文件名正确）：@{"calib_text": " `[6503] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6503>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:119
msgid "Insert the following in the *Dockerfile*, and save it (also found `here <https://github.com/mm-nasr/ros2_ibmcloud/blob/main/dockers/ros2_basic/Dockerfile>`__):"
msgstr "将以下内容插入*Dockerfile*中，并保存它（也可以在 `此处 <https://github.com/mm-nasr/ros2_ibmcloud/blob/main/dockers/ros2_basic/Dockerfile>`__ 找到）：@{"calib_text": " `[6504] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6504>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:137
msgid "**FROM**: creates a layer from the ros:foxy Docker image"
msgstr "**FROM**：使用ros:foxy Docker镜像创建一个层@{"calib_text": " `[6505] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6505>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:138
msgid "**RUN**: builds your container by installing vim into it and creating a directory called /ros2_home"
msgstr "**RUN**：通过将vim安装到容器中并创建一个名为/ros2_home的目录来构建您的容器@{"calib_text": " `[6506] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6506>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:140
msgid "**WORKDIR**: informs the container where the working directory should be for it"
msgstr "**WORKDIR**：指定容器中的工作目录。@{"calib_text": " `[6507] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6507>`_ "}@"


#, python-format
msgid "Of course, you are free to change the ROS distribution (*foxy* is used here) or change the directory name. The above docker file sets up ROS-foxy and installs the demo nodes for C++ and Python. Then it launches a file which runs a talker and a listener node. We will see it in action in just a few, but they act very similar to the publisher-subscriber example found in the `ROS wiki <https://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29>`__"
msgstr "当然，您可以自由更改ROS版本（这里使用的是*foxy*），或更改目录名称。上述Docker文件设置了ROS-foxy并安装了C++和Python的演示节点。然后，它启动一个文件，其中运行一个talker和一个listener节点。我们很快就会看到它的效果，但它们与在`ROS wiki <https://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29>`__中找到的发布者-订阅者示例非常相似。@{"calib_text": " `[6508] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6508>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:151
msgid "Now, we are ready to build the docker image to run ROS2 in it (yes, it is THAT easy!)."
msgstr "现在，我们准备构建用于在其中运行ROS2的Docker镜像（是的，就是这么简单！）。@{"calib_text": " `[6509] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6509>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:154
msgid "**Note**: if you have errors due to insufficient privileges or *permission denied*, try running the command with *sudo* privileges:"
msgstr "**注意**：如果出现权限不足或*权限被拒绝*的错误，请尝试使用*sudo*权限运行命令：@{"calib_text": " `[6510] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6510>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:164
msgid "*0dc6ce7cb487* will most probably be different for you, so keep note of it and copy it somewhere for reference. You can always go back and check the docker images you have on your system using:"
msgstr "*0dc6ce7cb487*对您来说可能是不同的，所以请记下来并将其复制到某个地方以供参考。您始终可以返回并使用以下命令检查系统上的Docker镜像：@{"calib_text": " `[6511] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6511>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:172
msgid "Now, run the docker file using:"
msgstr "现在，使用以下命令运行Docker文件：@{"calib_text": " `[6512] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6512>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:194
msgid "If it works correctly, you should see something similar to what is shown above. As can be seen, there are two ROS nodes (a publisher and a subscriber) running and their output is provided to us through ROS INFO."
msgstr "如果它正常工作，你应该看到类似于上面显示的内容。如图所示，有两个 ROS 节点（一个发布者和一个订阅者）正在运行，并且它们的输出通过 ROS INFO 提供给我们。@{"calib_text": " `[6513] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6513>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:199
msgid "Step 2: Running the image on IBM Cloud"
msgstr "步骤2：在 IBM Cloud 上运行图像@{"calib_text": " `[6514] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6514>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:201
msgid "The following steps assume you have an IBM cloud account and have ibmcloud CLI installed. If not, please check this `link <https://cloud.ibm.com/docs/cli/reference/ibmcloud/download_cli.html>`__ out to get that done first."
msgstr "以下步骤假设您拥有 IBM Cloud 帐户并已安装 ibmcloud CLI。如果没有，请首先查看此 `链接 <https://cloud.ib@{"calib_text": " `[6515] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6515>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:206
msgid "We also need to make sure that the CLI plug-in for the IBM Cloud Container Registry is installed by running the command"
msgstr "我们还需要确保通过运行以下命令安装了 IBM Cloud Container Registry 的 CLI 插件@{"calib_text": " `[6516] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6516>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:213
msgid "Afterwards, login to your ibmcloud account through the terminal:"
msgstr "随后，通过终端登录到您的 ibmcloud 帐户:@{"calib_text": " `[6517] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6517>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:219
msgid "From here, let's create a container registry name-space. Make sure you use a unique name that is also descriptive as to what it is. Here, I used *ros2nasr*."
msgstr "从这里开始，让我们创建一个容器注册表命名空间。确保使用一个既独特又能描述其用途的名称。在这里，我使用了 *ros2nasr*。@{"calib_text": " `[6518] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6518>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:227
msgid "IBM cloud has a lot of shortcuts that would help us get our container onto the cloud right away. The command below builds the container and tags it with the name **ros2foxy** and the version of **1**. Make sure you use the correct registry name you created and you are free to change the container name as you wish. The **.** at the end indicates that the *Dockerfile* is in the current directory (and it is important), if not, change it to point to the directory containing the Dockerfile."
msgstr "IBM Cloud 提供了许多快捷方式，可以帮助我们立即将容器部署到云端。下面的命令会构建容器，并将其标记为名称为 **ros2foxy**、版本为 **1**。确保使用您创建的正确注册表名称，并且可以根据需要自由更改容器名称。末尾的 **.** 表示 *Dockerfile* 在当前目录中（这一点很重要），如果不是，请将其更改为指向包含 Dockerfile 的目录。@{"calib_text": " `[6519] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6519>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:239
msgid "You can now make sure that the container has been pushed to the registry you created by running the following command"
msgstr "您现在可以通过运行以下命令确保容器已推送到您创建的注册表中@{"calib_text": " `[6520] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6520>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:252
msgid "Next, it is important to log-in to your registry to run the docker image. Again, if you face a *permission denied* error, perform the command with sudo privileges. Afterwards, run your docker file as shown below."
msgstr "接下来，重要的是登录到您的注册表以运行 Docker 镜像。同样，如果遇到 *permission denied* 错误，请使用 sudo 权限执行该命令。然后按照下面的示例运行您的 Dockerfile。@{"calib_text": " `[6521] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6521>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:269
msgid "Where *ros2nasr* is the name of the registry you created and *ros2foxy:1* is the tag of the docker container and the version as explained previously."
msgstr "其中*ros2nasr*是您创建的注册表的名称，而*ros2foxy:1*是Docker容器的标签和版本，如之前所述。@{"calib_text": " `[6522] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6522>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:273
msgid "You should now see your docker file running and providing similar output to that you saw when you ran it locally on your machine."
msgstr "现在，您应该看到Docker文件正在运行，并提供与在本地计算机上运行时所看到的类似的输出。@{"calib_text": " `[6523] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6523>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:277
msgid "Step 3: Using Custom ROS2 Packages"
msgstr "步骤3：使用自定义的ROS2软件包@{"calib_text": " `[6524] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6524>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:279
msgid "So now we have the full pipeline working, from creating the Dockerfile, all the way to deploying it and seeing it work on IBM Cloud. But, what if we want to use a custom set of packages we (or someone else) created?"
msgstr "所以现在我们已经有了完整的流程，从创建Dockerfile，一直到部署它并在IBM Cloud上运行。但是，如果我们想要使用我们自己（或其他人）创建的自定义软件包，怎么办呢？@{"calib_text": " `[6525] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6525>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:283
msgid "Well that all has to do with how you set-up your Dockerfile. Lets use the example provided by ROS2 `here <https://hub.docker.com/_/ros/>`__. Create a new directory with a new Dockerfile (or overwrite the existing one) and add the following in it (or download the file `here <https://github.com/mm-nasr/ros2_ibmcloud/blob/main/dockers/git_pkgs_docker/Dockerfile>`__)"
msgstr "那么这完全取决于您如何设置Dockerfile。让我们使用ROS2 `这里提供的示例 <https://hub.docker.com/_/ros/>`__。创建一个新目录，其中包含一个新的Dockerfile（或覆盖现有的Dockerfile），然后在其中添加以下内容（或从`这里下载文件 <https://github.com/mm-nasr/ros2_ibmcloud/blob/main/dockers/git_pkgs_docker/Dockerfile>`__）@{"calib_text": " `[6526] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6526>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:351
msgid "Going through the lines shown, we can see how we can add custom packages from github in 4 steps:"
msgstr "通过查看所示的行，我们可以了解到如何通过4个步骤从GitHub添加自定义软件包：@{"calib_text": " `[6527] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6527>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:354
msgid "Create an overlay with custom packages cloned from Github:"
msgstr "创建一个包含从 Github 克隆的自定义软件包的叠加层:@{"calib_text": " `[6528] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6528>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:369
msgid "Install package dependencies using rosdep"
msgstr "使用 rosdep 安装软件包依赖项@{"calib_text": " `[6529] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6529>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:385
msgid "Build the packages *you need*"
msgstr "构建您需要的软件包@{"calib_text": " `[6530] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6530>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:399
msgid "Running the launch file"
msgstr "运行启动文件@{"calib_text": " `[6531] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6531>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:406
msgid "Likewise, we can change the packages used, install their dependencies, and then run them."
msgstr "同样地，我们可以更改所使用的软件包，安装它们的依赖项，然后运行它们。@{"calib_text": " `[6532] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6532>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:409
msgid "**Back to IBM Cloud**"
msgstr "**返回 IBM Cloud**@{"calib_text": " `[6533] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6533>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:411
msgid "With this Dockerfile, we can follow the same steps we did before to deploy it on IBM Cloud. Since we already have our registry created, and we're logged in to IBM Cloud, we directly build our new Dockerfile. Notice how I kept the tag the same but changed the version, this way I can update the docker image created previously. (You are free to create a completely new one if you want)"
msgstr "使用这个Dockerfile，我们可以按照之前的步骤在IBM Cloud上部署它。由于我们已经创建了注册表，并且我们已经登录到IBM Cloud，因此我们直接构建我们的新Dockerfile。请注意，我保持了标签不变，但更改了版本，这样我可以更新先前创建的Docker镜像。（如果您愿意，您可以完全创建一个新的）@{"calib_text": " `[6534] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6534>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:422
msgid "Then, make sure you are logged in to the registry and run the new docker image:"
msgstr "然后，确保您已登录到注册表，并运行新的Docker镜像：@{"calib_text": " `[6535] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6535>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:437
msgid "You should see, again, the same output. However, this time we did it through custom packages from github, which allows us to utilize our personally created packages for ROS2 on IBM Cloud."
msgstr "您应该再次看到相同的输出。然而，这次我们是通过来自GitHub的自定义包来完成的，这使我们能够在IBM Cloud上利用我们个人创建的ROS2包。@{"calib_text": " `[6536] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6536>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:442
msgid "Extra: Deleting Docker Images"
msgstr "附加信息：删除Docker镜像@{"calib_text": " `[6537] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6537>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:444
msgid "As you may find yourself in need of deleting a specific docker image(s) from IBM Cloud, this is how you should go about it!"
msgstr "如果您发现自己需要从IBM Cloud中删除特定的Docker镜像，以下是您应该执行的步骤！@{"calib_text": " `[6538] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6538>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:447
msgid "List all the images you have and find all the ones that share the *IMAGE* name corresponding to *registry.ng.bluemix.net/ros2nasr/ros2foxy:2* (in my case). Then delete them using their *NAMES*"
msgstr "列出您拥有的所有镜像，并找到所有与*registry.ng.bluemix.net/ros2nasr/ros2foxy:2*（在我的情况下）相对应的*IMAGE*名称的镜像。然后使用它们的*NAMES*进行删除。@{"calib_text": " `[6539] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6539>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:456
msgid "Delete the docker image from IBM Cloud using its *IMAGE* name"
msgstr "使用其*IMAGE*名称从IBM Cloud中删除Docker镜像@{"calib_text": " `[6540] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6540>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:463
msgid "Step 4: Kubernetes"
msgstr "第四步：Kubernetes@{"calib_text": " `[6541] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6541>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:466
msgid "a) Creating the Cluster"
msgstr "a) 创建集群@{"calib_text": " `[6542] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6542>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:468
msgid "Create a cluster using the Console. The instructions are found `here <https://cloud.ibm.com/docs/containers?topic=containers-clusters#clusters_ui>`__. The settings used are detailed below. These are merely suggestions and can be changed if you need to. However, make sure you understand the implications of your choices:"
msgstr "使用控制台创建集群。指令可以在`此处 <https://cloud.ibm.com/docs/containers?topic=containers-clusters#clusters_ui>`__找到。下面详细介绍了使用的设置。这些仅为建议，如果需要，可以进行更改。然而，请确保您理解所做选择的影响：@{"calib_text": " `[6543] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6543>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:474
msgid "Plan: *Standard*"
msgstr "计划：*标准*@{"calib_text": " `[6544] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6544>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:476
msgid "Orchestration Service: *Kubernetes v1.18.10*"
msgstr "编排服务：*Kubernetes v1.18.10*@{"calib_text": " `[6545] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6545>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:478
msgid "Infrastructure: *Classic*"
msgstr "基础设施: *经典*@{"calib_text": " `[6546] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6546>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:480
msgid "Location:"
msgstr "位置:@{"calib_text": " `[6547] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6547>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:482
msgid "Resource group: *Default*"
msgstr "资源组: *默认*@{"calib_text": " `[6548] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6548>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:484
msgid "Geography: *North America* (you are free to change this)"
msgstr "地理位置: *北美*（您可以更改此选项）@{"calib_text": " `[6549] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6549>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:486
msgid "Availability: *Single zone* (you are free to change this but make sure you understand the impact of your choices by checking the IBM Cloud documentation.)"
msgstr "可用性: *单一区域*（您可以更改此选项，但请确保通过查阅IBM Cloud文档了解您选择的影响。）@{"calib_text": " `[6550] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6550>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:490
msgid "Worker Zone: *Toronto 01* (choose the location that is physically closest to you)"
msgstr "工作区: *多伦多 01*（选择与您物理位置最近的位置）@{"calib_text": " `[6551] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6551>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:493
msgid "Worker Pool:"
msgstr "工作池: @{"calib_text": " `[6552] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6552>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:495
msgid "Virtual - shared, Ubuntu 18"
msgstr "虚拟 - 共享，Ubuntu 18@{"calib_text": " `[6553] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6553>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:497
msgid "Memory: 16 GB"
msgstr "内存: 16 GB@{"calib_text": " `[6554] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6554>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:499
msgid "Worker nodes per zone: *1*"
msgstr "每个区域的工作节点: *1*@{"calib_text": " `[6555] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6555>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:501
msgid "Master service endpoint: *Both private & public endpoints*"
msgstr "主服务端点: *私有和公共端点都可用*@{"calib_text": " `[6556] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6556>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:503
msgid "Resource details (Totally flexible):"
msgstr "资源详情（完全灵活）：@{"calib_text": " `[6557] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6557>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:505
msgid "Cluster name: *mycluster-tor01-rosibm*"
msgstr "集群名称: *mycluster-tor01-rosibm*@{"calib_text": " `[6558] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6558>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:507
msgid "Tags: *version:1*"
msgstr "标签: *version:1*@{"calib_text": " `[6559] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6559>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:509
msgid "After you create your cluster, you will be redirected to a page which details how you can set up the CLI tools and access your cluster. Please follow these instructions (or check the instructions `here <https://github.com/mm-nasr/ros2_ibmcloud/blob/main/Kubernetes-Cluster-Set-up.md>`__)and wait for the progress bar to show that the worker nodes you created are ready by indicating *Normal* next to the cluster name. You can also reach this screen from the IBM Cloud Console inside the Kubernetes."
msgstr "创建集群后，您将被重定向到一个页面，该页面详细介绍了如何设置CLI工具和访问您的集群。请按照这些说明操作（或者在这里查看说明：<https://github.com/mm-nasr/ros2_ibmcloud/blob/main/Kubernetes-Cluster-Set-up.md>），并等待进度条显示创建的工作节点已经准备就绪，集群名称旁边显示*Normal*。您也可以从IBM Cloud控制台内部的Kubernetes界面访问此屏幕。@{"calib_text": " `[6560] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6560>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:518
msgid "b) Deploying your Docker Image *Finally!*"
msgstr "b) 部署您的Docker镜像 *最后！*@{"calib_text": " `[6561] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6561>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:520
msgid "Create a deployment configuration yaml file named *ros2-deployment.yaml* using your favorite $EDITOR and insert the following in it:"
msgstr "使用您喜欢的$EDITOR创建一个名为*ros2-deployment.yaml*的部署配置yaml文件，并在其中插入以下内容：@{"calib_text": " `[6562] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6562>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:544
msgid "You should replace the tags shown between *\"<\" \">\"* as described `here <https://cloud.ibm.com/docs/containers?topic=containers-images#namespace>`__. The file in my case would look something like this:"
msgstr "您应该根据此处描述的方式替换*\"<\" \">\"*之间显示的标签。在我的情况下，文件的内容将类似于以下内容：@{"calib_text": " `[6563] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6563>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:568
msgid "Deploy the file using the following command"
msgstr "使用以下命令部署文件@{"calib_text": " `[6564] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6564>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:575
msgid "Now your docker image is fully deployed on your cluster!"
msgstr "现在你的 Docker 镜像已完全部署在你的集群上！@{"calib_text": " `[6565] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6565>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:578
msgid "Step 5: Using CLI for your Docker Image"
msgstr "步骤 5：使用 CLI 操作你的 Docker 镜像@{"calib_text": " `[6566] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6566>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:580
msgid "Navigate to your cluster through the IBM Cloud console Kubernetes."
msgstr "通过 IBM Cloud 控制台 Kubernetes 导航到你的集群。@{"calib_text": " `[6567] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6567>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:582
msgid "Click on *Kubernetes dashboard* on the top right corner of the page."
msgstr "点击页面右上角的 *Kubernetes 仪表盘*。@{"calib_text": " `[6568] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6568>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:584
msgid "You should now be able to see a full list of all the different parameters of your cluster as well as its CPU and Memory Usage."
msgstr "现在你应该能够看到你的集群的所有不同参数以及其 CPU 和内存使用情况的完整列表。@{"calib_text": " `[6569] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6569>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:587
msgid "Navigate to *Pods* and click on your deployment."
msgstr "转到 *Pods*，然后点击您的部署。@{"calib_text": " `[6570] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6570>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:589
msgid "On the top right corner, click on *Exec into pod*"
msgstr "在右上角，点击 *Exec into pod*。@{"calib_text": " `[6571] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6571>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:591
msgid "Now you are inside your docker image! You can source your workspace (if needed) and run ROS2! For example:"
msgstr "现在您已经进入了您的 Docker 镜像！您可以为您的工作区设置环境变量（如果需要），然后运行 ROS2！例如：@{"calib_text": " `[6572] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6572>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:600
msgid "Final Remarks"
msgstr "最后的备注@{"calib_text": " `[6573] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6573>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:602
msgid "At this point, you are capable of creating your own docker image using ROS2 packages on github. It is also possible, with little changes to utilize local ROS2 packages as well. This could be the topic of another article. However, you are encouraged to check out the following `Dockerfile <https://github.com/mm-nasr/ros2_ibmcloud/tree/main/dockers/local_pkgs_docker>`__ which uses a local copy of the demos repository. Similarly, you can use your own local package."
msgstr "在此时，您可以使用来自 GitHub 上的 ROS2 软件包创建自己的 Docker 镜像。也可以进行少量修改，以利用本地的 ROS2 软件包。这可能是另一篇文章的主题。不过，建议您查看以下 `Dockerfile <https://github.com/mm-nasr/ros2_ibmcloud/tree/main/dockers/local_pkgs_docker>`__，该文件使用了演示存储库的本地副本。同样地，您也可以使用您自己的本地软件包。@{"calib_text": " `[6574] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6574>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:7
msgid "Using Eclipse Oxygen with ``rviz2`` [community-contributed]"
msgstr "使用 ``rviz2`` 的 Eclipse Oxygen [社区贡献]@{"calib_text": " `[6575] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6575>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:14
msgid "Setup"
msgstr "设置@{"calib_text": " `[6576] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6576>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:16
msgid "This tutorial assumes Eclipse Oxygen, git, and Egit (http://www.eclipse.org/egit/download/) are already installed."
msgstr "本教程假设您已经安装了Eclipse Oxygen、git和Egit（http://www.eclipse.org/egit/download/）@{"calib_text": " `[6577] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6577>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:18
msgid "Throughout the tutorial we name the eclipse workspace the same name as the ros2 package, but this is not required."
msgstr "在整个教程中，我们将把eclipse工作空间与ros2软件包命名为相同的名称，但这并非必需。@{"calib_text": " `[6578] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6578>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:20
msgid "HINT: We use nested projects and one Eclipse Workspace for each ROS-2 package."
msgstr "提示：我们为每个ROS-2软件包使用嵌套项目和一个Eclipse工作空间。@{"calib_text": " `[6579] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6579>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:25
msgid "Create a C++ Project."
msgstr "创建一个C++项目。@{"calib_text": " `[6580] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6580>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:34
msgid "Choose the ROS 2 package name as the Project Name. Choose a Makefile Project and Other Toolchain."
msgstr "将ROS 2软件包名称选择为项目名称。选择一个Makefile项目和其他工具链。@{"calib_text": " `[6581] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6581>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:40
msgid "Click on Finish"
msgstr "点击完成。@{"calib_text": " `[6582] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6582>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:45
msgid "Our project should be shown in the \"Project Explorer\"."
msgstr "我们的项目应该显示在“项目浏览器”中。@{"calib_text": " `[6583] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6583>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:50
msgid "Inside our Project create a folder called \"src\"."
msgstr "在我们的项目中创建一个名为“src”的文件夹。@{"calib_text": " `[6584] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6584>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:55
msgid "Import a git repository."
msgstr "导入一个git仓库。@{"calib_text": " `[6585] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6585>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:60
msgid "Put in the repository URL."
msgstr "输入仓库的URL。@{"calib_text": " `[6586] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6586>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:65
msgid "IMPORTANT: Use the source folder of the project we created before as the destination folder."
msgstr "重要提示：将我们之前创建的项目的源文件夹作为目标文件夹。@{"calib_text": " `[6587] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6587>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:67
msgid "HINT: If you ran into problems choosing the destination folder path, the Eclipse Dialog needs a name in the name field."
msgstr "提示：如果在选择目标文件夹路径时遇到问题，Eclipse对话框需要在名称字段中输入一个名称。@{"calib_text": " `[6588] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6588>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:72
msgid "Import using the new project wizard."
msgstr "使用新项目向导导入。@{"calib_text": " `[6589] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6589>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:77
msgid "Create a General->Project."
msgstr "创建一个常规->项目。@{"calib_text": " `[6590] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6590>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:82
msgid "Use the git repository name as the project name. IMPORTANT: Use the folder we cloned the git repository in as the \"Location\"."
msgstr "将Git仓库的名称用作项目名称。重要提示：将克隆Git仓库的文件夹用作“位置”。@{"calib_text": " `[6591] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6591>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:88
msgid "The git project and the new project should be visible in the Project Explorer view. The same files are listed multiple times, but only one project is linked with Egit."
msgstr "在“项目资源管理器”视图中应该能够看到Git项目和新项目。相同的文件会列出多次，但只有一个项目与Egit链接。@{"calib_text": " `[6592] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6592>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:94
msgid "Repeat this procedure again. Import git repository pluginlib."
msgstr "重复此步骤。导入Git仓库pluginlib。@{"calib_text": " `[6593] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6593>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:100
msgid "IMPORTANT: Use a folder inside the source folder as \"Destination->Directory\"."
msgstr "重要提示：将“目标->目录”设置为源文件夹内的一个文件夹。@{"calib_text": " `[6594] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6594>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:105
msgid "IMPORTANT: Use the folder we cloned the git repository in as the location for the new project."
msgstr "重要提示：使用我们克隆的git仓库所在的文件夹作为新项目的位置。@{"calib_text": " `[6595] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6595>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:110
msgid "Run the same procedure with the tinyxml2_vendor git repository."
msgstr "对tinyxml2_vendor git仓库执行相同的步骤。@{"calib_text": " `[6596] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6596>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:115
msgid "IMPORTANT: Again use a folder inside the source folder."
msgstr "重要提示：再次使用源文件夹中的一个文件夹。@{"calib_text": " `[6597] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6597>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:120
msgid "IMPORTANT: Use the location of the folder we cloned as the new project folder."
msgstr "重要提示：使用我们克隆的文件夹的位置作为新项目的文件夹。@{"calib_text": " `[6598] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6598>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:125
msgid "Now all four Projects should be visible in the Project Explorer view."
msgstr "现在，所有四个项目应该在项目浏览器视图中可见。@{"calib_text": " `[6599] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6599>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:130
msgid "Clicking in the top right cornder for the Project Explorer view allows us to change the Project Presentation to Hierarchical view. Now it looks like a ROS-2 project as it is on the hard drive. But this view loses the linkage to Egit, so use the Flat Project Presentation. The Egit linkage is good if you want to see e.g. which author wrote which code-line, etc."
msgstr "点击右上角的项目浏览器视图可以改变项目展示方式为分层视图。现在它看起来像一个ROS-2项目，就像在硬盘上一样。但是这个视图失去了与Egit的链接，所以请使用扁平项目展示方式。如果你想查看哪个作者编写了哪行代码等信息，Egit的链接非常有用。@{"calib_text": " `[6600] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6600>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:138
msgid "Go to \"C/C++ build\"-section and put \"ament\" into \"Build command\"."
msgstr "转到\"C/C++构建\"部分，并将\"ament\"放入\"构建命令\"中。@{"calib_text": " `[6601] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6601>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:143
msgid "Go to \"Behavior\" tab and unselect \"clean\" and put \"build\" into Build textbox."
msgstr "转到\"行为\"选项卡，取消选择\"清除\"，并将\"build\"放入构建文本框中。@{"calib_text": " `[6602] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6602>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:148
msgid "Before \"Build project\" will work, we need to close Eclipse. Open a shell and source the ROS-2 setup.bash file, then cd into the directory of the eclipse project (here: /home/ubu/rviz2_ws/rviz2_ws) and start Eclipse from inside this directory."
msgstr "在\"构建项目\"之前，我们需要关闭Eclipse。打开一个shell并source ROS-2的setup.bash文件，然后cd到eclipse项目的目录（这里是：/home/ubu/rviz2_ws/rviz2_ws），并从该目录中启动Eclipse。@{"calib_text": " `[6603] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6603>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:154
msgid "Now code completion, egit annotations, eclipse C/C++ Tools, etc. should all work."
msgstr "现在代码自动完成、egit注释、Eclipse C/C++工具等都应该正常工作。@{"calib_text": " `[6604] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6604>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:160
msgid "Eclipse-indexer"
msgstr "Eclipse索引器@{"calib_text": " `[6605] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6605>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:162
msgid "Opening the main.cpp of rviz2 may show a lot of \"unresolved inclusion\" warnings. To fix this, go to Project->Properties->C++ General->Path and Symbols. Click on the \"References\" tab and select \"ros2_ws\"."
msgstr "打开rviz2的main.cpp可能会显示很多\"unresolved inclusion\"警告。要解决此问题，请转到项目->属性->C++常规->路径和符号。点击\"引用\"选项卡，然后选择\"ros2_ws\"。@{"calib_text": " `[6606] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6606>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:170
msgid "Go to C/C++-General->Path-and-Symbols, click on the \"Source locations\" tab and click on \"Link folder\". Choose the location of qt5 includes."
msgstr "转到C/C++-General->路径和符号，点击\"源位置\"选项卡，然后点击\"链接文件夹\"。选择qt5包含文件的位置。@{"calib_text": " `[6607] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6607>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:177
msgid "The next image should be shown. It is a good idea to add excludes to the source locations, so that some directories (like \"Build\" and \"Install\") don't get indexed."
msgstr "下一张图片应该会显示。最好在源位置中添加排除项，以便某些目录（如\"Build\"和\"Install\"）不会被索引。@{"calib_text": " `[6608] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6608>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:184
msgid "Go to C++General->Preprocessor includes, select \"CDT GCC Built in compiler settings [Shared]\" and enter in the \"command to get compiler specs\" text box the following:"
msgstr "转到C++General->预处理器包含项，选择\"CDT GCC内置编译器设置[Shared]\"，并在\"获取编译器规范的命令\"文本框中输入以下内容：@{"calib_text": " `[6609] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6609>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:194
msgid "Go to \"C/C++-General->Indexer\" and select the following in the image. E.g \"index unused headers as c files\" to resolve e.g. QApplication, because the QApplication headers content is only \"#include \"qapplication.h\"."
msgstr "转到\"C/C++-General->索引器\"，在图像中选择以下选项。例如，选择\"将未使用的头文件索引为C文件\"，以解决QApplication的问题，因为QApplication头文件的内容只有\"#include \"qapplication.h\"\"。@{"calib_text": " `[6610] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6610>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:201
msgid "After running the indexer (which happens later, so you will see this also later), you can see what it added"
msgstr "运行索引器之后（稍后会发生，所以你稍后也会看到这一步），你可以看到它添加了什么。@{"calib_text": " `[6611] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6611>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:207
msgid "After that right-click on the rviz2 project and select \"Indexer->Rebuild\", which will start rebuilding the index (there is an icon in the lower right showing progress). Once the index is finished rebuilding, it should be able to resolve all includes."
msgstr "然后，在rviz2项目上右键单击，选择\"索引器->重建\"，这将开始重建索引（右下角会显示进度图标）。索引重建完成后，应该能够解决所有的包含文件。@{"calib_text": " `[6612] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6612>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:215
msgid "Debugging with eclipse"
msgstr "使用eclipse进行调试@{"calib_text": " `[6613] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6613>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:217
msgid "Go to \"C/C++-Build\" and add to the build command:"
msgstr "进入\"C/C++-Build\"并添加以下构建命令：@{"calib_text": " `[6614] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6614>`_ "}@"


#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:227
msgid "Then in eclipse go to \"Run->Debug Configurations\" and add the following and click on \"Debug\"."
msgstr "然后在eclipse中进入\"Run->Debug Configurations\"并添加以下内容，然后点击\"Debug\"。@{"calib_text": " `[6615] <http://fishros.org/page/calib/#/home?apihost=http://fishros.org:2023/ros2/calib&msgid=6615>`_ "}@"

