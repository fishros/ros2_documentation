# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 Documentation: Humble package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 Documentation: Humble \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-04 14:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh\n"
"Language-Team: zh <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/Tutorials.rst:4
msgid "Tutorials"
msgstr ""

#: ../../source/Tutorials.rst:6
msgid "The tutorials are a collection of step-by-step instructions meant to steadily build skills in ROS 2."
msgstr ""

#: ../../source/Tutorials.rst:8
msgid "The best way to approach the tutorials is to walk through them for the first time in order, as they build off of each other and are not meant to be comprehensive documentation."
msgstr ""

#: ../../source/Tutorials.rst:10
msgid "For quick solutions to more specific questions, see the :doc:`How-To-Guides`."
msgstr ""

#: ../../source/Tutorials.rst:23
msgid "Examples"
msgstr ""

#: ../../source/Tutorials.rst:25
msgid "`Python and C++ minimal examples <https://github.com/ros2/examples>`__."
msgstr ""

#: ../../source/Tutorials/Advanced.rst:2
msgid "Advanced"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:7
msgid "Implementing a custom memory allocator"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:9
msgid "**Goal:** This tutorial will show how to use a custom memory allocator when writing ROS 2 C++ code."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:11 ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:11 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:11 ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:6 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:12 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:12 ../../source/Tutorials/Advanced/Security/Access-Controls.rst:12 ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:6 ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:12 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:13 ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:12 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:12 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:12 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:6 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:6 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:6 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:6 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:11 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:6 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:6 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:11 ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:10
msgid "**Tutorial level:** Advanced"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:13 ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:13 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:13 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:14 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:14 ../../source/Tutorials/Advanced/Security/Access-Controls.rst:14 ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:8 ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:14 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:14 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:8 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:19 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:14 ../../source/Tutorials/Intermediate/Composition.rst:17 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:15 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:12 ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:14 ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:14
msgid "**Time:** 20 minutes"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:17 ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:17 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:17 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:16 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:13 ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:16 ../../source/Tutorials/Demos/Intra-Process-Communication.rst:11 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:11 ../../source/Tutorials/Demos/Quality-of-Service.rst:11 ../../source/Tutorials/Demos/Real-Time-Programming.rst:11 ../../source/Tutorials/Intermediate/Composition.rst:11 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:17 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:17 ../../source/Tutorials/Intermediate/Rosdep.rst:10 ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:12 ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:11
msgid "Table of Contents"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:19
msgid "This tutorial will teach you how to integrate a custom allocator for publishers and subscribers so that the default heap allocator is never called while your ROS nodes are executing. The code for this tutorial is available `here <https://github.com/ros2/demos/blob/humble/demo_nodes_cpp/src/topics/allocator_tutorial.cpp>`__."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:23 ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:20 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:20 ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:15 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:21 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:21 ../../source/Tutorials/Advanced/Security/Access-Controls.rst:22 ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:16 ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:22 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:23 ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:22 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:22 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:15 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:15 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:15 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:15 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:20 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:15 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:15 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:19 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:21 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:25 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:19 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:22 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:21 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:21 ../../source/Tutorials/Demos/Intra-Process-Communication.rst:14 ../../source/Tutorials/Demos/Quality-of-Service.rst:14 ../../source/Tutorials/Demos/Real-Time-Programming.rst:14 ../../source/Tutorials/Intermediate/Composition.rst:20 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:21 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:29 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:28 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:20 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:22 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:20 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:21 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:21 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:21 ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:21 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:21 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:21 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:21 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:21 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:21 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:21 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:21 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:21 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:21 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:21 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:21 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:21 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:21 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:21 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:21
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:25
msgid "Suppose you want to write real-time safe code, and you've heard about the many dangers of calling \"new\" during the real-time critical section, because the default heap allocator on most platforms is nondeterministic."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:27
msgid "By default, many C++ standard library structures will implicitly allocate memory as they grow, such as ``std::vector``. However, these data structures also accept an \"Allocator\" template argument. If you specify a custom allocator to one of these data structures, it will use that allocator for you instead of the system allocator to grow or shrink the data structure. Your custom allocator could have a pool of memory preallocated on the stack, which might be better suited to real-time applications."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:29
msgid "In the ROS 2 C++ client library (rclcpp), we are following a similar philosophy to the C++ standard library. Publishers, subscribers, and the Executor accept an Allocator template parameter that controls allocations made by that entity during execution."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:32
msgid "Writing an allocator"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:34
msgid "To write an allocator compatible with ROS 2's allocator interface, your allocator must be compatible with the C++ standard library allocator interface."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:36
msgid "The C++11 library provides something called ``allocator_traits``. The C++11 standard specifies that a custom allocator only needs to fulfil a minimal set of requirements to be used to allocate and deallocate memory in a standard way. ``allocator_traits`` is a generic structure that fills out other qualities of an allocator based on an allocator written with the minimal requirements."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:38
msgid "For example, the following declaration for a custom allocator would satisfy ``allocator_traits`` (of course, you would still need to implement the declared functions in this struct):"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:57
msgid "You could then access other functions and members of the allocator filled in by ``allocator_traits`` like so: ``std::allocator_traits<custom_allocator<T>>::construct(...)``"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:59
msgid "To learn about the full capabilities of ``allocator_traits``, see https://en.cppreference.com/w/cpp/memory/allocator_traits ."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:61
msgid "However, some compilers that only have partial C++11 support, such as GCC 4.8, still require allocators to implement a lot of boilerplate code to work with standard library structures such as vectors and strings, because these structures do not use ``allocator_traits`` internally. Therefore, if you're using a compiler with partial C++11 support, your allocator will need to look more like this:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:111
msgid "Writing an example main"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:113
msgid "Once you have written a valid C++ allocator, you must pass it as a shared pointer to your publisher, subscriber, and executor."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:137
msgid "You will also need to use your allocator to allocate any messages that you pass along the execution codepath."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:143
msgid "Once you've instantiated the node and added the executor to the node, it's time to spin:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:157
msgid "Passing an allocator to the intra-process pipeline"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:159
msgid "Even though we instantiated a publisher and subscriber in the same process, we aren't using the intra-process pipeline yet."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:161
msgid "The IntraProcessManager is a class that is usually hidden from the user, but in order to pass a custom allocator to it we need to expose it by getting it from the rclcpp Context. The IntraProcessManager makes use of several standard library structures, so without a custom allocator it will call the default new."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:171
msgid "Make sure to instantiate publishers and subscribers AFTER constructing the node in this way."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:174
msgid "Testing and verifying the code"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:176
msgid "How do you know that your custom allocator is actually getting called?"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:178
msgid "The obvious thing to do would be to count the calls made to your custom allocator's ``allocate`` and ``deallocate`` functions and compare that to the calls to ``new`` and ``delete``."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:180
msgid "Adding counting to the custom allocator is easy:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:196
msgid "You can also override the global new and delete operators:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:220
msgid "where the variables we are incrementing are just global static integers, and ``is_running`` is a global static boolean that gets toggled right before the call to ``spin``."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:222
msgid "The `example executable <https://github.com/ros2/demos/blob/humble/demo_nodes_cpp/src/topics/allocator_tutorial.cpp>`__ prints the value of the variables. To run the example executable, use:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:228
msgid "or, to run the example with the intra-process pipeline on:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:234
msgid "You should get numbers like:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:243
msgid "We've caught about 2/3 of the allocations/deallocations that happen on the execution path, but where do the remaining 1/3 come from?"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:245
msgid "As a matter of fact, these allocations/deallocations originate in the underlying DDS implementation used in this example."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:247
msgid "Proving this is out of the scope of this tutorial, but you can check out the test for the allocation path that gets run as part of the ROS 2 continuous integration testing, which backtraces through the code and figures out whether certain function calls originate in the rmw implementation or in a DDS implementation:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:249
msgid "https://github.com/ros2/realtime_support/blob/humble/tlsf_cpp/test/test_tlsf.cpp#L41"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:251
msgid "Note that this test is not using the custom allocator we just created, but the TLSF allocator (see below)."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:254
msgid "The TLSF allocator"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:256
msgid "ROS 2 offers support for the TLSF (Two Level Segregate Fit) allocator, which was designed to meet real-time requirements:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:258
msgid "https://github.com/ros2/realtime_support/tree/humble/tlsf_cpp"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:260
msgid "For more information about TLSF, see http://www.gii.upv.es/tlsf/"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:262
msgid "Note that the TLSF allocator is licensed under a dual-GPL/LGPL license."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:264
msgid "A full working example using the TLSF allocator is here: https://github.com/ros2/realtime_support/blob/humble/tlsf_cpp/example/allocator_example.cpp"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:7
msgid "Using Fast DDS Discovery Server as discovery protocol [community-contributed]"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:9
msgid "**Goal:** This tutorial will show how to launch ROS 2 Nodes using the **Fast DDS Discovery Server** discovery protocol."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:22
msgid "Starting from ROS 2 Eloquent Elusor, the **Fast DDS Discovery Server** protocol is a feature that offers a centralized dynamic discovery mechanism, as opposed to the distributed mechanism used in DDS by default. This tutorial explains how to run some ROS 2 examples using the Fast DDS Discovery Server feature as discovery communication."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:25
msgid "In order to get more information about the available discovery configuration, please check the `following documentation <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/discovery.html>`_ or read the `Fast DDS Discovery Server specific documentation <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/discovery_server.html#discovery-server>`__."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:27
msgid "The `Simple Discovery Protocol <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/simple.html>`__ is the standard protocol defined in the `DDS standard <https://www.omg.org/omg-dds-portal/>`__. However, it has known disadvantages in some scenarios."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:30
msgid "It does not **Scale** efficiently, as the number of exchanged packets increases significantly as new nodes are added."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:31
msgid "It requires **multicasting** capabilities that may not work reliably in some scenarios, e.g. WiFi."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:33
msgid "The **Fast DDS Discovery Server** provides a Client-Server Architecture that allows nodes to connect with each other using an intermediate server. Each node functions as a *discovery client*, sharing its info with one or more *discovery servers* and receiving discovery information from it. This reduces discovery-related network traffic and it does not require multicasting capabilities."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:40
msgid "These discovery servers can be independent, duplicated or connected with each other in order to create redundancy over the network and avoid having a single point of failure."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:43
msgid "Fast DDS Discovery Server v2"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:45
msgid "The latest ROS 2 Foxy Fitzroy release (December 2020) included a new version, version 2 of the Fast DDS Discovery Server. This version includes a new filter feature that further reduces the number of discovery messages sent. This version uses the topic of the different nodes to decide if two nodes wish to communicate, or if they can be left unmatched (i.e. not discovering each other). The following figure shows the decrease in discovery messages:"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:53
msgid "This architecture reduces the number of messages sent between the server and clients dramatically. In the following graph, the reduction in network traffic over the discovery phase for the `RMF Clinic demonstration <https://github.com/open-rmf/rmf_demos#Clinic-World>`__ is shown:"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:60
msgid "In order to use this functionality, the discovery server can be configured using the `XML configuration for Participants <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/discovery_server.html#discovery-server>`__. It is also possible to configure the discovery server using the ``fastdds`` `tool <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastddscli/cli/cli.html#discovery>`__ and an `environment variable <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/env_vars/env_vars.html>`__, which is the approach used in this tutorial. For a more detailed explanation about the configuration of the discovery server, visit `the Fast DDS Discovery Server documentation <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/discovery_server.html#discovery-server>`__."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:66 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:34 ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:22 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:28 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:31 ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:28 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:21 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:23 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:24 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:23 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:22 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:30 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:24 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:22 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:31 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:37 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:38 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:31 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:30 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:36 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:43 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:30 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:32 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:36 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:31 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:33 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:34 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:118 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:30 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:28 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:29 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:35 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:28 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:28 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:30 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:30 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:30 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:29 ../../source/Tutorials/Demos/Quality-of-Service.rst:23 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:30 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:20 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:21 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:31 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:29 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:30 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:28 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:33 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:27 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:27 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:28 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:28 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:34 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:34 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:31 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:28 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:28
msgid "Prerequisites"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:68
msgid "This tutorial assumes you have a ROS 2 Foxy (or newer) :doc:`installation <../../../Installation>`. If your installation is using a ROS 2 version lower than Foxy, you cannot use the ``fastdds`` tool. Thus, in order to use the Discovery Server, you can update your repository to use a different Fast DDS version, or configure the discovery server using the `Fast DDS XML QoS configuration <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/discovery/discovery_server.html#discovery-server>`__."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:74
msgid "Run this tutorial"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:76
msgid "The ``talker-listener`` ROS 2 demo creates a ``talker`` node that publishes a \"hello world\" message every second, and a ``listener`` node that listens to these messages."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:78
msgid "By :doc:`sourcing ROS 2 <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>` you will get access to the CLI tool ``fastdds``. This tool gives access to the `discovery tool <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastddscli/cli/cli.html#discovery>`__, which can be used to launch a discovery server. This server will manage the discovery process for the nodes that connect to it."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:83
msgid "Do not forget to :doc:`source ROS 2 <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>` in every new terminal opened."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:87
msgid "Setup Discovery Server"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:89
msgid "Start by launching a discovery server with id 0, port 11811 (default port) and listening on all available interfaces."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:91 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:47 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:54 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:52 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:44 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:47 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:50
msgid "Open a new terminal and run:"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:99
msgid "Launch listener node"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:101
msgid "Execute the listener demo, to listen to the ``/chatter`` topic."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:103
msgid "In a new terminal, set the environment variable ``ROS_DISCOVERY_SERVER`` to the location of the discovery server. (Do not forget to source ROS 2 in every new terminal)"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:110
msgid "Launch the listener node. Use the argument ``--remap __node:=listener_discovery_server`` to change the node's name for this tutorial."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:116
msgid "This will create a ROS 2 node, that will automatically create a client for the discovery server and connect to the server created previously to perform discovery, rather than using multicast."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:120
msgid "Launch talker node"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:122
msgid "Open a new terminal and set the ``ROS_DISCOVERY_SERVER`` environment variable as before so that the node starts a discovery client."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:129
msgid "You should now see the talker publishing \"hello world\" messages, and the listener receiving these messages."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:133
msgid "Demonstrate Discovery Server execution"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:135
msgid "So far, there is no evidence that this example and the standard talker-listener example are running differently. To clearly demonstrate this, run another node that is not connected to the discovery server. Run a new listener (listening in ``/chatter`` topic by default) in a new terminal and check that it is not connected to the talker already running."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:143
msgid "The new listener node should not be receiving the \"hello world\" messages."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:145
msgid "To finally verify that everything is running correctly, a new talker can be created using the simple discovery protocol (the default DDS distributed discovery mechanism) for discovery."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:151
msgid "Now you should see the ``simple_listener`` node receiving the \"hello world\" messages from ``simple_talker`` but not the other messages from ``talker_discovery_server``."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:155
msgid "Visualization tool ``rqt_graph``"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:157
msgid "The ``rqt_graph`` tool can be used to verify the nodes and structure of this example. Remember, in order to use ``rqt_graph`` with the discovery server protocol (i.e., to see the ``listener_discovery_server`` and ``talker_discovery_server`` nodes) the ``ROS_DISCOVERY_SERVER`` environment variable must be set before launching it."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:162
msgid "Advance use cases"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:164
msgid "The following sections show different features of the discovery server that allow you to build a robust discovery server over the network."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:167
msgid "Server Redundancy"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:169
msgid "By using ``fastdds`` tool, multiple discovery servers can be created. Discovery clients (ROS nodes) can connect to as many servers as desired. This allows to have a redundant network that will work even if some servers or nodes shut down unexpectedly. The figure below shows a simple architecture that provides server redundancy."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:177
msgid "In several terminals, run the following code to establish a communication with redundant servers."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:187
msgid "``--server-id N`` means server with id N. When referencing the servers with ``ROS_DISCOVERY_SERVER``, server ``0`` must be in first place and server ``1`` in second place."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:199
msgid "Now, if one of these servers fails, there will still be discovery capability available and nodes will still discover each other."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:203
msgid "Backup Server"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:205
msgid "The Fast DDS Discovery Server allows creating a server with backup functionality. This allows the server to restore the last state it saved in case of a shutdown."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:211
msgid "In different terminals, run the following code to establish a communication with a backed-up server."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:227
msgid "Several backup files are created in the discovery server's working directory (the directory it was launched in). The two ``SQLite`` files and two ``json`` files contain the information required to start a new server and restore the failed server's state in case of failure, avoiding the need for the discovery process to happen again, and without losing information."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:232
msgid "Discovery partitions"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:234
msgid "Communication with discovery servers can be split to create virtual partitions in the discovery information. This means that two endpoints will only know about each other if there is a shared discovery server or a network of discovery servers between them. We are going to execute an example with two independent servers. The following figure shows the architecture."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:242
msgid "With this schema ``Listener 1`` will be connected to ``Talker 1`` and ``Talker 2``, as they share ``Server 1``. ``Listener 2`` will connect with ``Talker 1`` as they share ``Server 2``. But ``Listener 2`` will not hear the messages from ``Talker 2`` because they do not share any discovery server or discovery servers, including indirectly via connections between redundant discovery servers."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:246
msgid "Run the first server listening on localhost with the default port of 11811."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:252
msgid "In another terminal run the second server listening on localhost using another port, in this case port 11888."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:258
msgid "Now, run each node in a different terminal. Use ``ROS_DISCOVERY_SERVER`` environment variable to decide which server they are connected to. Be aware that the `ids must match <https://fast-dds.docs.eprosima.com/en/v2.1.0/fastdds/env_vars/env_vars.html>`__."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:280
msgid "We should see how ``Listener 1`` is receiving messages from both talker nodes, while ``Listener 2`` is in a different partition from ``Talker 2`` and so does not receive messages from it."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:284
msgid "Once two endpoints (ROS nodes) have discovered each other, they do not need the discovery server network between them to listen to each other's messages."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:289
msgid "ROS 2 Introspection"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:291
msgid "The `ROS 2 Command Line Interface <https://github.com/ros2/ros2cli>`__ supports several introspection tools to analyze the behavior of a ROS 2 network. These tools (i.e. ``ros2 bag record``, ``ros2 topic list``, etc.) are very helpful to understand a ROS 2 working network."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:294
msgid "Most of these tools use DDS simple discovery to exchange topic information with every existing participant (using simple discovery, every participant in the network is connected with each other). However, the new Discovery Server v2 implements a network traffic reduction scheme that limits the discovery data between participants that do not share a topic. This means that nodes will only receive topic's discovery data if it has a writer or a reader for that topic. As most ROS 2 CLIs need a node in the network (some of them rely on a running ROS 2 daemon, and some create their own nodes), using the Discovery Server v2 these nodes will not have all the network information, and thus their functionality will be limited."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:299
msgid "The Discovery Server v2 functionality allows every Participant to run as a **Super Client**, a kind of **Client** that connects to a **Server**, from which it receives all the available discovery information (instead of just what it needs). In this sense, ROS 2 introspection tools can be configured as **Super Client**, thus being able to discover every entity that is using the Discovery Server protocol within the network."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:304
msgid "In this section we use the term *Participant* as a DDS entity. Each DDS *Participant* corresponds with a ROS 2 *Context*, a ROS 2 abstraction over DDS. `Nodes <ROS2Nodes>` are ROS 2 entities that rely on DDS communication interfaces: ``DataWriter`` and ``DataReader``. Each *Participant* can hold multiple ROS 2 Nodes. For further details about these concepts, please visit the `Node to Participant mapping design document <http://design.ros2.org/articles/Node_to_Participant_mapping.html>`__"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:311
msgid "Daemon's related tools"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:313
msgid "The ROS 2 Daemon is used in several ROS 2 CLI introspection tools. It creates its own Participant to add a ROS 2 Node to the network graph, in order to receive all the data sent. In order for the ROS 2 CLI to work when using Discovery Server mechanism, the ROS 2 Daemon needs to be configured as **Super Client**. Therefore, this section is devoted to explain how to use ROS 2 CLI with ROS 2 Daemon running as a **Super Client**. This will allow the Daemon to discover the entire Node graph, and to receive all topic and endpoint information. To do so, a Fast DDS XML configuration file is used to configure the ROS 2 Daemon and CLI tools."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:321
msgid "Below you can find a XML configuration profile, which for this tutorial should be saved in the working directory as ```super_client_configuration_file.xml``` file. This file will configure every new participant using it, as a **Super Client**."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:356
msgid "Under the *RemoteServer* tag, the *prefix* attribute value should be updated according to the server ID passed on the CLI (see `Fast DDS CLI <https://fast-dds.docs.eprosima.com/en/latest/fastddscli/cli/cli.html#discovery>`__). The value specified in the shown XML snippet corresponds to an ID of value 0."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:359
msgid "First of all, instantiate a Discovery Server using `Fast DDS CLI <https://fast-dds.docs.eprosima.com/en/latest/fastddscli/cli/cli.html#discovery>`__ specifying an ID of value 0."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:365
msgid "Run a talker and a listener that will discover each other through the Server (notice that ``ROS_DISCOVERY_SERVER`` configuration is the same as the one in ``super_client_configuration_file.xml``)."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:377
msgid "Then, instantiate a ROS 2 Daemon using the **Super Client** configuration (remember to source ROS 2 installation in every new terminal)."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:389
msgid "We can also see the Node's Graph using the ROS 2 tool ``rqt_graph`` as follows (you may need to press the refresh button):"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:398
msgid "No Daemon tools"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:400
msgid "Some ROS 2 CLI tools do not use the ROS 2 Daemon. In order for these tools to connect with a Discovery Server and receive all the topics information they need to be instantiated as a **Super Client** that connects to the **Server**."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:403
msgid "Following the previous configuration, build a simple system with a talker and a listener. First, run a **Server**:"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:410
msgid "Then, run the talker and listener in separate terminals:"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:422
msgid "Continue using the ROS 2 CLI with ``--no-daemon`` option with the new configuration. New nodes will connect with the existing Server and will know every topic. Exporting ``ROS_DISCOVERY_SERVER`` is not needed as the ROS 2 tools will be configured through the ``FASTRTPS_DEFAULT_PROFILES_FILE``."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:434
msgid "Compare Fast DDS Discovery Server with Simple Discovery Protocol"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:436
msgid "In order to compare executing nodes using the *Simple Discovery* Protocol (the default DDS mechanism for distributed discovery) or the *Discovery Server*, two scripts that execute a talker and many listeners and analyze the network traffic during this time are provided. For this experiment, ``tshark`` is required to be installed on your system. The configuration file is mandatory in order to avoid using intraprocess mode."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:442
msgid "These scripts require a discovery server closure feature that is only available from versions newer than the version provided in ROS 2 Foxy. In order to use this functionality, compile ROS 2 with Fast DDS v2.1.0 or higher."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:445
msgid "These scripts' features are references for advanced purposes and their study is left to the user."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:447
msgid ":download:`bash network traffic generator <scripts/generate_discovery_packages.bash>`"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:449
msgid ":download:`python3 graph generator <scripts/discovery_packets.py>`"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:451
msgid ":download:`XML configuration <scripts/no_intraprocess_configuration.xml>`"
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:453
msgid "Run the bash script with the path to ``setup.bash`` file to source ROS 2 as an argument. This will generate the traffic trace for simple discovery. Execute the same script with second argument ``SERVER``. It will generate the trace for using the discovery server."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:460
msgid "Depending on your configuration of ``tcpdump``, this script may require ``sudo`` privileges to read traffic across your network device."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:462
msgid "After both executions are done, run the Python script to generate a graph similar to the one below."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:474
msgid "This graph is the result of a specific run of the experiment. The reader can execute the scripts and generate their own results for comparison. It can easily be seen that network traffic is reduced when using discovery service."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:478
msgid "The reduction in traffic is a result of avoiding every node announcing itself and waiting a response from every other node on the network. This creates a huge amount of traffic in large architectures. The reduction from this method increases with the number of nodes, making this architecture more scalable than the Simple Discovery Protocol approach."
msgstr ""

#: ../../source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst:482
msgid "The new Fast DDS Discovery Server v2 is available since *Fast DDS* v2.0.2, replacing the old discovery server. In this new version, those nodes that do not share topics will automatically not discover each other, saving the whole discovery data required to connect them and their endpoints. The experiment above does not show this case, but even so the massive reduction in traffic can be appreciated due to the hidden infrastructure topics of ROS 2 nodes."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:7
msgid "Unlocking the potential of Fast DDS middleware [community-contributed]"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:9
msgid "**Goal:** This tutorial will show how to use the extended configuration capabilities of Fast DDS in ROS 2."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:22
msgid "The interface between the ROS 2 stack and *Fast DDS* is provided by the ROS 2 middleware implementation `rmw_fastrtps <https://github.com/ros2/rmw_fastrtps>`_. This implementation is available in all ROS 2 distributions, both from binaries and from sources."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:25
msgid "ROS 2 RMW only allows for the configuration of certain middleware QoS (see :doc:`ROS 2 QoS policies <../../Concepts/Intermediate/About-Quality-of-Service-Settings>`). However, ``rmw_fastrtps`` offers extended configuration capabilities to take full advantage of the features in *Fast DDS*. This tutorial will guide you through a series of examples explaining how to use XML files to unlock this extended configuration."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:30
msgid "In order to get more information about using *Fast DDS* on ROS 2, please check the `following documentation <https://fast-dds.docs.eprosima.com/en/latest/fastdds/ros2/ros2.html>`__."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:36
msgid "This tutorial assumes that you know how to :doc:`create a package <../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`. It also assumes you know how to write a :doc:`simple publisher and subscriber<../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber>` and a :doc:`simple service and client <../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client>`. Although the examples are implemented in C++, the same concepts apply to Python packages."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:42
msgid "Mixing synchronous and asynchronous publications in the same node"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:44
msgid "In this first example, a node with two publishers, one of them with synchronous publication mode and the other one with asynchronous publication mode, will be created."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:46
msgid "``rmw_fastrtps`` uses synchronous publication mode by default."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:48
msgid "With synchronous publication mode the data is sent directly within the context of the user thread. This entails that any blocking call occurring during the write operation would block the user thread, thus preventing the application from continuing its operation. However, this mode typically yields higher throughput rates at lower latencies, since there is no notification nor context switching between threads."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:52
msgid "On the other hand, with asynchronous publication mode, each time the publisher invokes the write operation, the data is copied into a queue, a background thread (asynchronous thread) is notified about the addition to the queue, and control of the thread is returned to the user before the data is actually sent. The background thread is in charge of consuming the queue and sending the data to every matched reader."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:57
msgid "Create the node with the publishers"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:59
msgid "First, create a new package named ``sync_async_node_example_cpp`` on a new workspace:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:63 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:272 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:396 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:772 ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:265 ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:287 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:239 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:261 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:439 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:461 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:595 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:617 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:236 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:258 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:435 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:457 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:593 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:615 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:45 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:99 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:125 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:155 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:194 ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:38 ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:71 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:46 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:58 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:88 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:110 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:121 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:137 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:147 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:158 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:206 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:217 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:169 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:37 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:356 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:441 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:51 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:57 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:88 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:131 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:169 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:216 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:54 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:40 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:94 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:171 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:212 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:246 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:313 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:341 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:57 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:90 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:152 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:188 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:229 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:266 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:290 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:312 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:138 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:261 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:283 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:322 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:145 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:172 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:282 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:322 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:347 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:381 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:228 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:246 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:268 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:376 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:398 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:219 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:237 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:259 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:376 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:398 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:64 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:310 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:442 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:461 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:483 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:314 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:333 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:355 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:65 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:286 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:422 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:441 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:463 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:262 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:287 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:171 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:201 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:329 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:362 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:400 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:429 ../../source/Tutorials/Demos/Quality-of-Service.rst:53 ../../source/Tutorials/Intermediate/Composition.rst:162 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:40 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:94 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:43 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:53 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:193 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:217 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:303 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:57 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:239 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:257 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:279 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:350 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:515 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:533 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:555 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:57 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:217 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:235 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:257 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:328 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:471
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:489 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:511 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:53 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:278 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:296 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:325 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:598 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:616 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:638 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:45 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:340 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:358 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:380 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:45 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:361 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:379 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:401 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:44 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:334 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:352 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:374 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:44 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:287 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:305 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:327 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:65 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:291 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:309 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:331 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:65 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:310 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:328 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:350 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:49 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:86 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:202 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:224 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:302
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:71 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:280 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:404 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:780 ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:271 ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:293 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:245 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:267 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:445 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:467 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:601 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:623 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:242 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:264 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:441 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:463 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:599 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:621 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:192 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:47 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:364 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:470 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:57 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:65 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:96 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:137 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:181 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:228 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:62 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:164 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:46 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:101 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:177 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:218 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:252 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:320 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:347 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:63 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:97 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:160 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:194 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:235 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:272 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:296 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:318 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:144 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:267 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:289 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:328 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:151 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:178 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:288 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:329 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:354 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:388 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:234 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:252 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:274 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:382 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:404 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:225 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:243 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:265 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:382 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:404 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:70 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:316 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:448 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:467 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:489 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:320 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:339 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:361 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:71 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:292 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:428 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:447 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:469 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:268 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:293 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:178 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:208 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:336 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:369 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:406 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:435 ../../source/Tutorials/Demos/Quality-of-Service.rst:59 ../../source/Tutorials/Intermediate/Composition.rst:168 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:48 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:101 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:50 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:59 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:199 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:223 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:309 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:63 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:245 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:263 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:285 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:356 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:521 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:539 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:561 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:63 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:223 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:241 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:263 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:334 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:477 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:495 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:517 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:59 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:284 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:302 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:331 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:604 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:622 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:644 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:51 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:346 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:364
#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:386 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:51 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:367 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:385 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:407 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:50 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:340 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:358 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:380 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:50 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:293 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:311 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:333 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:71 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:297 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:315 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:337 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:71 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:316 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:334 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:356 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:56 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:92 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:208 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:230 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:308
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:79 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:288 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:412 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:788 ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:277 ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:299 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:251 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:273 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:451 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:473 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:607 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:629 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:248 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:270 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:447 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:469 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:605 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:627 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:67 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:111 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:139 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:169 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:210 ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:54 ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:85 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:179 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:42 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:360 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:454 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:63 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:71 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:104 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:143 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:193 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:240 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:66 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:168 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:52 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:108 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:183 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:224 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:258 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:327 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:353 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:69 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:104 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:164 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:200 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:241 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:278 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:302 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:324 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:150 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:273 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:295 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:334 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:157 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:184 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:294 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:336 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:361 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:395 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:238 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:258 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:280 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:388 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:410 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:229 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:249 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:271 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:388 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:410 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:76 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:322 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:452 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:473 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:495 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:324 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:345 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:367 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:77 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:298 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:432 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:453 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:475 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:272 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:299 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:185 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:215 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:343 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:376 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:412 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:441 ../../source/Tutorials/Demos/Quality-of-Service.rst:65 ../../source/Tutorials/Intermediate/Composition.rst:174 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:56 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:108 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:57 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:65 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:203 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:229 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:315 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:69 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:249 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:269 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:291 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:362 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:525 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:545 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:567 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:69 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:227 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:247 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:269 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:340 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:481 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:501 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:523 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:65 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:288 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:308 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:337
#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:608 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:628 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:650 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:57 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:350 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:370 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:392 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:57 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:371 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:391 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:413 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:56 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:344 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:364 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:386 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:56 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:297 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:317 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:339 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:77 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:301 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:321 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:343 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:77 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:320 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:340 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:362 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:63 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:98 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:214 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:236 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:314
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:88
msgid "Then, add a file named ``src/sync_async_writer.cpp`` to the package, with the following content. Note that the synchronous publisher will be publishing on topic ``sync_topic``, while the asynchronous one will be publishing on topic ``async_topic``."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:171
msgid "Now open the ``CMakeLists.txt`` file and add a new executable and name it ``SyncAsyncWriter`` so you can run your node using ``ros2 run``:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:178 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:176 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:465 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:238 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:265 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:276
msgid "Finally, add the ``install(TARGETS…)`` section so ``ros2 run`` can find your executable:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:186 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:271
msgid "You can clean up your ``CMakeLists.txt`` by removing some unnecessary sections and comments, so it looks like this:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:215
msgid "If this node is built and run now, both publishers will behave the same, publishing asynchronously in both topics, because this is the default publication mode. The default publication mode configuration can be changed in runtime during the node launching, using an XML file."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:219
msgid "Create the XML file with the profile configuration"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:221
msgid "Create a file with name ``SyncAsync.xml`` and the following content:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:260
msgid "Note that several profiles for publisher and subscriber are defined. Two default profiles which are defined setting the ``is_default_profile`` to ``true``, and two profiles with names that coincide with those of the previously defined topics: ``sync_topic`` and another one for ``async_topic``. These last two profiles set the publication mode to ``SYNCHRONOUS`` or ``ASYNCHRONOUS`` accordingly. Note also that all profiles specify a ``historyMemoryPolicy`` value, which is needed for the example to work, and the reason will be explained later on this tutorial."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:266
msgid "Execute the publisher node"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:268
msgid "You will need to export the following environment variables for the XML to be loaded:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:296 ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:420
msgid "Finally, ensure you have sourced your setup files and run the node:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:303
msgid "You should see the publishers sending the data from the publishing node, like so:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:314
msgid "Now you have a synchronous publisher and an asynchronous publisher running inside the same node."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:318
msgid "Create a node with the subscribers"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:320
msgid "Next, a new node with the subscribers that will listen to the ``sync_topic`` and ``async_topic`` publications is going to be created. In a new source file named ``src/sync_async_reader.cpp`` write the following content:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:377
msgid "Open the ``CMakeLists.txt`` file and add a new executable and name it ``SyncAsyncReader`` under the previous ``SyncAsyncWriter``:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:390
msgid "Execute the subscriber node"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:392
msgid "With the publisher node running in one terminal, open another one and export the required environment variables for the XML to be loaded:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:427
msgid "You should see the subscribers receiving the data from the publishing node, like so:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:440
msgid "Analysis of the example"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:443
msgid "Configuration profiles XML"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:445
msgid "The XML file defines several configurations for publishers and subscribers. You can have a default publisher configuration profile and several topic-specific publisher profiles. The only requirement is that all publisher profiles have a different name and that there is only a single default profile. The same goes for subscribers."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:450
msgid "In order to define a configuration for a specific topic, just name the profile after the the ROS 2 topic name (like ``/sync_topic`` and ``/async_topic`` in the example), and ``rmw_fastrtps`` will apply this profile to all publishers and subscribers for that topic. The default configuration profile is identified by the attribute ``is_default_profile`` set to ``true``, and acts as a fallback profile when there is no other one with a name matching the topic name."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:454
msgid "The environment variable ``FASTRTPS_DEFAULT_PROFILES_FILE`` is used to inform *Fast DDS* the path to the XML file with the configuration profiles to load."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:457
msgid "RMW_FASTRTPS_USE_QOS_FROM_XML"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:459
msgid "Among all the configurable attributes, ``rmw_fastrtps`` treats ``publishMode`` and ``historyMemoryPolicy`` differently. By default, these values are set to ``ASYNCHRONOUS`` and ``PREALLOCATED_WITH_REALLOC`` within the ``rmw_fastrtps`` implementation, and the values set on the XML file are ignored. In order to use the values in the XML file, the environment variable ``RMW_FASTRTPS_USE_QOS_FROM_XML`` must be set to ``1``."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:463
msgid "However, this entails **another caveat**: If ``RMW_FASTRTPS_USE_QOS_FROM_XML`` is set, but the XML file does not define ``publishMode`` or ``historyMemoryPolicy``, these attributes take the *Fast DDS* default value instead of the ``rmw_fastrtps`` default value. This is important, especially for ``historyMemoryPolicy``, because the *Fast DDS* deafult value is ``PREALLOCATED`` which does not work with ROS2 topic data types. Therefore, in the example, a valid value for this policy has been explicitly set (``DYNAMIC``)."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:470
msgid "Prioritization of rmw_qos_profile_t"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:472
msgid "ROS 2 QoS contained in `rmw_qos_profile_t <http://docs.ros2.org/latest/api/rmw/structrmw__qos__profile__t.html>`_ are always honored, unless set to ``*_SYSTEM_DEFAULT``. In that case, XML values (or *Fast DDS* default values in the absence of XML ones) are applied. This means that if any QoS in ``rmw_qos_profile_t`` is set to something other than ``*_SYSTEM_DEFAULT``, the corresponding value in the XML is ignored."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:478
msgid "Using other FastDDS capabilities with XML"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:480
msgid "Although we have created a node with two publishers with different configuration, it is not easy to check that they are behaving differently. Now that the basics of XML profiles have been covered, let us use them to configure something which has some visual effect on the nodes. Specifically, a maximum number of matching subscribers on one of the publishers and a partition definition on the other will be set. Note that these are only very simple examples among all the configuration attributes that can be tuned on ``rmw_fastrtps`` through XML files. Please refer to `*Fast DDS* documentation <https://fast-dds.docs.eprosima.com/en/latest/fastdds/xml_configuration/xml_configuration.html#xml-profiles>`__ to  see the whole list of attributes that can be configured through XML files."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:487
msgid "Limiting the number of matching subscribers"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:489
msgid "Add a maximum number of matched subscribers to the ``/async_topic`` publisher profile. It should look like this:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:509
msgid "The number of matching subscribers is being limited to one."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:511
msgid "Now open three terminals and do not forget to source the setup files and to set the required environment variables. On the first terminal run the publisher node, and the subscriber node on the other two. You should see that only the first subscriber node receives the messages from both topics. The second one could not complete the matching process in the ``/async_topic`` because the publisher prevented it, as it had already reached its maximum of matched publishers. Consequently, only the messages from the ``/sync_topic`` are going to be received in this third terminal:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:525
msgid "Using partitions within the topic"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:527
msgid "The partitions feature can be used to control which publishers and subscribers exchange information within the same topic."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:529
msgid "Partitions introduce a logical entity isolation level concept inside the physical isolation induced by a Domain ID. For a publisher to communicate with a subscriber, they have to belong at least to one common partition. Partitions represent another level to separate publishers and subscribers beyond domain and topic. Unlike domain and topic, an endpoint can belong to several partitions at the same time. For certain data to be shared over different domains or topics, there must be a different publisher for each, sharing its own history of changes. However, a single publisher can share the same data sample over different partitions using a single topic data change, thus reducing network overload."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:536
msgid "Let us change the ``/sync_topic`` publisher to partition ``part1`` and create a new ``/sync_topic`` subscriber which uses partition ``part2``. Their profiles should now look like this:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:568
msgid "Open two terminals. Do not forget to source the setup files and to set the required environment variables. On the first terminal run the publisher node, and the subscriber node on the other one. You should see that only the ``/async_topic`` messages are reaching the subscriber. The ``/sync_topic`` subscriber is not receiving the data as it is in a different partition from the corresponding publisher."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:582
msgid "Configuring a service and a client"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:584
msgid "Services and clients have a publisher and a subscriber each, that communicate through two different topics. For example, for a service named ``ping`` there is:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:587
msgid "A service subscriber listening to requests on ``/rq/ping``."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:588
msgid "A service publisher sending responses on ``/rr/ping``."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:589
msgid "A client publisher sending requests on ``/rq/ping``."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:590
msgid "A client subscriber listening to responses on ``/rr/ping``."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:592
msgid "Although you can use these topic names to set the configuration profiles on the XML, sometimes you may wish to apply the same profile to all services or clients on a node. Instead of copying the same profile with all topic names generated for all services, you can just create a publisher and subscriber profile pair named ``service``. The same can be done for clients creating a pair named ``client``."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:598
msgid "Create the nodes with the service and client"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:600
msgid "Start creating the node with the service. Add a new source file named ``src/ping_service.cpp`` on your package with the following content:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:644
msgid "Create the client in a file named ``src/ping_client.cpp`` with the following content:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:694
msgid "Open the ``CMakeLists.txt`` file and add two new executables ``ping_service`` and ``ping_client``:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:714
msgid "Finally, build the package."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:718
msgid "Create the XML profiles for the service and client"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:720
msgid "Create a file with name ``ping.xml`` with the following content:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:760
msgid "This configuration file sets the publication mode to ``SYNCHRONOUS`` on the service and to ``ASYNCHRONOUS`` on the client. Note that we are only defining the publisher profiles for both the service and the client, but subscriber profiles could be provided too."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:765
msgid "Execute the nodes"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:767
msgid "Open two terminals and source the setup files on each one. Then set the required environment variables for the XML to be loaded:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:797
msgid "On the first terminal run the service node."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:803
msgid "You should see the service waiting for requests:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:809
msgid "On the second terminal, run the client node."
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:816
msgid "You should see the client sending the request and receiving the response:"
msgstr ""

#: ../../source/Tutorials/Advanced/FastDDS-Configuration.rst:823
msgid "At the same time, the output in the server console has been updated:"
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:2
msgid "Reading from a bag file (C++)"
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:4
msgid "**Goal:** Read data from a bag without using the CLI."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:8 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:8 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:8 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:8 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:8 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:8 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:13 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:14 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:13 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:14 ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:14 ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:14 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:14 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:14 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:14 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:14 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:14 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:14 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:14 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:14 ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:14 ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:14
msgid "**Time:** 10 minutes"
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:12 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:18 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:18 ../../source/Tutorials/Advanced/Security/Access-Controls.rst:19 ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:13 ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:19 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:20 ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:19 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:19 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:18 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:12 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:12 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:12 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:12 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:17 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:12 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:18 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:16 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:19 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:18 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:18 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:18 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:17 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:18 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:19 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:18 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:18 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:18 ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:18 ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:18 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:18 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:18 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:18 ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:16 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:18 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:18 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:18 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:18 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:18 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:18 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:18 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:18 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:18 ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:18 ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:18 ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:18 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:18 ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:18 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:18 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:18
msgid "Contents"
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:17
msgid "``rosbag2`` doesn't just provide the ``ros2 bag`` command line tool. It also provides a C++ API for reading from and writing to a bag from your own source code. This allows you to read the contents from a bag without having to play the bag, which can sometimes be useful."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:24 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:30 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:33
msgid "You should have the ``rosbag2`` packages installed as part of your regular ROS 2 setup."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:26 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:32 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:35
msgid "If you've installed from Debian packages on Linux, it may be installed by default. If it is not, you can install it using this command."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:33
msgid "This tutorial discusses using ROS 2 bags. You should have already completed the :doc:`basic ROS 2 bag tutorial <../Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data>`, and we will be using the ``subset`` bag you created there."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:37 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:43 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:46 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:33 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:32 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:46 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:45 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:30 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:55 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:41 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:48 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:43 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:42 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:48 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:45 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:50 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:37 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:41 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:43 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:39 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:45 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:125 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:37 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:36 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:34 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:44 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:34 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:34 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:35 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:35 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:37 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:34 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:65 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:42 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:34 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:38 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:44 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:44 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:30 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:30 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:39 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:34 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:34 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:34 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:34 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:39 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:39 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:38 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:34 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:34
msgid "Tasks"
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:40
msgid "1 Create a Package"
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:42 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:48 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:51 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:39 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:39 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:40 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:40 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:42 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:39
msgid "Open a new terminal and :doc:`source your ROS 2 installation <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` so that ``ros2`` commands will work."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:44
msgid "In a new or existing :ref:`workspace <new-directory>`, navigate to the ``src`` directory and create a new package:"
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:51
msgid "Your terminal will return a message verifying the creation of your package ``bag_reading_cpp`` and all its necessary files and folders. The ``--dependencies`` argument will automatically add the necessary dependency lines to ``package.xml`` and ``CMakeLists.txt``. In this case, the package will use the ``rosbag2_cpp`` package as well as the ``rclcpp`` package. A dependency on the ``turtlesim`` package is also required for working with the custom turtlesim messages."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:57 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:63 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:55 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:55 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:66 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:65 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:62
msgid "1.1 Update ``package.xml``"
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:59 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:65
msgid "Because you used the ``--dependencies`` option during package creation, you don't have to manually add dependencies to ``package.xml`` or ``CMakeLists.txt``. As always, though, make sure to add the description, maintainer email and name, and license information to ``package.xml``."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:69
msgid "2 Write the C++ Reader"
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:71
msgid "Inside your package's ``src`` directory, create a new file called ``simple_bag_reader.cpp`` and paste the following code into it."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:145 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:124 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:143 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:117 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:109 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:141 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:116 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:139 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:129 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:122 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:437 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:405 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:438 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:276 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:287 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:170 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:194
msgid "2.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:147 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:126
msgid "The ``#include`` statements at the top are the package dependencies. Note the inclusion of headers from the ``rosbag2_cpp`` package for the functions and structures necessary to work with bag files."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:150
msgid "The next line creates the node which will read from the bag file and play back the data."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:156
msgid "Now, we can create a timer callback which will run at 10 hz. Our goal is to replay one message to the ``/turtle1/pose`` topic each time the callback is run. Note the constructor takes a path to the bag file as a parameter."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:170
msgid "We also open the bag in the constructor."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:176
msgid "Now, inside our timer callback, we loop through messages in the bag until we read a message recorded from our desired topic. Note that the serialized message has timestamp metadata in addition to the topic name."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:190
msgid "We then construct an ``rclcpp::SerializedMessage`` object from the serialized data we just read. Additionally, we need to create a ROS 2 deserialized message which will hold the result of our deserialization. Then, we can pass both these objects to the ``rclcpp::Serialization::deserialize_message`` method."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:201
msgid "Finally, we publish the deserialized message and print out the xy coordinate to the terminal. We also break out of the loop so that we publish the next message during the next timer calback."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:212
msgid "We must also declare the private variables used throughout the node."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:223
msgid "Lastly, we create the main function which will check that the user passes an argument for the bag file path and spins our node."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:242 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:207 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:206 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:167 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:172
msgid "2.2 Add executable"
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:244 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:209 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:160
msgid "Now open the ``CMakeLists.txt`` file."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:246 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:220
msgid "Below the dependencies block, which contains ``find_package(rosbag2_cpp REQUIRED)``, add the following lines of code."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:259 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:233 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:230 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:222 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:213 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:187
msgid "3 Build and run"
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:261
msgid "Navigate back to the root of your workspace and build your new package."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:283
msgid "Next, source the setup files."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:305
msgid "Now, run the script. Make sure to replace ``/path/to/setup`` with the path to your ``setup`` bag."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:312
msgid "You should see the (x, y) coordinates of the turtle printed to the console."
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:315 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:661 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:659 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:237 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:218 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:515 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:189 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:141 ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:324 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:254 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:265 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:105 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:253 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:347 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:184 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:241 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:260 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:323 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:126 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:389 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:524 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:822 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:187 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:314 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:487 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:429 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:430 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:536 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:410 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:517 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:338 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:183 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:351 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:310 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:534 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:396 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:346 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:592 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:547 ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:310 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:119 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:97 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:230 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:115 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:114 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:739 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:450 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:471 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:415 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:368 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:431 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:450 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:273 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:385 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:352
msgid "Summary"
msgstr ""

#: ../../source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst:317
msgid "You created a C++ executable that reads data from a bag. You then compiled and ran the executable which printed some information from the bag to the console."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:8
msgid "Recording a bag from a node (C++)"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:10
msgid "**Goal:** Record data from your own C++ node to a bag."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:23
msgid "``rosbag2`` doesn't just provide the ``ros2 bag`` command line tool. It also provides a C++ API for reading from and writing to a bag from your own source code. This allows you to subscribe to a topic and save the received data to a bag at the same time as performing any other processing of your choice on that data."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:39 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:42
msgid "This tutorial discusses using ROS 2 bags, including from the terminal. You should have already completed the :doc:`basic ROS 2 bag tutorial <../Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data>`."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:46 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:49 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:128 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:47 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:37 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:37 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:38 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:38 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:40 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:37 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:37 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:44 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:42 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:42 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:41
msgid "1 Create a package"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:50
msgid "Navigate into the ``ros2_ws`` directory created in a :ref:`previous tutorial <new-directory>`. Navigate into the ``ros2_ws/src`` directory and create a new package:"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:57
msgid "Your terminal will return a message verifying the creation of your package ``bag_recorder_nodes`` and all its necessary files and folders. The ``--dependencies`` argument will automatically add the necessary dependency lines to ``package.xml`` and ``CMakeLists.txt``. In this case, the package will use the ``rosbag2_cpp`` package as well as the ``rclcpp`` package. A dependency on the ``example_interfaces`` package is also required for later parts of this tutorial."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:75 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:68 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:74
msgid "2 Write the C++ node"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:77
msgid "Inside the ``ros2_ws/src/bag_recorder_nodes/src`` directory, create a new file called ``simple_bag_recorder.cpp`` and paste the following code into it."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:129
msgid "In the class constructor we begin by creating the writer object we will use to write to the bag."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:135
msgid "Now that we have a writer object, we can open the bag using it. We specify just the URI of the bag to create, leaving other options at their defaults. The default storage options are used, which means that an ``sqlite3``-format bag will be created. The default conversion options are used, too, which will perform no conversion, instead storing messages in the serialisation format they are received in."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:144 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:180
msgid "With the writer now set up to record data we pass to it, we create a subscription and specify a callback for it. We will write data to the bag in the callback."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:152
msgid "The callback itself is different from a typical callback. Rather than receiving an instance of the data type of the topic, we instead receive a ``rclcpp::SerializedMessage``. We do this for two reasons."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:156
msgid "The message data will need to be serialised by ``rosbag2`` before being written to the bag, so rather than unserialising it when receiving the data and then re-serialising it, we ask ROS to just give us the serialised message as-is."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:157
msgid "The writer API can accept a serialised message."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:164
msgid "Within the subscription callback, the first thing to do is determine the time stamp to use for the stored message. This can be anything appropriate to your data, but two common values are the time at which the data was produced, if known, and the time it is received. The second option, the time of reception, is used here."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:172
msgid "We can then write the message into the bag. Because we have not yet registered any topics with the bag, we must specify the full topic information with the message. This is why we pass in the topic name and the topic type."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:180
msgid "The class contains two member variables."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:182
msgid "The subscription object. Note that the template parameter is the type of the callback, not the type of the topic. In this case the callback receives a ``rclcpp::SerializedMessage`` shared pointer, so this is what the template parameter must be."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:185
msgid "A managed pointer to the writer object used to write to the bag. Note the type of writer used here is the ``rosbag2_cpp::Writer``, the generic writer interface. Other writers may be available with different behaviours."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:194 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:205
msgid "The file finishes with the ``main`` function used to create an instance of the node and start ROS processing it."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:211
msgid "Near the top of the file, change ``CMAKE_CXX_STANDARD`` from ``14`` to ``17``."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:235 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:232
msgid "Navigate back to the root of your workspace, ``ros2_ws``, and build your new package."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:257 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:457 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:254 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:453
msgid "Open a new terminal, navigate to ``ros2_ws``, and source the setup files."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:279 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:481 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:276 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:477 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:300 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:286 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:277 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:235
msgid "Now run the node:"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:285 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:282
msgid "Open a second terminal and run the ``talker`` example node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:291
msgid "This will start publishing data on the ``chatter`` topic. As the bag-writing node receives this data, it will write it to the ``my_bag`` bag."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:294 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:293
msgid "Terminate both nodes. Then, in one terminal start the ``listener`` example node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:301 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:300
msgid "In the other terminal, use ``ros2 bag`` to play the bag recorded by your node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:307 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:306
msgid "You will see the messages from the bag being received by the ``listener`` node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:309 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:308
msgid "If you wish to run the bag-writing node again, you will first need to delete the ``my_bag`` directory."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:312 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:311
msgid "4 Record synthetic data from a node"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:314 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:313
msgid "Any data can be recorded into a bag, not just data received over a topic. A common use case for writing to a bag from your own node is to generate and store synthetic data. In this section you will learn how to write a node that generates some data and stores it in a bag. We will demonstrate two approaches for doing this. The first uses a node with a timer; this is the approach that you would use if your data generation is external to the node, such as reading data directly from hardware (e.g. a camera). The second approach does not use a node; this is the approach you can use when you do not need to use any functionality from the ROS infrastructure."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:322
msgid "4.1 Write a C++ node"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:324
msgid "Inside the ``ros2_ws/src/bag_recorder_nodes/src`` directory, create a new file called ``data_generator_node.cpp`` and paste the following code into it."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:379 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:374
msgid "4.2 Examine the code"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:381 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:376
msgid "Much of this code is the same as the first example. The important differences are described here."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:384 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:379
msgid "First, the name of the bag is changed."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:390
msgid "In this example we are registering the topic with the bag in advance. This is optional in most cases, but it must be done when passing in a serialised message without topic information."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:401 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:397
msgid "Rather than a subscription to a topic, this node has a timer. The timer fires with a one-second period, and calls the given member function when it does."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:408
msgid "Within the timer callback, we generate (or otherwise obtain, e.g. read from a serial port connected to some hardware) the data we wish to store in the bag. The important difference between this and the previous sample is that the data is not yet serialised. Instead we are passing a ROS message data type to the writer object, in this case an instance of ``example_interfaces/msg/Int32``. The writer will serialise the data for us before writing it into the bag."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:418 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:415
msgid "4.3 Add executable"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:420
msgid "Open the ``CMakeLists.txt`` file and add the following lines after the previously-added lines (specifically, after the ``install(TARGETS ...)`` macro call)."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:433 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:429
msgid "4.4 Build and run"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:435 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:591 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:431 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:589
msgid "Navigate back to the root of your workspace, ``ros2_ws``, and build your package."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:479
msgid "(If the ``timed_synthetic_bag`` directory already exists, you must first delete it before running the node.)"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:487 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:483
msgid "Wait for 30 seconds or so, then terminate the node with :kbd:`ctrl-c`. Next, play back the created bag."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:494 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:651 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:490 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:649
msgid "Open a second terminal and echo the ``/synthetic`` topic."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:500 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:496
msgid "You will see the data that was generated and stored in the bag printed to the console at a rate of one message per second."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:503 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:499
msgid "5 Record synthetic data from an executable"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:505 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:501
msgid "Now that you can create a bag that stores data from a source other than a topic, you will learn how to generate and record synthetic data from a non-node executable. The advantage of this approach is simpler code and rapid creation of a large quantity of data."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:509
msgid "5.1 Write a C++ executable"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:511
msgid "Inside the ``ros2_ws/src/bag_recorder_nodes/src`` directory, create a new file called ``data_generator_executable.cpp`` and paste the following code into it."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:552 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:548
msgid "5.2 Examine the code"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:554 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:550
msgid "A comparison of this sample and the previous sample will reveal that they are not that different. The only significant difference is the use of a for loop to drive the data generation rather than a timer."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:557 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:553
msgid "Notice that we are also now generating time stamps for the data rather than relying on the current system time for each sample. The time stamp can be any value you need it to be. The data will be played back at the rate given by these time stamps, so this is a useful way to control the default playback speed of the samples. Notice also that while the gap between each sample is a full second in time, this executable does not need to wait a second between each sample. This allows us to generate a lot of data covering a wide span of time in much less time than playback will take."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:574 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:572
msgid "5.3 Add executable"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:576
msgid "Open the ``CMakeLists.txt`` file and add the following lines after the previously-added lines."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:589 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:587
msgid "5.4 Build and run"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:613 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:611
msgid "Open a terminal, navigate to ``ros2_ws``, and source the setup files."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:635
msgid "(If the ``big_synthetic_bag`` directory already exists, you must first delete it before running the executable.)"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:637 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:635
msgid "Now run the executable:"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:643 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:641
msgid "Note that the executable runs and finishes very quickly."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:645 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:643
msgid "Now play back the created bag."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:657 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:655
msgid "You will see the data that was generated and stored in the bag printed to the console at a rate of one message per second. Even though the bag was generated rapidly it is still played back at the rate the time stamps indicate."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst:663
msgid "You created a node that records data it receives on a topic into a bag. You tested recording a bag using the node, and verified the data was recorded by playing back the bag. You then went on to create a node and an executable to generate synthetic data and store it in a bag."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:8
msgid "Recording a bag from a node (Python)"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:10
msgid "**Goal:** Record data from your own Python node to a bag."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:23
msgid "``rosbag2`` doesn't just provide the ``ros2 bag`` command line tool. It also provides a Python API for reading from and writing to a bag from your own source code. This allows you to subscribe to a topic and save the received data to a bag at the same time as performing any other processing of your choice on that data. You may do this, for example, to save data from a topic and the result of processing that data without needing to send the processed data over a topic just to record it. Because any data can be recorded in a bag, it is also possible to save data generated by another source than a topic, such as synthetic data for training sets. This is useful, for example, for quickly generating a bag that contains a large number of samples spread over a long playback time."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:53 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:41 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:41 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:48
msgid "Follow :ref:`these instructions <new-directory>` to create a new workspace named ``ros2_ws``."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:55
msgid "Navigate into the ``ros2_ws/src`` directory and create a new package:"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:61
msgid "Your terminal will return a message verifying the creation of your package ``bag_recorder_nodes_py`` and all its necessary files and folders. The ``--dependencies`` argument will automatically add the necessary dependency lines to the ``package.xml``. In this case, the package will use the ``rosbag2_py`` package as well as the ``rclpy`` package. A dependency on the ``example_interfaces`` package is also required for message definitions."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:67
msgid "1.1 Update ``package.xml`` and ``setup.py``"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:69
msgid "Because you used the ``--dependencies`` option during package creation, you don't have to manually add dependencies to ``package.xml``. As always, though, make sure to add the description, maintainer email and name, and license information to ``package.xml``."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:78
msgid "Also be sure to add this information to the ``setup.py`` file as well."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:88 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:68
msgid "2 Write the Python node"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:90
msgid "Inside the ``ros2_ws/src/bag_recorder_nodes_py/bag_recorder_nodes_py`` directory, create a new file called ``simple_bag_recorder.py`` and paste the following code into it."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:145
msgid "The ``import`` statements at the top are the package dependencies. Note the importation of the ``rosbag2_py`` package for the functions and structures necessary to work with bag files."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:148
msgid "In the class constructor, we begin by creating the writer object that we will use to write to the bag. We are creating a ``SequentialWriter``, which writes messages into the bag in the order they are received. Other writers with different behaviours may be available in `rosbag2 <https://github.com/ros2/rosbag2/tree/humble/rosbag2_cpp/include/rosbag2_cpp/writers>`__."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:156
msgid "Now that we have a writer object, we can open the bag using it. We specify the URI of the bag to create and the format (``sqlite3``), leaving other options at their defaults. The default conversion options are used, which will perform no conversion and store the messages in the serialization format they are received in."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:168
msgid "Next, we need to tell the writer about the topics we wish to store. This is done by creating a ``TopicMetadata`` object and registering it with the writer. This object specifies the topic name, topic data type, and serialization format used."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:192
msgid "The callback receives the message in unserialized form (as is standard for the ``rclpy`` API) and passes the message to the writer, specifying the topic that the data is for and the timestamp to record with the message. However, the writer requires serialised messages to store in the bag. This means that we need to serialise the data before passing it to the writer. For this reason, we call ``serialize_message()`` and pass the result of that to the writer, rather than passing in the message directly."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:216
msgid "2.2 Add entry point"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:218 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:417 ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:574
msgid "Open the ``setup.py`` file in the ``bag_recorder_nodes_py`` package and add an entry point for your node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:288
msgid "This will start publishing data on the ``chatter`` topic. As the bag-writing node receives this data, it will write it to the ``my_bag`` bag. If the ``my_bag`` directory already exists, you must first delete it before running the ``simple_bag_recorder`` node. This is because ``rosbag2`` will not overwrite existing bags by default, and so the destination directory cannot exist."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:321
msgid "4.1 Write a Python node"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:323
msgid "Inside the ``ros2_ws/src/bag_recorder_nodes_py/bag_recorder_nodes_py`` directory, create a new file called ``data_generator_node.py`` and paste the following code into it."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:387
msgid "The name of the topic is also changed, as is the data type stored."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:404
msgid "Within the timer callback, we generate (or otherwise obtain, e.g. read from a serial port connected to some hardware) the data we wish to store in the bag. As with the previous example, the data is not yet serialised, so we must serialise it before passing it to the writer."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:475
msgid "If the ``timed_synthetic_bag`` directory already exists, you must first delete it before running the node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:505
msgid "5.1 Write a Python executable"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:507
msgid "Inside the ``ros2_ws/src/bag_recorder_nodes_py/bag_recorder_nodes_py`` directory, create a new file called ``data_generator_executable.py`` and paste the following code into it."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:633
msgid "If the ``big_synthetic_bag`` directory already exists, you must first delete it before running the executable."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:661
msgid "You created a node that records data it receives on a topic into a bag. You tested recording a bag using the node, and verified the data was recorded by playing back the bag. This approach can be used to record a bag with additional data than it received over a topic, for example with results obtained from processing the received data. You then went on to create a node and an executable to generate synthetic data and store it in a bag. The latter approaches are useful especially for generating synthetic data that can be used, for example, as training sets."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:8
msgid "Setting access controls"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:10
msgid "**Goal:** Limit the topics a node can use."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:24
msgid "Permissions are quite flexible and can be used to control many behaviors within the ROS graph."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:26
msgid "For this tutorial, we demonstrate a policy which only allows publishing messages on the default ``chatter`` topic. This would prevent, for instance, remapping the topic when launching the listener or using the same security enclaves for another purpose."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:29
msgid "In order to enforce this policy, we need to update the ``permissions.xml`` file and re-sign it before launching the node. This can be done by modifying the permissions file by hand, or by using XML templates."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:34
msgid "Modify ``permissions.xml``"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:36
msgid "Begin by making a backup of your permissions files, and open ``permissions.xml`` for editing:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:45
msgid "We will be modifying the ``<allow_rule>`` for ``<publish>`` and ``<subscribe>``. The topics in this XML file use the DDS naming format, not the ROS name. Find details on mapping topic names between ROS and DDS in the `Topic and Service Names design document <https://design.ros2.org/articles/topic_and_service_names.html#mapping-of-ros-2-topic-and-service-names-to-dds-concepts>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:49
msgid "Paste the following XML content into ``permission.xml``, save the file and exit the text editor. This shows the ``chatter`` and ``rosout`` ROS topics renamed to the DDS ``rt/chatter`` and ``rt/rosout`` topics, respectively:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:102
msgid "This policy allows the talker to publish on the ``chatter`` and the ``rosout`` topics. It also allows includes publish and subscribe permissions needed for the talker node to manage parameters (a requirement for all nodes). Discovery permissions remain unchanged from the original template."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:108
msgid "Sign the policy file"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:110
msgid "This next command creates the new S/MIME signed policy file ``permissions.p7s`` from the updated XML file ``permissions.xml``. The file must be signed with the Permissions CA certificate, **which requires access to the Permission CA private key**. If the private key has been protected, additional steps may be required to unlock and use it accoring to your security plan."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:122
msgid "Launch the node"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:124
msgid "With the updated permissions in place, we can launch the node successfully using the same command used in prior tutorials:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:130
msgid "However, attempting to remap the ``chatter`` topic prevents the node from launching (note that this requires the ``ROS_SECURITY_STRATEGY`` set to ``Enforce``)."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:139
msgid "Use the templates"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:141
msgid "Security policies can quickly become confusing, so the ``sros2`` utilities add the ability to create policies from templates. Do this by using the `sample policy file <https://github.com/ros2/sros2/blob/humble/sros2/test/policies/sample.policy.xml#L1>`_ provided in the ``sros2`` repository. Let's creates a policy for both the ``talker`` and the ``listener`` to only use the ``chatter`` topic."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:145
msgid "Begin by downloading the ``sros2`` repository with the sample policy files:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:151
msgid "Then use the ``create_permission`` verb while pointing to the sample policy to generate the XML permission files:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:162
msgid "These permission files allow nodes to only publish or subscribe to the ``chatter`` topic, and enable communications required for parameters."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:164
msgid "In one terminal with security enabled as in previous security tutorials, run the ``talker`` demo program:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:170
msgid "In another terminal do the same with the ``listener`` program:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Access-Controls.rst:176
msgid "At this point, your ``talker`` and ``listener`` nodes will be communicating securely using explicit access control lists. However, the following attempt for the ``listener`` node to subscribe to a topic other than ``chatter`` will fail:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:2
msgid "Deployment Guidelines"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:4
msgid "**Goal:** Understand the best practices when deploying security artifacts into production systems."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:18
msgid "Typical deployment scenarios often involve shipping containerized applications, or packages, into remote systems. Special attention should be payed when deploying security enabled applications, requiring users to reason about the sensitivity of packaged files."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:21
msgid "Complying with the `DDS Security standard <https://www.omg.org/spec/DDS-SECURITY/1.1/About-DDS-SECURITY/>`_, the ``sros2`` package provides a collection of utilities for managing security under ROS 2 environments in a highly modular and flexible fashion."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:24
msgid "Basic core guidelines on how to organize the different certificates, keys and directories remains a critical factor to avoid compromising the security of the system. This includes protection-awareness and criteria for selecting the minimum set of necessary files to be deployed upon remote production systems for minimizing security exposure."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:30
msgid "A docker installation with the compose plugin. Please refer to the installation steps detailed in `Docker installation <https://docs.docker.com/engine/install/>`_ and `Compose Plugin <https://docs.docker.com/compose/install>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:32
msgid "(Recommended) A basic understanding on `ROS 2 Security design <https://design.ros2.org/articles/ros2_dds_security.html>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:33
msgid "(Recommended) Previous security tutorials completion. In particular:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:35
msgid ":doc:`Introducing-ros2-security`"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:36
msgid ":doc:`The-Keystore`"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:37
msgid ":doc:`Access-Controls`"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:40
msgid "General Guidelines"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:42
msgid "ROS 2 leverages DDS Security extensions to ensure security on message exchanges within the same enclave. The different signed files and certificates within an enclave are generated from the private keys and certificates of a `Certificate Authority (CA) <https://en.wikipedia.org/wiki/Certificate_authority>`_ trusted entity. In fact, two different CA's can be selected for identity and permissions, per enclave. Those CA artifacts are stored inside ``private/`` and ``public/`` sub-directories of a `Keystore <https://design.ros2.org/articles/ros2_security_enclaves.html>`_ with the following folder structure:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:58
msgid "A good practice for the creation and usage of a certain Certificate Authority on a typical deployment for a production system, is to:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:60
msgid "Create it within the organization system intended for internal use only."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:61
msgid "Generate/modify desired enclaves bearing in mind that:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:63
msgid "Not all the generated enclaves should be deployed to all target devices."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:64
msgid "A reasonable way to proceed would be having one enclave per application, allowing for a separation of concerns."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:66
msgid "Ship ``public/`` alongside with corresponding ``enclaves/`` into the different remote production devices during setup."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:67
msgid "Keep and protect ``private/`` keys and/or certification requests in the organization."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:69
msgid "It is important to note that if ``private/`` files are lost, it won't be possible to change access permissions, add or modify security profiles anymore."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:71
msgid "In addition, further practices may be taken into consideration:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:73
msgid "Granting read-only permissions to the ``enclaves/`` directory contents."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:74
msgid "If a PKCS#11 compliant URI is given for generating enclave's private keys, a `Hardware Security Module (HSM) <https://en.wikipedia.org/wiki/Hardware_security_module>`_ could be used to store them."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:76
msgid "The following table depicts a summary of the previous statements relating the Keystore directory with the Recommended location:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:79
msgid "Directory / Location"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:79
msgid "Organization"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:79
msgid "Target Device"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:79
msgid "Material Sensitivity"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:81
msgid "public"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:81 ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:83 ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:85
msgid "✓"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:81
msgid "Low"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:83
msgid "private"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:83
msgid "✕"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:83
msgid "High"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:85
msgid "enclaves"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:85
msgid "Medium"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:90
msgid "Building a deployment scenario"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:92
msgid "To illustrate a simple deployment scenario, a new docker image will be built on top of the one provided by ``ros:<DISTRO>``. Starting from the image, three containers will be created with the aim of:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:95
msgid "Initializing the keystore in a local host's shared volume."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:96
msgid "Simulating two deployed remote devices that interact with each other in a secure way."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:98
msgid "In this example, the local host serves as the organization's system. Let us start by creating a workspace folder:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:107
msgid "Generating the Docker Image"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:109
msgid "In order to build a new docker image, a Dockerfile is required. The one proposed for this tutorial can be retrieved with the following command:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:117
msgid "Now, build the docker image with the command:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:125
msgid "Understanding the compose file"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:127
msgid "A compose configration file takes an image to create containers as services. In this tutorial, three services are defined within the configuration:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:130
msgid "*keystore-creator*: That, similarly to previous tutorials, it internally initializes a new keystore tree directory. This will create *enclaves/* *public/* and *private/*, which are explained in more detail in `ROS 2 Security enclaves <https://design.ros2.org/articles/ros2_security_enclaves.html>`_. The ``keystore`` directory is configured to be a shared volume across containers."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:134
msgid "*listener* and *talker*: Act as the remote device actors in this tutorial. Required ``Security`` environment variables are sourced as well as the necessary keystore files from the shared volume."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:137
msgid "The compose configuration yaml file can be downloaded with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:145
msgid "Running the example"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:147
msgid "In the same working directory ``~/security_gd_tutorial``, run:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:154
msgid "This should result in the following output:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:156
msgid "*tutorial-listener-1*: ``Found security directory: /keystore/enclaves/talker_listener/listener``"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:157
msgid "*tutorial-talker-1*: ``Found security directory: /keystore/enclaves/talker_listener/talker``"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:158
msgid "*tutorial-listener-1*: ``Publishing: 'Hello World: <number>'``"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:159
msgid "*tutorial-talker-1*: ``I heard: [Hello World: <number>]``"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:162
msgid "Examining the containers"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:164
msgid "While having the containers running that simulate the two remote devices for this tutorial, attach to each of them by opening two different terminals and enter:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:178
msgid "A similar output to the one depicted below should be obtained:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:220
msgid "Note that:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:222
msgid "*private/* folder is not moved but left in the local host (organization)."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:223
msgid "Each one of the deployed devices contain its own minimum enclave required for its application."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Deployment-Guidelines.rst:227
msgid "For the sake of simplicity, the same CA is used within this enclave for both identity and permissions."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:8
msgid "Examining network traffic"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:10
msgid "**Goal:** Capture and examine raw ROS 2 network traffic."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:24
msgid "ROS 2 communications security is all about protecting communications between nodes. Prior tutorials enabled security, but how can you **really** tell if traffic is being encrypted? In this tutorial we'll take a look at capturing live network traffic to show the difference between encrypted and unencrypted traffic."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:30
msgid "``rmw_fastrtps_cpp`` uses `Shared Memory Transport <https://fast-dds.docs.eprosima.com/en/latest/fastdds/transport/shared_memory/shared_memory.html>`_ by default to improve the performance in the transport layer when the endpoints are in the same host system. Security enclaves are still applied, and data will be encrypted. However, you cannot capture live network traffic since the data will not be on the network interface. If you are using  ``rmw_fastrtps_cpp``, you need to either go through this tutorial and use a different host system between the publisher and subscriber, or disable shared memory transport with `Enabling UDP Transport <https://fast-dds.docs.eprosima.com/en/latest/fastdds/transport/udp/udp.html#enabling-udp-transport>`_ and `How to set Fast-DDS XML configuration <https://github.com/ros2/rmw_fastrtps#full-qos-configuration>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:36 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:91 ../../source/Tutorials/Demos/Quality-of-Service.rst:45
msgid "Run the demo"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:39
msgid "Install ``tcpdump``"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:41
msgid "Begin in a new terminal window by installing `tcpdump <https://www.tcpdump.org/manpages/tcpdump.1.html>`_, a command-line tool for capturing and displaying network traffic. Although this tutorial describes ``tcpdump`` commands, you can also use `Wireshark <https://www.wireshark.org/>`_, a similar graphical tool for capturing and analyzing traffic."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:49
msgid "Run following commands on a single machine through multiple ``ssh`` sessions."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:52
msgid "Start the talker and listener"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:54
msgid "Start both the talker and the listener again, each in its own terminal. The security environment variables are not set so security is not enabled for these sessions."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:70
msgid "Display unencrypted discovery packets"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:72
msgid "With the talker and listener running, open another terminal and start ``tcpdump`` to look at the network traffic. You need to use ``sudo`` since reading raw network traffic is a privileged operation."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:75
msgid "The command below uses the ``-X`` option to print packet contents, the ``-i`` option to listen for packets on any interface, and captures only `UDP <https://en.wikipedia.org/wiki/User_Datagram_Protocol>`_ port 7400 traffic."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:81
msgid "You should see packets like the following::"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:94
msgid "This is a discovery datagram--the talker looking for subscribers. As you can see, the node name (``/talker_listener/talker``) and the enclave (also ``/talker_listener/talker``) are passed in plain text. You should also see similar discovery datagrams from the ``listener`` node. Some other features of a typical discovery packet:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:99
msgid "The destination address is 239.255.0.1, which is a multicast IP address; ROS 2 uses multicast traffic for discovery by default."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:100
msgid "UDP 7400 is the destination port, as per the `DDS-RTPS specification <https://www.omg.org/spec/DDSI-RTPS/About-DDSI-RTPS/>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:101
msgid "The packet contains the \"RTPS\" tag, also as defined to the DDS-RTPS specification."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:105
msgid "Display unencrypted data packets"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:107
msgid "Use ``tcpdump`` to capture non-discovery RTPS packets by filtering on UDP ports above 7400:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:113
msgid "You will see few different types of packets, but watch for something like the following which is obviously data being sent from a talker to a listener::"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:124
msgid "Some features to note about this packet:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:126
msgid "The message contents, \"Hello World: 2135\", are sent in clear text"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:127
msgid "The source and destination IP address is ``localhost``: since both nodes are running on the same machine, the nodes discovered each other on the ``localhost`` interface"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:131
msgid "Enable encryption"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:133
msgid "Stop both the talker and the listener nodes. Enable encryption for both by setting the security environment variables and run them again."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:152
msgid "Display encrypted discovery packets"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:154
msgid "Run the same ``tcpdump`` command used earlier to examine the output of discovery traffic with encryption enabled:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:160
msgid "The typical discovery packet looks somewhat like the following::"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:181
msgid "This packet is much larger and includes information which can be used to set up encryption among ROS nodes. As we will see shortly, this actually includes some of the security configuration files that were created when we enabled security. Interested in learning more? Take a look at the excellent paper `Network Reconnaissance and Vulnerability Excavation of Secure DDS Systems <https://arxiv.org/abs/1908.05310>`_ to understand why this matters."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:187
msgid "Display encrypted data packets"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:189
msgid "Now use ``tcpdump`` to capture data packets:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:195
msgid "A typical data packet looks like the following::"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:210
msgid "The data in this RTPS packet is all encrypted."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Examine-Traffic.rst:212
msgid "In addition to this data packet, you should see additional packets with node and enclave names; these support other ROS features such as parameters and services. Encryption options for these packets can also be controlled by security policy."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:9
msgid "Setting up security"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:11
msgid "**Goal:** Set up security with ``sros2``."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:15 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:14 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:15 ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:12 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:13 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:13 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:14 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:14 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:14 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:14 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:14 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:14 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:14 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:14 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:14
msgid "**Time:** 15 minutes"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:25
msgid "The ``sros2`` package provides the tools and instructions to use ROS 2 on top of DDS-Security. The security features have been tested across platforms (Linux, macOS, and Windows) as well as across different languages (C++ and Python). The SROS2 has been designed to work with any secure middleware, although not all middleware is open source and support varies depending on the ROS distribution in use. Please reach out to the :ref:`ROS 2 Security Working Group <Security Working Group>` if you encounter any support issues."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:32
msgid "Installation"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:34
msgid "Typically security is available following installation using the :doc:`ROS 2 Installation Guide <../../../Installation>` and the :doc:`configuration guide <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>`. However, if you intend to install from source or switch middleware implementations, consider the following caveats:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:39
msgid "Installing from source"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:41
msgid "Before installing from source, you will need to have a recent version openssl (1.0.2g or later) installed:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:52 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:105 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:132 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:162 ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:202 ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:46 ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:78
msgid "MacOS"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:58
msgid "You will need to have OpenSSL on your library path to run DDS-Security demos. Run the following command, and consider adding to your ``~/.bash_profile``:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:69
msgid "If you don't have OpenSSL installed, please follow :ref:`these instructions <windows-install-binary-installing-prerequisites>`"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:71
msgid "Fast DDS requires an additional CMake flag to build the security plugins, so the colcon invocation needs to be modified to pass:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:79
msgid "Selecting an alternate middleware"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:81
msgid "If you choose not to use the default middleware implementation, be sure to :doc:`change your DDS implementation <../../../Installation/DDS-Implementations/>` before proceeding."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:83
msgid "ROS 2 allows you to change the DDS implementation at runtime. See `how to work with mulitple RMW implementations <../../../How-To-Guides/Working-with-multiple-RMW-implementations>` to explore different middleware implementations."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:86
msgid "Note that secure communication between vendors is not supported."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:94
msgid "1\\. Create a folder for the security files"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:95
msgid "Begin by creating folder to store all the files necessary for this demo:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:118
msgid "2\\. Generate a keystore"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:120
msgid "Use the ``sros2`` utilities to create the keystore. Files in the keystore will be used to enable security for all the participants in the ROS 2 graph."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:147
msgid "3\\. Generate keys and certificates"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:149
msgid "Once the keystore is created, create keys and certificates for each node with security enabled. For our demo, that includes the talker and listener nodes. This command uses the ``create_enclave`` feature which is covered in more detail in the next tutorial."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:177
msgid "If ``unable to write 'random state'`` appears then set the environment variable ``RANDFILE``."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:183
msgid "Then re-run the commands above."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:187
msgid "4\\. Configure environment variables"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:189
msgid "Three environment variables allow the middleware to locate encryption materials and enable (and possibly enforce) security. These and other security-related environment variables are described in the `ROS 2 DDS-Security Integration design document <https://design.ros2.org/articles/ros2_dds_security.html>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:218
msgid "These variables need to be defined in each terminal used for the demo. For convenience you can add them to your boot environment."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:223
msgid "5\\. Run the ``talker/listener`` demo"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:225
msgid "Begin the demo by launching the talker node."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:231
msgid "In another terminal, do the same to launch the ``listener`` node. The environment variables in this terminal must be properly set as described in step 4 above."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:238
msgid "These nodes will be communicating using authentication and encryption! If you look at the packet contents (for example, using ``tcpdump`` or ``Wireshark`` as covered in another tutorial), you can see that the messages are encrypted."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:241
msgid "Note: You can switch between the C++ (demo_nodes_cpp) and Python (demo_nodes_py) packages arbitrarily."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:243
msgid "These nodes are able to communicate because we have created the appropriate keys and certificates for them."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:245
msgid "Leave both nodes running as you answer the questions below."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:249
msgid "Take the Quiz!"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:253 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:220
msgid "Question 1"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:255
msgid "Open another terminal session, but **do not** set the environment variables so that security is not enabled. Start the listener. What do you expect to happen?"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:259 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:239
msgid "Answer 1"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:261
msgid "The listener launches but does not receive any messages. All traffic is encrypted, and without security enabled the listener does not receive anything."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:267 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:250
msgid "Question 2"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:269
msgid "Stop the listener, set the environment variable ``ROS_SECURITY_ENABLE`` to ``true`` and start the listener again. What results do you expect this time?"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:272 ../../source/Tutorials/Advanced/Security/The-Keystore.rst:254
msgid "Answer 2"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:274
msgid "The listener still launches but does not receive messages. Although security has now been enabled, it is not been configured properly since ROS is unable to locate the key files. The listener launches, but in non-secure mode since security is not enforced, which means that although the properly configured talker is sending encrypted messages, this listener is unable to decrypt them."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:280
msgid "Question 3"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:282
msgid "Stop the listener and set ``ROS_SECURITY_STRATEGY`` to ``Enforce``. What happens now?"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:285
msgid "Answer 3"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:287
msgid "The listener fails to launch. Security has been enabled and is being enforced. Since it still is not properly configured, an error is thrown rather than launching in non-secure mode."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:293
msgid "Learn More!"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Introducing-ros2-security.rst:295
msgid "Are you ready to go further with ROS Security? Take a look at the `Secure Turtlebot2 Demo <https://github.com/ros-swg/turtlebot3_demo>`_. You'll find a functioning and complex implementation of ROS 2 security, ready to try out your own custom scenarios. Be sure to create pull requests and issues here so we can continue improving security support in ROS!"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-Main.rst:2
msgid "Security"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:8
msgid "Ensuring security across machines"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:10
msgid "**Goal:** Make two different machines communicate securely."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:14 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:14 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:14 ../../source/Tutorials/Intermediate/Rosdep.rst:16
msgid "**Time:** 5 minutes"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:24
msgid "The previous tutorials have used two ROS nodes on the same machine sending all network communications over the localhost interface. Let's extend that scenario to involve multiple machines, since the benefits of authentication and encryption then become more obvious."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:27
msgid "Suppose that the machine with the keystore created in the previous demo has a hostname ``Alice``, and that we want to also use another machine with hostname ``Bob`` for our multi-machine ``talker/listener`` demo. We need to move some keys from ``Alice`` to ``Bob`` to allow SROS 2 to authenticate and encrypt the transmissions."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:32
msgid "Create the second keystore"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:34
msgid "Begin by creating an empty keystore on ``Bob``; the keystore is actually just an empty directory:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:64
msgid "Copy files"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:66
msgid "Next copy the keys and certificates for the ``talker`` program from ``Alice`` to ``Bob``. Since the keys are just text files, we can use ``scp`` to copy them."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:94
msgid "Note that in this case the entire keystore is shared across the different machines which may not be the desired behavior, as it may result in a security risk. Please refer to :doc:`Deployment-Guidelines` for more information in this regard."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:97
msgid "That will be very quick, since it's just copying some very small text files. Now, we're ready to run a multi-machine talker/listener demo!"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:102
msgid "Launch the nodes"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:104
msgid "Once the environment is set up, run the talker on ``Bob``:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:110
msgid "and launch the listener on ``Alice``:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:116
msgid "Alice will now be receiving encrypted messages from Bob."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/Security-on-Two.rst:118
msgid "With two machines successfully communicating using both encryption and authentication, you can use the same procedure to add more machines to your ROS graph."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:8
msgid "Understanding the security keystore"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:10
msgid "**Goal:** Explore files located in the ROS 2 security keystore."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:24
msgid "The ``sros2`` package can be used to create keys, certificates and policies necessary to enable ROS 2 security. However, the security configuration is extrememly flexible. A basic understanding of the ROS 2 Security Keystore will allow integration with an existing PKI (Public Key Infrastructure) and managment of sensitive key materials consistent with organizational policies."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:30
msgid "Security Artifact Locations"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:32
msgid "With communications security enabled in the prior tutorial, let's take a look at the files which were created when security was enabled. These are the files which make encryption possible."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:35
msgid "The ``sros2`` utilities (``ros2 security ...``) separate files into public, private and enclave key materials."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:37
msgid "ROS uses the directory defined by the environmental variable ``ROS_SECURITY_KEYSTORE`` as the keystore. For this tutorial, we use the directory ``~/sros2_demo/demo_keystore``."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:42
msgid "Public Key Materials"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:44
msgid "You will find three encryption certificates in the public directory at ``~/sros2_demo/demo_keys/public``; however, the identity and permissions certificates are actually just a link to the Certificate Authority (CA) certificate."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:46
msgid "In a public key infrastructure, the `Certificate Authority <https://en.wikipedia.org/wiki/Certificate_authority>`_ acts as a trust anchor: it validates the identities and permissions of participants. For ROS, that means all the nodes that participate in the ROS graph (which may extend to an entire fleet of individual robots). By placing the Certificate Authority's certificate (``ca.cert.pem``) in the proper location on the robot, all ROS nodes can establish mutual trust with other nodes using the same Certificate Authority."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:50
msgid "Although in our tutorials we create a Certificate Authority on-the-fly, in a production system this should be done according to a pre-defined security plan. Typically the Certificate Authority for a production system will be created off-line, and placed on the robot during initial setup. It may be unique for each robot, or shared across a fleet of robots all intended to trust each other."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:54
msgid "DDS (and ROS, by extension) supports separation of identity and permission trust chains, so each function has its own certificate authority. In most cases a ROS system security plan does not require a separation between these duties, so the security utilities generate a single Certificate Authority which is used for both identity and permissions."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:57
msgid "Use ``openssl`` to view this x509 certificate and display it as text:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:64
msgid "The output should look similar to the following::"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:101
msgid "Some things to note about this CA certificate:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:98
msgid "The certificate subject name ``sros2testCA`` is the default provided by the ``sros2`` utilities."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:99
msgid "This certificate is valid for ten years from time of creation"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:100
msgid "Like all certificates, this contains a public key used for public-private key encryption"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:101
msgid "As a Root Certificate Authority, this is a `self-signed certificate <https://en.wikipedia.org/wiki/Self-signed_certificate>`_; i.e., it is signed using its own private key."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:103
msgid "Since this is a public certificate, it can be freely copied as needed to establish trust throughout your ROS system."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:107
msgid "Private Key Materials"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:109
msgid "Private key materials can be found in the keystore directory ``~/sros2_demo/demo_keys/private``. Similar to the ``public`` directory, this contains one certificate authority key ``ca.key.pem`` and symbolic links to it to be used as both an Identity and a Permissions CA private key."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:114
msgid "Protect this private key and create a secure backup of it!"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:116
msgid "This is the private key associated with the public Certificate Authority which serves as the anchor for all security in your ROS system. You will use it to modify encryption policies for the ROS graph and to add new ROS participants. Depending upon your robot's security needs, the key can be protected with access permissions and locked down to another account, or it can be moved off the robot entirely and onto another system or device. If the file is lost, you will be unable to change access permissions and add new participants to the system. Similarly, any user or process with access to the file has the ability to modify system policies and participants."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:122
msgid "This file is only required for configuring the robot, but is not needed for the robot to run. It can safely be stored offline in another system or removable media."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:125
msgid "The ``sros2`` utilities use `elliptic curve cryptograpy <https://en.wikipedia.org/wiki/Elliptic-curve_cryptography>`_ rather than RSA for improved security and reduced key size. Use the following command to show details about this elliptic curve private key:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:134
msgid "Your output should look similar to the following::"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:151
msgid "In addition to the private key itself, note that the public key is listed, and it matches the public key listed in the Certificate Authority ``ca.cert.pem``."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:155
msgid "Domain Governance Policy"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:157
msgid "Find the domain governance policy in the enclave directory within the keystore, ``~/sros2_demo/demo_keys/enclaves``. The ``enclave`` directory contains XML governance policy document ``governance.xml``, as well as a copy of the document which has been signed by the Permissions CA as ``governance.p7s``."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:160
msgid "The ``governance.p7s`` file contains domain-wide settings such as how to handle unauthenticated participants, whether to encrypt discovery, and default rules for access to topics."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:162
msgid "Use the following command to validate the `S/MIME signature <https://en.wikipedia.org/wiki/S/MIME>`_ of the governance file:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:168
msgid "This command will print out the XML document, and the last line will be ``Verification successful`` to show that the document was properly signed by the Permissions CA."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:172
msgid "Security Enclaves"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:174
msgid "Secure processes (typically ROS nodes) run within a security enclave. In the simplest case, all the processes can be consolidated into the same enclave, and all processes will then use the same security policy. However, to apply different policies to different processes, the processes can use different security enclaves when starting. For more details about security enclaves, see the `design document <https://design.ros2.org/articles/ros2_security_enclaves.html>`_. The security enclave is specifed by using the ROS argument ``--enclave`` when running a node."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:180
msgid "**Each security enclave requires six files** in order to enable security. Each file **must** be named as defined below, and as outlined in the `DDS Security standard <https://www.omg.org/spec/DDS-SECURITY/1.1/About-DDS-SECURITY/>`_. In order to avoid having mulitple copies of the same files, the ``sros2`` utilities create links for each enclave to the single governance policy, the Identity CA and Permissions CA descibed above."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:184
msgid "See the following six files within the ``listener`` enclave. Three are specific to this enclave, while three are generic to this ROS system:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:187
msgid "``key.pem``, the private key used to encrypt and decrypt within this enclave"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:188
msgid "``cert.pem``, the public certificate for this enclave; this certificate has been signed by the Identity CA"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:189
msgid "``permissions.p7s``, the permissions for this enclave; this file has been signed with the Permissions CA"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:190
msgid "``governance.p7s``, a link to the signed security policy file for this domain"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:191
msgid "``identity_ca.cert.pem``, a link to the Identity CA for this domain"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:192
msgid "``permissions_ca.cert.pem``, a link to the Permissions CA for this domain"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:194
msgid "The private encryption key ``key.pem`` should be protected according to your security plan. This key encrypts, decrypts and validates communications within this specific enclave. Should the key be lost or stolen, revoke the key and create a new identity for this enclave."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:198
msgid "The file ``permissions.xml`` has also been created in this directory and can be used to recreate the signed permissions file. However, this file is not required to enable security since DDS uses the signed version of the file instead."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:203
msgid "Take the quiz!"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:205
msgid "See if you can answer these questions about the ROS security keystore. Begin with a new terminal session and enable security with the keystore created in the prior tutorial:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:216
msgid "Make a backup copy of ``permissions.p7s`` before beginning."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:222
msgid "Open ``permissions.p7s`` in a text editor. Make a negligible change to the XML content (e.g., add a space or a blank line) and save the file. Launch the listener node:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:229
msgid "What do you expect to happen?"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:231
msgid "Can you launch the talker node?"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:237
msgid "What is the difference between launching the listener and launching the talker?"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:241
msgid "The listener fails to launch and throws an error. When the ``permissions.p7s`` file was modified--however minor--the file's signature became invalid. A node will not launch with security enabled and enforced when the permissions file is invalid."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:245
msgid "The talker will start as expected. It uses the ``permissions.p7s`` file in a different enclave, and the file is still valid."
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:252
msgid "What command lets you check to see if the signature on the modified ``permissions.p7s`` file is valid?"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:256
msgid "Check that ``permissions.p7s`` has been properly signed by the Permissions CA using the ``openssl smime`` command:"
msgstr ""

#: ../../source/Tutorials/Advanced/Security/The-Keystore.rst:262
msgid "Restore your original, properly signed ``permissions.p7s`` file before proceeding to the next tutorial."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:8
msgid "Setting up a robot simulation (Gazebo)"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:10
msgid "**Goal:** Launch a Simulation with Gazebo and ROS 2"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:23
msgid "First of all you should install ROS 2 and Gazebo. You have two options:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:26
msgid "Install from deb packages. To check which versions are available from deb packages please check this `table <https://github.com/gazebosim/ros_ign>`__."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:27
msgid "Compile from sources:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:29
msgid ":doc:`ROS 2 install instructions <../../../../Installation>`"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:30
msgid "`Gazebo install instructions <https://gazebosim.org/docs>`__"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:36
msgid "1 Launch the simulation"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:38
msgid "In this demo you are going to simulate a simple diff drive robot in Gazebo. You are going to use one of the worlds defined in the Gazebo examples called `visualize_lidar.sdf <https://github.com/gazebosim/gz-sim/blob/main/examples/worlds/visualize_lidar.sdf>`__. To run this example you should execute the following command in a terminal:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:54
msgid "When the simulation is running you can check the topics provided by Gazebo with the ``ign`` command line tool:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:64 ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:94
msgid "Which should show:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:83
msgid "Since you have not launched an ROS 2 nodes yet, the output from ``ros2 topic list`` should be free of any robot topics:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:102
msgid "2 Configuring ROS 2"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:104
msgid "To be able to communicate our simulation with ROS 2 you need to use a package called ``ros_gz_bridge``. This package provides a network bridge which enables the exchange of messages between ROS 2 and Gazebo Transport. You can install this package by typing:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:116
msgid "At this point you are ready to launch a bridge from ROS to Gazebo. In particular you are going to create a bridge for the topic ``/model/vehicle_blue/cmd_vel``:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:128
msgid "For more details about the ``ros_gz_bridge`` please check this `README <https://github.com/gazebosim/ros_gz/tree/ros2/ros_gz_bridge>`__ ."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:130
msgid "Once the bridge is running the robot is able to follow your motor commands. There are two options:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:133
msgid "Send a command to the topic using ``ros2 topic pub``"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:143
msgid "``teleop_twist_keyboard`` package. This node takes keypresses from the keyboard and publishes them as Twist messages. You can install it typing:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:153
msgid "The default topic where ``teleop_twist_keyboard`` is publishing Twist messages is ``/cmd_vel`` but you can remap this topic to make use of the topic used in the bridge:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:165
msgid "Which will show:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:197
msgid "3 Visualizing lidar data in ROS 2"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:199
msgid "The diff drive robot has a lidar. To send the data generated by Gazebo to ROS 2, you need to launch another bridge. In the case the data from the lidar is provided in the Gazebo Transport topic ``/lidar2``, which you are going to remap in the bridge. This topic will be available under the topic ``/lidar_scan``:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:213
msgid "To visualize the data from the lidar in ROS 2 you can use Rviz2:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:224
msgid "Then you need to configure the ``fixed frame``:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:228
msgid "And then click in the button \"Add\" to include a display to visualize the lidar:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:232
msgid "Now you should see the data from the lidar in Rviz2:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst:239
msgid "In this tutorial, you launched a robot simulation with Gazebo, launched bridges with actuators and sensors, visualized data from a sensor, and moved a diff drive robot."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Simulation-Gazebo.rst:2
msgid "Gazebo"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Gazebo/Simulation-Gazebo.rst:4
msgid "This set of tutorials will teach you how to configure the Gazebo simulator with ROS 2."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Simulation-Main.rst:8
msgid "Simulators"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Simulation-Main.rst:10
msgid "Several advanced robot simulators can be used with ROS 2, such as Gazebo, Webots, etc. Unlike turtlesim, they provide fairly realistic results relying on physics-based models for robots, sensors, actuators and objects. Hence, what you observe in simulation is very close to what you will get when transferring your ROS 2 controllers to a real robot."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Simulation-Main.rst:14
msgid "This set of tutorials will teach you how to configure different simulators with ROS 2."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:2
msgid "Installation (macOS)"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:4
msgid "**Goal:** Install the ``webots_ros2`` package and run simulation examples on macOS."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:17
msgid "The ``webots_ros2`` package provides an interface between ROS 2 and Webots. It includes several sub-packages, including ``webots_ros2_driver``, which allows you to start Webots and communicate with it. Other sub-packages are mainly examples that show multiple possible implementations using the interface. In this tutorial, you are going to install the package and learn how to run one of these examples."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:25 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:26 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:25
msgid "It is recommended to understand basic ROS principles covered in the beginner :doc:`../../../../Tutorials`. In particular, :doc:`../../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace` and :doc:`../../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package` are useful prerequisites."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:28
msgid "It is necessary to install Webots natively on the mac in order to use the ``webots_ros2`` package in the virtual machine as explained below. You can follow the `installation procedure <https://cyberbotics.com/doc/guide/installation-procedure>`_ or `build it from sources <https://github.com/cyberbotics/webots/wiki/macOS-installation/>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:34
msgid "On macOS, a solution based on UTM virtual machines provides an improved user experience with ROS 2 compared to native macOS installation, as it runs ROS in a Linux environment. However, Webots should be installed natively on macOS and it will be able to communicate with the ROS nodes running in the Virtual Machine (VM). This solution allows for native 3D hardware acceleration for Webots. The VM runs all the ROS part (including RViz) and connects to the host machine through TCP to start Webots. A shared folder allows the script to transfer the world and other resource files from the VM to macOS where Webots is running."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:40
msgid "The following steps explain how to create the VM image with the installation of the ``webots_ros2`` released package. It is also possible to install it from sources. In the :ref:`Preconfigured Images` section, you can find already configured images for every release of Webots (starting from R2023a) to download."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:45
msgid "1 Create the VM image"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:47
msgid "Install UTM on your macOS machine. The link can be found on the `official UTM website <https://mac.getutm.app/>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:50
msgid "Download the .iso image of `Ubuntu 22.04 <https://cdimage.ubuntu.com/jammy/daily-live/current/>`_ for Humble and Rolling or `Ubuntu 20.04 <https://cdimage.ubuntu.com/focal/daily-live/pending/>`_ for Foxy. Be sure to download the image corresponding to your CPU architecture."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:53
msgid "In the UTM software:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:55
msgid "Create a new image and choose ``Virtualize`` option."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:56
msgid "Select the ISO image you have downloaded in the ``Boot ISO Image`` field."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:57
msgid "Leave all hardware settings at default (including hardware acceleration disabled)."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:58
msgid "In the ``Shared Directory`` window, select a folder that will be used by ``webots_ros2`` to transfer all the Webots assets to the host. In this example, the selected folder is ``/Users/username/shared``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:60
msgid "Leave all the remaining parameters as default."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:61
msgid "Start the VM. Note that you can select another shared folder each time you start the VM."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:63
msgid "During the first launch of the VM, install Ubuntu and choose a username for your account. In this example, the username is ``ubuntu``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:64
msgid "Once Ubuntu is installed, close the VM, remove the iso image from the CD/DVD field and restart the VM."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:67
msgid "2 Configure the VM"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:68
msgid "In this section, ROS 2 is installed in the VM and the shared folder is configured. The following instructions and commands are all run inside the VM."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:71
msgid "Open a terminal in the started VM and install the ROS 2 distribution you need by following the instructions in :doc:`../../../../Installation/Ubuntu-Install-Debians`:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:72
msgid "Create a folder in the VM to use as a shared folder. In this example, the shared folder in the VM is ``/home/ubuntu/shared``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:79
msgid "To mount this folder to the host, execute the following command. Don't forget to modify the path to the shared folder, if it is different in your case."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:86
msgid "To automatically mount this folder to the host when starting the VM, add the following line to ``/etc/fstab``. Don't forget to modify the path to the shared folder, if it is different in your case."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:93
msgid "The environment variable ``WEBOTS_SHARED_FOLDER`` must always be set in order for the package to work properly in the VM. This variable specifies the location of the shared folder that is used to exchange data between the host machine and the virtual machine (VM) to the ``webots_ros2`` package. The value to use for this variable should be in the format of ``<host shared folder>:<VM shared folder>``, where ``<host shared folder>`` is the path to the shared folder on the host machine and ``<VM shared folder>`` is the path to the same shared folder on the VM."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:97
msgid "In this example:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:103
msgid "You can add this command line to the ``~/.bashrc`` file to automatically set this environment variable when starting a new terminal."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:106 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:59
msgid "3 Install ``webots_ros2``"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:108
msgid "You can either install ``webots_ros2`` from the official released package, or install it from the latest up-to-date sources from `Github <https://github.com/cyberbotics/webots_ros2>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:112 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:54 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:66
msgid "Install ``webots_ros2`` distributed package"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:114
msgid "Run the following command in the VM terminal."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:120 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:62 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:74
msgid "Install ``webots_ros2`` from sources"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:122
msgid "Install git."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:128 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:64 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:76
msgid "Create a ROS 2 workspace with its ``src`` directory."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:134 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:70 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:82
msgid "Source the ROS 2 environment."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:140 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:76 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:88
msgid "Retrieve the sources from Github."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:147 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:83 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:95
msgid "Install the package dependencies."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:155 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:91 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:103
msgid "Build the package using ``colcon``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:161 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:97 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:109
msgid "Source this workspace."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:168 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:117
msgid "4 Launch the ``webots_ros2_universal_robot`` example"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:170
msgid "As mentioned in previous sections, the package uses the shared folder to communicate with Webots from the VM to the host. In order for Webots to be started on the host from the VM's ROS package, a local TCP simulation server must be run."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:173
msgid "The server can be downloaded here: `local_simulation_server.py <https://github.com/cyberbotics/webots-server/blob/main/local_simulation_server.py>`_. Specify the Webots installation folder in ``WEBOTS_HOME`` environment variable (e.g. ``/Applications/Webots.app``) and run the server using the following commands in a new terminal on the host (not in the VM):"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:181
msgid "In the VM, open a terminal and execute the following commands to start a package:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:183 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:108 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:123
msgid "First source the ROS 2 environment, if not done already."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:189 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:120 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:136
msgid "If installed from sources, source your ROS 2 workspace, if not done already."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:196
msgid "If not already set in ``~/.bashrc``, set ``WEBOTS_SHARED_FOLDER`` (see previous sections for details). Be sure to change the paths according to the location of your respective directories."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:203 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:127 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:143
msgid "Use the ROS 2 launch command to start demo packages (e.g. ``webots_ros2_universal_robot``)."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:209
msgid "If Webots is closed or the ROS 2 process is interrupted, the local server will automatically wait for a new package launch and the shared folder will be cleaned for the next run."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:214
msgid "Pre-configured Images"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:216
msgid "If you don't want to setup the VM from scratch, the following links provide you with pre-configured UTM images for each version of Webots. The ``webots_ros2`` version is installed from the official repository (not from sources) and is typically the first one that is compatible with the corresponding Webots version. You are welcome to download an image and upgrade the package, or install it from sources if necessary."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:220
msgid "`Version 2023.0.2 for Webots R2023a <https://cyberbotics.com/files/ros2/webots_ros2_2023_0_2.utm.zip>`_ [6.6 GB]"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:221
msgid "`Version 2023.1.1 for Webots R2023b <https://cyberbotics.com/files/ros2/webots_ros2_2023_1_1.utm.zip>`_ [8.0 GB]"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:223
msgid "When adding the downloaded image to the UTM software, you should also choose the path to the host shared folder before starting the VM in the drop-down menu (e.g. ``/Users/username/shared``). Once the VM is started, the ``WEBOTS_SHARED_FOLDER`` environment variable must always be set for the package to work properly in the virtual machine (VM). This variable specifies to the ``webots_ros2`` package the location of the shared folder that is used to exchange data between the host machine and the VM. The value for this variable should be in the format of ``<host shared folder>:<VM shared folder>``, where ``<host shared folder>`` is the path to the shared folder on the host machine and ``<VM shared folder>`` is the path to the same shared folder on the VM."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst:228
msgid "In the pre-configured images, ``WEBOTS_SHARED_FOLDER`` is already set in ``~/.bashrc``. You will need to update it to use the correct path for the host folder:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:2
msgid "Installation (Ubuntu)"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:4
msgid "**Goal:** Install the ``webots_ros2`` package and run simulation examples on Ubuntu."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:17
msgid "The ``webots_ros2`` package provides an interface between ROS 2 and Webots. It includes several sub-packages, including ``webots_ros2_driver``, which allows you to start Webots and communicate with it. This interface is used in most of the following tutorials, so it is required to install it beforehand. Other sub-packages are mainly examples that show multiple possible implementations using the interface. In this tutorial, you are going to install the package and learn how to run one of these examples."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:29
msgid "The Webots software should be installed in order to use the ``webots_ros2`` interface. You can follow the `installation procedure <https://cyberbotics.com/doc/guide/installation-procedure>`_ or `build it from sources <https://github.com/cyberbotics/webots/wiki/Linux-installation/>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:32
msgid "Alternatively, you can also let ``webots_ros2`` download and install Webots automatically. This option appears when you launch an example of the package and no Webots installation is found."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:36 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:35
msgid "Multiple Installations of Webots"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:38
msgid "If you have installed different versions of Webots on your computer, ``webots_ros2`` will look for Webots at the following locations (in this order):"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:40 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:39
msgid "If the ``ROS2_WEBOTS_HOME`` environment variable is set, ROS 2 will use the Webots in this folder, regardless of its version."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:41 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:40
msgid "If the ``WEBOTS_HOME`` environment variable is set, ROS 2 will use the Webots in this folder, regardless of its version."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:42
msgid "If none of these variables is set, ``webots_ros2`` will look for Webots in the default installation paths for a compatible version: ``/usr/local/webots`` and ``/snap/webots/current/usr/share/webots``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:43
msgid "If Webots couldn't be found, ``webots_ros2`` will show a window offering the automatic installation of the latest compatible version of Webots."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:49
msgid "1 Install ``webots_ros2``"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:50
msgid "You can either install the official released package, or install it from the latest up-to-date sources from `Github <https://github.com/cyberbotics/webots_ros2>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:56 ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:68
msgid "Run the following command in a terminal."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:104
msgid "2 Launch the ``webots_ros2_universal_robot`` example"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:106
msgid "The following instructions explain how to start a provided example."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst:114
msgid "Setting the ``WEBOTS_HOME`` environment variable allows you to start a specific Webots installation."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:2
msgid "Installation (Windows)"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:4
msgid "**Goal:** Install the ``webots_ros2`` package and run simulation examples on Windows."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:17
msgid "The ``webots_ros2`` package provides an interface between ROS 2 and Webots. It includes several sub-packages, including ``webots_ros2_driver``, which allows ROS nodes to communicate with Webots. Other sub-packages are mainly examples that show multiple possible implementations using the interface. In this tutorial, you are going to install the package and learn how to run one of these examples."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:28
msgid "Webots is a prerequisite to use the ``webots_ros2`` package. You can follow the `installation procedure <https://cyberbotics.com/doc/guide/installation-procedure>`_ or `build it from sources <https://github.com/cyberbotics/webots/wiki/Windows-installation/>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:31
msgid "Alternatively, you can also let ``webots_ros2`` download Webots automatically. This option appears when you launch an example of the package and no Webots installation is found."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:37
msgid "If you have more than one installation of Webots, ROS 2 will look for Webots at the following locations (in this order):"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:41
msgid "If none of the previous points is set/installed ROS 2 will look for Webots in the default installation paths for a compatible version: ``C:\\Program Files\\Webots``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:42
msgid "If Webots couldn't be found, ``webots_ros2`` will show a window and offer automatic Webots installation of the last compatible version."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:48
msgid "1 Install WSL2"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:50
msgid "On Windows, WSL (Windows Subsystem for Linux) improves the user experience with ROS 2 compared to native Windows installation, as it runs on a Linux platform. Install WSL with an Ubuntu version which is compatible with your ROS distribution and upgrade to WSL2 following the `official Microsoft tutorial <https://learn.microsoft.com/en-us/windows/wsl/install>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:54
msgid "2 Install ROS 2 in WSL"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:56
msgid "Install ROS 2 inside Ubuntu WSL, following :doc:`../../../../Installation/Ubuntu-Install-Debians`."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:60
msgid "You can then either install ``webots_ros2`` from the official released package, or install it from the latest up-to-date sources from `Github <https://github.com/cyberbotics/webots_ros2>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:62
msgid "The following commands must be run inside the WSL environment."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:119
msgid "WSL doesn't support hardware acceleration (yet). Therefore, Webots should be started on Windows, while the ROS part is running inside WSL. To do so, the following commands must be run inside the WSL environment."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:129
msgid "Setting the ``WEBOTS_HOME`` environment variable allows you to start a specific Webots installation (e.g. ``C:\\Program Files\\Webots``). Use the mount point \"/mnt\" to refer to a path on native Windows."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:151
msgid "5 RViz troubleshooting"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:153
msgid "With recent versions of WSL2, RViz should work out of the box."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:155
msgid "You can check if it works correctly by running any example that uses RViz, for example:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:162
msgid "The Tiago robot can be controlled using:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:168
msgid "With older WSL versions, RViz2 may not work directly, as no display is available. To use RViz, you can either upgrade WSL or enable X11 forwarding."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:171
msgid "Upgrade WSL"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:173
msgid "In a Windows shell:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:179
msgid "Enable X11 forwarding"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:181
msgid "For older versions of WSL, the following steps can be followed:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:183
msgid "Install `VcXsrv <https://sourceforge.net/projects/vcxsrv/>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:184
msgid "Launch VcXsrv. You can leave most of the parameters default, except the ``Extra settings`` page, where you must set ``Clipboard``, ``Primary Selection`` and ``Disable access control`` and unset ``Native opengl``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:185
msgid "You can save the configuration for future launches."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:186
msgid "Click on ``Finish``, you will see that the X11 server is running in the icon tray."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:187
msgid "In your WSL environment, export the ``DISPLAY`` variable."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst:193
msgid "You can add this to your ``.bashrc``, so that it is set for every future WSL environment."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:2
msgid "Setting up a robot simulation (Advanced)"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:4
msgid "**Goal:** Extend a robot simulation with an obstacle avoider node."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:17
msgid "In this tutorial you will extend the package created in the first part of the tutorial: :doc:`./Setting-Up-Simulation-Webots-Basic`. The aim is to implement a ROS 2 node that avoids obstacles using the robot's distance sensors. This tutorial focuses on using robot devices with the ``webots_ros2_driver`` interface."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:24
msgid "This is a continuation of the first part of the tutorial: :doc:`./Setting-Up-Simulation-Webots-Basic`. It is mandatory to start with the first part to set up the custom packages and necessary files."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:27 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:52
msgid "This tutorial is compatible with version 2023.1.0 of ``webots_ros2`` and Webots R2023b, as well as upcoming versions."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:33
msgid "1 Updating ``my_robot.urdf``"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:35
msgid "As mentioned in :doc:`./Setting-Up-Simulation-Webots-Basic`, ``webots_ros2_driver`` contains plugins to interface most of Webots devices with ROS 2 directly. These plugins can be loaded using the ``<device>`` tag in the URDF file of the robot. The ``reference`` attribute should match the Webots device ``name`` parameter. The list of all existing interfaces and the corresponding parameters can be found `on the devices reference page <https://github.com/cyberbotics/webots_ros2/wiki/References-Devices>`_. For available devices that are not configured in the URDF file, the interface will be automatically created and default values will be used for ROS parameters (e.g. ``update rate``, ``topic name``, and ``frame name``)."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:41
msgid "In ``my_robot.urdf`` replace the whole contents with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:45 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:63 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:135 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:66 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:179 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:288 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:315 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:403 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:47 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:69 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:166 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:184 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:219 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:361 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:383 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:428 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:481 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:294 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:378 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:456 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:481 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:509 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:571 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:662 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:756 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:782 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:810 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:35 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:60 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:84 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:113 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:136 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:61 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:162 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:272 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:90 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:141
msgid "Python"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:50 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:94 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:146 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:104 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:221 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:296 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:323 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:413 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:250 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:340 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:450 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:467 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:499 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:538 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:609 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:750 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:767 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:800 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:25 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:50 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:74 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:100 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:127 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:72 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:126
msgid "C++"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:56
msgid "In addition to your custom plugin, the ``webots_ros2_driver`` will parse the ``<device>`` tags referring to the **DistanceSensor** nodes and use the standard parameters in the ``<ros>`` tags to enable the sensors and name their topics."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:59
msgid "2 Creating a ROS node to avoid obstacles"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:65
msgid "The robot will use a standard ROS node to detect the wall and send motor commands to avoid it. In the ``my_package/my_package/`` folder, create a file named ``obstacle_avoider.py`` with this code:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:71 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:107
msgid "This node will create a publisher for the command and subscribe to the sensors topics here:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:78 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:113
msgid "When a measurement is received from the left sensor it will be copied to a member field:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:85 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:119
msgid "Finally, a message will be sent to the ``/cmd_vel`` topic when a measurement from the right sensor is received. The ``command_message`` will register at least a forward speed in ``linear.x`` in order to make the robot move when no obstacle is detected. If any of the two sensors detect an obstacle, ``command_message`` will also register a rotational speed in ``angular.z`` in order to make the robot turn right."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:96
msgid "The robot will use a standard ROS node to detect the wall and send motor commands to avoid it. In the ``my_package/include/my_package`` folder, create a header file named ``ObstacleAvoider.hpp`` with this code:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:102
msgid "In the ``my_package/src`` folder, create a source file named ``ObstacleAvoider.cpp`` with this code:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:129
msgid "3 Updating additional files"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:131
msgid "You have to modify these two other files to launch your new node."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:137
msgid "Edit ``setup.py`` and replace ``'console_scripts'`` with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:144
msgid "This will add an entry point for the ``obstacle_avoider`` node."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:148
msgid "Edit ``CMakeLists.txt`` and add the compilation and installation of the ``obstacle_avoider``:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:154
msgid "Go to the file ``robot_launch.py`` and replace ``def generate_launch_description():`` with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:160
msgid "This will create an ``obstacle_avoider`` node that will be included in the ``LaunchDescription``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:163
msgid "4 Test the obstacle avoidance code"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:165
msgid "Launch the simulation from a terminal in your ROS 2 workspace:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:171 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:443
msgid "From a terminal in your ROS 2 workspace run:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:181 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:456
msgid "From a terminal in your WSL ROS 2 workspace run:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:190 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:465
msgid "Be sure to use the ``/mnt`` prefix in front of your path to the Webots installation folder to access the Windows file system from WSL."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:194
msgid "In a terminal of the host machine (not in the VM), if not done already, specify the Webots installation folder (e.g. ``/Applications/Webots.app``) and start the server using the following commands:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:201
msgid "Note that the server keeps running once the ROS 2 nodes are ended. You don't need to restart it every time you want to launch a new simulation. From a terminal in the Linux VM in your ROS 2 workspace, build and launch your custom package with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:212
msgid "Your robot should go forward and before hitting the wall it should turn clockwise. You can press ``Ctrl+F10`` in Webots or go to the ``View`` menu, ``Optional Rendering`` and ``Show DistanceSensor Rays`` to display the range of the distance sensors of the robot."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:220
msgid "In this tutorial, you extended the basic simulation with a obstacle avoider ROS 2 node that publishes velocity commands based on the distance sensor values of the robot."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:223 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:520 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:262 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:270 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:113 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:259 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:359 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:194 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:248 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:270 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:330 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:132 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:396 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:531 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:830 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:202 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:494 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:435 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:436 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:542 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:416 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:523 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:344 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:190 ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:118
msgid "Next steps"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:225
msgid "You might want to improve the plugin or create new nodes to change the behavior of the robot. You can also implement a reset handler to automatically restart your ROS nodes when the simulation is reset from the Webots interface:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst:228
msgid ":doc:`./Simulation-Reset-Handler`."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:7
msgid "Setting up a robot simulation (Basic)"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:9
msgid "**Goal:** Setup a robot simulation and control it from ROS 2."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:13
msgid "**Time:** 30 minutes"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:22
msgid "In this tutorial, you are going to use the Webots robot simulator to set-up and run a very simple ROS 2 simulation scenario."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:24
msgid "The ``webots_ros2`` package provides an interface between ROS 2 and Webots. It includes several sub-packages, but in this tutorial, you are going to use only the ``webots_ros2_driver`` sub-package to implement a Python or C++ plugin controlling a simulated robot. Some other sub-packages contain demos with different robots such as the TurtleBot3. They are documented in the `Webots ROS 2 examples <https://github.com/cyberbotics/webots_ros2/wiki/Examples>`_ page."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:32
msgid "It is recommended to understand basic ROS principles covered in the beginner :doc:`../../../../Tutorials`. In particular, :doc:`../../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim`, :doc:`../../../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics`, :doc:`../../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace`, :doc:`../../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package` and :doc:`../../../Intermediate/Launch/Creating-Launch-Files` are useful prerequisites."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:39
msgid "The Linux and ROS commands of this tutorial can be run in a standard Linux terminal. The following page :doc:`./Installation-Ubuntu` explains how to install the ``webots_ros2`` package on Linux."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:44
msgid "The Linux and ROS commands of this tutorial must be run in a WSL (Windows Subsystem for Linux) environment. The following page :doc:`./Installation-Windows` explains how to install the ``webots_ros2`` package on Windows."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:49
msgid "The Linux and ROS commands of this tutorial must be run in a pre-configured Linux Virtual Machine (VM). The following page :doc:`./Installation-MacOS` explains how to install the ``webots_ros2`` package on macOS."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:58
msgid "1 Create the package structure"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:60
msgid "Let's organize the code in a custom ROS 2 package. Create a new package named ``my_package`` from the ``src`` folder of your ROS 2 workspace. Change the current directory of your terminal to ``ros2_ws/src`` and run:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:72
msgid "The ``--node-name my_robot_driver`` option will create a ``my_robot_driver.py`` template Python plugin in the ``my_package`` subfolder that you will modify later. The ``--dependencies rclpy geometry_msgs webots_ros2_driver`` option specifies the packages needed by the ``my_robot_driver.py`` plugin in the ``package.xml`` file."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:75
msgid "Let's add a ``launch`` and a ``worlds`` folder inside the ``my_package`` folder."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:83 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:130
msgid "You should end up with the following folder structure:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:110
msgid "The ``--node-name MyRobotDriver`` option will create a ``MyRobotDriver.cpp`` template C++ plugin in the ``my_package/src`` subfolder that you will modify later. The ``--dependencies rclcpp geometry_msgs webots_ros2_driver pluginlib`` option specifies the packages needed by the ``MyRobotDriver`` plugin in the ``package.xml`` file."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:114
msgid "Let's add a ``launch``, a ``worlds`` and a ``resource`` folder inside the ``my_package`` folder."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:123
msgid "Two additional files must be created: the header file for ``MyRobotDriver`` and the ``my_robot_driver.xml`` pluginlib description file."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:149
msgid "2 Setup the simulation world"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:151
msgid "You will need a world file containing a robot to launch your simulation. :download:`Download this world file <Code/my_world.wbt>` and move it inside ``my_package/worlds/``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:154
msgid "This is actually a fairly simple text file you can visualize in a text editor. A simple robot is already included in this ``my_world.wbt`` world file."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:159
msgid "In case you want to learn how to create your own robot model in Webots, you can check this `tutorial <https://cyberbotics.com/doc/guide/tutorial-6-4-wheels-robot>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:162
msgid "3 Edit the ``my_robot_driver`` plugin"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:164
msgid "The ``webots_ros2_driver`` sub-package automatically creates a ROS 2 interface for most sensors. More details on existing device interfaces and how to configure them is given in the second part of the tutorial: :doc:`./Setting-Up-Simulation-Webots-Advanced`. In this task, you will extend this interface by creating your own custom plugin. This custom plugin is a ROS node equivalent to a robot controller. You can use it to access the `Webots robot API  <https://cyberbotics.com/doc/reference/robot?tab-language=python>`_ and create your own topics and services to control your robot."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:172
msgid "The purpose of this tutorial is to show a basic example with a minimum number of dependencies. However, you could avoid the use of this plugin by using another ``webots_ros2`` sub-package named ``webots_ros2_control``, introducing a new dependency. This other sub-package creates an interface with the ``ros2_control`` package that facilitates the control of a differential wheeled robot."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:181
msgid "Open ``my_package/my_package/my_robot_driver.py`` in your favorite editor and replace its contents with the following:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:186
msgid "As you can see, the ``MyRobotDriver`` class implements three methods."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:188
msgid "The first method, named ``init(self, ...)``, is actually the ROS node counterpart of the Python ``__init__(self, ...)`` constructor. The ``init`` method always takes two arguments:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:191
msgid "The ``webots_node`` argument contains a reference on the Webots instance."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:192
msgid "The ``properties`` argument is a dictionary created from the XML tags given in the URDF files (:ref:`4 Create the my_robot.urdf file`) and allows you to pass parameters to the controller."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:194
msgid "The robot instance from the simulation ``self.__robot`` can be used to access the `Webots robot API <https://cyberbotics.com/doc/reference/robot?tab-language=python>`_. Then, it gets the two motor instances and initializes them with a target position and a target velocity. Finally a ROS node is created and a callback method is registered for a ROS topic named ``/cmd_vel`` that will handle ``Twist`` messages."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:203
msgid "Then comes the implementation of the ``__cmd_vel_callback(self, twist)`` callback private method that will be called for each ``Twist`` message received on the ``/cmd_vel`` topic and will save it in the ``self.__target_twist`` member variable."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:210
msgid "Finally, the ``step(self)`` method is called at every time step of the simulation. The call to ``rclpy.spin_once()`` is needed to keep the ROS node running smoothly. At each time step, the method will retrieve the desired ``forward_speed`` and ``angular_speed`` from ``self.__target_twist``. As the motors are controlled with angular velocities, the method will then convert the ``forward_speed`` and ``angular_speed`` into individual commands for each wheel. This conversion depends on the structure of the robot, more specifically on the radius of the wheel and the distance between them."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:223
msgid "Open ``my_package/include/my_package/MyRobotDriver.hpp`` in your favorite editor and replace its contents with the following:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:228
msgid "The class ``MyRobotDriver`` is defined, which inherits from the ``webots_ros2_driver::PluginInterface`` class. The plugin has to override ``step(...)`` and ``init(...)`` functions. More details are given in the ``MyRobotDriver.cpp`` file. Several helper methods, callbacks and member variables that will be used internally by the plugin are declared privately."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:233
msgid "Then, open ``my_package/src/MyRobotDriver.cpp`` in your favorite editor and replace its contents with the following:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:238
msgid "The ``MyRobotDriver::init`` method is executed once the plugin is loaded by the ``webots_ros2_driver`` package. It takes two arguments:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:241
msgid "A pointer to the ``WebotsNode`` defined by ``webots_ros2_driver``, which allows to access the ROS 2 node functions."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:242
msgid "The ``parameters`` argument is an unordered map of strings, created from the XML tags given in the URDF files (:ref:`4 Create the my_robot.urdf file`) and allows to pass parameters to the controller. It is not used in this example."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:244
msgid "It initializes the plugin by setting up the robot motors, setting their positions and velocities, and subscribing to the ``/cmd_vel`` topic."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:250
msgid "Then comes the implementation of the ``cmdVelCallback()`` callback function that will be called for each Twist message received on the ``/cmd_vel`` topic and will save it in the ``cmd_vel_msg`` member variable."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:256
msgid "The ``step()`` method is called at every time step of the simulation. At each time step, the method will retrieve the desired ``forward_speed`` and ``angular_speed`` from ``cmd_vel_msg``. As the motors are controlled with angular velocities, the method will then convert the ``forward_speed`` and ``angular_speed`` into individual commands for each wheel. This conversion depends on the structure of the robot, more specifically on the radius of the wheel and the distance between them."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:265
msgid "The final lines of the file define the end of the ``my_robot_driver`` namespace and include a macro to export the ``MyRobotDriver`` class as a plugin using the ``PLUGINLIB_EXPORT_CLASS`` macro. This allows the plugin to be loaded by the Webots ROS2 driver at runtime."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:274
msgid "While the plugin is implemented in C++, the C API must be used to interact with the Webots controller library."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:279
msgid "4 Create the ``my_robot.urdf`` file"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:281
msgid "You now have to create a URDF file to declare the ``MyRobotDriver`` plugin. This will allow the ``webots_ros2_driver`` ROS node to launch the plugin and connect it to the target robot."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:284
msgid "In the ``my_package/resource`` folder create a text file named ``my_robot.urdf`` with this content:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:293
msgid "The ``type`` attribute specifies the path to the class given by the hierarchical structure of files. ``webots_ros2_driver`` is responsible for loading the class based on the specified package and modules."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:301
msgid "The ``type`` attribute specifies the namespace and class name to load. ``pluginlib`` is responsible for loading the class based on the specified information."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:306
msgid "This simple URDF file doesn't contain any link or joint information about the robot as it is not needed in this tutorial. However, URDF files usually contain much more information as explained in the :doc:`../../../Intermediate/URDF/URDF-Main` tutorial."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:311
msgid "Here the plugin does not take any input parameter, but this can be achieved with a tag containing the parameter name."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:332
msgid "This is namely used to pass parameters to existing Webots device plugins (see :doc:`./Setting-Up-Simulation-Webots-Advanced`)."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:335
msgid "5 Create the launch file"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:337
msgid "Let's create the launch file to easily launch the simulation and the ROS controller with a single command. In the ``my_package/launch`` folder create a new text file named ``robot_launch.py`` with this code:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:343
msgid "The ``WebotsLauncher`` object is a custom action that allows you to start a Webots simulation instance. You have to specify in the constructor which world file the simulator will open."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:351
msgid "Then, the ROS node interacting with the simulated robot is created. This node, named ``WebotsController``, is located in the ``webots_ros2_driver`` package."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:358
msgid "The node will be able to communicate with the simulated robot by using a custom protocol based on IPC and shared memory."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:362
msgid "The node (in WSL) will be able to communicate with the simulated robot (in Webots on native Windows) through a TCP connection."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:366
msgid "The node (in the docker container) will be able to communicate with the simulated robot (in Webots on native macOS) through a TCP connection."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:369
msgid "In your case, you need to run a single instance of this node, because you have a single robot in the simulation. But if you had more robots in the simulation, you would have to run one instance of this node per robot. The ``robot_name`` parameter is used to define the name of the robot the driver should connect to. The ``robot_description`` parameter holds the path to the URDF file which refers to the ``MyRobotDriver`` plugin. You can see the ``WebotsController`` node as the interface that connects your controller plugin to the target robot."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:380
msgid "After that, the two nodes are set to be launched in the ``LaunchDescription`` constructor:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:387
msgid "Finally, an optional part is added in order to shutdown all the nodes once Webots terminates (e.g., when it gets closed from the graphical user interface)."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:396
msgid "More details on ``WebotsController`` and ``WebotsLauncher`` arguments can be found `on the nodes reference page <https://github.com/cyberbotics/webots_ros2/wiki/References-Nodes>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:399
msgid "6 Edit additional files"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:405
msgid "Before you can start the launch file, you have to modify the ``setup.py`` file to include the extra files you added. Open ``my_package/setup.py`` and replace its contents with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:411
msgid "This sets-up the package and adds in the ``data_files`` variable the newly added files: ``my_world.wbt``, ``my_robot.urdf`` and ``robot_launch.py``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:415
msgid "Before you can start the launch file, you have to modify ``CMakeLists.txt`` and ``my_robot_driver.xml`` files:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:417
msgid "``CMakeLists.txt`` defines the compilation rules of your plugin."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:418
msgid "``my_robot_driver.xml`` is necessary for the pluginlib to find your Webots ROS 2 plugin."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:420
msgid "Open ``my_package/my_robot_driver.xml`` and replace its contents with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:425
msgid "Open ``my_package/CMakeLists.txt`` and replace its contents with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:430
msgid "The CMakeLists.txt exports the plugin configuration file with the ``pluginlib_export_plugin_description_file()``, defines a shared library of the C++ plugin ``src/MyRobotDriver.cpp``, and sets the include and library dependencies using ``ament_target_dependencies()``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:432
msgid "The file then installs the library, the directories ``launch``, ``resource``, and ``worlds`` to the ``share/my_package`` directory. Finally, it exports the include directories and libraries using ``ament_export_include_directories()`` and ``ament_export_libraries()``, respectively, and declares the package using ``ament_package()``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:437
msgid "7 Test the code"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:451 ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:467
msgid "This will launch the simulation. Webots will be automatically installed on the first run in case it was not already installed."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:472
msgid "On macOS, a local server must be started on the host to start Webots from the VM. The local server can be downloaded `on the webots-server repository <https://github.com/cyberbotics/webots-server/blob/main/local_simulation_server.py>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:475
msgid "In a terminal of the host machine (not in the VM), specify the Webots installation folder (e.g. ``/Applications/Webots.app``) and start the server using the following commands:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:482
msgid "From a terminal in the Linux VM in your ROS 2 workspace, build and launch your custom package with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:493
msgid "If you want to install Webots manually, you can download it `here <https://github.com/cyberbotics/webots/releases/latest>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:496
msgid "Then, open a second terminal and send a command with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:502
msgid "The robot is now moving forward."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:506
msgid "At this point, the robot is able to blindly follow your motor commands. But it will eventually bump into the wall as you order it to move forwards."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:511
msgid "Close the Webots window, this should also shutdown your ROS nodes started from the launcher. Close also the topic command with ``Ctrl+C`` in the second terminal."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:517
msgid "In this tutorial, you set-up a realistic robot simulation with Webots and implemented a custom plugin to control the motors of the robot."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:522
msgid "To improve the simulation, the robot's sensors can be used to detect obstacles and avoid them. The second part of the tutorial shows how to implement such behaviour:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:525
msgid ":doc:`./Setting-Up-Simulation-Webots-Advanced`."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:2
msgid "Setting up a Reset Handler"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:4
msgid "**Goal:** Extend a robot simulation with a reset handler to restart nodes when the reset button of Webots is pressed."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:17
msgid "In this tutorial, you will learn how to implement a reset handler in a robot simulation using Webots. The Webots reset button reverts the world to the initial state and restarts controllers. It is convenient as it quickly resets the simulation, but in the context of ROS 2, robot controllers are not started again making the simulation stop. The reset handler allows you to restart specific nodes or perform additional actions when the reset button in Webots is pressed. This can be useful for scenarios where you need to reset the state of your simulation or restart specific components without completely restarting the complete ROS system."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:26 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:24
msgid "Before proceeding with this tutorial, make sure you have completed the following:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:28 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:26
msgid "Understanding of ROS 2 nodes and topics covered in the beginner :doc:`../../../../Tutorials`."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:29 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:27
msgid "Knowledge of Webots and ROS 2 and its interface package."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:30 ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:28
msgid "Familiarity with :doc:`./Setting-Up-Simulation-Webots-Basic`."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:34
msgid "Reset Handler for Simple Cases (Controllers Only)"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:36
msgid "In the launch file of your package, add the ``respawn`` parameter."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:59
msgid "On reset, Webots kills all driver nodes. Therefore, to start them again after reset, you should set the ``respawn`` property of the driver node to ``True``. It will ensure driver nodes are up and running after the reset."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:64
msgid "Reset Handler for Multiple Nodes (No Shutdown Required)"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:66
msgid "If you have some other nodes that have to be started along with the driver node (e.g. ``ros2_control`` nodes), then you can use the ``OnProcessExit`` event handler:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:109
msgid "It is not possible to use the ``respawn`` property on the ``ros2_control`` node, as the spawner exits during launch time and not when the simulation is reset. Instead we should declare a list of nodes in a function (e.g. ``get_ros2_control_spawners``). The nodes of this list are started along other nodes when executing the launch file. With the ``reset_handler``, the function is also declared as action to start when the ``robot_driver`` node exits, which corresponds to the moment when the simulation is reset in the Webots interface. The ``robot_driver`` node still has the ``respawn`` property set to ``True``, so that it gets restarted along with ``ros2_control`` nodes."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:116
msgid "Reset Handler Requiring Node Shutdown"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:118
msgid "With the current ROS 2 launch API, there is no way to make the reset work in launch files where nodes need to be shutdown before the restart (e.g. ``Nav2`` or ``RViz``). The reason is that currently, ROS 2 doesn't allow to shutdown specific nodes from a launch file. There is a solution, but it requires to manually restart nodes after pushing the reset button."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:122
msgid "Webots needs to be started in a specific launch file without other nodes."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:135
msgid "A second launch file must be started from another process. This launch file contains all other nodes, including robot controllers/plugins, Navigation2 nodes, RViz, state publishers, etc."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:185
msgid "The second launch file contains a handler that triggers a shutdown event when the driver node exits (which is the case when the simulation is reset). This second launch file must be manually restarted from the command line after pressing the reset button."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:191
msgid "In this tutorial, you learned how to implement a reset handler in a robot simulation using Webots. The reset handler allows you to restart specific nodes or perform additional actions when the reset button in Webots is pressed. You explored different approaches based on the complexity of your simulation and the requirements of your nodes."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:2
msgid "The Ros2Supervisor Node"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:4
msgid "**Goal:** Extend the interface with a default Supervisor robot, named ``Ros2Supervisor``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:17
msgid "In this tutorial, you will learn how to enable the ``Ros2Supervisor`` node which enhances the interface by creating additional services and topics to interact with the simulation. You can, for example, record animations or spawn Webots nodes directly from the ROS 2 interface while the simulation is running. These instructions list in details the current implemented features and how to use them."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:31
msgid "The ``Ros2Supervisor``"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:33
msgid "The ``Ros2Supervisor`` is made of two main parts:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:35
msgid "A Webots Robot node added to the simulation world. Its ``supervisor`` field is set to TRUE."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:36
msgid "A ROS 2 node that connects to the Webots Robot as an extern controller (in a similar way to your own robot plugin)."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:38
msgid "The ROS 2 node acts as a controller that calls Supervisor API functions to control or interact with the simulation world. User interactions with the ROS 2 node are mainly performed through services and topics."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:41
msgid "These nodes can be automatically created at the Webots launch using the ``ros2_supervisor`` parameter in the ``WebotsLauncher``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:51
msgid "The ``webots._supervisor`` object must also be included in the ``LaunchDescription`` returned by the launch file."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:70
msgid "More information about launch files for ``webots_ros2`` projects can be found in :doc:`./Setting-Up-Simulation-Webots-Basic`."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:73
msgid "Clock topic"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:75
msgid "The ``Ros2Supervisor`` node is responsible to get the time of the Webots simulation and publish it to the ``/clock`` topic. This means that it is mandatory to spawn the ``Ros2Supervisor`` if some other nodes have their ``use_sim_time`` parameter set to ``true``. More information about the ``/clock`` topic can be found in the `ROS wiki <http://wiki.ros.org/Clock>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:80
msgid "Import a Webots node"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:82
msgid "The ``Ros2Supervisor`` node also allows you to spawn Webots nodes from strings through a service."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:84
msgid "The service is named ``/Ros2Supervisor/spawn_node_from_string`` and is of type ``webots_ros2_msgs/srv/SpawnNodeFromString``. The ``SpawnNodeFromString`` type expects a ``data`` string as input and returns a ``success`` boolean."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:87
msgid "From the given string, the Supervisor node is getting the name of the imported node and adding it to an intern list for potential later removal (see :ref:`Remove a Webots imported node`)."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:89
msgid "The node is imported using the ``importMFNodeFromString(nodeString)`` `API function <https://cyberbotics.com/doc/reference/supervisor?tab-language=python#wb_supervisor_field_import_mf_node_from_string>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:91
msgid "Here is an example to import a simple Robot named ``imported_robot``:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:98
msgid "If you try to import some PROTOs in the node string, their respective URLs must be declared in the .wbt world file as EXTERNPROTO or as IMPORTABLE EXTERNPROTO."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:103
msgid "Remove a Webots imported node"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:105
msgid "Once a node has been imported with the ``/Ros2Supervisor/spawn_node_from_string`` service, it can also be removed."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:107
msgid "This can be achieved by sending the name of the node to the topic named ``/Ros2Supervisor/remove_node`` of type ``std_msgs/msg/String``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:109
msgid "If the node is indeed in the imported list, it is removed with the ``remove()`` `API method <https://cyberbotics.com/doc/reference/supervisor?tab-language=python#wb_supervisor_node_remove>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:111
msgid "Here is an example on how to remove the ``imported_robot`` Robot:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:118
msgid "Record animations"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:120
msgid "The ``Ros2Supervisor`` node also creates two additional services to record HTML5 animations."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:122
msgid "The ``/Ros2Supervisor/animation_start_recording`` service is of type ``webots_ros2_msgs/srv/SetString`` and allows to start the animation. The ``SetString`` type expects a ``value`` string as input and returns a ``success`` boolean. The input ``value`` represents the absolute path to the directory where the animations files should be saved."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:126
msgid "Here is an example on how to start an animation:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:133
msgid "The ``/Ros2Supervisor/animation_stop_recording`` service is of type ``webots_ros2_msgs/srv/GetBool`` and allows to stop the animation."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst:143
msgid "In this tutorial, you learned how to enable the ``Ros2Supervisor`` and how to extend the interface with the Webots simulation. The node creates multiple services and topics to interact with and modify the simulation."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Webots.rst:2
msgid "Webots"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Webots.rst:4
msgid "This set of tutorials will teach you how to configure the Webots simulator with ROS 2."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:7
msgid "Enabling topic statistics (C++)"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:9
msgid "**Goal:** Enable ROS 2 Topic Statistics and view the output statistics data."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:21
msgid "This is a short tutorial on how to enable topic statistics in ROS 2 and view the published statistics output using command line tools (:doc:`ros2topic <../../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>`)."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:23
msgid "ROS 2 provides the integrated measurement of statistics for messages received by any subscription, called Topic Statistics. With Topic Statistics enabled for your subscription, you can characterize the performance of your system or use the data to help diagnose any present issues."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:28
msgid "For more details please see the :doc:`Topic Statistics Concepts Page <../../../Concepts/Intermediate/About-Topic-Statistics>`."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:33
msgid "An installation from either binaries or source."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:35
msgid "In previous tutorials, you learned how to :doc:`create a workspace <../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>`, :doc:`create a package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`, and create a :doc:`C++ <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber>` publisher and subscriber."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:38
msgid "This tutorial assumes that you still have your ``cpp_pubsub`` package from the :doc:`C++ <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber>` tutorial."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:44
msgid "1 Write the subscriber node with statistics enabled"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:46
msgid "Navigate into the ``ros2_ws/src/cpp_pubsub/src`` folder, created in the :doc:`previous tutorial <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber>`, and download the example talker code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:65
msgid "Right click this link and select Save As ``publisher_member_function.cpp``:"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:67
msgid "https://raw.githubusercontent.com/ros2/examples/humble/rclcpp/topics/minimal_subscriber/member_function_with_topic_statistics.cpp"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:69
msgid "Now there will be a new file named ``member_function_with_topic_statistics.cpp``. Open the file using your preferred text editor."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:123 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:142 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:132 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:169 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:155 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:173 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:211 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:181
msgid "1.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:125
msgid "As in the :doc:`C++ <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber>` tutorial, we have a subscriber node which receives string messages from the ``topic`` topic from the ``topic_callback`` function. However, we've now added options to configure the subscription to enable topic statistics with the ``rclcpp::SubscriptionOptions()`` options struct."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:136
msgid "Optionally, fields such as the statistics collection/publish period and the topic used to publish statistics can be configured as well."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:147
msgid "The configurable fields are described in the following table:"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:150
msgid "Subscription Config Field"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:150
msgid "Purpose"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:152
msgid "topic_stats_options.state"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:152
msgid "Enable or disable topic statistics (default ``rclcpp::TopicStatisticsState::Disable``)"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:153
msgid "topic_stats_options.publish_period"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:153
msgid "The period in which to collect statistics data and publish a statistics message (default ``1s``)"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:154
msgid "topic_stats_options.publish_topic"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:154
msgid "The topic to use when publishing statistics data (default ``/statistics``)"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:158 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:160 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:220 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:247
msgid "1.2 CMakeLists.txt"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:162
msgid "Add the executable and name it ``listener_with_topic_statistics`` so you can run your node using ``ros2 run``:"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:175
msgid "Make sure to save the file, and then your pub/sub system, with topic statistics enabled, should be ready for use."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:179 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:503
msgid "2 Build and run"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:181
msgid "To build, see the :ref:`Build and run <cpppubsub-build-and-run>` section in the pub/sub tutorial."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:183
msgid "Run the subscriber with statistics enabled node:"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:189 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:501 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:481
msgid "Now run the talker node:"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:195 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:507 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:487
msgid "The terminal should start publishing info messages every 0.5 seconds, like so:"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:205 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:523 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:504
msgid "The listener will start printing messages to the console, starting at whatever message count the publisher is on at that time, like so:"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:215
msgid "Now that the subscriber node is receiving messages, it will periodically publish statistics messages. We will observe these messages in the next section."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:219
msgid "3 Observe published statistic data"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:221
msgid "While the nodes are running, open a new terminal window. Execute the following command:"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:228
msgid "This will list all currently active topics. You should see the following:"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:238
msgid "If you optionally changed the ``topic_stats_options.publish_topic`` field earlier in the tutorial, then you will see that name instead of ``/statistics``."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:241
msgid "The subscriber node you created is publishing statistics, for the topic ``topic``, to the output topic ``/statistics``."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:244
msgid "We can visualize this using :doc:`RQt <../../../Concepts/Intermediate/About-RQt>`"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:248
msgid "Now we can view the statistics data published to this topic with the following command:"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:254
msgid "The terminal should start publishing statistics messages every 10 seconds, because the ``topic_stats_options.publish_period`` subscription configuration was optionally changed earlier in the tutorial."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:303
msgid "From the `message definition <https://github.com/ros2/rcl_interfaces/tree/humble/statistics_msgs>`__ the ``data_types`` are as follows"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:307
msgid "data_type value"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:307
msgid "statistics"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:309
msgid "1"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:309
msgid "average"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:310
msgid "2"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:310
msgid "minimum"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:311
msgid "3"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:311
msgid "maximum"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:312
msgid "4"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:312
msgid "standard deviation"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:313
msgid "5"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:313
msgid "sample count"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:316
msgid "Here we see the two currently possible calculated statistics for the ``std_msgs::msg::String`` message published to ``/topic`` by the ``minimal_publisher``. Because the ``std_msgs::msg::String`` does not have a message header, the ``message_age`` calculation cannot be performed, so NaNs are returned. However, the ``message_period`` can be calculated and we see the statistics populated in the message above."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:326
msgid "You created a subscriber node with topic statistics enabled, which published statistics data from the :doc:`C++ <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client>`'s publisher node. You were able to compile and run this node. While running, you were able to observe the statistics data."
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:331 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:275 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:265 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:365 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:200 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:275 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:196 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:500 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:548 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:422 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:529 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:350 ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:305 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:195 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:353 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:390 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:357
msgid "Related content"
msgstr ""

#: ../../source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst:333
msgid "To observe how the ``message_age`` period is calculated please see the `ROS 2 Topic Statistics demo <https://github.com/ros2/demos/tree/humble/topic_statistics_demo>`__."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools.rst:2
msgid "Beginner: CLI tools"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:8
msgid "Configuring environment"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:10
msgid "**Goal:** This tutorial will show you how to prepare your ROS 2 environment."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:12 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:17 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:10 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:13 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:12 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:12
msgid "**Tutorial level:** Beginner"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:23
msgid "ROS 2 relies on the notion of combining workspaces using the shell environment. \"Workspace\" is a ROS term for the location on your system where you're developing with ROS 2. The core ROS 2 workspace is called the underlay. Subsequent local workspaces are called overlays. When developing with ROS 2, you will typically have several workspaces active concurrently."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:29
msgid "Combining workspaces makes developing against different versions of ROS 2, or against different sets of packages, easier. It also allows the installation of several ROS 2 distributions (or “distros”, e.g. Dashing and Eloquent) on the same computer and switching between them."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:32
msgid "This is accomplished by sourcing setup files every time you open a new shell, or by adding the source command to your shell startup script once. Without sourcing the setup files, you won't be able to access ROS 2 commands, or find or use ROS 2 packages. In other words, you won't be able to use ROS 2."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:39
msgid "Before starting these tutorials, install ROS 2 by following the instructions on the ROS 2 :doc:`../../Installation` page."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:41 ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:35
msgid "The commands used in this tutorial assume you followed the binary packages installation guide for your operating system (Debian packages for Linux). You can still follow along if you built from source, but the path to your setup files will likely be different. You also won't be able to use the ``sudo apt install ros-<distro>-<package>`` command (used frequently in the beginner level tutorials) if you install from source."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:45
msgid "If you are using Linux or macOS, but are not already familiar with the shell, `this tutorial <http://www.ee.surrey.ac.uk/Teaching/Unix/>`__ will help."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:51
msgid "1 Source the setup files"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:53
msgid "You will need to run this command on every new shell you open to have access to the ROS 2 commands, like so:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:78
msgid "The exact command depends on where you installed ROS 2. If you're having problems, ensure the file path leads to your installation."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:82
msgid "2 Add sourcing to your shell startup script"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:84
msgid "If you don't want to have to source the setup file every time you open a new shell (skipping task 1), then you can add the command to your shell startup script:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:94 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:102
msgid "To undo this, locate your system's shell startup script and remove the appended source command."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:106
msgid "Only for PowerShell users, create a folder in 'My Documents' called 'WindowsPowerShell'. Within 'WindowsPowerShell', create file 'Microsoft.PowerShell_profile.ps1'. Inside the file, paste:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:114
msgid "PowerShell will request permission to run this script everytime a new shell is opened. To avoid that issue you can run:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:121
msgid "To undo this, remove the new 'Microsoft.PowerShell_profile.ps1' file."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:124
msgid "3 Check environment variables"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:126
msgid "Sourcing ROS 2 setup files will set several environment variables necessary for operating ROS 2. If you ever have problems finding or using your ROS 2 packages, make sure that your environment is properly set up using the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:149
msgid "Check that variables like ``ROS_DISTRO`` and ``ROS_VERSION`` are set."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:157
msgid "If the environment variables are not set correctly, return to the ROS 2 package installation section of the installation guide you followed. If you need more specific help (because environment setup files can come from different places), you can `get answers <https://robotics.stackexchange.com/>`__ from the community."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:161
msgid "3.1 The ``ROS_DOMAIN_ID`` variable"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:163
msgid "See the `domain ID <../../Concepts/Intermediate/About-Domain-ID>` article for details on ROS domain IDs."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:165
msgid "Once you have determined a unique integer for your group of ROS 2 nodes, you can set the environment variable with the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:175 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:187 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:222 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:234
msgid "To maintain this setting between shell sessions, you can add the command to your shell startup script:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:199 ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:246
msgid "If you want to make this permanent between shell sessions, also run:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:206
msgid "3.2 The ``ROS_LOCALHOST_ONLY`` variable"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:208
msgid "By default, ROS 2 communication is not limited to localhost. ``ROS_LOCALHOST_ONLY`` environment variable allows you to limit ROS 2 communication to localhost only. This means your ROS 2 system, and its topics, services, and actions will not be visible to other computers on the local network. Using ``ROS_LOCALHOST_ONLY`` is helpful in certain settings, such as classrooms, where multiple robots may publish to the same topic causing strange behaviors. You can set the environment variable with the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:256
msgid "The ROS 2 development environment needs to be correctly configured before use. This can be done in two ways: either sourcing the setup files in every new shell you open, or adding the source command to your startup script."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:259
msgid "If you ever face any problems locating or using packages with ROS 2, the first thing you should do is check your environment variables and ensure they are set to the version and distro you intended."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst:264
msgid "Now that you have a working ROS 2 installation and you know how to source its setup files, you can start learning the ins and outs of ROS 2 with the :doc:`turtlesim tool <./Introducing-Turtlesim/Introducing-Turtlesim>`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:8
msgid "Using ``turtlesim``, ``ros2``, and ``rqt``"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:10
msgid "**Goal:** Install and use the turtlesim package and rqt tools to prepare for upcoming tutorials."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:23
msgid "Turtlesim is a lightweight simulator for learning ROS 2. It illustrates what ROS 2 does at the most basic level to give you an idea of what you will do with a real robot or a robot simulation later on."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:26
msgid "The ros2 tool is how the user manages, introspects, and interacts with a ROS system. It supports multiple commands that target different aspects of the system and its operation. One might use it to start a node, set a parameter, listen to a topic, and many more. The ros2 tool is part of the core ROS 2 installation."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:31
msgid "rqt is a graphical user interface (GUI) tool for ROS 2. Everything done in rqt can be done on the command line, but rqt provides a more user-friendly way to manipulate ROS 2 elements."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:34
msgid "This tutorial touches upon core ROS 2 concepts, like nodes, topics, and services. All of these concepts will be elaborated on in later tutorials; for now, you will simply set up the tools and get a feel for them."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:40
msgid "The previous tutorial, :doc:`../Configuring-ROS2-Environment`, will show you how to set up your environment."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:46
msgid "1 Install turtlesim"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:48
msgid "As always, start by sourcing your setup files in a new terminal, as described in the :doc:`previous tutorial <../Configuring-ROS2-Environment>`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:50
msgid "Install the turtlesim package for your ROS 2 distro:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:64 ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:68
msgid "As long as the archive you installed ROS 2 from contains the ``ros_tutorials`` repository, you should already have turtlesim installed."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:70
msgid "Check that the package is installed:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:76
msgid "The above command should return a list of turtlesim's executables:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:86
msgid "2 Start turtlesim"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:88
msgid "To start turtlesim, enter the following command in your terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:94
msgid "The simulator window should appear, with a random turtle in the center."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:98
msgid "In the terminal, under the command, you will see messages from the node:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:105
msgid "There you can see the default turtle's name and the coordinates where it spawns."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:108
msgid "3 Use turtlesim"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:110
msgid "Open a new terminal and source ROS 2 again."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:112
msgid "Now you will run a new node to control the turtle in the first node:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:118
msgid "At this point you should have three windows open: a terminal running ``turtlesim_node``, a terminal running ``turtle_teleop_key`` and the turtlesim window. Arrange these windows so that you can see the turtlesim window, but also have the terminal running ``turtle_teleop_key`` active so that you can control the turtle in turtlesim."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:121
msgid "Use the arrow keys on your keyboard to control the turtle. It will move around the screen, using its attached \"pen\" to draw the path it followed so far."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:126
msgid "Pressing an arrow key will only cause the turtle to move a short distance and then stop. This is because, realistically, you wouldn't want a robot to continue carrying on an instruction if, for example, the operator lost the connection to the robot."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:129
msgid "You can see the nodes, and their associated topics, services, and actions, using the ``list`` subcommands of the respective commands:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:138
msgid "You will learn more about these concepts in the coming tutorials. Since the goal of this tutorial is only to get a general overview of turtlesim, you will use rqt to call some of the turtlesim services and interact with ``turtlesim_node``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:142
msgid "4 Install rqt"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:144
msgid "Open a new terminal to install ``rqt`` and its plugins:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:148
msgid "Linux (apt 2.0/Ubuntu 20.04 and newer)"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:156
msgid "Linux (apt 1.x/Ubuntu 18.04 and older)"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:166
msgid "The standard archive for installing ROS 2 on macOS contains ``rqt`` and its plugins, so you should already have ``rqt`` installed."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:170
msgid "The standard archive for installing ROS 2 on Windows contains ``rqt`` and its plugins, so you should already have ``rqt`` installed."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:172
msgid "To run rqt:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:179
msgid "5 Use rqt"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:181
msgid "When running rqt for the first time, the window will be blank. No worries; just select **Plugins** > **Services** > **Service Caller** from the menu bar at the top."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:186
msgid "It may take some time for rqt to locate all the plugins. If you click on **Plugins** but don't see **Services** or any other options, you should close rqt and enter the command ``rqt --force-discover`` in your terminal."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:191
msgid "Use the refresh button to the left of the **Service** dropdown list to ensure all the services of your turtlesim node are available."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:193
msgid "Click on the **Service** dropdown list to see turtlesim's services, and select the ``/spawn`` service."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:196
msgid "5.1 Try the spawn service"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:198
msgid "Let's use rqt to call the ``/spawn`` service. You can guess from its name that ``/spawn`` will create another turtle in the turtlesim window."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:201
msgid "Give the new turtle a unique name, like ``turtle2``, by double-clicking between the empty single quotes in the **Expression** column. You can see that this expression corresponds to the value of **name** and is of type **string**."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:204
msgid "Next enter some valid coordinates at which to spawn the new turtle, like ``x = 1.0`` and ``y = 1.0``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:210
msgid "If you try to spawn a new turtle with the same name as an existing turtle, like the default ``turtle1``, you will get an error message in the terminal running ``turtlesim_node``:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:216
msgid "To spawn ``turtle2``, you then need to call the service by clicking the **Call** button on the upper right side of the rqt window."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:218
msgid "If the service call was successful, you should see a new turtle (again with a random design) spawn at the coordinates you input for **x** and **y**."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:220
msgid "If you refresh the service list in rqt, you will also see that now there are services related to the new turtle, ``/turtle2/...``, in addition to ``/turtle1/...``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:223
msgid "5.2 Try the set_pen service"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:225
msgid "Now let's give ``turtle1`` a unique pen using the ``/set_pen`` service:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:229
msgid "The values for **r**, **g** and **b**, which are between 0 and 255, set the color of the pen ``turtle1`` draws with, and **width** sets the thickness of the line."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:231
msgid "To have ``turtle1`` draw with a distinct red line, change the value of **r** to 255, and the value of **width** to 5. Don't forget to call the service after updating the values."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:234
msgid "If you return to the terminal where ``turtle_teleop_key`` is running and press the arrow keys, you will see ``turtle1``'s pen has changed."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:238
msgid "You've probably also noticed that there's no way to move ``turtle2``. That's because there is no teleop node for ``turtle2``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:242 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:385
msgid "6 Remapping"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:244
msgid "You need a second teleop node in order to control ``turtle2``. However, if you try to run the same command as before, you will notice that this one also controls ``turtle1``. The way to change this behavior is by remapping the ``cmd_vel`` topic."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:248
msgid "In a new terminal, source ROS 2, and run:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:255
msgid "Now, you can move ``turtle2`` when this terminal is active, and ``turtle1`` when the other terminal running ``turtle_teleop_key`` is active."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:260
msgid "7 Close turtlesim"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:262
msgid "To stop the simulation, you can enter ``Ctrl + C`` in the ``turtlesim_node`` terminal, and ``q`` in the ``turtle_teleop_key`` terminals."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:267
msgid "Using turtlesim and rqt is a great way to learn the core concepts of ROS 2."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:272
msgid "Now that you have turtlesim and rqt up and running, and an idea of how they work, let's dive into the first core ROS 2 concept with the next tutorial, :doc:`../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:277
msgid "The turtlesim package can be found in the `ros_tutorials <https://github.com/ros/ros_tutorials/tree/humble/turtlesim>`_ repo."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst:279
msgid "`This community contributed video <https://youtu.be/xwT7XWflMdc>`_ demonstrates many of the items covered in this tutorial."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:8
msgid "Launching nodes"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:10
msgid "**Goal:** Use a command line tool to launch multiple nodes at once."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:12
msgid "**Tutorial Level:** Beginner"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:23
msgid "In most of the introductory tutorials, you have been opening new terminals for every new node you run. As you create more complex systems with more and more nodes running simultaneously, opening terminals and reentering configuration details becomes tedious."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:26
msgid "Launch files allow you to start up and configure a number of executables containing ROS 2 nodes simultaneously."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:28
msgid "Running a single launch file with the ``ros2 launch`` command will start up your entire system - all nodes and their configurations - at once."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:33
msgid "Before starting these tutorials, install ROS 2 by following the instructions on the ROS 2 :doc:`../../../Installation/` page."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:39
msgid "If you are using Linux and are not already familiar with the shell, `this tutorial <http://www.ee.surrey.ac.uk/Teaching/Unix/>`__ will help."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:45
msgid "Running a Launch File"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:53
msgid "This command will run the following launch file:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:72
msgid "The launch file above is written in Python, but you can also use XML and YAML to create launch files. You can see a comparison of these different ROS 2 launch formats in :doc:`../../../How-To-Guides/Launch-file-different-formats`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:75
msgid "This will run two turtlesim nodes:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:79
msgid "For now, don't worry about the contents of this launch file. You can find more information on ROS 2 launch in the :doc:`ROS 2 launch tutorials <../../Intermediate/Launch/Launch-Main>`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:83
msgid "(Optional) Control the Turtlesim Nodes"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:85
msgid "Now that these nodes are running, you can control them like any other ROS 2 nodes. For example, you can make the turtles drive in opposite directions by opening up two additional terminals and running the following commands:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:88
msgid "In the second terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:94
msgid "In the third terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:100
msgid "After running these commands, you should see something like the following:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:107
msgid "The significance of what you've done so far is that you've run two turtlesim nodes with one command. Once you learn to write your own launch files, you'll be able to run multiple nodes - and set up their configuration - in a similar way, with the ``ros2 launch`` command."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:110
msgid "For more tutorials on ROS 2 launch files, see the :doc:`main launch file tutorial page<../../Intermediate/Launch/Launch-Main>`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst:115
msgid "In the next tutorial, :doc:`../Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data`, you'll learn about another helpful tool, ``ros2 bag``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:8
msgid "Recording and playing back data"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:10
msgid "**Goal:** Record data published on a topic so you can replay and examine it any time."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:23
msgid "``ros2 bag`` is a command line tool for recording data published on topics in your system. It accumulates the data passed on any number of topics and saves it in a database. You can then replay the data to reproduce the results of your tests and experiments. Recording topics is also a great way to share your work and allow others to recreate it."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:32
msgid "You should have ``ros2 bag`` installed as a part of your regular ROS 2 setup."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:34
msgid "If you installed ROS from Debian packages on Linux and your system doesn't recognize the command, install it like so:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:41
msgid "This tutorial talks about concepts covered in previous tutorials, like :doc:`nodes <../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` and :doc:`topics <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`. It also uses the :doc:`turtlesim package <../Introducing-Turtlesim/Introducing-Turtlesim>`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:44 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:42 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:47 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:34 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:38 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:40 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:35
msgid "As always, don't forget to source ROS 2 in :doc:`every new terminal you open <../Configuring-ROS2-Environment>`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:51 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:48 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:40 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:44 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:46 ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:42 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:45
msgid "1 Setup"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:52
msgid "You'll be recording your keyboard input in the ``turtlesim`` system to save and replay later on, so begin by starting up the ``/turtlesim`` and ``/teleop_turtle`` nodes."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:60 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:58 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:50 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:53 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:56
msgid "Open another terminal and run:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:66
msgid "Let's also make a new directory to store our saved recordings, just as good practice:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:74
msgid "2 Choose a topic"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:76
msgid "``ros2 bag`` can only record data from published messages in topics. To see the list of your system's topics, open a new terminal and run the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:83 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:166 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:200 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:220 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:264 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:131 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:160 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:182 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:201 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:176
msgid "Which will return:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:93
msgid "In the topics tutorial, you learned that the ``/turtle_teleop`` node publishes commands on the ``/turtle1/cmd_vel`` topic to make the turtle move in turtlesim."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:95
msgid "To see the data that ``/turtle1/cmd_vel`` is publishing, run the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:101
msgid "Nothing will show up at first because no data is being published by the teleop. Return to the terminal where you ran the teleop and select it so it's active. Use the arrow keys to move the turtle around, and you will see data being published on the terminal running ``ros2 topic echo``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:120
msgid "3 ros2 bag record"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:122
msgid "To record the data published to a topic use the command syntax:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:128
msgid "Before running this command on your chosen topic, open a new terminal and move into the ``bag_files`` directory you created earlier, because the rosbag file will save in the directory where you run it."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:130 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:339
msgid "Run the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:136
msgid "You will see the following messages in the terminal (the date and time will be different):"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:145
msgid "Now ``ros2 bag`` is recording the data published on the ``/turtle1/cmd_vel`` topic. Return to the teleop terminal and move the turtle around again. The movements don't matter, but try to make a recognizable pattern to see when you replay the data later."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:151
msgid "Press ``Ctrl+C`` to stop recording."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:153
msgid "The data will be accumulated in a new bag directory with a name in the pattern of ``rosbag2_year_month_day-hour_minute_second``. This directory will contain a ``metadata.yaml`` along with the bag file in the recorded format."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:157
msgid "3.1 Record multiple topics"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:159
msgid "You can also record multiple topics, as well as change the name of the file ``ros2 bag`` saves to."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:161
msgid "Run the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:167
msgid "The ``-o`` option allows you to choose a unique name for your bag file. The following string, in this case ``subset``, is the file name."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:170
msgid "To record more than one topic at a time, simply list each topic separated by a space."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:172
msgid "You will see the following message, confirming that both topics are being recorded."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:182
msgid "You can move the turtle around and press ``Ctrl+C`` when you're finished."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:186
msgid "There is another option you can add to the command, ``-a``, which records all the topics on your system."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:189
msgid "4 ros2 bag info"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:191
msgid "You can see details about your recording by running:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:197
msgid "Running this command on the ``subset`` bag file will return a list of information on the file:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:215
msgid "To view the individual messages, you would have to open up the database, in this case sqlite3, to examine it, which is beyond the scope of ROS 2."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:218
msgid "5 ros2 bag play"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:220
msgid "Before replaying the bag file, enter ``Ctrl+C`` in the terminal where the teleop is running. Then make sure your turtlesim window is visible so you can see the bag file in action."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:223 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:240
msgid "Enter the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:229
msgid "The terminal will return the message:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:235
#, python-format
msgid "Your turtle will follow the same path you entered while recording (though not 100% exactly; turtlesim is sensitive to small changes in the system's timing)."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:239
msgid "Because the ``subset`` file recorded the ``/turtle1/pose`` topic, the ``ros2 bag play`` command won't quit for as long as you had turtlesim running, even if you weren't moving."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:241
msgid "This is because as long as the ``/turtlesim`` node is active, it publishes data on the  ``/turtle1/pose`` topic at regular intervals. You may have noticed in the ``ros2 bag info`` example result above that the  ``/turtle1/cmd_vel`` topic's ``Count`` information was only 9; that's how many times we pressed the arrow keys while recording."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:244
msgid "Notice that ``/turtle1/pose`` has a ``Count`` value of over 3000; while we were recording, data was published on that topic 3000 times."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:246
msgid "To get an idea of how often position data is published, you can run the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:255
msgid "You can record data passed on topics in your ROS 2 system using the ``ros2 bag`` command. Whether you're sharing your work with others or introspecting your own experiments, it's a great tool to know about."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:261
msgid "You've completed the \"Beginner: CLI Tools\" tutorials! The next step is tackling the \"Beginner: Client Libraries\" tutorials, starting with :doc:`../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst:267
msgid "A more thorough explanation of ``ros2 bag`` can be found in the README `here <https://github.com/ros2/rosbag2>`__. For more information on QoS compatibility and ``ros2 bag``, see :doc:`../../../How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:8
msgid "Understanding actions"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:10
msgid "**Goal:** Introspect actions in ROS 2."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:23
msgid "Actions are one of the communication types in ROS 2 and are intended for long running tasks. They consist of three parts: a goal, feedback, and a result."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:26
msgid "Actions are built on topics and services. Their functionality is similar to services, except actions can be canceled. They also provide steady feedback, as opposed to services which return a single response."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:30
msgid "Actions use a client-server model, similar to the publisher-subscriber model (described in the :doc:`topics tutorial <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`). An \"action client\" node sends a goal to an \"action server\" node that acknowledges the goal and returns a stream of feedback and a result."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:38
msgid "This tutorial builds off concepts, like :doc:`nodes <../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` and :doc:`topics <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`, covered in previous tutorials."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:40 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:32
msgid "This tutorial uses the :doc:`turtlesim package <../Introducing-Turtlesim/Introducing-Turtlesim>`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:50 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:42 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:45
msgid "Start up the two turtlesim nodes, ``/turtlesim`` and ``/teleop_turtle``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:66
msgid "2 Use actions"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:68
msgid "When you launch the ``/teleop_turtle`` node, you will see the following message in your terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:75
msgid "Let's focus on the second line, which corresponds to an action. (The first instruction corresponds to the \"cmd_vel\" topic, discussed previously in the :doc:`topics tutorial <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`.)"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:78
msgid "Notice that the letter keys ``G|B|V|C|D|E|R|T`` form a \"box\" around the ``F`` key on a US QWERTY keyboard (if you are not using a QWERTY keyboard, see `this link <https://upload.wikimedia.org/wikipedia/commons/d/da/KB_United_States.svg>`__ to follow along). Each key's position around ``F`` corresponds to that orientation in turtlesim. For example, the ``E`` will rotate the turtle's orientation to the upper left corner."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:82
msgid "Pay attention to the terminal where the ``/turtlesim`` node is running. Each time you press one of these keys, you are sending a goal to an action server that is part of the ``/turtlesim`` node. The goal is to rotate the turtle to face a particular direction. A message relaying the result of the goal should display once the turtle completes its rotation:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:91
msgid "The ``F`` key will cancel a goal mid-execution."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:93
msgid "Try pressing the ``C`` key, and then pressing the ``F`` key before the turtle can complete its rotation. In the terminal where the ``/turtlesim`` node is running, you will see the message:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:100
msgid "Not only can the client-side (your input in the teleop) stop a goal, but the server-side (the ``/turtlesim`` node) can as well. When the server-side chooses to stop processing a goal, it is said to \"abort\" the goal."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:103
msgid "Try hitting the ``D`` key, then the ``G`` key before the first rotation can complete. In the terminal where the ``/turtlesim`` node is running, you will see the message:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:110
msgid "This action server chose to abort the first goal because it got a new one. It could have chosen something else, like reject the new goal or execute the second goal after the first one finished. Don't assume every action server will choose to abort the current goal when it gets a new one."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:115 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:131
msgid "3 ros2 node info"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:117
msgid "To see the list of actions a node provides, ``/turtlesim`` in this case, open a new terminal and run the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:123
msgid "Which will return a list of ``/turtlesim``'s subscribers, publishers, services, action servers and action clients:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:156
msgid "Notice that the ``/turtle1/rotate_absolute`` action for ``/turtlesim`` is under ``Action Servers``. This means ``/turtlesim`` responds to and provides feedback for the ``/turtle1/rotate_absolute`` action."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:159
msgid "The ``/teleop_turtle`` node has the name ``/turtle1/rotate_absolute`` under ``Action Clients`` meaning that it sends goals for that action name. To see that, run:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:192
msgid "4 ros2 action list"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:194
msgid "To identify all the actions in the ROS graph, run the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:206
msgid "This is the only action in the ROS graph right now. It controls the turtle's rotation, as you saw earlier. You also already know that there is one action client (part of ``/teleop_turtle``) and one action server (part of ``/turtlesim``) for this action from using the ``ros2 node info <node_name>`` command."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:211
msgid "4.1 ros2 action list -t"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:213
msgid "Actions have types, similar to topics and services. To find ``/turtle1/rotate_absolute``'s type, run the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:226
msgid "In brackets to the right of each action name (in this case only ``/turtle1/rotate_absolute``) is the action type, ``turtlesim/action/RotateAbsolute``. You will need this when you want to execute an action from the command line or from code."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:230
msgid "5 ros2 action info"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:232
msgid "You can further introspect the ``/turtle1/rotate_absolute`` action with the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:238
msgid "Which will return"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:248
msgid "This tells us what we learned earlier from running ``ros2 node info`` on each node: The ``/teleop_turtle`` node has an action client and the ``/turtlesim`` node has an action server for the ``/turtle1/rotate_absolute`` action."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:253 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:185
msgid "6 ros2 interface show"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:255
msgid "One more piece of information you will need before sending or executing an action goal yourself is the structure of the action type."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:257
msgid "Recall that you identified ``/turtle1/rotate_absolute``'s type when running the command ``ros2 action list -t``. Enter the following command with the action type in your terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:277
msgid "The section of this message above the first ``---`` is the structure (data type and name) of the goal request. The next section is the structure of the result. The last section is the structure of the feedback."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:282
msgid "7 ros2 action send_goal"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:284
msgid "Now let's send an action goal from the command line with the following syntax:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:290
msgid "``<values>`` need to be in YAML format."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:292
msgid "Keep an eye on the turtlesim window, and enter the following command into your terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:298
msgid "You should see the turtle rotating, as well as the following message in your terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:313
msgid "All goals have a unique ID, shown in the return message. You can also see the result, a field with the name ``delta``, which is the displacement to the starting position."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:316
msgid "To see the feedback of this goal, add ``--feedback`` to the ``ros2 action send_goal`` command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:322 ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:200
msgid "Your terminal will return the message:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:344
msgid "You will continue to receive feedback, the remaining radians, until the goal is complete."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:349
msgid "Actions are like services that allow you to execute long running tasks, provide regular feedback, and are cancelable."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:351
msgid "A robot system would likely use actions for navigation. An action goal could tell a robot to travel to a position. While the robot navigates to the position, it can send updates along the way (i.e. feedback), and then a final result message once it's reached its destination."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:355
msgid "Turtlesim has an action server that action clients can send goals to for rotating turtles. In this tutorial, you introspected that action, ``/turtle1/rotate_absolute``, to get a better idea of what actions are and how they work."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:361
msgid "Now you've covered all of the core ROS 2 concepts. The last few tutorials in the \"Users\" set will introduce you to some tools and techniques that will make using ROS 2 easier, starting with :doc:`../Using-Rqt-Console/Using-Rqt-Console`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:367
msgid "You can read more about the design decisions behind actions in ROS 2 `here <https://design.ros2.org/articles/actions.html>`__."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:8
msgid "Understanding nodes"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:10
msgid "**Goal:** Learn about the function of nodes in ROS 2, and the tools to interact with them."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:24
msgid "1 The ROS 2 graph"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:26
msgid "Over the next few tutorials, you will learn about a series of core ROS 2 concepts that make up what is referred to as the “ROS (2) graph”."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:28
msgid "The ROS graph is a network of ROS 2 elements processing data together at the same time. It encompasses all executables and the connections between them if you were to map them all out and visualize them."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:32
msgid "2 Nodes in ROS 2"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:34
msgid "Each node in ROS should be responsible for a single, modular purpose, e.g. controlling the wheel motors or publishing the sensor data from a laser range-finder. Each node can send and receive data from other nodes via topics, services, actions, or parameters."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:39
msgid "A full robotic system is comprised of many nodes working in concert. In ROS 2, a single executable (C++ program, Python program, etc.) can contain one or more nodes."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:45
msgid "The :doc:`previous tutorial <../Introducing-Turtlesim/Introducing-Turtlesim>` shows you how to install the ``turtlesim`` package used here."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:53
msgid "1 ros2 run"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:55
msgid "The command ``ros2 run`` launches an executable from a package."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:61
msgid "To run turtlesim, open a new terminal, and enter the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:67
msgid "The turtlesim window will open, as you saw in the :doc:`previous tutorial <../Introducing-Turtlesim/Introducing-Turtlesim>`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:69
msgid "Here, the package name is ``turtlesim`` and the executable name is ``turtlesim_node``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:71
msgid "We still don't know the node name, however. You can find node names by using ``ros2 node list``"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:75
msgid "2 ros2 node list"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:77
msgid "``ros2 node list`` will show you the names of all running nodes. This is especially useful when you want to interact with a node, or when you have a system running many nodes and need to keep track of them."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:80
msgid "Open a new terminal while turtlesim is still running in the other one, and enter the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:86
msgid "The terminal will return the node name:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:92
msgid "Open another new terminal and start the teleop node with the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:98
msgid "Here, we are referring to the ``turtlesim`` package again, but this time we target the executable named ``turtle_teleop_key``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:100
msgid "Return to the terminal where you ran ``ros2 node list`` and run it again. You will now see the names of two active nodes:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:109
msgid "2.1 Remapping"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:111
msgid "`Remapping <https://design.ros2.org/articles/ros_command_line_arguments.html#name-remapping-rules>`__ allows you to reassign default node properties, like node name, topic names, service names, etc., to custom values. In the last tutorial, you used remapping on ``turtle_teleop_key`` to change the cmd_vel topic and target **turtle2**."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:114
msgid "Now, let's reassign the name of our ``/turtlesim`` node. In a new terminal, run the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:121
msgid "Since you're calling ``ros2 run`` on turtlesim again, another turtlesim window will open. However, now if you return to the terminal where you ran ``ros2 node list``, and run it again, you will see three node names:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:133
msgid "Now that you know the names of your nodes, you can access more information about them with:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:139
msgid "To examine your latest node, ``my_turtle``, run the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:145
msgid "``ros2 node info`` returns a list of subscribers, publishers, services, and actions. i.e. the ROS graph connections that interact with that node. The output should look like this:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:179
msgid "Now try running the same command on the ``/teleop_turtle`` node, and see how its connections differ from ``my_turtle``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:181
msgid "You will learn more about the ROS graph connection concepts including the message types in the upcoming tutorials."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:186
msgid "A node is a fundamental ROS 2 element that serves a single, modular purpose in a robotics system."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:188
msgid "In this tutorial, you utilized nodes created in the ``turtlesim`` package by running the executables ``turtlesim_node`` and ``turtle_teleop_key``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:190
msgid "You learned how to use ``ros2 node list`` to discover active node names and ``ros2 node info`` to introspect a single node. These tools are vital to understanding the flow of data in a complex, real-world robot system."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:196
msgid "Now that you understand nodes in ROS 2, you can move on to the :doc:`topics tutorial <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`. Topics are one of the communication types that connects nodes."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst:202
msgid "The :doc:`../../../Concepts` page adds some more detail to the concept of nodes."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:8
msgid "Understanding parameters"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:10
msgid "**Goal:** Learn how to get, set, save and reload parameters in ROS 2."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:23
msgid "A parameter is a configuration value of a node. You can think of parameters as node settings. A node can store parameters as integers, floats, booleans, strings, and lists. In ROS 2, each node maintains its own parameters. For more background on parameters, please see :doc:`the concept document <../../../Concepts/Basic/About-Parameters>`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:58
msgid "2 ros2 param list"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:60
msgid "To see the parameters belonging to your nodes, open a new terminal and enter the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:66
msgid "You will see the node namespaces, ``/teleop_turtle`` and ``/turtlesim``, followed by each node's parameters:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:88
msgid "Every node has the parameter ``use_sim_time``; it's not unique to turtlesim."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:90
msgid "Based on their names, it looks like ``/turtlesim``'s parameters determine the background color of the turtlesim window using RGB color values."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:92
msgid "To determine a parameter's type, you can use ``ros2 param get``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:96
msgid "3 ros2 param get"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:98
msgid "To display the type and current value of a parameter, use the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:104
msgid "Let's find out the current value of ``/turtlesim``'s parameter ``background_g``:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:110
msgid "Which will return the value:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:116
msgid "Now you know ``background_g`` holds an integer value."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:118
msgid "If you run the same command on ``background_r`` and ``background_b``, you will get the values ``69`` and ``255``, respectively."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:121
msgid "4 ros2 param set"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:123
msgid "To change a parameter's value at runtime, use the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:129
msgid "Let's change ``/turtlesim``'s background color:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:135
msgid "Your terminal should return the message:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:141
msgid "And the background of your turtlesim window should change colors:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:145
msgid "Setting parameters with the ``set`` command will only change them in your current session, not permanently. However, you can save your settings and reload them the next time you start a node."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:149
msgid "5 ros2 param dump"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:151
msgid "You can view all of a node's current parameter values by using the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:157
msgid "The command prints to the standard output (stdout) by default but you can also redirect the parameter values into a file to save them for later. To save your current configuration of ``/turtlesim``'s parameters into the file ``turtlesim.yaml``, enter the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:164
msgid "You will find a new file in the current working directory your shell is running in. If you open this file, you'll see the following content:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:183
msgid "Dumping parameters comes in handy if you want to reload the node with the same parameters in the future."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:186
msgid "6 ros2 param load"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:188
msgid "You can load parameters from a file to a currently running node using the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:194
msgid "To load the ``turtlesim.yaml`` file generated with ``ros2 param dump`` into ``/turtlesim`` node's parameters, enter the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:215
msgid "Read-only parameters can only be modified at startup and not afterwards, that is why there are some warnings for the \"qos_overrides\" parameters."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:218
msgid "7 Load parameter file on node startup"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:220
msgid "To start the same node using your saved parameter values, use:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:226
msgid "This is the same command you always use to start turtlesim, with the added flags ``--ros-args`` and ``--params-file``, followed by the file you want to load."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:228
msgid "Stop your running turtlesim node, and try reloading it with your saved parameters, using:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:234
msgid "The turtlesim window should appear as usual, but with the purple background you set earlier."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:238
msgid "When a parameter file is used at node startup, all parameters, including the read-only ones, will be updated."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:243
msgid "Nodes have parameters to define their default configuration values. You can ``get`` and ``set`` parameter values from the command line. You can also save the parameter settings to a file to reload them in a future session."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst:250
msgid "Jumping back to ROS 2 communication methods, in the next tutorial you'll learn about :doc:`actions <../Understanding-ROS2-Actions/Understanding-ROS2-Actions>`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:8
msgid "Understanding services"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:10
msgid "**Goal:** Learn about services in ROS 2 using command line tools."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:23
msgid "Services are another method of communication for nodes in the ROS graph. Services are based on a call-and-response model versus the publisher-subscriber model of topics. While topics allow nodes to subscribe to data streams and get continual updates, services only provide data when they are specifically called by a client."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:34
msgid "Some concepts mentioned in this tutorial, like :doc:`Nodes <../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` and :doc:`Topics <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`, were covered in previous tutorials in the series."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:36
msgid "You will need the :doc:`turtlesim package <../Introducing-Turtlesim/Introducing-Turtlesim>`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:60
msgid "2 ros2 service list"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:62
msgid "Running the ``ros2 service list`` command in a new terminal will return a list of all the services currently active in the system:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:86
msgid "You will see that both nodes have the same six services with ``parameters`` in their names. Nearly every node in ROS 2 has these infrastructure services that parameters are built off of. There will be more about parameters in the next tutorial. In this tutorial, the parameter services will be omitted from the discussion."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:91
msgid "For now, let's focus on the turtlesim-specific services, ``/clear``, ``/kill``, ``/reset``, ``/spawn``, ``/turtle1/set_pen``, ``/turtle1/teleport_absolute``, and ``/turtle1/teleport_relative``. You may recall interacting with some of these services using rqt in the :doc:`Use turtlesim, ros2, and rqt <../Introducing-Turtlesim/Introducing-Turtlesim>` tutorial."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:96
msgid "3 ros2 service type"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:98
msgid "Services have types that describe how the request and response data of a service is structured. Service types are defined similarly to topic types, except service types have two parts: one message for the request and another for the response."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:101
msgid "To find out the type of a service, use the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:107
msgid "Let's take a look at turtlesim's ``/clear`` service. In a new terminal, enter the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:114
msgid "Which should return:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:120
msgid "The ``Empty`` type means the service call sends no data when making a request and receives no data when receiving a response."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:123
msgid "3.1 ros2 service list -t"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:125
msgid "To see the types of all the active services at the same time, you can append the ``--show-types`` option, abbreviated as ``-t``, to the ``list`` command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:146
msgid "4 ros2 service find"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:148
msgid "If you want to find all the services of a specific type, you can use the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:154
msgid "For example, you can find all the ``Empty`` typed services like this:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:168
msgid "5 ros2 interface show"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:170
msgid "You can call services from the command line, but first you need to know the structure of the input arguments."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:176
msgid "Try this on the ``/clear`` service's type, ``Empty``:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:188
msgid "The ``---`` separates the request structure (above) from the response structure (below). But, as you learned earlier, the ``Empty`` type doesn't send or receive any data. So, naturally, its structure is blank."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:192
msgid "Let's introspect a service with a type that sends and receives data, like ``/spawn``. From the results of ``ros2 service list -t``, we know ``/spawn``'s type is ``turtlesim/srv/Spawn``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:195
msgid "To see the request and response arguments of the ``/spawn`` service, run the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:212
msgid "The information above the ``---`` line tells us the arguments needed to call ``/spawn``. ``x``, ``y`` and ``theta`` determine the 2D pose of the spawned turtle, and ``name`` is clearly optional."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:215
msgid "The information below the line isn't something you need to know in this case, but it can help you understand the data type of the response you get from the call."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:218
msgid "6 ros2 service call"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:220
msgid "Now that you know what a service type is, how to find a service's type, and how to find the structure of that type's arguments, you can call a service using:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:226
msgid "The ``<arguments>`` part is optional. For example, you know that ``Empty`` typed services don't have any arguments:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:233
msgid "This command will clear the turtlesim window of any lines your turtle has drawn."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:237
msgid "Now let's spawn a new turtle by calling ``/spawn`` and setting arguments. Input ``<arguments>`` in a service call from the command-line need to be in YAML syntax."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:246
msgid "You will get this method-style view of what's happening, and then the service response:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:255
msgid "Your turtlesim window will update with the newly spawned turtle right away:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:262
msgid "Nodes can communicate using services in ROS 2. Unlike a topic - a one way communication pattern where a node publishes information that can be consumed by one or more subscribers - a service is a request/response pattern where a client makes a request to a node providing the service and the service processes the request and generates a response."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:265
msgid "You generally don't want to use a service for continuous calls; topics or even actions would be better suited."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:267
msgid "In this tutorial you used command line tools to identify, introspect, and call services."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:272
msgid "In the next tutorial, :doc:`../Understanding-ROS2-Parameters/Understanding-ROS2-Parameters`, you will learn about configuring node settings."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst:277
msgid "Check out `this tutorial <https://discourse.ubuntu.com/t/call-services-in-ros-2/15261>`_; it's an excellent realistic application of ROS services using a Robotis robot arm."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:8
msgid "Understanding topics"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:10
msgid "**Goal:** Use rqt_graph and command line tools to introspect ROS 2 topics."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:23
msgid "ROS 2 breaks complex systems down into many modular nodes. Topics are a vital element of the ROS graph that act as a bus for nodes to exchange messages."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:28
msgid "A node may publish data to any number of topics and simultaneously have subscriptions to any number of topics."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:32
msgid "Topics are one of the main ways in which data is moved between nodes and therefore between different parts of the system."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:38
msgid "The :doc:`previous tutorial <../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` provides some useful background information on nodes that is built upon here."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:48
msgid "By now you should be comfortable starting up turtlesim."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:62
msgid "Recall from the :doc:`previous tutorial <../Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` that the names of these nodes are ``/turtlesim`` and ``/teleop_turtle`` by default."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:66
msgid "2 rqt_graph"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:68
msgid "Throughout this tutorial, we will use ``rqt_graph`` to visualize the changing nodes and topics, as well as the connections between them."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:70
msgid "The :doc:`turtlesim tutorial <../Introducing-Turtlesim/Introducing-Turtlesim>` tells you how to install rqt and all its plugins, including ``rqt_graph``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:72
msgid "To run rqt_graph, open a new terminal and enter the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:78
msgid "You can also open rqt_graph by opening ``rqt`` and selecting **Plugins** > **Introspection** > **Node Graph**."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:82
msgid "You should see the above nodes and topic, as well as two actions around the periphery of the graph (let's ignore those for now). If you hover your mouse over the topic in the center, you'll see the color highlighting like in the image above."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:85
msgid "The graph is depicting how the ``/turtlesim`` node and the ``/teleop_turtle`` node are communicating with each other over a topic. The ``/teleop_turtle`` node is publishing data (the keystrokes you enter to move the turtle around) to the ``/turtle1/cmd_vel`` topic, and the ``/turtlesim`` node is subscribed to that topic to receive the data."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:88
msgid "The highlighting feature of rqt_graph is very helpful when examining more complex systems with many nodes and topics connected in many different ways."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:90
msgid "rqt_graph is a graphical introspection tool. Now we'll look at some command line tools for introspecting topics."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:95
msgid "3 ros2 topic list"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:97
msgid "Running the ``ros2 topic list`` command in a new terminal will return a list of all the topics currently active in the system:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:107
msgid "``ros2 topic list -t`` will return the same list of topics, this time with the topic type appended in brackets:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:117
msgid "These attributes, particularly the type, are how nodes know they're talking about the same information as it moves over topics."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:119
msgid "If you're wondering where all these topics are in rqt_graph, you can uncheck all the boxes under **Hide:**"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:123
msgid "For now, though, leave those options checked to avoid confusion."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:126
msgid "4 ros2 topic echo"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:128
msgid "To see the data being published on a topic, use:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:134
msgid "Since we know that ``/teleop_turtle`` publishes data to ``/turtlesim`` over the ``/turtle1/cmd_vel`` topic, let's use ``echo`` to introspect that topic:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:140
msgid "At first, this command won't return any data. That's because it's waiting for ``/teleop_turtle`` to publish something."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:143
msgid "Return to the terminal where ``turtle_teleop_key`` is running and use the arrows to move the turtle around. Watch the terminal where your ``echo`` is running at the same time, and you'll see position data being published for every movement you make:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:158
msgid "Now return to rqt_graph and uncheck the **Debug** box."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:162
msgid "``/_ros2cli_26646`` is the node created by the ``echo`` command we just ran (the number might be different). Now you can see that the publisher is publishing data over the ``cmd_vel`` topic, and two subscribers are subscribed to it."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:166
msgid "5 ros2 topic info"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:168
msgid "Topics don't have to only be one-to-one communication; they can be one-to-many, many-to-one, or many-to-many."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:170
msgid "Another way to look at this is running:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:187
msgid "Nodes send data over topics using messages. Publishers and subscribers must send and receive the same type of message to communicate."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:190
msgid "The topic types we saw earlier after running ``ros2 topic list -t`` let us know what message type is used on each topic. Recall that the ``cmd_vel`` topic has the type:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:197
msgid "This means that in the package ``geometry_msgs`` there is a ``msg`` called ``Twist``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:199
msgid "Now we can run ``ros2 interface show <msg type>`` on this type to learn its details. Specifically, what structure of data the message expects."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:206
msgid "For the message type from above it yields:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:221
msgid "This tells you that the ``/turtlesim`` node is expecting a message with two vectors, ``linear`` and ``angular``, of three elements each. If you recall the data we saw ``/teleop_turtle`` passing to ``/turtlesim`` with the ``echo`` command, it's in the same structure:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:237
msgid "7 ros2 topic pub"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:239
msgid "Now that you have the message structure, you can publish data onto a topic directly from the command line using:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:245
msgid "The ``'<args>'`` argument is the actual data you'll pass to the topic, in the structure you just discovered in the previous section."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:247
msgid "It's important to note that this argument needs to be input in YAML syntax. Input the full command like so:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:254
msgid "``--once`` is an optional argument meaning “publish one message then exit”."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:256
msgid "You will see the following output in the terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:263
msgid "And you will see your turtle move like so:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:267
msgid "The turtle (and commonly the real robots which it is meant to emulate) require a steady stream of commands to operate continuously. So, to get the turtle to keep moving, you can run:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:274
msgid "The difference here is the removal of the ``--once`` option and the addition of the ``--rate 1`` option, which tells ``ros2 topic pub`` to publish the command in a steady stream at 1 Hz."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:278
msgid "You can refresh rqt_graph to see what's happening graphically. You will see that the ``ros2 topic pub ...`` node (``/_ros2cli_30358``) is publishing over the ``/turtle1/cmd_vel`` topic, which is being received by both the ``ros2 topic echo ...`` node (``/_ros2cli_26646``) and the ``/turtlesim`` node now."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:283
msgid "Finally, you can run ``echo`` on the ``pose`` topic and recheck rqt_graph:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:291
msgid "You can see that the ``/turtlesim`` node is also publishing to the ``pose`` topic, which the new ``echo`` node has subscribed to."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:294
msgid "8 ros2 topic hz"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:296
msgid "For one last introspection on this process, you can view the rate at which data is published using:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:302
msgid "It will return data on the rate at which the ``/turtlesim`` node is publishing data to the ``pose`` topic."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:309
msgid "Recall that you set the rate of ``turtle1/cmd_vel`` to publish at a steady 1 Hz using ``ros2 topic pub --rate 1``. If you run the above command with ``turtle1/cmd_vel`` instead of ``turtle1/pose``, you will see an average reflecting that rate."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:317
msgid "9 Clean up"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:319
msgid "At this point you'll have a lot of nodes running. Don't forget to stop them by entering ``Ctrl+C`` in each terminal."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:325
msgid "Nodes publish information over topics, which allows any number of other nodes to subscribe to and access that information. In this tutorial you examined the connections between several nodes over topics using rqt_graph and command line tools. You should now have a good idea of how data moves around a ROS 2 system."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst:332
msgid "Next you'll learn about another communication type in the ROS graph with the tutorial :doc:`../Understanding-ROS2-Services/Understanding-ROS2-Services`."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:8
msgid "Using ``rqt_console`` to view logs"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:10
msgid "**Goal:** Get to know ``rqt_console``, a tool for introspecting log messages."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:23
msgid "``rqt_console`` is a GUI tool used to introspect log messages in ROS 2. Typically, log messages show up in your terminal. With ``rqt_console``, you can collect those messages over time, view them closely and in a more organized manner, filter them, save them and even reload the saved files to introspect at a different time."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:27
msgid "Nodes use logs to output messages concerning events and status in a variety of ways. Their content is usually informational, for the sake of the user."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:33
msgid "You will need :doc:`rqt_console and turtlesim <../Introducing-Turtlesim/Introducing-Turtlesim>` installed."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:44
msgid "Start ``rqt_console`` in a new terminal with the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:50
msgid "The ``rqt_console`` window will open:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:54
msgid "The first section of the console is where log messages from your system will display."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:56
msgid "In the middle you have the option to filter messages by excluding severity levels. You can also add more exclusion filters using the plus-sign button to the right."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:59
msgid "The bottom section is for highlighting messages that include a string you input. You can add more filters to this section as well."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:62
msgid "Now start ``turtlesim`` in a new terminal with the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:69
msgid "2 Messages on rqt_console"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:71
msgid "To produce log messages for ``rqt_console`` to display, let's have the turtle run into the wall. In a new terminal, enter the ``ros2 topic pub`` command (discussed in detail in the :doc:`topics tutorial <../Understanding-ROS2-Topics/Understanding-ROS2-Topics>`) below:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:78
msgid "Since the above command is publishing the topic at a steady rate, the turtle is continuously running into the wall. In ``rqt_console`` you will see the same message with the ``Warn`` severity level displayed over and over, like so:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:83
msgid "Press ``Ctrl+C`` in the terminal where you ran the ``ros2 topic pub`` command to stop your turtle from running into the wall."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:86
msgid "3 Logger levels"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:88
msgid "ROS 2's logger levels are ordered by severity:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:98
msgid "There is no exact standard for what each level indicates, but it's safe to assume that:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:100
msgid "``Fatal`` messages indicate the system is going to terminate to try to protect itself from detriment."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:101
msgid "``Error`` messages indicate significant issues that won't necessarily damage the system, but are preventing it from functioning properly."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:102
msgid "``Warn`` messages indicate unexpected activity or non-ideal results that might represent a deeper issue, but don't harm functionality outright."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:103
msgid "``Info`` messages indicate event and status updates that serve as a visual verification that the system is running as expected."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:104
msgid "``Debug`` messages detail the entire step-by-step process of the system execution."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:106
msgid "The default level is ``Info``. You will only see messages of the default severity level and more-severe levels."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:109
msgid "Normally, only ``Debug`` messages are hidden because they're the only level less severe than ``Info``. For example, if you set the default level to ``Warn``, you would only see messages of severity ``Warn``, ``Error``, and ``Fatal``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:113
msgid "3.1 Set the default logger level"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:115
msgid "You can set the default logger level when you first run the ``/turtlesim`` node using remapping. Enter the following command in your terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:122
msgid "Now you won't see the initial ``Info`` level messages that came up in the console last time you started ``turtlesim``. That's because ``Info`` messages are lower priority than the new default severity, ``Warn``."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:128
msgid "``rqt_console`` can be very helpful if you need to closely examine the log messages from your system. You might want to examine log messages for any number of reasons, usually to find out where something went wrong and the series of events leading up to that."
msgstr ""

#: ../../source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst:134
msgid "The next tutorial will teach you about starting multiple nodes at once with :doc:`ROS 2 Launch <../Launching-Multiple-Nodes/Launching-Multiple-Nodes>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries.rst:2
msgid "Beginner: Client libraries"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:9
msgid "Using ``colcon`` to build packages"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:15
msgid "**Goal:** Build a ROS 2 workspace with ``colcon``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:21
msgid "This is a brief tutorial on how to create and build a ROS 2 workspace with ``colcon``. It is a practical tutorial and not designed to replace the core documentation."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:27
msgid "``colcon`` is an iteration on the ROS build tools ``catkin_make``, ``catkin_make_isolated``, ``catkin_tools`` and ``ament_tools``. For more information on the design of colcon see `this document <https://design.ros2.org/articles/build_tool.html>`__."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:30
msgid "The source code can be found in the `colcon GitHub organization <https://github.com/colcon>`__."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:36
msgid "Install colcon"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:60
msgid "Install ROS 2"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:62
msgid "To build the samples, you will need to install ROS 2."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:64
msgid "Follow the :doc:`installation instructions <../../Installation>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:66
msgid "If installing from Debian packages, this tutorial requires the :ref:`desktop installation <linux-install-debians-install-ros-2-packages>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:69
msgid "Basics"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:71
msgid "A ROS workspace is a directory with a particular structure. Commonly there is a ``src`` subdirectory. Inside that subdirectory is where the source code of ROS packages will be located. Typically the directory starts otherwise empty."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:76
msgid "colcon does out of source builds. By default it will create the following directories as peers of the ``src`` directory:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:79
msgid "The ``build`` directory will be where intermediate files are stored. For each package a subfolder will be created in which e.g. CMake is being invoked."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:81
msgid "The ``install`` directory is where each package will be installed to. By default each package will be installed into a separate subdirectory."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:83
msgid "The ``log`` directory contains various logging information about each colcon invocation."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:85
msgid "Compared to catkin there is no ``devel`` directory."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:88
msgid "Create a workspace"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:90
msgid "First, create a directory (``ros2_ws``) to contain our workspace:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:115
msgid "At this point the workspace contains a single empty directory ``src``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:125
msgid "Add some sources"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:127
msgid "Let's clone the `examples <https://github.com/ros2/examples>`__ repository into the ``src`` directory of the workspace:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:133
msgid "Now the workspace should have the source code to the ROS 2 examples:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:149
msgid "Source an underlay"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:151
msgid "It is important that we have sourced the environment for an existing ROS 2 installation that will provide our workspace with the necessary build dependencies for the example packages. This is achieved by sourcing the setup script provided by a binary installation or a source installation, ie. another colcon workspace (see :doc:`Installation <../../Installation>`). We call this environment an **underlay**."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:155
msgid "Our workspace, ``ros2_ws``, will be an **overlay** on top of the existing ROS 2 installation. In general, it is recommended to use an overlay when you plan to iterate on a small number of packages, rather than putting all of your packages into the same workspace."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:159
msgid "Build the workspace"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:163
msgid "To build packages on Windows you need to be in a Visual Studio environment, see :ref:`Building the ROS 2 Code <windows-dev-build-ros2>` for more details."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:165
msgid "In the root of the workspace, run ``colcon build``. Since build types such as ``ament_cmake`` do not support the concept of the ``devel`` space and require the package to be installed, colcon supports the option ``--symlink-install``. This allows the installed files to be changed by changing the files in the ``source`` space (e.g. Python files or other non-compiled resources) for faster iteration."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:189 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:206 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:301
msgid "Windows doesn't allow long paths, so ``merge-install`` will combine all the paths into the ``install`` directory."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:191
msgid "After the build is finished, we should see the ``build``, ``install``, and ``log`` directories:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:206
msgid "Run tests"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:208
msgid "To run tests for the packages we just built, run the following:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:226
msgid "Remember to use a ``x64 Native Tools Command Prompt for VS 2019`` for executing the following command, as we are going to build a workspace."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:232
msgid "You also need to specify ``--merge-install`` here since we used it for building above."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:237
msgid "Source the environment"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:239
msgid "When colcon has completed building successfully, the output will be in the ``install`` directory. Before you can use any of the installed executables or libraries, you will need to add them to your path and library paths. colcon will have generated bash/bat files in the ``install`` directory to help set up the environment. These files will add all of the required elements to your path and library paths as well as provide any bash or shell commands exported by packages."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:264
msgid "Or with Powershell:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:271
msgid "Try a demo"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:273
msgid "With the environment sourced, we can run executables built by colcon. Let's run a subscriber node from the examples:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:280
msgid "In another terminal, let's run a publisher node (don't forget to source the setup script):"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:286
msgid "You should see messages from the publisher and subscriber with numbers incrementing."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:289
msgid "Create your own package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:291
msgid "colcon uses the ``package.xml`` specification defined in `REP 149 <https://www.ros.org/reps/rep-0149.html>`__ (`format 2 <https://www.ros.org/reps/rep-0140.html>`__ is also supported)."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:293
msgid "colcon supports multiple build types. The recommended build types are ``ament_cmake`` and ``ament_python``. Also supported are pure ``cmake`` packages."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:297
msgid "An example of an ``ament_python`` build is the `ament_index_python package <https://github.com/ament/ament_index/tree/humble/ament_index_python>`__ , where the setup.py is the primary entry point for building."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:299
msgid "A package such as `demo_nodes_cpp <https://github.com/ros2/demos/tree/humble/demo_nodes_cpp>`__ uses the ``ament_cmake`` build type, and uses CMake as the build tool."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:301
msgid "For convenience, you can use the tool ``ros2 pkg create`` to create a new package based on a template."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:303
msgid "For ``catkin`` users, this is the equivalent of ``catkin_create_package``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:306
msgid "Setup ``colcon_cd``"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:308
msgid "The command ``colcon_cd`` allows you to quickly change the current working directory of your shell to the directory of a package. As an example ``colcon_cd some_ros_package`` would quickly bring you to the directory ``~/ros2_ws/src/some_ros_package``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:329 ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:355
msgid "Not yet available"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:331
msgid "Depending on the way you installed ``colcon_cd`` and where your workspace is, the instructions above may vary, please refer to `the documentation <https://colcon.readthedocs.io/en/released/user/installation.html#quick-directory-changes>`__ for more details. To undo this in Linux and macOS, locate your system's shell startup script and remove the appended source and export commands."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:335
msgid "Setup ``colcon`` tab completion"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:337
msgid "The command ``colcon`` `supports command completion <https://colcon.readthedocs.io/en/released/user/installation.html#enable-completion>`__ for bash and bash-like shells if the ``colcon-argcomplete`` package is installed."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:357
msgid "Depending on the way you installed ``colcon`` and where your workspace is, the instructions above may vary, please refer to `the documentation <https://colcon.readthedocs.io/en/released/user/installation.html>`__ for more details. To undo this in Linux and macOS, locate your system's shell startup script and remove the appended source command."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:361
msgid "Tips"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:363
msgid "If you do not want to build a specific package place an empty file named ``COLCON_IGNORE`` in the directory and it will not be indexed."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:365
msgid "If you want to avoid configuring and building tests in CMake packages you can pass: ``--cmake-args -DBUILD_TESTING=0``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst:367
msgid "If you want to run a single particular test from a package:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:8
msgid "Creating a workspace"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:10
msgid "**Goal:** Create a workspace and learn how to set up an overlay for development and testing."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:23
msgid "A workspace is a directory containing ROS 2 packages. Before using ROS 2, it's necessary to source your ROS 2 installation workspace in the terminal you plan to work in. This makes ROS 2's packages available for you to use in that terminal."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:27
msgid "You also have the option of sourcing an \"overlay\" - a secondary workspace where you can add new packages without interfering with the existing ROS 2 workspace that you're extending, or \"underlay\". Your underlay must contain the dependencies of all the packages in your overlay. Packages in your overlay will override packages in the underlay. It's also possible to have several layers of underlays and overlays, with each successive overlay using the packages of its parent underlays."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:36
msgid ":doc:`ROS 2 installation <../../../Installation>`"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:37
msgid ":doc:`colcon installation <../Colcon-Tutorial>`"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:38
msgid "`git installation <https://git-scm.com/book/en/v2/Getting-Started-Installing-Git>`__"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:39
msgid ":doc:`turtlesim installation <../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>`"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:40
msgid "Have :doc:`rosdep installed <../../Intermediate/Rosdep>`"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:41
msgid "Understanding of basic terminal commands (`here's a guide for Linux <http://www.ee.surrey.ac.uk/Teaching/Unix/>`__)"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:42
msgid "Text editor of your choice"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:48
msgid "1 Source ROS 2 environment"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:50
msgid "Your main ROS 2 installation will be your underlay for this tutorial. (Keep in mind that an underlay does not necessarily have to be the main ROS 2 installation.)"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:53
msgid "Depending on how you installed ROS 2 (from source or binaries), and which platform you're on, your exact source command will vary:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:71
msgid "Remember to use a ``x64 Native Tools Command Prompt for VS 2019`` for executing the following commands, as we are going to build a workspace."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:77
msgid "Consult the :doc:`installation guide <../../../Installation>` you followed if these commands don't work for you."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:82
msgid "2 Create a new directory"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:84
msgid "Best practice is to create a new directory for every new workspace. The name doesn't matter, but it is helpful to have it indicate the purpose of the workspace. Let's choose the directory name ``ros2_ws``, for \"development workspace\":"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:112
msgid "Another best practice is to put any packages in your workspace into the ``src`` directory. The above code creates a ``src`` directory inside ``ros2_ws`` and then navigates into it."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:117
msgid "3 Clone a sample repo"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:119
msgid "Ensure you're still in the ``ros2_ws/src`` directory before you clone."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:121
msgid "In the rest of the beginner developer tutorials, you will create your own packages, but for now you will practice putting a workspace together using existing packages."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:123
msgid "If you went through the :doc:`Beginner: CLI Tools <../../Beginner-CLI-Tools>` tutorials, you'll be familiar with ``turtlesim``, one of the packages in `ros_tutorials <https://github.com/ros/ros_tutorials/>`__."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:125
msgid "A repo can have multiple branches. You need to check out the one that targets your installed ROS 2 distro. When you clone this repo, add the ``-b`` argument followed by that branch."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:129
msgid "In the ``ros2_ws/src`` directory, run the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:135
msgid "Now ``ros_tutorials`` is cloned in your workspace.  The ``ros_tutorials`` repository contains the ``turtlesim`` package, which we'll use in the rest of this tutorial.  The other packages in this repository are not built because they contain a ``COLCON_IGNORE`` file."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:137
msgid "So far you have populated your workspace with a sample package, but it isn't a fully-functional workspace yet. You need to resolve the dependencies first and then build the workspace."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:142
msgid "4 Resolve dependencies"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:144
msgid "Before building the workspace, you need to resolve the package dependencies. You may have all the dependencies already, but best practice is to check for dependencies every time you clone. You wouldn't want a build to fail after a long wait only to realize that you have missing dependencies."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:148
msgid "From the root of your workspace (``ros2_ws``), run the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:162 ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:166
msgid "rosdep only runs on Linux, so you can skip ahead to section \"5 Build the workspace with colcon\"."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:168
msgid "If you installed ROS 2 on Linux from source or the \"fat\" archive, you will need to use the rosdep command from their installation instructions. Here are the :ref:`from-source rosdep section <linux-development-setup-install-dependencies-using-rosdep>` and the :ref:`\"fat\" archive rosdep section <linux-install-binary-install-missing-dependencies>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:171
msgid "If you already have all your dependencies, the console will return:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:177
msgid "Packages declare their dependencies in the package.xml file (you will learn more about packages in the next tutorial). This command walks through those declarations and installs the ones that are missing. You can learn more about ``rosdep`` in another tutorial (coming soon)."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:182
msgid "5 Build the workspace with colcon"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:184
msgid "From the root of your workspace (``ros2_ws``), you can now build your packages using the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:208
msgid "The console will return the following message:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:219
msgid "Other useful arguments for ``colcon build``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:221
msgid "``--packages-up-to`` builds the package you want, plus all its dependencies, but not the whole workspace (saves time)"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:222
msgid "``--symlink-install`` saves you from having to rebuild every time you tweak python scripts"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:223
msgid "``--event-handlers console_direct+`` shows console output while building (can otherwise be found in the ``log`` directory)"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:225
msgid "Once the build is finished, enter the command in the workspace root (``~/ros2_ws``):"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:247
msgid "And you will see that colcon has created new directories:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:253
msgid "The ``install`` directory is where your workspace's setup files are, which you can use to source your overlay."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:257
msgid "6 Source the overlay"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:259
msgid "Before sourcing the overlay, it is very important that you open a new terminal, separate from the one where you built the workspace. Sourcing an overlay in the same terminal where you built, or likewise building where an overlay is sourced, may create complex issues."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:262
msgid "In the new terminal, source your main ROS 2 environment as the \"underlay\", so you can build the overlay \"on top of\" it:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:280
msgid "In this case you can use a normal command prompt, as we are not going to build any workspace in this terminal."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:286
msgid "Go into the root of your workspace:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:308
msgid "In the root, source your overlay:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:332
msgid "Sourcing the ``local_setup`` of the overlay will only add the packages available in the overlay to your environment. ``setup`` sources the overlay as well as the underlay it was created in, allowing you to utilize both workspaces."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:335
msgid "So, sourcing your main ROS 2 installation's ``setup`` and then the ``ros2_ws`` overlay's ``local_setup``, like you just did, is the same as just sourcing ``ros2_ws``'s ``setup``, because that includes the environment of its underlay."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:338
msgid "Now you can run the ``turtlesim`` package from the overlay:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:344
msgid "But how can you tell that this is the overlay turtlesim running, and not your main installation's turtlesim?"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:346
msgid "Let's modify turtlesim in the overlay so you can see the effects:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:348
msgid "You can modify and rebuild packages in the overlay separately from the underlay."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:349
msgid "The overlay takes precedence over the underlay."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:353
msgid "7 Modify the overlay"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:355
msgid "You can modify ``turtlesim`` in your overlay by editing the title bar on the turtlesim window. To do this, locate the ``turtle_frame.cpp`` file in ``~/ros2_ws/src/ros_tutorials/turtlesim/src``. Open ``turtle_frame.cpp`` with your preferred text editor."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:359
msgid "On line 52 you will see the function ``setWindowTitle(\"TurtleSim\");``. Change the value ``\"TurtleSim\"`` to ``\"MyTurtleSim\"``, and save the file."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:362
msgid "Return to the first terminal where you ran ``colcon build`` earlier and run it again."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:364
msgid "Return to the second terminal (where the overlay is sourced) and run turtlesim again:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:370
msgid "You will see the title bar on the turtlesim window now says \"MyTurtleSim\"."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:374
msgid "Even though your main ROS 2 environment was sourced in this terminal earlier, the overlay of your ``ros2_ws`` environment takes precedence over the contents of the underlay."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:376
msgid "To see that your underlay is still intact, open a brand new terminal and source only your ROS 2 installation. Run turtlesim again:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:385
msgid "You can see that modifications in the overlay did not actually affect anything in the underlay."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:390
msgid "In this tutorial, you sourced your main ROS 2 distro install as your underlay, and created an overlay by cloning and building packages in a new workspace. The overlay gets prepended to the path, and takes precedence over the underlay, as you saw with your modified turtlesim."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:393
msgid "Using overlays is recommended for working on a small number of packages, so you don't have to put everything in the same workspace and rebuild a huge workspace on every iteration."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst:398
msgid "Now that you understand the details behind creating, building and sourcing your own workspace, you can learn how to :doc:`create your own packages <../Creating-Your-First-ROS2-Package>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:8
msgid "Creating a package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:10
msgid "**Goal:** Create a new package using either CMake or Python, and run its executable."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:24
msgid "1 What is a ROS 2 package?"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:26
msgid "A package is an organizational unit for your ROS 2 code. If you want to be able to install your code or share it with others, then you'll need it organized in a package. With packages, you can release your ROS 2 work and allow others to build and use it easily."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:30
msgid "Package creation in ROS 2 uses ament as its build system and colcon as its build tool. You can create a package using either CMake or Python, which are officially supported, though other build types do exist."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:34
msgid "2 What makes up a ROS 2 package?"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:36
msgid "ROS 2 Python and CMake packages each have their own minimum required contents:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:40 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:59 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:160 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:178 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:196 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:355 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:374 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:403 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:477
msgid "CMake"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:42
msgid "``CMakeLists.txt`` file that describes how to build the code within the package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:43
msgid "``include/<package_name>`` directory containing the public headers for the package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:44 ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:49
msgid "``package.xml`` file containing meta information about the package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:45
msgid "``src`` directory containing the source code for the package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:50
msgid "``resource/<package_name>`` marker file for the package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:51
msgid "``setup.cfg`` is required when a package has executables, so ``ros2 run`` can find them"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:52
msgid "``setup.py`` containing instructions for how to install the package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:53
msgid "``<package_name>`` - a directory with the same name as your package, used by ROS 2 tools to find your package, contains ``__init__.py``"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:55
msgid "The simplest possible package may have a file structure that looks like:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:82
msgid "3 Packages in a workspace"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:84
msgid "A single workspace can contain as many packages as you want, each in their own folder. You can also have packages of different build types in one workspace (CMake, Python, etc.). You cannot have nested packages."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:88
msgid "Best practice is to have a ``src`` folder within your workspace, and to create your packages in there. This keeps the top level of the workspace “clean”."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:91
msgid "A trivial workspace might look like:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:120
msgid "You should have a ROS 2 workspace after following the instructions in the :doc:`previous tutorial <./Creating-A-Workspace/Creating-A-Workspace>`. You will create your package in this workspace."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:130
msgid "First, :doc:`source your ROS 2 installation <../Beginner-CLI-Tools/Configuring-ROS2-Environment>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:132
msgid "Let's use the workspace you created in the :ref:`previous tutorial <new-directory>`, ``ros2_ws``, for your new package."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:134
msgid "Make sure you are in the ``src`` folder before running the package creation command."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:156
msgid "The command syntax for creating a new package in ROS 2 is:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:172
msgid "For this tutorial, you will use the optional argument ``--node-name`` which creates a simple Hello World type executable in the package."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:174
msgid "Enter the following command in your terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:190
msgid "You will now have a new folder within your workspace's ``src`` directory called ``my_package``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:192
msgid "After running the command, your terminal will return the message:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:249
msgid "You can see the automatically generated files for the new package."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:252
msgid "2 Build a package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:254
msgid "Putting packages in a workspace is especially valuable because you can build many packages at once by running ``colcon build`` in the workspace root. Otherwise, you would have to build each package individually."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:257
msgid "Return to the root of your workspace:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:279
msgid "Now you can build your packages:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:303
msgid "Recall from the last tutorial that you also have the ``ros_tutorials`` packages in your ``ros2_ws``. You might have noticed that running ``colcon build`` also built the ``turtlesim`` package. That's fine when you only have a few packages in your workspace, but when there are many packages, ``colcon build`` can take a long time."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:307
msgid "To build only the ``my_package`` package next time, you can run:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:314
msgid "3 Source the setup file"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:316
msgid "To use your new package and executable, first open a new terminal and source your main ROS 2 installation."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:318
msgid "Then, from inside the ``ros2_ws`` directory, run the following command to source your workspace:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:340
msgid "Now that your workspace has been added to your path, you will be able to use your new package's executables."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:343
msgid "4 Use the package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:345
msgid "To run the executable you created using the ``--node-name`` argument during package creation, enter the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:351
msgid "Which will return a message to your terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:368
msgid "5 Examine package contents"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:370
msgid "Inside ``ros2_ws/src/my_package``, you will see the files and folders that ``ros2 pkg create`` automatically generated:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:380
msgid "``my_node.cpp`` is inside the ``src`` directory. This is where all your custom C++ nodes will go in the future."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:389
msgid "``my_node.py`` is inside the ``my_package`` directory. This is where all your custom Python nodes will go in the future."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:393
msgid "6 Customize package.xml"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:395
msgid "You may have noticed in the return message after creating your package that the fields ``description`` and ``license`` contain ``TODO`` notes. That's because the package description and license declaration are not automatically set, but are required if you ever want to release your package. The ``maintainer`` field may also need to be filled in."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:399
msgid "From ``ros2_ws/src/my_package``, open ``package.xml`` using your preferred text editor:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:453
msgid "Input your name and email on the ``maintainer`` line if it hasn't been automatically populated for you. Then, edit the ``description`` line to summarize the package:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:460
msgid "Then, update the ``license`` line. You can read more about open source licenses `here <https://opensource.org/licenses/alphabetical>`__. Since this package is only for practice, it's safe to use any license. We'll use ``Apache License 2.0``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:469
msgid "Don't forget to save once you're done editing."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:471
msgid "Below the license tag, you will see some tag names ending with ``_depend``. This is where your ``package.xml`` would list its dependencies on other packages, for colcon to search for. ``my_package`` is simple and doesn't have any dependencies, but you will see this space being utilized in upcoming tutorials."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:479
msgid "You're all done for now!"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:483
msgid "The ``setup.py`` file contains the same description, maintainer and license fields as ``package.xml``, so you need to set those as well. They need to match exactly in both files. The version and name (``package_name``) also need to match exactly, and should be automatically populated in both files."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:487
msgid "Open ``setup.py`` with your preferred text editor."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:518
msgid "Edit the ``maintainer``, ``maintainer_email``, and ``description`` lines to match ``package.xml``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:520
msgid "Don't forget to save the file."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:526
msgid "You've created a package to organize your code and make it easy to use for others."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:528
msgid "Your package was automatically populated with the necessary files, and then you used colcon to build it so you can use its executables in your local environment."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst:533
msgid "Next, let's add something meaningful to a package. You'll start with a simple publisher/subscriber system, which you can choose to write in either :doc:`C++ <./Writing-A-Simple-Cpp-Publisher-And-Subscriber>` or :doc:`Python <./Writing-A-Simple-Py-Publisher-And-Subscriber>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:8
msgid "Creating custom msg and srv files"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:10
msgid "**Goal:** Define custom interface files (``.msg`` and ``.srv``) and use them with Python and C++ nodes."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:23
msgid "In previous tutorials you utilized message and service interfaces to learn about :doc:`topics <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>`, :doc:`services <../Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services>`, and simple publisher/subscriber (:doc:`C++ <./Writing-A-Simple-Cpp-Publisher-And-Subscriber>`/:doc:`Python<./Writing-A-Simple-Py-Publisher-And-Subscriber>`) and service/client (:doc:`C++ <./Writing-A-Simple-Cpp-Service-And-Client>`/:doc:`Python<./Writing-A-Simple-Py-Service-And-Client>`) nodes. The interfaces you used were predefined in those cases."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:26
msgid "While it's good practice to use predefined interface definitions, you will probably need to define your own messages and services sometimes as well. This tutorial will introduce you to the simplest method of creating custom interface definitions."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:32
msgid "You should have a :doc:`ROS 2 workspace <./Creating-A-Workspace/Creating-A-Workspace>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:34
msgid "This tutorial also uses the packages created in the publisher/subscriber (:doc:`C++ <./Writing-A-Simple-Cpp-Publisher-And-Subscriber>` and :doc:`Python<./Writing-A-Simple-Py-Publisher-And-Subscriber>`) and service/client  (:doc:`C++ <./Writing-A-Simple-Cpp-Service-And-Client>` and :doc:`Python<./Writing-A-Simple-Py-Service-And-Client>`) tutorials to try out the new custom messages."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:40
msgid "1 Create a new package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:42
msgid "For this tutorial you will be creating custom ``.msg`` and ``.srv`` files in their own package, and then utilizing them in a separate package. Both packages should be in the same workspace."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:45
msgid "Since we will use the pub/sub and service/client packages created in earlier tutorials, make sure you are in the same workspace as those packages (``ros2_ws/src``), and then run the following command to create a new package:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:51
msgid "``tutorial_interfaces`` is the name of the new package. Note that it is, and can only be, a CMake package, but this doesn't restrict in which type of packages you can use your messages and services. You can create your own custom interfaces in a CMake package, and then use it in a C++ or Python node, which will be covered in the last section."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:55
msgid "The ``.msg`` and ``.srv`` files are required to be placed in directories called ``msg`` and ``srv`` respectively. Create the directories in ``ros2_ws/src/tutorial_interfaces``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:63
msgid "2 Create custom definitions"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:66
msgid "2.1 msg definition"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:68
msgid "In the ``tutorial_interfaces/msg`` directory you just created, make a new file called ``Num.msg`` with one line of code declaring its data structure:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:74
msgid "This is a custom message that transfers a single 64-bit integer called ``num``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:76
msgid "Also in the ``tutorial_interfaces/msg`` directory you just created, make a new file called ``Sphere.msg`` with the following content:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:83
msgid "This custom message uses a message from another message package (``geometry_msgs/Point`` in this case)."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:86
msgid "2.2 srv definition"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:88
msgid "Back in the ``tutorial_interfaces/srv`` directory you just created, make a new file called ``AddThreeInts.srv`` with the following request and response structure:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:98
msgid "This is your custom service that requests three integers named ``a``, ``b``, and ``c``, and responds with an integer called ``sum``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:101
msgid "3 ``CMakeLists.txt``"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:103
msgid "To convert the interfaces you defined into language-specific code (like C++ and Python) so that they can be used in those languages, add the following lines to ``CMakeLists.txt``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:119
msgid "The first argument (library name) in the rosidl_generate_interfaces must match ${PROJECT_NAME} (see https://github.com/ros2/rosidl/issues/441#issuecomment-591025515)."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:122
msgid "4 ``package.xml``"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:124
msgid "Because the interfaces rely on ``rosidl_default_generators`` for generating language-specific code, you need to declare a build tool dependency on it. ``rosidl_default_runtime`` is a runtime or execution-stage dependency, needed to be able to use the interfaces later. The ``rosidl_interface_packages`` is the name of the dependency group that your package, ``tutorial_interfaces``, should be associated with, declared using the ``<member_of_group>`` tag."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:128
msgid "Add the following lines within the ``<package>`` element of ``package.xml``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:138
msgid "5 Build the ``tutorial_interfaces`` package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:140
msgid "Now that all the parts of your custom interfaces package are in place, you can build the package. In the root of your workspace (``~/ros2_ws``), run the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:163
msgid "Now the interfaces will be discoverable by other ROS 2 packages."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:166
msgid "6 Confirm msg and srv creation"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:168
msgid "In a new terminal, run the following command from within your workspace (``ros2_ws``) to source it:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:190
msgid "Now you can confirm that your interface creation worked by using the ``ros2 interface show`` command:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:196 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:208 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:224
msgid "should return:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:202 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:218
msgid "And"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:235
msgid "7 Test the new interfaces"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:237
msgid "For this step you can use the packages you created in previous tutorials. A few simple modifications to the nodes, ``CMakeLists.txt`` and ``package.xml`` files will allow you to use your new interfaces."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:241
msgid "7.1 Testing ``Num.msg`` with pub/sub"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:243
msgid "With a few modifications to the publisher/subscriber package created in a previous tutorial (:doc:`C++ <./Writing-A-Simple-Cpp-Publisher-And-Subscriber>` or :doc:`Python <./Writing-A-Simple-Py-Publisher-And-Subscriber>`), you can see ``Num.msg`` in action. Since you'll be changing the standard string msg to a numerical one, the output will be slightly different."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:246
msgid "**Publisher**"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:336
msgid "**Subscriber**"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:418 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:716
msgid "**CMakeLists.txt**"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:420 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:718
msgid "Add the following lines (C++ only):"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:444 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:744
msgid "**package.xml**"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:446 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:746
msgid "Add the following line:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:463 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:763
msgid "After making the above edits and saving all the changes, build the package:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:469 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:483 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:769 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:784
msgid "On Linux/macOS:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:475 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:489 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:775 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:790
msgid "On Windows:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:495 ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:796
msgid "Then open two new terminals, source ``ros2_ws`` in each, and run:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:519
msgid "Since ``Num.msg`` relays only an integer, the talker should only be publishing integer values, as opposed to the string it published previously:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:529
msgid "7.2 Testing ``AddThreeInts.srv`` with service/client"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:531
msgid "With a few modifications to the service/client package created in a previous tutorial (:doc:`C++ <./Writing-A-Simple-Cpp-Service-And-Client>` or :doc:`Python <./Writing-A-Simple-Py-Service-And-Client>`), you can see ``AddThreeInts.srv`` in action. Since you'll be changing the original two integer request srv to a three integer request srv, the output will be slightly different."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:534
msgid "**Service**"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:605
msgid "**Client**"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:824
msgid "In this tutorial, you learned how to create custom interfaces in their own package and how to utilize those interfaces in other packages."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:826
msgid "This tutorial only scratches the surface about defining custom interfaces. You can learn more about it in :doc:`About ROS 2 interfaces <../../Concepts/Basic/About-Interfaces>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst:832
msgid "The :doc:`next tutorial <./Single-Package-Define-And-Use-Interface>` covers more ways to use interfaces in ROS 2."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:8
msgid "Using ``ros2doctor`` to identify issues"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:10
msgid "**Goal:** Identify issues in your ROS 2 setup using the ``ros2doctor`` tool."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:23
msgid "When your ROS 2 setup is not running as expected, you can check its settings with the ``ros2doctor`` tool."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:25
msgid "``ros2doctor`` checks all aspects of ROS 2, including platform, version, network, environment, running systems and more, and warns you about possible errors and reasons for issues."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:30
msgid "``ros2doctor`` is part of the ``ros2cli`` package. As long as you have ``ros2cli`` installed (which any normal install should have), you will be able to use ``ros2doctor``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:33
msgid "This tutorial uses :doc:`turtlesim <../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>` to illustrate some of the examples."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:39
msgid "1 Check your setup"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:41
msgid "Let's examine your general ROS 2 setup as a whole with ``ros2doctor``. First, source ROS 2 in a new terminal, then enter the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:48
msgid "This will conduct checks over all your setup modules and return warnings and errors."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:50
msgid "If your ROS 2 setup is in perfect shape, you'll see a message similar to this:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:56
msgid "However, it's not unusual to have a few warnings returned. A ``UserWarning`` doesn't mean your setup is unusable; it's more likely just an indication that something is configured in a way that's not ideal."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:59
msgid "If you do receive a warning, it will look something like this:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:65
msgid "For example, ``ros2doctor`` will find this warning if you're using an unstable ROS 2 distribution:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:71
msgid "If ``ros2doctor`` only finds warnings in your system, you will still receive the ``All <n> checks passed`` message."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:73
msgid "Most checks are categorized as warnings as opposed to errors. It's mostly up to you, the user, to determine the importance of the feedback ``ros2doctor`` returns. If it does find a rare error in your setup, indicated by ``UserWarning: ERROR:``, the check is considered failed."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:77
msgid "You will see a message similar to the following list of issue feedback:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:85
msgid "An error indicates the system is missing important settings or functions that are crucial to ROS 2. Errors should be addressed to ensure the system functions properly."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:89
msgid "2 Check a system"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:91
msgid "You can also examine a running ROS 2 system to identify possible causes for issues. To see ``ros2doctor`` working on a running system, let's run turtlesim, which has nodes actively communicating with each other."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:94
msgid "Start up the system by opening a new terminal, sourcing ROS 2, and entering the command:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:100
msgid "Open another terminal and source ROS 2 to run the teleop controls:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:106
msgid "Now run ``ros2doctor`` again in its own terminal. You will see the warnings and errors you had the last time you ran ``ros2doctor`` on your setup if you had any. Following those will be a couple new warnings relating to the system itself:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:115
msgid "It seems that the ``/turtlesim`` node publishes data to two topics that aren't being subscribed to, and ``ros2doctor`` thinks this could possibly lead to issues."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:117
msgid "If you run commands to echo the ``/color_sensor`` and ``/pose`` topics, those warnings will disappear because the publishers will have subscribers."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:119
msgid "You can try this by opening two new terminals while turtlesim is still running, sourcing ROS 2 in each, and running each of the following commands in their own terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:129
msgid "Then run ``ros2doctor`` in its terminal again. The ``publisher without subscriber`` warnings will be gone. (Make sure to enter ``Ctrl+C`` in the terminals where you ran ``echo``)."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:133
msgid "Now try exiting either the turtlesim window or quitting the teleop and running ``ros2doctor`` again. You'll see more warnings indicating ``publisher without subscriber`` or ``subscriber without publisher`` for different topics, now that one node in the system isn't available."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:136
msgid "In a complex system with many nodes, ``ros2doctor`` would be invaluable for identifying possible reasons for communication issues."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:139
msgid "3 Get a full report"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:141
msgid "While ``ros2doctor`` will let you know warnings about your network, system, etc., running it with the ``--report`` argument will give you much more detail to help you analyze issues."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:143
msgid "You might want to use ``--report`` if you get a warning about your network setup and want to find out exactly what part of your configuration is causing the warning."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:145
msgid "It's also very helpful when you need to open a support ticket to get help with ROS 2. You can copy and paste the relevant parts of your report into the ticket so the people helping you can better understand your environment and provide better assistance."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:148
msgid "To get a full report, enter the following command in the terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:154
msgid "Which will return a list of information categorized into five groups:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:173
msgid "You can crosscheck the information here against the warnings you get when running ``ros2 doctor``. For example, if ``ros2doctor`` returned the warning (mentioned earlier) that your distribution is “not fully supported or tested”, you might take a look at the ``ROS 2 INFORMATION`` section of the report:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:183
msgid "Here you can see the ``distribution status`` is ``prerelease``, which explains why it's not fully supported."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:189
msgid "``ros2doctor`` will inform you of problems in your ROS 2 setup and running systems. You can get a deeper look at information behind those warnings by using the ``--report`` argument."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:192
msgid "Keep in mind, ``ros2doctor`` is not a debug tool; it won't help with errors in your code or on the implementation side of your system."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:198
msgid "`ros2doctor's README <https://github.com/ros2/ros2cli/tree/humble/ros2doctor>`__ will tell you more about different arguments. You might want to take a look around the ``ros2doctor`` repo as well, since it's fairly beginner friendly and a great place to get started with contributing."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst:204
msgid "You've completed the beginner level tutorials!"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:6
msgid "Creating and using plugins (C++)"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:8
msgid "**Goal:** Learn to create and load a simple plugin using ``pluginlib``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:21
msgid "This tutorial is derived from `<http://wiki.ros.org/pluginlib>`_ and `Writing and Using a Simple Plugin Tutorial <http://wiki.ros.org/pluginlib/Tutorials/Writing%20and%20Using%20a%20Simple%20Plugin>`_."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:23
msgid "``pluginlib`` is a C++ library for loading and unloading plugins from within a ROS package. Plugins are dynamically loadable classes that are loaded from a runtime library (i.e. shared object, dynamically linked library). With pluginlib, you do not have to explicitly link your application against the library containing the classes -- instead ``pluginlib`` can open a library containing exported classes at any point without the application having any prior awareness of the library or the header file containing the class definition. Plugins are useful for extending/modifying application behavior without needing the application source code."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:31
msgid "This tutorial assumes basic C++ knowledge and that you have successfully :doc:`installed ROS 2 <../../Installation>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:36
msgid "In this tutorial, you will create two new packages, one that defines the base class, and another that provides the plugins. The base class will define a generic polygon class, and then our plugins will define specific shapes."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:40
msgid "1 Create the Base Class Package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:42
msgid "Create a new empty package in your ``ros2_ws/src`` folder with the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:49
msgid "Open your favorite editor, edit ``ros2_ws/src/polygon_base/include/polygon_base/regular_polygon.hpp``, and paste the following inside of it:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:72
msgid "The code above creates an abstract class called ``RegularPolygon``. One thing to notice is the presence of the initialize method. With ``pluginlib``, a constructor without parameters is required, so if any parameters to the class are needed, we use the initialize method to pass them to the object."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:76
msgid "We need to make this header available to other classes, so open ``ros2_ws/src/polygon_base/CMakeLists.txt`` for editing. Add the following lines after the ``ament_target_dependencies`` command:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:86
msgid "And add this command before the ``ament_package`` command:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:94
msgid "We will return to this package later to write our test node."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:97
msgid "2 Create the Plugin Package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:99
msgid "Now we're going to write two non-virtual implementations of our abstract class. Create a second empty package in your ``ros2_ws/src`` folder with the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:107
msgid "2.1 Source code for the plugins"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:109
msgid "Open ``ros2_ws/src/polygon_plugins/src/polygon_plugins.cpp`` for editing, and paste the following inside of it:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:163
msgid "The implementation of the Square and Triangle classes is fairly straightforward: save the side length, and use it to calculate the area. The only piece that is pluginlib specific is the last three lines, which invokes some magical macros that register the classes as actual plugins. Let's go through the arguments to the ``PLUGINLIB_EXPORT_CLASS`` macro:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:167
msgid "The fully-qualified type of the plugin class, in this case, ``polygon_plugins::Square``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:168
msgid "The fully-qualified type of the base class, in this case, ``polygon_base::RegularPolygon``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:171
msgid "2.2 Plugin Declaration XML"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:173
msgid "The steps above make it so that instances of our plugins can be created once the library they exist in is loaded, but the plugin loader still needs a way to find that library and to know what to reference within that library. To this end, we'll also create an XML file that, along with a special export line in the package manifest, makes all the necessary information about our plugins available to the ROS toolchain."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:176
msgid "Create ``ros2_ws/src/polygon_plugins/plugins.xml`` with the following code:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:189
msgid "A couple things to note:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:191
msgid "The ``library`` tag gives the relative path to a library that contains the plugins that we want to export. In ROS 2, that is just the name of the library. In ROS 1, it contained the prefix ``lib`` or sometimes ``lib/lib`` (i.e. ``lib/libpolygon_plugins``), but here it is simpler."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:193
msgid "The ``class`` tag declares a plugin that we want to export from our library. Let's go through its parameters:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:196
msgid "``type``: The fully qualified type of the plugin. For us, that's ``polygon_plugins::Square``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:197
msgid "``base_class``: The fully qualified base class type for the plugin. For us, that's ``polygon_base::RegularPolygon``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:198
msgid "``description``: A description of the plugin and what it does."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:201
msgid "2.3 CMake Plugin Declaration"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:203
msgid "The last step is to export your plugins via ``CMakeLists.txt``. This is a change from ROS 1, where the exporting was done via ``package.xml``. Add the following line to your ``ros2_ws/src/polygon_plugins/CMakeLists.txt`` after the line reading ``find_package(pluginlib REQUIRED)``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:211
msgid "The arguments to the ``pluginlib_export_plugin_description_file`` command are:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:213
msgid "The package with the base class, i.e. ``polygon_base``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:214
msgid "The relative path to the Plugin Declaration xml, i.e. ``plugins.xml``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:217
msgid "3 Use the Plugins"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:219
msgid "Now it's time to use the plugins. This can be done in any package, but here we're going to do it in the base package. Edit ``ros2_ws/src/polygon_base/src/area_node.cpp`` to contain the following:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:255
msgid "The ``ClassLoader`` is the key class to understand, defined in the ``class_loader.hpp`` `header file <https://github.com/ros/pluginlib/blob/ros2/pluginlib/include/pluginlib/class_loader.hpp>`_:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:257
msgid "It is templated with the base class, i.e. ``polygon_base::RegularPolygon``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:258
msgid "The first argument is a string for the package name of the base class, i.e. ``polygon_base``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:259
msgid "The second argument is a string with the fully qualified base class type for the plugin, i.e. ``polygon_base::RegularPolygon``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:261
msgid "There are a number of ways to instantiate an instance of the class. In this example, we're using shared pointers. We just need to call ``createSharedInstance`` with the fully-qualified type of the plugin class, in this case, ``polygon_plugins::Square``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:265
msgid "Important note: the ``polygon_base`` package in which this node is defined does NOT depend on the ``polygon_plugins`` class. The plugins will be loaded dynamically without any dependency needing to be declared. Furthermore, we're instantiating the classes with hardcoded plugin names, but you can also do so dynamically with parameters, etc."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:270 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:436 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:308 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:416 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:256
msgid "4 Build and run"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:272
msgid "Navigate back to the root of your workspace, ``ros2_ws``, and build your new packages:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:278
msgid "From ``ros2_ws``, be sure to source the setup files:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:306
msgid "It should print:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst:316
msgid "Congratulations! You've just written and used your first plugins."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:9
msgid "Implementing custom interfaces"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:11
msgid "**Goal:** Learn more ways to implement custom interfaces in ROS 2."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:24
msgid "In a :doc:`previous tutorial <./Custom-ROS2-Interfaces>`, you learned how to create custom msg and srv interfaces."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:26
msgid "While best practice is to declare interfaces in dedicated interface packages, sometimes it can be convenient to declare, create and use an interface all in one package."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:28
msgid "Recall that interfaces can currently only be defined in CMake packages. It is possible, however, to have Python libraries and nodes in CMake packages (using `ament_cmake_python <https://github.com/ament/ament_cmake/tree/humble/ament_cmake_python>`_), so you could define interfaces and Python nodes together in one package. We'll use a CMake package and C++ nodes here for the sake of simplicity."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:32
msgid "This tutorial will focus on the msg interface type, but the steps here are applicable to all interface types."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:37
msgid "We assume you've reviewed the basics in the :doc:`./Custom-ROS2-Interfaces` tutorial before working through this one."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:39
msgid "You should have :doc:`ROS 2 installed <../../Installation>`, a :doc:`workspace <./Creating-A-Workspace/Creating-A-Workspace>`, and an understanding of :doc:`creating packages <./Creating-Your-First-ROS2-Package>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:41
msgid "As always, don't forget to :doc:`source ROS 2 <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` in every new terminal you open."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:49
msgid "In your workspace ``src`` directory, create a package ``more_interfaces`` and make a directory within it for msg files:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:57
msgid "2 Create a msg file"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:59
msgid "Inside ``more_interfaces/msg``, create a new file ``AddressBook.msg``, and paste the following code to create a message meant to carry information about an individual:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:72
msgid "This message is composed of these fields:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:74
msgid "first_name: of type string"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:75
msgid "last_name: of type string"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:76
msgid "phone_number: of type string"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:77
msgid "phone_type: of type uint8, with several named constant values defined"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:79
msgid "Note that it's possible to set default values for fields within a message definition. See :doc:`../../Concepts/Basic/About-Interfaces` for more ways you can customize interfaces."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:82
msgid "Next, we need to make sure that the msg file is turned into source code for C++, Python, and other languages."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:85
msgid "2.1 Build a msg file"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:87
msgid "Open ``package.xml`` and add the following lines:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:97
msgid "Note that at build time, we need ``rosidl_default_generators``, while at runtime, we only need ``rosidl_default_runtime``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:99
msgid "Open ``CMakeLists.txt`` and add the following lines:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:101
msgid "Find the package that generates message code from msg/srv files:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:107
msgid "Declare the list of messages you want to generate:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:115
msgid "By adding the .msg files manually, we make sure that CMake knows when it has to reconfigure the project after you add other .msg files."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:117
msgid "Generate the messages:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:125
msgid "Also make sure you export the message runtime dependency:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:131
msgid "Now you're ready to generate source files from your msg definition. We'll skip the compile step for now as we'll do it all together below in step 4."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:135
msgid "2.2 (Extra) Set multiple interfaces"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:139
msgid "You can use ``set`` in ``CMakeLists.txt`` to neatly list all of your interfaces:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:155
msgid "And generate all lists at once like so:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:166
msgid "3 Use an interface from the same package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:168
msgid "Now we can start writing code that uses this message."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:170
msgid "In ``more_interfaces/src`` create a file called ``publish_address_book.cpp`` and paste the following code:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:223
msgid "3.1 The code explained"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:225
msgid "Include the header of our newly created ``AddressBook.msg``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:231
msgid "Create a node and an ``AddressBook`` publisher."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:246
msgid "Create a callback to publish the messages periodically."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:252
msgid "Create an ``AddressBook`` message instance that we will later publish."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:258
msgid "Populate ``AddressBook`` fields."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:267
msgid "Finally send the message periodically."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:276
msgid "Create a 1 second timer to call our ``publish_msg`` function every second."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:283
msgid "3.2 Build the publisher"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:285
msgid "We need to create a new target for this node in the ``CMakeLists.txt``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:299
msgid "3.3 Link against the interface"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:301
msgid "In order to use the messages generated in the same package we need to use the following CMake code:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:310
msgid "This finds the relevant generated C++ code from ``AddressBook.msg`` and allows your target to link against it."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:312
msgid "You may have noticed that this step was not necessary when the interfaces being used were from a different package that was built independently. This CMake code is only required when you want to use interfaces in the same package as the one in which they are defined."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:316
msgid "4 Try it out"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:318
msgid "Return to the root of the workspace to build the package:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:343
msgid "Then source the workspace and run the publisher:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:368 ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:402
msgid "Or using Powershell:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:375
msgid "You should see the publisher relaying the msg you defined, including the values you set in ``publish_address_book.cpp``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:377
msgid "To confirm the message is being published on the ``address_book`` topic, open another terminal, source the workspace, and call ``topic echo``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:409
msgid "We won't create a subscriber in this tutorial, but you can try to write one yourself for practice (use :doc:`./Writing-A-Simple-Cpp-Publisher-And-Subscriber` to help)."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:412
msgid "5 (Extra) Use an existing interface definition"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:416
msgid "You can use an existing interface definition in a new interface definition. For example, let's say there is a message named ``Contact.msg`` that belongs to an existing ROS 2 package named ``rosidl_tutorials_msgs``. Assume that its definition is identical to our custom-made ``AddressBook.msg`` interface from earlier."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:420
msgid "In that case you could have defined ``AddressBook.msg`` (an interface in the package *with* your nodes) as type ``Contact`` (an interface in a *separate* package). You could even define ``AddressBook.msg`` as an *array* of type ``Contact``, like so:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:427
msgid "To generate this message you would need to declare a dependency on ``Contact.msg's`` package, ``rosidl_tutorials_msgs``, in ``package.xml``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:435
msgid "And in ``CMakeLists.txt``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:446
msgid "You would also need to include the header of ``Contact.msg`` in you publisher node in order to be able to add ``contacts`` to your ``address_book``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:452
msgid "You could change the callback to something like this:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:484
msgid "Building and running these changes would show the msg defined as expected, as well as the array of msgs defined above."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:489
msgid "In this tutorial, you tried out different field types for defining interfaces, then built an interface in the same package where it's being used."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:491
msgid "You also learned how to use another interface as a field type, as well as the ``package.xml``, ``CMakeLists.txt``, and ``#include`` statements necessary for utilizing that feature."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:496
msgid "Next you will create a simple ROS 2 package with a custom parameter that you will learn to set from a launch file. Again, you can choose to write it in either :doc:`C++ <./Using-Parameters-In-A-Class-CPP>` or :doc:`Python <./Using-Parameters-In-A-Class-Python>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst:502
msgid "There are `several design articles <https://design.ros2.org/#interfaces>`_ on ROS 2 interfaces and the IDL (interface definition language)."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:8
msgid "Using parameters in a class (C++)"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:10
msgid "**Goal:** Create and run a class with ROS parameters using C++."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:23 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:23
msgid "When making your own :doc:`nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` you will sometimes need to add parameters that can be set from the launch file."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:25
msgid "This tutorial will show you how to create those parameters in a C++ class, and how to set them in a launch file."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:30 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:30
msgid "In previous tutorials, you learned how to :doc:`create a workspace <./Creating-A-Workspace/Creating-A-Workspace>` and :doc:`create a package <./Creating-Your-First-ROS2-Package>`. You have also learned about :doc:`parameters <../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` and their function in a ROS 2 system."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:43 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:43 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:44 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:43
msgid "Recall that packages should be created in the ``src`` directory, not the root of the workspace. Navigate into ``ros2_ws/src`` and create a new package:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:50
msgid "Your terminal will return a message verifying the creation of your package ``cpp_parameters`` and all its necessary files and folders."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:52 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:52 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:59
msgid "The ``--dependencies`` argument will automatically add the necessary dependency lines to ``package.xml`` and ``CMakeLists.txt``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:57 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:57 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:68
msgid "Because you used the ``--dependencies`` option during package creation, you don't have to manually add dependencies to ``package.xml`` or ``CMakeLists.txt``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:59 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:59 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:70 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:69
msgid "As always, though, make sure to add the description, maintainer email and name, and license information to ``package.xml``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:70
msgid "Inside the ``ros2_ws/src/cpp_parameters/src`` directory, create a new file called ``cpp_parameters_node.cpp`` and paste the following code within:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:118
msgid "The ``#include`` statements at the top are the package dependencies."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:120
msgid "The next piece of code creates the class and the constructor. The first line of this constructor creates a parameter with the name ``my_parameter`` and a default value of ``world``. The parameter type is inferred from the default value, so in this case it would be set to a string type. Next the ``timer_`` is initialized with a period of 1000ms, which causes the ``timer_callback`` function to be executed once a second."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:139
msgid "The first line of our ``timer_callback`` function gets the parameter ``my_parameter`` from the node, and stores it in ``my_param``. Next the ``RCLCPP_INFO`` function ensures the event is logged. The ``set_parameters`` function then sets the parameter ``my_parameter`` back to the default string value ``world``. In the case that the user changed the parameter externally, this ensures it is always reset back to the original."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:156
msgid "Last is the declaration of ``timer_``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:163
msgid "Following our ``MinimalParam`` is our ``main``. Here ROS 2 is initialized, an instance of the ``MinimalParam`` class is constructed, and ``rclcpp::spin`` starts processing data from the node."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:177 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:162
msgid "2.1.1 (Optional) Add ParameterDescriptor"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:178
msgid "Optionally, you can set a descriptor for the parameter. Descriptors allow you to specify a text description of the parameter and its constraints, like making it read-only, specifying a range, etc. For that to work, the code in the constructor has to be changed to:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:201 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:183
msgid "The rest of the code remains the same. Once you run the node, you can then run ``ros2 param describe /minimal_param_node my_parameter`` to see the type and description."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:208
msgid "Now open the ``CMakeLists.txt`` file. Below the dependency ``find_package(rclcpp REQUIRED)`` add the following lines of code."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:224 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:215 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:310 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:258 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:189
msgid "It's good practice to run ``rosdep`` in the root of your workspace (``ros2_ws``) to check for missing dependencies before building:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:236 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:240 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:227 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:231 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:450 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:454 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:322 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:326 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:430 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:434 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:270 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:274 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:201 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:205
msgid "rosdep only runs on Linux, so you can skip ahead to next step."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:242 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:233 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:329 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:277 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:207
msgid "Navigate back to the root of your workspace, ``ros2_ws``, and build your new package:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:264 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:255 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:479 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:351 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:459 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:283 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:213
msgid "Open a new terminal, navigate to ``ros2_ws``, and source the setup files:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:292 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:422 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:283 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:422
msgid "The terminal should return the following message every second:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:298 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:289
msgid "Now you can see the default value of your parameter, but you want to be able to set it yourself. There are two ways to accomplish this."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:302 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:293
msgid "3.1 Change via the console"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:304
msgid "This part will use the knowledge you have gained from the :doc:`tutorial about parameters <../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` and apply it to the node you have just created."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:306 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:297
msgid "Make sure the node is running:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:312 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:303
msgid "Open another terminal, source the setup files from inside ``ros2_ws`` again, and enter the following line:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:318 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:309
msgid "There you will see the custom parameter ``my_parameter``. To change it, simply run the following line in the console:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:325
msgid "You know it went well if you got the output ``Set parameter successful``. If you look at the other terminal, you should see the output change to ``[INFO] [minimal_param_node]: Hello earth!``"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:329 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:322
msgid "3.2 Change via a launch file"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:330
msgid "You can also set the parameter in a launch file, but first you will need to add the launch directory. Inside the ``ros2_ws/src/cpp_parameters/`` directory, create a new directory called ``launch``. In there, create a new file called ``cpp_parameters_launch.py``"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:354
msgid "Here you can see that we set ``my_parameter`` to ``earth`` when we launch our node ``minimal_param_node``. By adding the two lines below, we ensure our output is printed in our console."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:362
msgid "Now open the ``CMakeLists.txt`` file. Below the lines you added earlier, add the following lines of code."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:372 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:372
msgid "Open a console and navigate to the root of your workspace, ``ros2_ws``, and build your new package:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:394 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:394
msgid "Then source the setup files in a new terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:416 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:416
msgid "Now run the node using the launch file we have just created:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:431 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:432
msgid "You created a node with a custom parameter that can be set either from a launch file or the command line. You added the dependencies, executables, and a launch file to the package configuration files so that you could build and run them, and see the parameter in action."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst:437 ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:438
msgid "Now that you have some packages and ROS 2 systems of your own, the :doc:`next tutorial <./Getting-Started-With-Ros2doctor>` will show you how to examine issues in your environment and systems in case you have problems."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:8
msgid "Using parameters in a class (Python)"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:10
msgid "**Goal:** Create and run a class with ROS parameters using Python."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:25
msgid "This tutorial will show you how to create those parameters in a Python class, and how to set them in a launch file."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:50
msgid "Your terminal will return a message verifying the creation of your package ``python_parameters`` and all its necessary files and folders."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:70
msgid "Inside the ``ros2_ws/src/python_parameters/python_parameters`` directory, create a new file called ``python_parameters_node.py`` and paste the following code within:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:110
msgid "The ``import`` statements at the top are used to import the package dependencies."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:112
msgid "The next piece of code creates the class and the constructor. The line ``self.declare_parameter('my_parameter', 'world')`` of the constructor creates a parameter with the name ``my_parameter`` and a default value of ``world``. The parameter type is inferred from the default value, so in this case it would be set to a string type. Next the ``timer`` is initialized with a period of 1, which causes the ``timer_callback`` function to be executed once a second."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:127
msgid "The first line of our ``timer_callback`` function gets the parameter ``my_parameter`` from the node, and stores it in ``my_param``. Next the ``get_logger`` function ensures the event is logged. The ``set_parameters`` function then sets the parameter ``my_parameter`` back to the default string value ``world``. In the case that the user changed the parameter externally, this ensures it is always reset back to the original."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:147
msgid "Following the ``timer_callback`` is our ``main``. Here ROS 2 is initialized, an instance of the ``MinimalParam`` class is constructed, and ``rclpy.spin`` starts processing data from the node."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:163
msgid "Optionally, you can set a descriptor for the parameter. Descriptors allow you to specify a text description of the parameter and its constraints, like making it read-only, specifying a range, etc. For that to work, the ``__init__`` code has to be changed to:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:187 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:163 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:418
msgid "2.2 Add an entry point"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:189 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:240
msgid "Open the ``setup.py`` file. Again, match the ``maintainer``, ``maintainer_email``, ``description`` and ``license`` fields to your ``package.xml``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:199 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:250
msgid "Add the following line within the ``console_scripts`` brackets of the ``entry_points`` field:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:209 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:260
msgid "Don't forget to save."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:295
msgid "This part will use the knowledge you have gained from the :doc:`tutoral about parameters <../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` and apply it to the node you have just created."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:316
msgid "You know it went well if you get the output ``Set parameter successful``. If you look at the other terminal, you should see the output change to ``[INFO] [minimal_param_node]: Hello earth!``"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:319
msgid "Since the node afterwards set the parameter back to ``world``, further outputs show  ``[INFO] [minimal_param_node]: Hello world!``"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:324
msgid "You can also set parameters in a launch file, but first you will need to add a launch directory. Inside the ``ros2_ws/src/python_parameters/`` directory, create a new directory called ``launch``. In there, create a new file called ``python_parameters_launch.py``"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:347
msgid "Here you can see that we set ``my_parameter`` to ``earth`` when we launch our node ``parameter_node``. By adding the two lines below, we ensure our output is printed in our console."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst:355
msgid "Now open the ``setup.py`` file. Add the ``import`` statements to the top of the file, and the other new statement to the ``data_files`` parameter to include all launch files:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:8
msgid "Writing a simple publisher and subscriber (C++)"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:10
msgid "**Goal:** Create and run a publisher and subscriber node using C++."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:23
msgid ":doc:`Nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` are executable processes that communicate over the ROS graph. In this tutorial, the nodes will pass information in the form of string messages to each other over a :doc:`topic <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>`. The example used here is a simple \"talker\" and \"listener\" system; one node publishes data and the other subscribes to the topic so it can receive that data."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:27
msgid "The code used in these examples can be found `here <https://github.com/ros2/examples/tree/humble/rclcpp/topics>`__."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:32 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:32 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:32 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:31
msgid "In previous tutorials, you learned how to :doc:`create a workspace <./Creating-A-Workspace/Creating-A-Workspace>` and :doc:`create a package <./Creating-Your-First-ROS2-Package>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:42 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:42 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:44 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:41
msgid "Navigate into the ``ros2_ws`` directory created in a :ref:`previous tutorial <new-directory>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:44 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:46
msgid "Recall that packages should be created in the ``src`` directory, not the root of the workspace. So, navigate into ``ros2_ws/src``, and run the package creation command:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:51
msgid "Your terminal will return a message verifying the creation of your package ``cpp_pubsub`` and all its necessary files and folders."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:53
msgid "Navigate into ``ros2_ws/src/cpp_pubsub/src``. Recall that this is the directory in any CMake package where the source files containing executables belong."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:58 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:56
msgid "2 Write the publisher node"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:60 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:61
msgid "Download the example talker code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:78 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:324 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:79 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:300 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:71 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:364 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:71 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:342 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:67 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:339 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:59 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:59 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:58 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:58 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:79 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:79
msgid "In a Windows command line prompt:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:84 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:330 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:85 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:306 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:77 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:370 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:77 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:348 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:73 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:345 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:65 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:65 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:64 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:64 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:85 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:85
msgid "Or in powershell:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:90
msgid "Now there will be a new file named ``publisher_member_function.cpp``. Open the file using your preferred text editor."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:143
msgid "The top of the code includes the standard C++ headers you will be using. After the standard C++ headers is the ``rclcpp/rclcpp.hpp`` include which allows you to use the most common pieces of the ROS 2 system. Last is ``std_msgs/msg/string.hpp``, which includes the built-in message type you will use to publish data."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:159
msgid "These lines represent the node's dependencies. Recall that dependencies have to be added to ``package.xml`` and ``CMakeLists.txt``, which you'll do in the next section."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:162
msgid "The next line creates the node class ``MinimalPublisher`` by inheriting from ``rclcpp::Node``. Every ``this`` in the code is referring to the node."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:169
msgid "The public constructor names the node ``minimal_publisher`` and initializes ``count_`` to 0. Inside the constructor, the publisher is initialized with the ``String`` message type, the topic name ``topic``, and the required queue size to limit messages in the event of a backup. Next, ``timer_`` is initialized, which causes the ``timer_callback`` function to be executed twice a second."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:184
msgid "The ``timer_callback`` function is where the message data is set and the messages are actually published. The ``RCLCPP_INFO`` macro ensures every published message is printed to the console."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:198
msgid "Last is the declaration of the timer, publisher, and counter fields."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:206
msgid "Following the ``MinimalPublisher`` class is ``main``, where the node actually executes. ``rclcpp::init`` initializes ROS 2, and ``rclcpp::spin`` starts processing data from the node, including callbacks from the timer."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:220 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:212 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:528 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:305 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:316 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:244 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:264
msgid "2.2 Add dependencies"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:222
msgid "Navigate one level back to the ``ros2_ws/src/cpp_pubsub`` directory, where the ``CMakeLists.txt`` and ``package.xml`` files have been created for you."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:224 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:216 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:248 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:268
msgid "Open ``package.xml`` with your text editor."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:226 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:218
msgid "As mentioned in the :doc:`previous tutorial <./Creating-Your-First-ROS2-Package>`, make sure to fill in the ``<description>``, ``<maintainer>`` and ``<license>`` tags:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:234
msgid "Add a new line after the ``ament_cmake`` buildtool dependency and paste the following dependencies corresponding to your node's include statements:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:241
msgid "This declares the package needs ``rclcpp`` and ``std_msgs`` when its code is built and executed."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:243 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:235 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:319 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:330 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:258 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:290
msgid "Make sure to save the file."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:246 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:538 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:322 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:261
msgid "2.3 CMakeLists.txt"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:248
msgid "Now open the ``CMakeLists.txt`` file. Below the existing dependency ``find_package(ament_cmake REQUIRED)``, add the lines:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:256
msgid "After that, add the executable and name it ``talker`` so you can run your node using ``ros2 run``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:263
msgid "Finally, add the ``install(TARGETS...)`` section so ``ros2 run`` can find your executable:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:300 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:276
msgid "You could build your package now, source the local setup files, and run it, but let's create the subscriber node first so you can see the full system at work."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:303 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:279
msgid "3 Write the subscriber node"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:305
msgid "Return to ``ros2_ws/src/cpp_pubsub/src`` to create the next node. Enter the following code in your terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:336
msgid "Entering ``ls`` in the console will now return:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:342
msgid "Open the ``subscriber_member_function.cpp`` with your text editor."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:379 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:244 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:319 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:222
msgid "3.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:381
msgid "The subscriber node's code is nearly identical to the publisher's. Now the node is named ``minimal_subscriber``, and the constructor uses the node's ``create_subscription`` class to execute the callback."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:384
msgid "There is no timer because the subscriber simply responds whenever data is published to the ``topic`` topic."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:396
msgid "Recall from the :doc:`topic tutorial <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>` that the topic name and message type used by the publisher and subscriber must match to allow them to communicate."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:398
msgid "The ``topic_callback`` function receives the string message data published over the topic, and simply writes it to the console using the ``RCLCPP_INFO`` macro."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:400
msgid "The only field declaration in this class is the subscription."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:411
msgid "The ``main`` function is exactly the same, except now it spins the ``MinimalSubscriber`` node. For the publisher node, spinning meant starting the timer, but for the subscriber it simply means preparing to receive messages whenever they come."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:414
msgid "Since this node has the same dependencies as the publisher node, there's nothing new to add to ``package.xml``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:417
msgid "3.2 CMakeLists.txt"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:419
msgid "Reopen ``CMakeLists.txt`` and add the executable and target for the subscriber node below the publisher's entries."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:431 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:413
msgid "Make sure to save the file, and then your pub/sub system should be ready."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:437
msgid "You likely already have the ``rclcpp`` and ``std_msgs`` packages installed as part of your ROS 2 system. It's good practice to run ``rosdep`` in the root of your workspace (``ros2_ws``) to check for missing dependencies before building:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:457 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:437
msgid "Still in the root of your workspace, ``ros2_ws``, build your new package:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:517 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:498
msgid "Open another terminal, source the setup files from inside ``ros2_ws`` again, and then start the listener node:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:533 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:514
msgid "Enter ``Ctrl+C`` in each terminal to stop the nodes from spinning."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:538
msgid "You created two nodes to publish and subscribe to data over a topic. Before compiling and running them, you added their dependencies and executables to the package configuration files."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:544 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:525
msgid "Next you'll create another simple ROS 2 package using the service/client model. Again, you can choose to write it in either :doc:`C++ <./Writing-A-Simple-Cpp-Service-And-Client>` or :doc:`Python <./Writing-A-Simple-Py-Service-And-Client>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst:550
msgid "There are several ways you could write a publisher and subscriber in C++; check out the ``minimal_publisher`` and ``minimal_subscriber`` packages in the `ros2/examples <https://github.com/ros2/examples/tree/humble/rclcpp/topics>`_ repo."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:8
msgid "Writing a simple service and client (C++)"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:10
msgid "**Goal:** Create and run service and client nodes using C++."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:23 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:23
msgid "When :doc:`nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` communicate using :doc:`services <../Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services>`, the node that sends a request for data is called the client node, and the one that responds to the request is the service node. The structure of the request and response is determined by a ``.srv`` file."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:26 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:26
msgid "The example used here is a simple integer addition system; one node requests the sum of two integers, and the other responds with the result."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:51
msgid "Your terminal will return a message verifying the creation of your package ``cpp_srvcli`` and all its necessary files and folders."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:53
msgid "The ``--dependencies`` argument will automatically add the necessary dependency lines to ``package.xml`` and ``CMakeLists.txt``. ``example_interfaces`` is the package that includes `the .srv file <https://github.com/ros2/example_interfaces/blob/humble/srv/AddTwoInts.srv>`__ you will need to structure your requests and responses:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:63 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:62
msgid "The first two lines are the parameters of the request, and below the dashes is the response."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:80 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:90
msgid "2 Write the service node"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:82
msgid "Inside the ``ros2_ws/src/cpp_srvcli/src`` directory, create a new file called ``add_two_ints_server.cpp`` and paste the following code within:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:118
msgid "The first two ``#include`` statements are your package dependencies."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:120
msgid "The ``add`` function adds two integers from the request and gives the sum to the response, while notifying the console of its status using logs."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:133
msgid "The ``main`` function accomplishes the following, line by line:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:135
msgid "Initializes ROS 2 C++ client library:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:141
msgid "Creates a node named ``add_two_ints_server``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:147
msgid "Creates a service named ``add_two_ints`` for that node and automatically advertises it over the networks with the ``&add`` method:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:154
msgid "Prints a log message when it's ready:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:160
msgid "Spins the node, making the service available."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:169
msgid "The ``add_executable`` macro generates an executable you can run using ``ros2 run``. Add the following code block to ``CMakeLists.txt`` to create an executable named ``server``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:177
msgid "So ``ros2 run`` can find the executable, add the following lines to the end of the file, right before ``ament_package()``:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:185
msgid "You could build your package now, source the local setup files, and run it, but let's create the client node first so you can see the full system at work."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:188 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:174
msgid "3 Write the client node"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:190
msgid "Inside the ``ros2_ws/src/cpp_srvcli/src`` directory, create a new file called ``add_two_ints_client.cpp`` and paste the following code within:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:246
msgid "Similar to the service node, the following lines of code create the node and then create the client for that node:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:254
msgid "Next, the request is created. Its structure is defined by the ``.srv`` file mentioned earlier."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:263
msgid "The ``while`` loop gives the client 1 second to search for service nodes in the network. If it can't find any, it will continue waiting."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:270
msgid "If the client is canceled (e.g. by you entering ``Ctrl+C`` into the terminal), it will return an error log message stating it was interrupted."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:276
msgid "Then the client sends its request, and the node spins until it receives its response, or fails."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:279
msgid "3.2 Add executable"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:281
msgid "Return to ``CMakeLists.txt`` to add the executable and target for the new node. After removing some unnecessary boilerplate from the automatically generated file, your ``CMakeLists.txt`` should look like this:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:373 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:305
msgid "Now run the service node:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:379
msgid "The terminal should return the following message, and then wait:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:385
msgid "Open another terminal, source the setup files from inside ``ros2_ws`` again. Start the client node, followed by any two integers separated by a space:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:392 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:320
msgid "If you chose ``2`` and ``3``, for example, the client would receive a response like this:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:398
msgid "Return to the terminal where your service node is running. You will see that it published log messages when it received the request and the data it received, and the response it sent back:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:407 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:334
msgid "Enter ``Ctrl+C`` in the server terminal to stop the node from spinning."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:412
msgid "You created two nodes to request and respond to data over a service. You added their dependencies and executables to the package configuration files so that you could build and run them, and see a service/client system at work."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:418 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:346
msgid "In the last few tutorials you've been utilizing interfaces to pass data across topics and services. Next, you'll learn how to :doc:`create custom interfaces <./Custom-ROS2-Interfaces>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst:424
msgid "There are several ways you could write a service and client in C++; check out the ``minimal_service`` and ``minimal_client`` packages in the `ros2/examples <https://github.com/ros2/examples/tree/humble/rclcpp/services>`_ repo."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:8
msgid "Writing a simple publisher and subscriber (Python)"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:10
msgid "**Goal:** Create and run a publisher and subscriber node using Python."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:23
msgid "In this tutorial, you will create :doc:`nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` that pass information in the form of string messages to each other over a :doc:`topic <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>`. The example used here is a simple \"talker\" and \"listener\" system; one node publishes data and the other subscribes to the topic so it can receive that data."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:27
msgid "The code used in these examples can be found `here <https://github.com/ros2/examples/tree/humble/rclpy/topics>`__."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:34
msgid "A basic understanding of Python is recommended, but not entirely necessary."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:53
msgid "Your terminal will return a message verifying the creation of your package ``py_pubsub`` and all its necessary files and folders."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:58
msgid "Navigate into ``ros2_ws/src/py_pubsub/py_pubsub``. Recall that this directory is a `Python package <https://docs.python.org/3/tutorial/modules.html#packages>`__ with the same name as the ROS 2 package it's nested in."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:91
msgid "Now there will be a new file named ``publisher_member_function.py`` adjacent to ``__init__.py``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:93 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:79 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:351 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:71 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:71 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:70 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:70 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:91 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:91
msgid "Open the file using your preferred text editor."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:141
msgid "The first lines of code after the comments import ``rclpy`` so its ``Node`` class can be used."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:148
msgid "The next statement imports the built-in string message type that the node uses to structure the data that it passes on the topic."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:154
msgid "These lines represent the node's dependencies. Recall that dependencies have to be added to ``package.xml``, which you'll do in the next section."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:157
msgid "Next, the ``MinimalPublisher`` class is created, which inherits from (or is a subclass of) ``Node``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:163
msgid "Following is the definition of the class's constructor. ``super().__init__`` calls the ``Node`` class's constructor and gives it your node name, in this case ``minimal_publisher``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:166
msgid "``create_publisher`` declares that the node publishes messages of type ``String`` (imported from the ``std_msgs.msg`` module), over a topic named ``topic``, and that the \"queue size\" is 10. Queue size is a required QoS (quality of service) setting that limits the amount of queued messages if a subscriber is not receiving them fast enough."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:169
msgid "Next, a timer is created with a callback to execute every 0.5 seconds. ``self.i`` is a counter used in the callback."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:181
msgid "``timer_callback`` creates a message with the counter value appended, and publishes it to the console with ``get_logger().info``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:192
msgid "Lastly, the main function is defined."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:209
msgid "First the ``rclpy`` library is initialized, then the node is created, and then it \"spins\" the node so its callbacks are called."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:214
msgid "Navigate one level back to the ``ros2_ws/src/py_pubsub`` directory, where the ``setup.py``, ``setup.cfg``, and ``package.xml`` files have been created for you."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:226
msgid "After the lines above, add the following dependencies corresponding to your node's import statements:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:233
msgid "This declares the package needs ``rclpy`` and ``std_msgs`` when its code is executed."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:238 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:293
msgid "2.3 Add an entry point"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:263
msgid "2.4 Check setup.cfg"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:265
msgid "The contents of the ``setup.cfg`` file should be correctly populated automatically, like so:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:274
msgid "This is simply telling setuptools to put your executables in ``lib``, because ``ros2 run`` will look for them there."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:281
msgid "Return to ``ros2_ws/src/py_pubsub/py_pubsub`` to create the next node. Enter the following code in your terminal:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:312
msgid "Now the directory should have these files:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:321
msgid "Open the ``subscriber_member_function.py`` with your text editor."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:363
msgid "The subscriber node's code is nearly identical to the publisher's. The constructor creates a subscriber with the same arguments as the publisher. Recall from the :doc:`topics tutorial <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>` that the topic name and message type used by the publisher and subscriber must match to allow them to communicate."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:375
msgid "The subscriber's constructor and callback don't include any timer definition, because it doesn't need one. Its callback gets called as soon as it receives a message."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:378
#, python-format
msgid "The callback definition simply prints an info message to the console, along with the data it received. Recall that the publisher defines ``msg.data = 'Hello World: %d' % self.i``"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:386
msgid "The ``main`` definition is almost exactly the same, replacing the creation and spinning of the publisher with the subscriber."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:394
msgid "Since this node has the same dependencies as the publisher, there's nothing new to add to ``package.xml``. The ``setup.cfg`` file can also remain untouched."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:399 ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:240
msgid "3.2 Add an entry point"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:401
msgid "Reopen ``setup.py`` and add the entry point for the subscriber node below the publisher's entry point. The ``entry_points`` field should now look like this:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:417
msgid "You likely already have the ``rclpy`` and ``std_msgs`` packages installed as part of your ROS 2 system. It's good practice to run ``rosdep`` in the root of your workspace (``ros2_ws``) to check for missing dependencies before building:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:519
msgid "You created two nodes to publish and subscribe to data over a topic. Before running them, you added their dependencies and entry points to the package configuration files."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst:531
msgid "There are several ways you could write a publisher and subscriber in Python; check out the ``minimal_publisher`` and ``minimal_subscriber`` packages in the `ros2/examples <https://github.com/ros2/examples/tree/humble/rclpy/topics>`_ repo."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:8
msgid "Writing a simple service and client (Python)"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:10
msgid "**Goal:** Create and run service and client nodes using Python."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:50
msgid "Your terminal will return a message verifying the creation of your package ``py_srvcli`` and all its necessary files and folders."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:52
msgid "The ``--dependencies`` argument will automatically add the necessary dependency lines to ``package.xml``. ``example_interfaces`` is the package that includes `the .srv file <https://github.com/ros2/example_interfaces/blob/humble/srv/AddTwoInts.srv>`__ you will need to structure your requests and responses:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:67
msgid "Because you used the ``--dependencies`` option during package creation, you don't have to manually add dependencies to ``package.xml``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:78
msgid "1.2 Update ``setup.py``"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:80
msgid "Add the same information to the ``setup.py`` file for the ``maintainer``, ``maintainer_email``, ``description`` and ``license`` fields:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:92
msgid "Inside the ``ros2_ws/src/py_srvcli/py_srvcli`` directory, create a new file called ``service_member_function.py`` and paste the following code within:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:131
msgid "The first ``import`` statement imports the ``AddTwoInts`` service type from the ``example_interfaces`` package. The following ``import`` statement imports the ROS 2 Python client library, and specifically the ``Node`` class."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:141
msgid "The ``MinimalService`` class constructor initializes the node with the name ``minimal_service``. Then, it creates a service and defines the type, name, and callback."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:150
msgid "The definition of the service callback receives the request data, sums it, and returns the sum as a response."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:160
msgid "Finally, the main class initializes the ROS 2 Python client library, instantiates the ``MinimalService`` class to create the service node and spins the node to handle callbacks."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:165
msgid "To allow the ``ros2 run`` command to run your node, you must add the entry point to ``setup.py`` (located in the ``ros2_ws/src/py_srvcli`` directory)."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:167 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:265 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:297
msgid "Add the following line between the ``'console_scripts':`` brackets:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:176
msgid "Inside the ``ros2_ws/src/py_srvcli/py_srvcli`` directory, create a new file called ``client_member_function.py`` and paste the following code within:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:224
msgid "The only different ``import`` statement for the client is ``import sys``. The client node code uses `sys.argv <https://docs.python.org/3/library/sys.html#sys.argv>`__ to get access to command line input arguments for the request."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:227
msgid "The constructor definition creates a client with the same type and name as the service node. The type and name must match for the client and service to be able to communicate."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:230
msgid "The ``while`` loop in the constructor checks if a service matching the type and name of the client is available once a second."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:232
msgid "Below the constructor is the request definition, followed by ``main``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:234
msgid "The only significant difference in the client's ``main`` is the ``while`` loop. The loop checks the ``future`` to see if there is a response from the service, as long as the system is running. If the service has sent a response, the result will be written in a log message."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:242
msgid "Like the service node, you also have to add an entry point to be able to run the client node."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:244
msgid "The ``entry_points`` field of your ``setup.py`` file should look like this:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:311
msgid "The node will wait for the client's request."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:313
msgid "Open another terminal and source the setup files from inside ``ros2_ws`` again. Start the client node, followed by any two integers separated by a space:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:326
msgid "Return to the terminal where your service node is running. You will see that it published log messages when it received the request:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:340
msgid "You created two nodes to request and respond to data over a service. You added their dependencies and executables to the package configuration files so that you could build and run them, allowing you to see a service/client system at work."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:352
msgid "There are several ways you could write a service and client in Python; check out the ``minimal_client`` and ``minimal_service`` packages in the `ros2/examples <https://github.com/ros2/examples/tree/humble/rclpy/services>`_ repo."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:354
msgid "In this tutorial, you used the ``call_async()`` API in your client node to call the service. There is another service call API available for Python called synchronous calls. We do not recommend using synchronous calls, but if you'd like to learn more about them, read the guide to :doc:`Synchronous vs. asynchronous clients <../../How-To-Guides/Sync-Vs-Async>`."
msgstr ""

#: ../../source/Tutorials/Demos.rst:2
msgid "Demos"
msgstr ""

#: ../../source/Tutorials/Demos.rst:17
msgid "External resources"
msgstr ""

#: ../../source/Tutorials/Demos.rst:19
msgid "`Bridging communication between ROS 1 and ROS 2 <https://github.com/ros2/ros1_bridge/blob/master/README.md>`__"
msgstr ""

#: ../../source/Tutorials/Demos.rst:20
msgid "`Motion planning for a MoveIt 2 arm <https://moveit.picknik.ai/main/index.html>`__"
msgstr ""

#: ../../source/Tutorials/Demos.rst:21
msgid "Using Turtlebot 3 (community-contributed)"
msgstr ""

#: ../../source/Tutorials/Demos.rst:23
msgid "`Getting started <https://emanual.robotis.com/docs/en/platform/turtlebot3/quick-start/>`__"
msgstr ""

#: ../../source/Tutorials/Demos.rst:24
msgid "`Simulating <https://ubuntu.com/blog/simulate-the-turtlebot3>`__"
msgstr ""

#: ../../source/Tutorials/Demos.rst:25
msgid "`Navigating in simulation <https://github.com/cyberbotics/webots_ros2/wiki/Navigate-TurtleBot3>`__"
msgstr ""

#: ../../source/Tutorials/Demos.rst:26
msgid "`Learning SLAM in simulation <https://github.com/cyberbotics/webots_ros2/wiki/SLAM-with-TurtleBot3>`__"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:6
msgid "Creating a content filtering subscription"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:8
msgid "**Goal:** Create a content filtering subscription."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:19
msgid "Overview"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:21
msgid "ROS 2 applications typically consist of topics to transmit data from publishers to subscriptions. Basically, subscriptions receive all published data from publishers on the topic. But sometimes, a subscription might be interested in only a subset of the data which is being sent by publishers. A content filtering subscription allows to receive only the data of interest for the application."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:26
msgid "In this demo, we'll be highlighting how to create a content filtering subscription and how they work."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:29
msgid "RMW Support"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:31
msgid "Content filtering subscriptions require RMW implementation support."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:33
msgid "Content-Filtering-Subscription Support Status"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:36
msgid "rmw_fastrtps"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:37 ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:39
msgid "supported"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:38
msgid "rmw_connextdds"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:40
msgid "rmw_cyclonedds"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:41
msgid "not supported"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:43
msgid "Currently all RMW implementations that support content filtering subscriptions are `DDS <https://www.omg.org/omg-dds-portal/>`__ based. That means that the supported filtering expressions and parameters are also dependent on `DDS <https://www.omg.org/omg-dds-portal/>`__, you can refer to `DDS specification <https://www.omg.org/spec/DDS/1.4/PDF>`__ ``Annex B - Syntax for Queries and Filters`` for details."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:47 ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:21
msgid "Installing the demo"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:49 ../../source/Tutorials/Demos/Intra-Process-Communication.rst:26
msgid "See the :doc:`installation instructions <../../Installation>` for details on installing ROS 2."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:51
msgid "If you've installed ROS 2 from packages, ensure that you have ``ros-humble-demo-nodes-cpp`` installed. If you downloaded the archive or built ROS 2 from source, it will already be part of the installation."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:55
msgid "Temperature filtering demo"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:57
msgid "This demo shows how a content filtering subscription can be used to only receive temperature values that are out of the acceptable temperature range, detecting emergencies. The content filtering subscription filters out the uninteresting temperature data, so that the subscription callback is not issued."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:60
msgid "ContentFilteringPublisher:"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:62
msgid "https://github.com/ros2/demos/blob/humble/demo_nodes_cpp/src/topics/content_filtering_publisher.cpp"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:130
msgid "The content filter is defined in the subscription side, publishers don't need to be configured in any special way to allow content filtering. The ``ContentFilteringPublisher`` node publishes simulated temperature data starting from -100.0 and ending at 150.0 with a step size of 10.0 every second."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:133
msgid "We can run the demo by running the ``ros2 run demo_nodes_cpp content_filtering_publisher`` executable (don't forget to source the setup file first):"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:169
msgid "ContentFilteringSubscriber:"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:171
msgid "https://github.com/ros2/demos/blob/humble/demo_nodes_cpp/src/topics/content_filtering_subscriber.cpp"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:241
msgid "To enable content filtering, applications can set the filtering expression and the expression parameters in ``SubscriptionOptions``. The application can also check if content filtering is enabled on the subscription."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:244
msgid "In this demo, the ``ContentFilteringSubscriber`` node creates a content filtering subscription that receives a message only if the temperature value is less than -30.0 or greater than 100.0."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:246
msgid "As commented before, content filtering subscription support depends on the RMW implementation. Applications can use the ``is_cft_enabled`` method to check if content filtering is actually enabled on the subscription."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:249
msgid "To test content filtering subscription, let's run it:"
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:275
msgid "You should see a message showing the content filtering options used and logs for each message received only if the temperature value is less than -30.0 or greater than 100.0."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:277
msgid "If content filtering is not supported by the RMW implementation, the subscription will still be created without content filtering enabled. We can try that by executing ``RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ros2 run demo_nodes_cpp content_filtering_publisher``."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:302
msgid "You can see the message ``Content filter is not enabled`` because underlying RMW implementation does not support the feature, but the demo still successfully creates the normal subscription to receive all temperature data."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:307
msgid "`content filtering examples <https://github.com/ros2/examples/blob/humble/rclcpp/topics/minimal_subscriber/content_filtering.cpp>`__ that covers all interfaces for content filtering subscription."
msgstr ""

#: ../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:308
msgid "`content filtering design PR <https://github.com/ros2/design/pull/282>`__"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:7
msgid "Setting up efficient intra-process communication"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:16
msgid "ROS applications typically consist of a composition of individual \"nodes\" which perform narrow tasks and are decoupled from other parts of the system. This promotes fault isolation, faster development, modularity, and code reuse, but it often comes at the cost of performance. After ROS 1 was initially developed, the need for efficient composition of nodes became obvious and Nodelets were developed. In ROS 2 we aim to improve on the design of Nodelets by addressing some fundamental problems that required restructuring of nodes."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:21
msgid "In this demo we'll be highlighting how nodes can be composed manually, by defining the nodes separately but combining them in different process layouts without changing the node's code or limiting its abilities."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:24
msgid "Installing the demos"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:28
msgid "If you've installed ROS 2 from packages, ensure that you have ``ros-humble-intra-process-demo`` installed. If you downloaded the archive or built ROS 2 from source, it will already be part of the installation."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:32
msgid "Running and understanding the demos"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:34
msgid "There are a few different demos: some are toy problems designed to highlight features of the intra process communications functionality and some are end to end examples which use OpenCV and demonstrate the ability to recombine nodes into different configurations."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:37
msgid "The two node pipeline demo"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:39
msgid "This demo is designed to show that the intra process publish/subscribe connection can result in zero-copy transport of messages when publishing and subscribing with ``std::unique_ptr``\\ s."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:41
msgid "First let's take a look at the source:"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:43
msgid "https://github.com/ros2/demos/blob/humble/intra_process_demo/src/two_node_pipeline/two_node_pipeline.cpp"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:127
msgid "As you can see by looking at the ``main`` function, we have a producer and a consumer node, we add them to a single threaded executor, and then call spin."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:129
msgid "If you look at the \"producer\" node's implementation in the ``Producer`` struct, you can see that we have created a publisher which publishes on the \"number\" topic and a timer which periodically creates a new message, prints out its address in memory and its content's value and then publishes it."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:131
msgid "The \"consumer\" node is a bit simpler, you can see its implementation in the ``Consumer`` struct, as it only subscribes to the \"number\" topic and prints the address and value of the message it receives."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:133
msgid "The expectation is that the producer will print out an address and value and the consumer will print out a matching address and value. This demonstrates that intra process communication is indeed working and unnecessary copies are avoided, at least for simple graphs."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:136
msgid "Let's run the demo by executing ``ros2 run intra_process_demo two_node_pipeline`` executable (don't forget to source the setup file first):"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:154
msgid "One thing you'll notice is that the messages tick along at about one per second. This is because we told the timer to fire at about once per second."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:157
msgid "Also you may have noticed that the first message (with value ``0``) does not have a corresponding \"Received message ...\" line. This is because publish/subscribe is \"best effort\" and we do not have any \"latching\" like behavior enabled. This means that if the publisher publishes a message before the subscription has been established, the subscription will not receive that message. This race condition can result in the first few messages being lost. In this case, since they only come once per second, usually only the first message is lost."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:163
msgid "Finally, you can see that \"Published message...\" and \"Received message ...\" lines with the same value also have the same address. This shows that the address of the message being received is the same as the one that was published and that it is not a copy. This is because we're publishing and subscribing with ``std::unique_ptr``\\ s which allow ownership of a message to be moved around the system safely. You can also publish and subscribe with ``const &`` and ``std::shared_ptr``, but zero-copy will not occur in that case."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:169
msgid "The cyclic pipeline demo"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:171
msgid "This demo is similar to the previous one, but instead of the producer creating a new message for each iteration, this demo only ever uses one message instance. This is achieved by creating a cycle in the graph and \"kicking off\" communication by externally making one of the nodes publish before spinning the executor:"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:174
msgid "https://github.com/ros2/demos/blob/humble/intra_process_demo/src/cyclic_pipeline/cyclic_pipeline.cpp"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:256
msgid "Unlike the previous demo, this demo uses only one Node, instantiated twice with different names and configurations. The graph ends up being ``pipe1`` -> ``pipe2`` -> ``pipe1`` ... in a loop."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:259
msgid "The line ``pipe1->pub->publish(msg);`` kicks the process off, but from then on the messages are passed back and forth between the nodes by each one calling publish within its own subscription callback."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:261
msgid "The expectation here is that the nodes pass the message back and forth, once a second, incrementing the value of the message each time. Because the message is being published and subscribed to as a ``unique_ptr`` the same message created at the beginning is continuously used."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:264
msgid "To test those expectations, let's run it:"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:294
msgid "You should see ever increasing numbers on each iteration, starting with 42... because 42, and the whole time it reuses the same message, as demonstrated by the pointer addresses which do not change, which avoids unnecessary copies."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:297
msgid "The image pipeline demo"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:299
msgid "In this demo we'll use OpenCV to capture, annotate, and then view images."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:303
msgid "If you are on macOS and these examples do not work or you receive an error like ``ddsi_conn_write failed -1``, then you'll need to increase your system wide UDP packet size:"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:310
msgid "These changes will not persist after a reboot."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:313
msgid "Simple pipeline"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:315
msgid "First we'll have a pipeline of three nodes, arranged as such: ``camera_node`` -> ``watermark_node`` -> ``image_view_node``"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:317
msgid "The ``camera_node`` reads from camera device ``0`` on your computer, writes some information on the image and publishes it. The ``watermark_node`` subscribes to the output of the ``camera_node`` and adds more text before publishing it too. Finally, the ``image_view_node`` subscribes to the output of the ``watermark_node``, writes more text to the image and then visualizes it with ``cv::imshow``."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:321
msgid "In each node the address of the message which is being sent, or which has been received, or both, is written to the image. The watermark and image view nodes are designed to modify the image without copying it and so the addresses imprinted on the image should all be the same as long as the nodes are in the same process and the graph remains organized in a pipeline as sketched above."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:326
msgid "On some systems (we've seen it happen on Linux), the address printed to the screen might not change. This is because the same unique pointer is being reused. In this situation, the pipeline is still running."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:329
msgid "Let's run the demo by executing the following executable:"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:335 ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:128
msgid "You should see something like this:"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:341
msgid "You can pause the rendering of the image by pressing the spacebar and you can resume by pressing the spacebar again. You can also press ``q`` or ``ESC`` to exit."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:344
msgid "If you pause the image viewer, you should be able to compare the addresses written on the image and see that they are the same."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:347
msgid "Pipeline with two image viewers"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:349
msgid "Now let's look at an example just like the one above, except it has two image view nodes. All the nodes are still in the same process, but now two image view windows should show up. (Note for macOS users: your image view windows might be on top of each other). Let's run it with the command:"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:361
msgid "Just like the last example, you can pause the rendering with the spacebar and continue by pressing the spacebar a second time. You can stop the updating to inspect the pointers written to the screen."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:363
msgid "As you can see in the example image above, we have one image with all of the pointers the same and then another image with the same pointers as the first image for the first two entries, but the last pointer on the second image is different. To understand why this is happening consider the graph's topology:"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:370
msgid "The link between the ``camera_node`` and the ``watermark_node`` can use the same pointer without copying because there is only one intra process subscription to which the message should be delivered. But for the link between the ``watermark_node`` and the two image view nodes the relationship is one to many, so if the image view nodes were using ``unique_ptr`` callbacks then it would be impossible to deliver the ownership of the same pointer to both. It can be, however, delivered to one of them. Which one would get the original pointer is not defined, but instead is simply the last to be delivered."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:372
msgid "Note that the image view nodes are not subscribed with ``unique_ptr`` callbacks. Instead they are subscribed with ``const shared_ptr``\\ s. This means the system deliveres the same ``shared_ptr`` to both callbacks. When the first intraprocess subscription is handled, the internally stored ``unique_ptr`` is promoted to a ``shared_ptr``. Each of the callbacks will receive shared ownership of the same message."
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:375
msgid "Pipeline with interprocess viewer"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:377
msgid "One other important thing to get right is to avoid interruption of the intra process zero-copy behavior when interprocess subscriptions are made. To test this we can run the first image pipeline demo, ``image_pipeline_all_in_one``, and then run an instance of the stand alone ``image_view_node`` (don't forget to prefix them with ``ros2 run intra_process_demo`` in the terminal). This will look something like this:"
msgstr ""

#: ../../source/Tutorials/Demos/Intra-Process-Communication.rst:383
msgid "It's hard to pause both images at the same time so the images may not line up, but the important thing to notice is that the ``image_pipeline_all_in_one`` image view shows the same address for each step. This means that the intra process zero-copy is preserved even when an external view is subscribed as well. You can also see that the interprocess image view has different process IDs for the first two lines of text and the process ID of the standalone image viewer in the third line of text."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:7
msgid "Logging"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:13
msgid "See `the logging page <../../Concepts/Intermediate/About-Logging>` for details on available functionality."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:16
msgid "Using log statements in code"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:19
msgid "Basic logging"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:21
msgid "The following code will output a log message from a ROS 2 node at ``DEBUG`` severity:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:41
msgid "Note that in both cases, no trailing newline is added, as the logging infrastructure will automatically add one."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:44
msgid "Logging only the first time"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:46
msgid "The following code will output a log message from a ROS 2 node at ``INFO`` severity, but only the first time it is hit:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:68
msgid "Logging all but the first time"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:70
msgid "The following code will output a log message from a ROS 2 node at ``WARN`` severity, but not the very first time it is hit:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:92
msgid "Logging throttled"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:94
msgid "The following code will output a log message from a ROS 2 node at ``ERROR`` severity, but no more than once per second."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:96
msgid "The interval parameter specifying milliseconds between messages should have an integer data type so it can be converted to a ``rcutils_duration_value_t`` (an ``int64_t``):"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:121
msgid "Logging throttled all but the first time"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:123
msgid "The following code will output a log message from a ROS 2 node at ``DEBUG`` severity, no more than once per second, skipping the very first time it is hit:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:144
msgid "Logging demo"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:146
msgid "In this `demo <https://github.com/ros2/demos/tree/humble/logging_demo>`_, different types of log calls are shown and the severity level of different loggers is configured locally and externally."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:148
msgid "Start the demo with:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:154
msgid "Over time you will see output from various log calls with different properties. To start with you will only see output from log calls with severity ``INFO`` and above (``WARN``, ``ERROR``, ``FATAL``). Note that the first message will only be logged once, though the line is reached on each iteration, as that is a property of the log call used for that message."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:159
msgid "Logging directory configuration"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:161
msgid "The logging directory can be configured through two environment variables: ``ROS_LOG_DIR`` and ``ROS_HOME``. The logic is as follows:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:164
msgid "Use ``$ROS_LOG_DIR`` if ``ROS_LOG_DIR`` is set and not empty."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:165
msgid "Otherwise, use ``$ROS_HOME/log``, using ``~/.ros`` for ``ROS_HOME`` if not set or if empty."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:167
msgid "For example, to set the logging directory to ``~/my_logs``:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:192
msgid "You will then find the logs under ``~/my_logs/``."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:194
msgid "Alternatively, you can set ``ROS_HOME`` and the logging directory will be relative to it (``$ROS_HOME/log``). ``ROS_HOME`` is intended to be used by anything that needs a base directory. Note that ``ROS_LOG_DIR`` has to be either unset or empty. For example, with ``ROS_HOME`` set to ``~/my_ros_home``:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:222
msgid "You will then find the logs under ``~/my_ros_home/log/``."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:225
msgid "Logger level configuration: programmatically"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:227
msgid "After 10 iterations the level of the logger will be set to ``DEBUG``, which will cause additional messages to be logged."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:229
msgid "Some of these debug messages cause additional functions/expressions to be evaluated, which were previously skipped as ``DEBUG`` log calls were not enabled. See `the source code <https://github.com/ros2/demos/blob/humble/logging_demo/src/logger_usage_component.cpp>`__ of the demo for further explanation of the calls used, and see the rclcpp logging documentation for a full list of supported logging calls."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:233
msgid "Logger level configuration: externally"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:235
msgid "In the future there will be a generalized approach to external configuration of loggers at runtime (similar to how `rqt_logger_level <https://wiki.ros.org/rqt_logger_level>`__ in ROS 1 allows logger configuration via remote procedural calls). **This concept is not yet officially supported in ROS 2.** In the meantime, this demo provides an **example** service that can be called externally to request configuration of logger levels for known names of loggers in the process."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:239
msgid "The demo previously started is already running this example service. To set the level of the demo's logger back to ``INFO``\\ , call the service with:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:246
msgid "This service call will work on any logger that is running in the process provided that you know its name. This includes the loggers in the ROS 2 core, such as ``rcl`` (the common client library package). To enable debug logging for ``rcl``, call:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:254
msgid "You should see debug output from ``rcl`` start to show."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:257
msgid "Using the logger config component"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:259
msgid "The server that responds to the logger configuration requests has been developed as a component so that it may be added to an existing composition-based system. For example, if you are using `a container to run your nodes <../Intermediate/Composition>`, to be able to configure your loggers you only need to request that it additionally load the ``logging_demo::LoggerConfig`` component into the container."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:262
msgid "As an example, if you want to debug the ``composition::Talker`` demo, you can start the talker as normal with:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:264
msgid "Shell 1:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:270 ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:287
msgid "Shell 2:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:276
msgid "And then when you want to enable debug logging, load the ``LoggerConfig`` component with:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:278
msgid "Shell 2"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:284
msgid "And finally, configure all unset loggers to the debug severity by addressing the empty-named logger. Note that loggers that have been specifically configured to use a particular severity will not be affected by this call."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:293
msgid "You should see debug output from any previously unset loggers in the process start to appear, including from the ROS 2 core."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:296
msgid "Logger level configuration: command line"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:298
msgid "As of the Bouncy ROS 2 release, the severity level for loggers that have not had their severity set explicitly can be configured from the command line. Restart the demo including the following command line argument:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:306
msgid "This configures the default severity for any unset logger to the debug severity level. You should see debug output from loggers from the demo itself and from the ROS 2 core."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:309
msgid "As of the Galactic ROS 2 release, the severity level for individual loggers can be configured from the command-line. Restart the demo including the following command line arguments:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:314
msgid "Galactic and newer"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:322
msgid "Console output formatting"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:324
msgid "If you would like more or less verbose formatting, you can use RCUTILS_CONSOLE_OUTPUT_FORMAT environment variable. For example, to additionally get the timestamp and location of the log calls, stop the demo and restart it with the environment variable set:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:350
msgid "You should see the timestamp in seconds and the function name, filename and line number additionally printed with each message. *The ``time`` option is only supported as of the ROS 2 Bouncy release.*"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:354
msgid "Console output colorizing"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:356
msgid "By default, the output is colorized when it's targeting a terminal. If you would like to force enabling or disabling it, you can use the ``RCUTILS_COLORIZED_OUTPUT`` environment variable. For example:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:383
msgid "You should see that debug, warn, error and fatal logs aren't colorized now."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:387
msgid "In Linux and MacOS forcing colorized output means that if you redirect the output to a file, the ansi escape color codes will appear on it. In windows the colorization method relies on console APIs. If it is forced you will get a new warning saying that colorization failed. The default behavior already checks if the output is a console or not, so forcing colorization is not recommended."
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:393
msgid "Default stream for console output"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:395
msgid "In Foxy and later, the output from all debug levels goes to stderr by default.  It is possible to force all output to go to stdout by setting the ``RCUTILS_LOGGING_USE_STDOUT`` environment variable to ``1``. For example:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:420
msgid "Line buffered console output"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:423
msgid "By default, all logging output is unbuffered. You can force it to be buffered by setting the ``RCUTILS_LOGGING_BUFFERED_STREAM`` environment variable to 1. For example:"
msgstr ""

#: ../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:447 ../../source/Tutorials/Demos/Quality-of-Service.rst:71
msgid "Then run:"
msgstr ""

#: ../../source/Tutorials/Demos/Managed-Nodes.rst:7
msgid "Managing nodes with managed lifecycles"
msgstr ""

#: ../../source/Tutorials/Demos/Managed-Nodes.rst:9
msgid "This page lives now directly side-by-side with the `code <https://github.com/ros2/demos/blob/humble/lifecycle/README.rst>`__. For more information about the ``lifecycle`` package, refer to `rosindex <https://index.ros.org/p/lifecycle/github-ros2-demos/>`__."
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:7
msgid "Using quality-of-service settings for lossy networks"
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:16
msgid "Please read the documentation page `about QoS settings <../../Concepts/Intermediate/About-Quality-of-Service-Settings>` for background information on available support in ROS 2."
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:18
msgid "In this demo, we will spawn a node that publishes a camera image and another that subscribes to the image and shows it on the screen. We will then simulate a lossy network connection between them and show how different quality of service settings handle the bad link."
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:24
msgid "This tutorial assumes you have a :doc:`working ROS 2 installation <../../Installation>` and OpenCV. See the `OpenCV documentation <http://docs.opencv.org/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html#table-of-content-introduction>`__ for its installation instructions. You will also need the ROS package ``image_tools``."
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:30 ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:27
msgid "Linux Binaries"
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:36 ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:33
msgid "From Source"
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:47
msgid "Before running the demo, make sure you have a working webcam connected to your computer."
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:49
msgid "Once you've installed ROS 2, source your setup file:"
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:77
msgid "Nothing will happen yet. ``showimage`` is a subscriber node that is waiting for a publisher on the ``image`` topic."
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:80
msgid "Note: you have to close the ``showimage`` process with ``Ctrl-C`` later. You can't just close the window."
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:83
msgid "In a separate terminal, source the install file and run the publisher node:"
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:89
msgid "This will publish an image from your webcam. In case you don't have a camera attached to your computer, there is a commandline option which publishes predefined images."
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:98
msgid "In this window, you'll see terminal output:"
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:107
msgid "A window will pop up with the title \"view\" showing your camera feed. In the first window, you'll see output from the subscriber:"
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:119
msgid "macOS users: If these examples do not work or you receive an error like ``ddsi_conn_write failed -1`` then you'll need to increase your system wide UDP packet size:"
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:126
msgid "These changes will not persist a reboot. If you want the changes to persist, add these lines to ``/etc/sysctl.conf`` (create the file if it doesn't exist already):"
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:134
msgid "Command line options"
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:136
msgid "In one of your terminals, add a -h flag to the original command:"
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:146
msgid "Add network traffic"
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:150
msgid "This section of the demo won't work on RTI's Connext DDS. When running multiple nodes in the same host, the RTI Connext DDS implementation uses shared memory along with the loopback interface. Degrading the loopback interface throughput won't affect shared memory, thus traffic between the two nodes won't be affected."
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:156
msgid "This next section is Linux-specific."
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:158
msgid "However, for macOS and Windows you can achieve a similar effect with the utilities \"Network Link Conditioner\" (part of the xcode tool suite) and \"Clumsy\" (http://jagt.github.io/clumsy/index.html), respectively, but they will not be covered in this tutorial."
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:160
msgid "We are going to use the Linux network traffic control utility, ``tc`` (http://linux.die.net/man/8/tc)."
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:166
msgid "This magical incantation will simulate 5% packet loss over the local loopback device. If you use a higher resolution of the images (e.g. ``--ros-args -p width:=640 -p height:=480``) you might want to try a lower packet loss rate (e.g. ``1%``)."
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:169
msgid "Next we start the ``cam2image`` and ``showimage``, and we'll soon notice that both programs seem to have slowed down the rate at which images are transmitted. This is caused by the behavior of the default QoS settings. Enforcing reliability on a lossy channel means that the publisher (in this case, ``cam2image``) will resend the network packets until it receives acknowledgement from the consumer (i.e. ``showimage``)."
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:173
msgid "Let's now try running both programs, but with more suitable settings. First of all, we'll use the ``-p reliability:=best_effort`` option to enable best effort communication. The publisher will now just attempt to deliver the network packets, and don't expect acknowledgement from the consumer. We see now that some of the frames on the ``showimage`` side were dropped, so the frame numbers in the shell running ``showimage`` won't be consecutive anymore:"
msgstr ""

msgid "Best effort image transfer"
msgstr ""

#: ../../source/Tutorials/Demos/Quality-of-Service.rst:184
msgid "When you're done, remember to delete the queueing discipline:"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:7
msgid "Understanding real-time programming"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:16
msgid "Real-time computing is a key feature of many robotics systems, particularly safety- and mission-critical applications such as autonomous vehicles, spacecrafts, and industrial manufacturing. We are designing and prototyping ROS 2 with real-time performance constraints in mind, since this is a requirement that was not considered in the early stages of ROS 1 and it is now intractable to refactor ROS 1 to be real-time friendly."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:19
msgid "`This document <https://design.ros2.org/articles/realtime_background.html>`__ outlines the requirements of real-time computing and best practices for software engineers.  In short:"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:21
msgid "To make a real-time computer system, our real-time loop must update periodically to meet deadlines. We can only tolerate a small margin of error on these deadlines (our maximum allowable jitter). To do this, we must avoid nondeterministic operations in the execution path, things like: pagefault events, dynamic memory allocation/deallocation, and synchronization primitives that block indefinitely."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:25
msgid "A classic example of a controls problem commonly solved by real-time computing is balancing an `inverted pendulum <https://en.wikipedia.org/wiki/Inverted_pendulum>`__. If the controller blocked for an unexpectedly long amount of time, the pendulum would fall down or go unstable. But if the controller reliably updates at a rate faster than the motor controlling the pendulum can operate, the pendulum will successfully adapt react to sensor data to balance the pendulum."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:29
msgid "Now that you know everything about real-time computing, let's try a demo!"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:32
msgid "Install and run the demo"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:34
msgid "The real-time demo was written with Linux operating systems in mind, since many members of the ROS community doing real-time computing use Xenomai or RT_PREEMPT as their real-time solutions. Since many of the operations done in the demo to optimize performance are OS-specific, the demo only builds and runs on Linux systems. **So, if you are an OSX or Windows user, don't try this part!**"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:38
msgid "Also this must be built from source using a the static DDS API. **Currently the only supported implementation is Connext**."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:40
msgid "First, follow the instructions to build ROS 2 :doc:`from source <../../Installation/Alternatives/Ubuntu-Development-Setup>` using Connext DDS as the middleware."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:43
msgid "Run the tests"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:45
msgid "**Before you run make sure you have at least 8Gb of RAM free. With the memory locking, swap will not work anymore.**"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:47
msgid "Source your ROS 2 setup.bash."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:49
msgid "Run the demo binary, and redirect the output. You may want to use ``sudo`` in case you get permission error:"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:56
msgid "What the heck just happened?"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:58
msgid "First, even though you redirected stdout, you will see some output to the console (from stderr):"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:66
msgid "After the initialization stage of the demo program, it will attempt to lock all cached memory into RAM and prevent future dynamic memory allocations using ``mlockall``. This is to prevent pagefaults from loading lots of new memory into RAM. (See `the realtime design article <https://design.ros2.org/articles/realtime_background.html#memory-management>`__ for more information.)"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:70
msgid "The demo will continue on as usual when this occurs. At the bottom of the output.txt file generated by the demo, you'll see the number of pagefaults encountered during execution:"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:79
msgid "If we want those pagefaults to go away, we'll have to..."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:82
msgid "Adjust permissions for memory locking"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:84 ../../source/Tutorials/Demos/Real-Time-Programming.rst:179
msgid "Add to ``/etc/security/limits.conf`` (as sudo):"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:90
msgid "A limit of ``-1`` is unlimited. If you choose this, you may need to accompany it with ``ulimit -l unlimited`` after editing the file."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:93
msgid "After saving the file, log out and log back in. Then rerun the ``pendulum_demo`` invocation."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:96
msgid "You'll either see zero pagefaults in your output file, or an error saying that a bad_alloc exception was caught. If this happened, you didn't have enough free memory available to lock the memory allocated for the process into RAM. You'll need to install more RAM in your computer to see zero pagefaults!"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:101
msgid "Output overview"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:103
msgid "To see more output, we have to run the ``pendulum_logger`` node."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:105
msgid "In one shell with your ``install/setup.bash`` sourced, invoke:"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:112
msgid "You should see the output message:"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:118
msgid "In another shell with setup.bash sourced, invoke ``pendulum_demo`` again."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:120
msgid "As soon as this executable starts, you should see the other shell constantly printing output:"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:132
msgid "The demo is controlling a very simple inverted pendulum simulation. The pendulum simulation calculates its position in its own thread. A ROS node simulates a motor encoder sensor for the pendulum and publishes its position. Another ROS node acts as a simple PID controller and calculates the next command message."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:137
msgid "The logger node periodically prints out the pendulum's state and the runtime performance statistics of the demo during its execution phase."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:139
msgid "After the ``pendulum_demo`` is finished, you'll have to CTRL-C out of the logger node to exit."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:142
msgid "Latency"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:144
msgid "At the ``pendulum_demo`` execution, you'll see the final statistics collected for the demo:"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:160
msgid "The latency fields show you the minimum, maximum, and average latency of the update loop in nanoseconds. Here, latency means the amount of time after the update was expected to occur."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:163
#, python-format
msgid "The requirements of a real-time system depend on the application, but let's say in this demo we have a 1kHz (1 millisecond) update loop, and we're aiming for a maximum allowable latency of 5% of our update period."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:165
msgid "So, our average latency was really good in this run, but the maximum latency was unacceptable because it actually exceeded our update loop! What happened?"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:167
msgid "We may be suffering from a non-deterministic scheduler. If you're running a vanilla Linux system and you don't have the RT_PREEMPT kernel installed, you probably won't be able to meet the real-time goal we set for ourselves, because the Linux scheduler won't allow you to arbitrarily pre-empt threads at the user level."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:170
msgid "See the `realtime design article <https://design.ros2.org/articles/realtime_background.html#multithreaded-programming-and-synchronization>`__ for more information."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:172
msgid "The demo attempts to set the scheduler and thread priority of the demo to be suitable for real-time performance. If this operation failed, you'll see an error message: \"Couldn't set scheduling priority and policy: Operation not permitted\". You can get slightly better performance by following the instructions in the next section:"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:177
msgid "Setting permissions for the scheduler"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:185
msgid "The range of the rtprio (real-time priority) field is 0-99. However, do NOT set the limit to 99 because then your processes could interfere with important system processes that run at the top priority (e.g. watchdog). This demo will attempt to run the control loop at priority 98."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:190
msgid "Plotting results"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:192
msgid "You can plot the latency and pagefault statistics that are collected in this demo after the demo runs."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:194
msgid "Because the code has been instrumented with `rttest <https://github.com/ros2/rttest>`__, there are useful command line arguments available:"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:197
msgid "Command"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:197
msgid "Description"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:197
msgid "Default value"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:199
msgid "-i"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:199
msgid "Specify how many iterations to run the real-time loop"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:199
msgid "1000"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:201
msgid "-u"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:201
msgid "Specify the update period with the default unit being microseconds."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:203
msgid "Use the suffix \"s\" for seconds, \"ms\" for milliseconds,"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:205
msgid "\"us\" for microseconds, and \"ns\" for nanoseconds."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:201
msgid "1ms"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:207
msgid "-f"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:207
msgid "Specify the name of the file for writing the collected data."
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:210
msgid "Run the demo again with a filename to save results:"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:216
msgid "Then run the ``rttest_plot`` script on the resulting file:"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:222
msgid "This script will produce three files:"
msgstr ""

#: ../../source/Tutorials/Demos/Real-Time-Programming.rst:230
msgid "You can view these plots in an image viewer of your choice."
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:7
msgid "Recording and playing back data with ``rosbag`` using the ROS 1 bridge"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:9
msgid "This tutorial is a follow up to the *Bridge communication between ROS 1 and ROS 2* demo as can be found `here <https://github.com/ros2/ros1_bridge/blob/master/README.md>`__, and in the following it is assumed you have completed that tutorial already."
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:11
msgid "The ros1_bridge can be built from :doc:`source <../../How-To-Guides/Using-ros1_bridge-Jammy-upstream>` for these examples."
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:13
msgid "What follows is a series of additional examples, like that ones that come at the end of the aforementioned *Bridge communication between ROS 1 and ROS 2* demo."
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:16
msgid "Recording topic data with rosbag and ROS 1 Bridge"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:18
msgid "In this example, we'll be using the ``cam2image`` demo program that comes with ROS 2 and a Python script to emulate a simple turtlebot-like robot's sensor data so that we can bridge it to ROS 1 and use rosbag to record it."
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:20
msgid "First we'll run a ROS 1 ``roscore`` in a new shell:"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:30
msgid "Then we'll run the ROS 1 <=> ROS 2 ``dynamic_bridge`` with the ``--bridge-all-topics`` option (so we can do ``rostopic list`` and see them) in another shell:"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:44
msgid "Remember to replace ``<workspace-with-bridge>`` with the path to where you either extracted the ROS 2 binary or where you built ROS 2 from source."
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:48
msgid "Now we can start up the ROS 2 programs that will emulate our turtlebot-like robot. First we'll run the ``cam2image`` program with the ``-b`` option so it doesn't require a camera to work:"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:59
msgid "TODO: use namespaced topic names"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:61
msgid "Then we'll run a simple Python script to emulate the ``odom`` and ``imu_data`` topics from a Kobuki base. I would use the more accurate ``~sensors/imu_data`` topic name for the imu data, but we don't have namespace support just yet in ROS 2 (it's coming!). Place this script in a file called ``emulate_kobuki_node.py``:"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:106
msgid "You can run this python script in a new ROS 2 shell:"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:118
msgid "Now that all the data sources and the dynamic bridge are running, we can look at the available topics in a new ROS 1 shell:"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:139
msgid "We can now record this data with ``rosbag record`` in the same shell:"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:146
msgid "After a few seconds you can ``Ctrl-c`` the ``rosbag`` command and do an ``ls -lh`` to see how big the file is, you might see something like this:"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:154
msgid "Though the file name will be different for your bag (since it is derived from the date and time)."
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:157
msgid "Playing back topic data with rosbag and ROS 1 Bridge"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:159
msgid "Now that we have a bag file you can use any of the ROS 1 tools to introspect the bag file, like ``rosbag info <bag file>``, ``rostopic list -b <bag file>``, or ``rqt_bag <bag file>``. However, we can also playback bag data into ROS 2 using ``rosbag play`` and the ROS 1 <=> ROS 2 ``dynamic_bridge``."
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:162
msgid "First close out all the shells you opened for the previous tutorial, stopping any running programs."
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:164
msgid "Then in a new shell start the ``roscore``:"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:174
msgid "Then run the ``dynamic_bridge`` in another shell:"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:188
msgid "Then play the bag data back with ``rosbag play`` in another new shell, using the ``--loop`` option so that we don't have to keep restarting it for short bags:"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:198
msgid "Make sure to replace ``path/to/bag_file`` with the path to the bag file you want to playback."
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:202
msgid "Now that the data is being played back and the bridge is running we can see the data coming across in ROS 2."
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:213
msgid "You should see something like:"
msgstr ""

#: ../../source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst:224
msgid "You can also see the image being played from the bag by using the ``showimage`` tool:"
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:7
msgid "Experimenting with a dummy robot"
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:9
msgid "In this demo, we present a simple demo robot with all components from publishing joint states over publishing fake laser data until visualizing the robot model on a map in RViz."
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:12
msgid "Launching the demo"
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:14
msgid "We assume your ROS 2 installation dir as ``~/ros2_ws``. Please change the directories according to your platform."
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:16
msgid "To start the demo, we execute the demo bringup launch file, which we are going to explain in more details in the next section."
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:23
msgid "You should see some prints inside your terminal along the lines of the following:"
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:53
msgid "If you now open in a next terminal your RViz, you'll see your robot. 🎉"
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:60
msgid "This opens RViz2. Assuming you have your dummy_robot_bringup still launched, you can now add the TF display plugin and configure your global frame to ``world``. Once you did that, you should see a similar picture:"
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:67
msgid "What's happening?"
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:69
msgid "If you have a closer look at the launch file, we start a couple of nodes at the same time."
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:72
msgid "dummy_map_server"
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:73
msgid "dummy_laser"
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:74
msgid "dummy_joint_states"
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:75
msgid "robot_state_publisher"
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:77
msgid "The first two packages are relatively simple. The ``dummy_map_server`` constantly publishes an empty map with a periodic update. The ``dummy_laser`` does basically the same; publishing dummy fake laser scans."
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:79
msgid "The ``dummy_joint_states`` node is publishing fake joint state data. As we are publishing a simple RRbot with only two joints, this node publishes joint states values for these two joints."
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:81
msgid "The ``robot_state_publisher`` is doing the actual interesting work. It parses the given URDF file, extracts the robot model and listens to the incoming joint states. With this information, it publishes TF values for our robot which we visualize in RViz."
msgstr ""

#: ../../source/Tutorials/Demos/dummy-robot-demo.rst:83
msgid "Hooray!"
msgstr ""

#: ../../source/Tutorials/Intermediate.rst:2
msgid "Intermediate"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:7
msgid "Composing multiple nodes in a single process"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:13
msgid "**Goal:** Compose multiple nodes into a single process."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:15 ../../source/Tutorials/Intermediate/Creating-an-Action.rst:12 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:11 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:12 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:11 ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:13 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:11 ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:10 ../../source/Tutorials/Intermediate/Rosdep.rst:14 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:12 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:12 ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:12 ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:12 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:12 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:12 ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:12 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:12 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:12 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:12 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:12 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:12 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:12 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:12 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:12 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:12 ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:12 ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:12 ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:12 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:12 ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:12 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:12 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:12
msgid "**Tutorial level:** Intermediate"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:22
msgid "See the :doc:`conceptual article <../../Concepts/Intermediate/About-Composition>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:25
msgid "Run the demos"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:27
msgid "The demos use executables from `rclcpp_components <https://github.com/ros2/rclcpp/tree/humble/rclcpp_components>`__, `ros2component <https://github.com/ros2/ros2cli/tree/humble/ros2component>`__, and  `composition <https://github.com/ros2/demos/tree/humble/composition>`__ packages, and can be run with the following commands."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:31
msgid "Discover available components"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:33
msgid "To see what components are registered and available in the workspace, execute the following in a shell:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:39
msgid "The terminal will return the list of all available components:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:54
msgid "Run-time composition using ROS services with a publisher and subscriber"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:56 ../../source/Tutorials/Intermediate/Composition.rst:213 ../../source/Tutorials/Intermediate/Composition.rst:279
msgid "In the first shell, start the component container:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:62
msgid "Open the second shell and verify that the container is running via ``ros2`` command line tools:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:68 ../../source/Tutorials/Intermediate/Composition.rst:225
msgid "You should see a name of the component:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:74
msgid "In the second shell load the talker component (see `talker <https://github.com/ros2/demos/blob/humble/composition/src/talker_component.cpp>`__ source code):"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:80
msgid "The command will return the unique ID of the loaded component as well as the node name:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:86
msgid "Now the first shell should show a message that the component was loaded as well as repeated message for publishing a message."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:88
msgid "Run another command in the second shell to load the listener component (see `listener <https://github.com/ros2/demos/blob/humble/composition/src/listener_component.cpp>`__ source code):"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:94
msgid "Terminal will return:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:100
msgid "The ``ros2`` command line utility can now be used to inspect the state of the container:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:106
msgid "You will see the following result:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:114
msgid "Now the first shell should show repeated output for each received message."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:117
msgid "Run-time composition using ROS services with a server and client"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:119
msgid "The example with a server and a client is very similar."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:121
msgid "In the first shell:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:127
msgid "In the second shell (see `server <https://github.com/ros2/demos/blob/humble/composition/src/server_component.cpp>`__ and `client <https://github.com/ros2/demos/blob/humble/composition/src/client_component.cpp>`__ source code):"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:134
msgid "In this case the client sends a request to the server, the server processes the request and replies with a response, and the client prints the received response."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:137
msgid "Compile-time composition using ROS services"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:139
msgid "This demos shows that the same shared libraries can be reused to compile a single executable running multiple components. The executable contains all four components from above: talker and listener as well as server and client."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:142
msgid "In the shell call (see `source code <https://github.com/ros2/demos/blob/humble/composition/src/manual_composition.cpp>`__):"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:148
msgid "This should show repeated messages from both pairs, the talker and the listener as well as the server and the client."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:152
msgid "Manually-composed components will not be reflected in the ``ros2 component list`` command line tool output."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:155
msgid "Run-time composition using dlopen"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:157
msgid "This demo presents an alternative to run-time composition by creating a generic container process and explicitly passing the libraries to load without using ROS interfaces. The process will open each library and create one instance of each \"rclcpp::Node\" class in the library `source code <https://github.com/ros2/demos/blob/humble/composition/src/dlopen_composition.cpp>`__)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:180
msgid "to get the path to where composition is installed. Then call"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:186
msgid "Now the shell should show repeated output for each sent and received message."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:190
msgid "dlopen-composed components will not be reflected in the ``ros2 component list`` command line tool output."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:194
msgid "Composition using launch actions"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:196
msgid "While the command line tools are useful for debugging and diagnosing component configurations, it is frequently more convenient to start a set of components at the same time. To automate this action, we can use a `launch file <https://github.com/ros2/demos/blob/humble/composition/launch/composition_demo.launch.py>`__:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:205
msgid "Advanced Topics"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:207
msgid "Now that we have seen the basic operation of components, we can discuss a few more advanced topics."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:211
msgid "Unloading components"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:219
msgid "Verify that the container is running via ``ros2`` command line tools:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:231
msgid "In the second shell load both the talker and listener as we have before:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:238
msgid "Use the unique ID to unload the node from the component container."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:244
msgid "The terminal should return:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:251
msgid "In the first shell, verify that the repeated messages from talker and listener have stopped."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:255
msgid "Remapping container name and namespace"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:257
msgid "The component manager name and namespace can be remapped via standard command line arguments:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:263
msgid "In a second shell, components can be loaded by using the updated container name:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:271 ../../source/Tutorials/Intermediate/Composition.rst:323
msgid "Namespace remappings of the container do not affect loaded components."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:275
msgid "Remap component names and namespaces"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:277
msgid "Component names and namespaces may be adjusted via arguments to the load command."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:286
msgid "Some examples of how to remap names and namespaces."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:288
msgid "Remap node name:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:294
msgid "Remap namespace:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:300
msgid "Remap both:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:306
msgid "Now use ``ros2`` command line utility:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:312
msgid "In the console you should see corresponding entries:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:326
msgid "Passing parameter values into components"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:328
msgid "The ``ros2 component load`` command-line supports passing arbitrary parameters to the node as it is constructed. This functionality can be used as follows:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:336
msgid "Passing additional arguments into components"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:338
msgid "The ``ros2 component load`` command-line supports passing particular options to the component manager for use when constructing the node. As of now, the only command-line option that is supported is to instantiate a node using intra-process communication. This functionality can be used as follows:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:347
msgid "Composable nodes as shared libraries"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:349
msgid "If you want to export a composable node as a shared library from a package and use that node in another package that does link-time composition, add code to the CMake file which imports the actual targets in downstream packages."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:351
msgid "Then install the generated file and export the generated file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:353
msgid "A practical example can be seen here: `ROS Discourse - Ament best practice for sharing libraries <https://discourse.ros.org/t/ament-best-practice-for-sharing-libraries/3602>`__"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:356
msgid "Composing Non-Node Derived Components"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:358
msgid "In ROS 2, components allow for more efficient use of system resources and provide a powerful feature that enables you to create reusable functionality that is not tied to a specific node."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:360
msgid "One advantage of using components is that they allow you to create non-node derived functionality as standalone executables or shared libraries that can be loaded into the ROS system as needed."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:362
msgid "To create a component that is not derived from a node, follow these guidelines:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:364
msgid "Implement a constructor that takes ``const rclcpp::NodeOptions&`` as its argument."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:365
msgid "Implement the ``get_node_base_interface()`` method, which should return a ``NodeBaseInterface::SharedPtr``. You can use the ``get_node_base_interface()`` method of a node that you create in your constructor to provide this interface."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:367
msgid "Here's an example of a component that is not derived from a node, which listens to a ROS topic: `node_like_listener_component <https://github.com/ros2/demos/blob/humble/composition/src/node_like_listener_component.cpp>`__."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:369
msgid "For more information on this topic, you can refer to this `discussion <https://github.com/ros2/rclcpp/issues/2110#issuecomment-1454228192>`__."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:8
msgid "Creating an action"
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:10
msgid "**Goal:** Define an action in a ROS 2 package."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:23
msgid "You learned about actions previously in the :doc:`../Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions` tutorial. Like the other communication types and their respective interfaces (topics/msg and services/srv), you can also custom-define actions in your packages. This tutorial shows you how to define and build an action that you can use with the action server and action client you will write in the next tutorial."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:32
msgid "You should have :doc:`ROS 2 <../../Installation>` and `colcon <https://colcon.readthedocs.org>`__ installed."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:34
msgid "Set up a :doc:`workspace <../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>` and create a package named ``action_tutorials_interfaces``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:36
msgid "(Remember to :doc:`source your ROS 2 installation <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` first.)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:68
msgid "1 Defining an action"
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:70
msgid "Actions are defined in ``.action`` files of the form:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:80
msgid "An action definition is made up of three message definitions separated by ``---``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:82
msgid "A *request* message is sent from an action client to an action server initiating a new goal."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:83
msgid "A *result* message is sent from an action server to an action client when a goal is done."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:84
msgid "*Feedback* messages are periodically sent from an action server to an action client with updates about a goal."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:86
msgid "An instance of an action is typically referred to as a *goal*."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:88
msgid "Say we want to define a new action \"Fibonacci\" for computing the `Fibonacci sequence <https://en.wikipedia.org/wiki/Fibonacci_number>`__."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:90
msgid "Create an ``action`` directory in our ROS 2 package ``action_tutorials_interfaces``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:115
msgid "Within the ``action`` directory, create a file called ``Fibonacci.action`` with the following contents:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:125
msgid "The goal request is the ``order`` of the Fibonacci sequence we want to compute, the result is the final ``sequence``, and the feedback is the ``partial_sequence`` computed so far."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:128
msgid "2 Building an action"
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:130
msgid "Before we can use the new Fibonacci action type in our code, we must pass the definition to the rosidl code generation pipeline."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:132
msgid "This is accomplished by adding the following lines to our ``CMakeLists.txt`` before the ``ament_package()`` line, in the ``action_tutorials_interfaces``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:142
msgid "We should also add the required dependencies to our ``package.xml``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:152
msgid "Note, we need to depend on ``action_msgs`` since action definitions include additional metadata (e.g. goal IDs)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:154
msgid "We should now be able to build the package containing the ``Fibonacci`` action definition:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:163
msgid "We're done!"
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:165
msgid "By convention, action types will be prefixed by their package name and the word ``action``. So when we want to refer to our new action, it will have the full name ``action_tutorials_interfaces/action/Fibonacci``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:168
msgid "We can check that our action built successfully with the command line tool:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:180
msgid "You should see the Fibonacci action definition printed to the screen."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:185
msgid "In this tutorial, you learned the structure of an action definition. You also learned how to correctly build a new action interface using ``CMakeLists.txt`` and ``package.xml``, and how to verify a successful build."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:192
msgid "Next, let's utilize your newly defined action interface by creating an action service and client (in :doc:`Python <Writing-an-Action-Server-Client/Py>` or :doc:`C++ <Writing-an-Action-Server-Client/Cpp>`)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Creating-an-Action.rst:197 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:394 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:361
msgid "For more detailed information about ROS actions, please refer to the `design article <http://design.ros2.org/articles/actions.html>`__."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:7
msgid "Creating a launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:9
msgid "**Goal:** Create a launch file to run a complex ROS 2 system."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:22
msgid "This tutorial uses the :doc:`rqt_graph and turtlesim <../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>` packages."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:24
msgid "You will also need to use a text editor of your preference."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:26 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:25 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:35 ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:35
msgid "As always, don’t forget to source ROS 2 in :doc:`every new terminal you open <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:31
msgid "The launch system in ROS 2 is responsible for helping the user describe the configuration of their system and then execute it as described. The configuration of the system includes what programs to run, where to run them, what arguments to pass them, and ROS-specific conventions which make it easy to reuse components throughout the system by giving them each a different configuration. It is also responsible for monitoring the state of the processes launched, and reporting and/or reacting to changes in the state of those processes."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:35
msgid "Launch files written in Python, XML, or YAML can start and stop different nodes as well as trigger and act on various events. See :doc:`../../../How-To-Guides/Launch-file-different-formats` for a description of the different formats. The package providing this framework is ``launch_ros``, which uses the non-ROS-specific ``launch`` framework underneath."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:39
msgid "The `design document <https://design.ros2.org/articles/roslaunch.html>`__ details the goal of the design of ROS 2's launch system (not all functionality is currently available)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:47
msgid "Create a new directory to store your launch files:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:54 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:247 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:258
msgid "2 Write the launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:56
msgid "Let’s put together a ROS 2 launch file using the ``turtlesim`` package and its executables. As mentioned above, this can either be in Python, XML, or YAML."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:63
msgid "Copy and paste the complete code into the ``launch/turtlesim_mimic_launch.py`` file:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:95 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:211 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:279
msgid "XML"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:97
msgid "Copy and paste the complete code into the ``launch/turtlesim_mimic_launch.xml`` file:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:110 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:229 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:286
msgid "YAML"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:112
msgid "Copy and paste the complete code into the ``launch/turtlesim_mimic_launch.yaml`` file:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:144
msgid "2.1 Examine the launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:146
msgid "All of the launch files above are launching a system of three nodes, all from the ``turtlesim`` package. The goal of the system is to launch two turtlesim windows, and have one turtle mimic the movements of the other."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:149
msgid "When launching the two turtlesim nodes, the only difference between them is their namespace values. Unique namespaces allow the system to start two nodes without node name or topic name conflicts. Both turtles in this system receive commands over the same topic and publish their pose over the same topic. With unique namespaces, messages meant for different turtles can be distinguished."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:154
msgid "The final node is also from the ``turtlesim`` package, but a different executable: ``mimic``. This node has added configuration details in the form of remappings. ``mimic``'s ``/input/pose`` topic is remapped to ``/turtlesim1/turtle1/pose`` and it's ``/output/cmd_vel`` topic to ``/turtlesim2/turtle1/cmd_vel``. This means ``mimic`` will subscribe to ``/turtlesim1/sim``'s pose topic and republish it for ``/turtlesim2/sim``'s velocity command topic to subscribe to. In other words, ``turtlesim2`` will mimic ``turtlesim1``'s movements."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:164
msgid "These import statements pull in some Python ``launch`` modules."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:171
msgid "Next, the launch description itself begins:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:180
msgid "The first two actions in the launch description launch the two turtlesim windows:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:197 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:220 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:248
msgid "The final action launches the mimic node with the remaps:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:213 ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:231
msgid "The first two actions launch the two turtlesim windows:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:266
msgid "3 ros2 launch"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:268
msgid "To run the launch file created above, enter into the directory you created earlier and run the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:295
msgid "It is possible to launch a launch file directly (as we do above), or provided by a package. When it is provided by a package, the syntax is:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:302
msgid "You learned about creating packages in :doc:`../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:306
msgid "For packages with launch files, it is a good idea to add an ``exec_depend`` dependency on the ``ros2launch`` package in your package's ``package.xml``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:312
msgid "This helps make sure that the ``ros2 launch`` command is available after building your package. It also ensures that all :doc:`launch file formats <../../../How-To-Guides/Launch-file-different-formats>` are recognized."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:315
msgid "Two turtlesim windows will open, and you will see the following ``[INFO]`` messages telling you which nodes your launch file has started:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:324
msgid "To see the system in action, open a new terminal and run the ``ros2 topic pub`` command on the ``/turtlesim1/turtle1/cmd_vel`` topic to get the first turtle moving:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:330
msgid "You will see both turtles following the same path."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:335
msgid "4 Introspect the system with rqt_graph"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:337
msgid "While the system is still running, open a new terminal and run ``rqt_graph`` to get a better idea of the relationship between the nodes in your launch file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:347
msgid "A hidden node (the ``ros2 topic pub`` command you ran) is publishing data to the ``/turtlesim1/turtle1/cmd_vel`` topic on the left, which the ``/turtlesim1/sim`` node is subscribed to. The rest of the graph shows what was described earlier: ``mimic`` is subscribed to ``/turtlesim1/sim``'s pose topic, and publishes to ``/turtlesim2/sim``'s velocity command topic."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst:353
msgid "Launch files simplify running complex systems with many nodes and specific configuration details. You can create launch files using Python, XML, or YAML, and run them using the ``ros2 launch`` command."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:9
msgid "Launch"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:11
msgid "ROS 2 Launch files allow you to start up and configure a number of executables containing ROS 2 nodes simultaneously."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:22
msgid ":doc:`Creating a launch file <./Creating-Launch-Files>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:24
msgid "Learn how to create a launch file that will start up nodes and their configurations all at once."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:26
msgid ":doc:`Launching and monitoring multiple nodes <./Launch-system>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:28
msgid "Get a more advanced overview of how launch files work."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:30
msgid ":doc:`Using substitutions <./Using-Substitutions>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:32
msgid "Use substitutions to provide more flexibility when describing reusable launch files."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:34
msgid ":doc:`Using event handlers <./Using-Event-Handlers>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:36
msgid "Use event handlers to monitor the state of processes or to define a complex set of rules that can be used to dynamically modify the launch file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:38
msgid ":doc:`Managing large projects <./Using-ROS2-Launch-For-Large-Projects>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:40
msgid "Structure launch files for large projects so they may be reused as much as possible in different situations. See usage examples of different launch tools like parameters, YAML files, remappings, namespaces, default arguments, and RViz configs."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-Main.rst:45
msgid "If you are coming from ROS 1, you can use the :doc:`ROS Launch Migration guide <../../../How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files>` to help you migrate your launch files to ROS 2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:8
msgid "Integrating launch files into ROS 2 packages"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:10
msgid "**Goal:** Add a launch file to a ROS 2 package"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:23
msgid "You should have gone through the tutorial on how to :doc:`create a ROS 2 package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:30
msgid "In the :doc:`previous tutorial <Creating-Launch-Files>`, we saw how to write a standalone launch file. This tutorial will show how to add a launch file to an existing package, and the conventions typically used."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:39
msgid "Create a workspace for the package to live in:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:66 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:86 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:203
msgid "Python package"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:72 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:123 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:225
msgid "C++ package"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:79
msgid "2 Creating the structure to hold launch files"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:81
msgid "By convention, all launch files for a package are stored in the ``launch`` directory inside of the package. Make sure to create a ``launch`` directory at the top-level of the package you created above."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:88
msgid "For Python packages, the directory containing your package should look like this:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:102
msgid "In order for colcon to find the launch files, we need to inform Python's setup tools of our launch files using the ``data_files`` parameter of ``setup``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:104
msgid "Inside our ``setup.py`` file:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:125
msgid "For C++ packages, we will only be adjusting the ``CMakeLists.txt`` file by adding:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:135
msgid "to the end of the file (but before ``ament_package()``)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:139
msgid "3 Writing the launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:143 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:207 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:229
msgid "Python launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:145
msgid "Inside your ``launch`` directory, create a new launch file called ``my_script_launch.py``. ``_launch.py`` is recommended, but not required, as the file suffix for Python launch files. However, the launch file name needs to end with ``launch.py`` to be recognized and autocompleted by ``ros2 launch``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:149
msgid "Your launch file should define the ``generate_launch_description()`` function which returns a ``launch.LaunchDescription()`` to be used by the ``ros2 launch`` verb."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:164 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:213 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:235
msgid "XML launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:166
msgid "Inside your ``launch`` directory, create a new launch file called ``my_script_launch.xml``. ``_launch.xml`` is recommended, but not required, as the file suffix for XML launch files."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:175 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:219 ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:241
msgid "YAML launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:177
msgid "Inside your ``launch`` directory, create a new launch file called ``my_script_launch.yaml``. ``_launch.yaml`` is recommended, but not required, as the file suffix for YAML launch files."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:191
msgid "4 Building and running the launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:193
msgid "Go to the top-level of the workspace, and build it:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:199
msgid "After the ``colcon build`` has been successful and you've sourced the workspace, you should be able to run the launch file as follows:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:249 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:305 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:391
msgid "Documentation"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:251
msgid "`The launch documentation <https://github.com/ros2/launch/blob/humble/launch/doc/source/architecture.rst>`__ provides more details on concepts that are also used in ``launch_ros``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Launch-system.rst:253
msgid "Additional documentation/examples of launch capabilities are forthcoming. See the source code (https://github.com/ros2/launch and https://github.com/ros2/launch_ros) in the meantime."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:7 ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:39
msgid "Using event handlers"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:9
msgid "**Goal:** Learn about event handlers in ROS 2 launch files"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:22
msgid "Launch in ROS 2 is a system that executes and manages user-defined processes. It is responsible for monitoring the state of processes it launched, as well as reporting and reacting to changes in the state of those processes. These changes are called events and can be handled by registering an event handler with the launch system. Event handlers can be registered for specific events and can be useful for monitoring the state of processes. Additionally, they can be used to define a complex set of rules which can be used to dynamically modify the launch file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:28
msgid "This tutorial shows usage examples of event handlers in ROS 2 launch files."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:33
msgid "This tutorial uses the :doc:`turtlesim <../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>` package. This tutorial also assumes you have :doc:`created a new package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>` of build type ``ament_python`` called ``launch_tutorial``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:36
msgid "This tutorial extends the code shown in the :doc:`Using substitutions in launch files <./Using-Substitutions>` tutorial."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:42
msgid "1 Event handlers example launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:44
msgid "Create a new file called ``example_event_handlers.launch.py`` file in the ``launch`` folder of the ``launch_tutorial`` package."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:183
msgid "``RegisterEventHandler`` actions for the ``OnProcessStart``, ``OnProcessIO``, ``OnExecutionComplete``, ``OnProcessExit``, and ``OnShutdown`` events were defined in the launch description."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:185
msgid "The ``OnProcessStart`` event handler is used to register a callback function that is executed when the turtlesim node starts. It logs a message to the console and executes the ``spawn_turtle`` action when the turtlesim node starts."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:200
msgid "The ``OnProcessIO`` event handler is used to register a callback function that is executed when the ``spawn_turtle`` action writes to its standard output. It logs the result of the spawn request."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:215
msgid "The ``OnExecutionComplete`` event handler is used to register a callback function that is executed when the ``spawn_turtle`` action completes. It logs a message to the console and executes the ``change_background_r`` and ``change_background_r_conditioned`` actions when the spawn action completes."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:234
msgid "The ``OnProcessExit`` event handler is used to register a callback function that is executed when the turtlesim node exits. It logs a message to the console and executes the ``EmitEvent`` action to emit a ``Shutdown`` event when the turtlesim node exits. It means that the launch process will shutdown when the turtlesim window is closed."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:252
msgid "Finally, the ``OnShutdown`` event handler is used to register a callback function that is executed when the launch file is asked to shutdown. It logs a message to the console why the launch file is asked to shutdown. It logs the message with a reason for shutdown like the closure of turtlesim window or :kbd:`ctrl-c` signal made by the user."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:268
msgid "Build the package"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:270 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:331
msgid "Go to the root of the workspace, and build the package:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:276 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:337
msgid "Also remember to source the workspace after building."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:279 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:340
msgid "Launching example"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:281
msgid "Now you can launch the ``example_event_handlers.launch.py`` file using the ``ros2 launch`` command."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:287 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:348
msgid "This will do the following:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:289 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:350
msgid "Start a turtlesim node with a blue background"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:290 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:351
msgid "Spawn the second turtle"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:291 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:352
msgid "Change the color to purple"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:292 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:353
msgid "Change the color to pink after two seconds if the provided ``background_r`` argument is ``200`` and ``use_provided_red`` argument is ``True``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:293
msgid "Shutdown the launch file when the turtlesim window is closed"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:295
msgid "Additionally, it will log messages to the console when:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:297
msgid "The turtlesim node starts"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:298
msgid "The spawn action is executed"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:299
msgid "The ``change_background_r`` action is executed"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:300
msgid "The ``change_background_r_conditioned`` action is executed"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:301
msgid "The turtlesim node exits"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:302
msgid "The launch process is asked to shutdown."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:307
msgid "`The launch documentation <https://github.com/ros2/launch/blob/humble/launch/doc/source/architecture.rst>`_ provides detailed information about available event handlers."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst:312
msgid "In this tutorial, you learned about using event handlers in launch files. You learned about their syntax and usage examples to define a complex set of rules to dynamically modify launch files."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:9
msgid "Managing large projects"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:11
msgid "**Goal:** Learn best practices of managing large projects using ROS 2 launch files."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:24
msgid "This tutorial describes some tips for writing launch files for large projects. The focus is on how to structure launch files so they may be reused as much as possible in different situations. Additionally, it covers usage examples of different ROS 2 launch tools, like parameters, YAML files, remappings, namespaces, default arguments, and RViz configs."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:31
msgid "This tutorial uses the :doc:`turtlesim <../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>` and :doc:`turtle_tf2_py <../Tf2/Introduction-To-Tf2>` packages. This tutorial also assumes you have :doc:`created a new package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>` of build type ``ament_python`` called ``launch_tutorial``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:35
msgid "Introduction"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:37
msgid "Large applications on a robot typically involve several interconnected nodes, each of which can have many parameters. Simulation of multiple turtles in the turtle simulator can serve as a good example. The turtle simulation consists of multiple turtle nodes, the world configuration, and the TF broadcaster and listener nodes. Between all of the nodes, there are a large number of ROS parameters that affect the behavior and appearance of these nodes. ROS 2 launch files allow us to start all nodes and set corresponding parameters in one place. By the end of a tutorial, you will build the ``launch_turtlesim.launch.py`` launch file in the ``launch_tutorial`` package. This launch file will bring up different nodes responsible for the simulation of two turtlesim simulations, starting TF broadcasters and listener, loading parameters, and launching an RViz configuration. In this tutorial, we'll go over this launch file and all related features used."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:47
msgid "Writing launch files"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:50
msgid "1 Top-level organization"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:52
msgid "One of the aims in the process of writing launch files should be making them as reusable as possible. This could be done by clustering related nodes and configurations into separate launch files. Afterwards, a top-level launch file dedicated to a specific configuration could be written. This would allow moving between identical robots to be done without changing the launch files at all. Even a change such as moving from a real robot to a simulated one can be done with only a few changes."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:58
msgid "We will now go over the top-level launch file structure that makes this possible. Firstly, we will create a launch file that will call separate launch files. To do this, let's create a ``launch_turtlesim.launch.py`` file in the ``/launch`` folder of our ``launch_tutorial`` package."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:115
msgid "This launch file includes a set of other launch files. Each of these included launch files contains nodes, parameters, and possibly, nested includes, which pertain to one part of the system. To be exact, we launch two turtlesim simulation worlds, TF broadcaster, TF listener, mimic, fixed frame broadcaster, and RViz nodes."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:119
msgid "Design Tip: Top-level launch files should be short, consist of includes to other files corresponding to subcomponents of the application, and commonly changed parameters."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:121
msgid "Writing launch files in the following manner makes it easy to swap out one piece of the system, as we'll see later. However, there are cases when some nodes or launch files have to be launched separately due to performance and usage reasons."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:124
msgid "Design tip: Be aware of the tradeoffs when deciding how many top-level launch files your application requires."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:127
msgid "2 Parameters"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:130
msgid "2.1 Setting parameters in the launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:132
msgid "We will begin by writing a launch file that will start our first turtlesim simulation. First, create a new file called ``turtlesim_world_1.launch.py``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:171
msgid "This launch file starts the ``turtlesim_node`` node, which starts the turtlesim simulation, with simulation configuration parameters that are defined and passed to the nodes."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:174
msgid "2.2 Loading parameters from YAML file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:176
msgid "In the second launch, we will start a second turtlesim simulation with a different configuration. Now create a ``turtlesim_world_2.launch.py`` file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:206
msgid "This launch file will launch the same ``turtlesim_node`` with parameter values that are loaded directly from the YAML configuration file. Defining arguments and parameters in YAML files make it easy to store and load a large number of variables. In addition, YAML files can be easily exported from the current ``ros2 param`` list. To learn how to do that, refer to the :doc:`Understand parameters <../../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` tutorial."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:211
msgid "Let's now create a configuration file, ``turtlesim.yaml``, in the ``/config`` folder of our package, which will be loaded by our launch file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:221
msgid "If we now start the ``turtlesim_world_2.launch.py`` launch file, we will start the ``turtlesim_node`` with preconfigured background colors."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:223
msgid "To learn more about using parameters and using YAML files, take a look at the :doc:`Understand parameters <../../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` tutorial."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:226
msgid "2.3 Using wildcards in YAML files"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:228
msgid "There are cases when we want to set the same parameters in more than one node. These nodes could have different namespaces or names but still have the same parameters. Defining separate YAML files that explicitly define namespaces and node names is not efficient. A solution is to use wildcard characters, which act as substitutions for unknown characters in a text value, to apply parameters to several different nodes."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:233
msgid "Now let's create a new ``turtlesim_world_3.launch.py`` file similar to ``turtlesim_world_2.launch.py`` to include one more ``turtlesim_node`` node."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:246
msgid "Loading the same YAML file, however, will not affect the appearance of the third turtlesim world. The reason is that its parameters are stored under another namespace as shown below:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:256
msgid "Therefore, instead of creating a new configuration for the same node that use the same parameters, we can use wildcards syntax. ``/**`` will assign all the parameters in every node, despite differences in node names and namespaces."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:259
msgid "We will now update the ``turtlesim.yaml``, in the ``/config`` folder in the following manner:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:269
msgid "Now include the ``turtlesim_world_3.launch.py`` launch description in our main launch file. Using that configuration file in our launch descriptions will assign ``background_b``, ``background_g``, and ``background_r`` parameters to specified values in ``turtlesim3/sim`` and ``turtlesim2/sim`` nodes."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:273
msgid "3 Namespaces"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:275
msgid "As you may have noticed, we have defined the namespace for the turlesim world in the ``turtlesim_world_2.launch.py`` file. Unique namespaces allow the system to start two similar nodes without node name or topic name conflicts."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:282
msgid "However, if the launch file contains a large number of nodes, defining namespaces for each of them can become tedious. To solve that issue, the ``PushRosNamespace`` action can be used to define the global namespace for each launch file description. Every nested node will inherit that namespace automatically."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:286
msgid "To do that, firstly, we need to remove the ``namespace='turtlesim2'`` line from the ``turtlesim_world_2.launch.py`` file. Afterwards, we need to update the ``launch_turtlesim.launch.py`` to include the following lines:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:307
msgid "Finally, we replace the ``turtlesim_world_2`` to ``turtlesim_world_2_with_namespace`` in the ``return LaunchDescription`` statement. As a result, each node in the ``turtlesim_world_2.launch.py`` launch description will have a ``turtlesim2`` namespace."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:311
msgid "4 Reusing nodes"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:313
msgid "Now create a ``broadcaster_listener.launch.py`` file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:357
msgid "In this file, we have declared the ``target_frame`` launch argument with a default value of ``turtle1``. The default value means that the launch file can receive an argument to forward to its nodes, or in case the argument is not provided, it will pass the default value to its nodes."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:360
msgid "Afterwards, we use the ``turtle_tf2_broadcaster`` node two times using different names and parameters during launch. This allows us to duplicate the same node without conflicts."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:363
msgid "We also start a ``turtle_tf2_listener`` node and set its ``target_frame`` parameter that we declared and acquired above."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:366
msgid "5 Parameter overrides"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:368
msgid "Recall that we called the ``broadcaster_listener.launch.py`` file in our top-level launch file. In addition to that, we have passed it ``target_frame`` launch argument as shown below:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:380
msgid "This syntax allows us to change the default goal target frame to ``carrot1``. If you would like ``turtle2`` to follow ``turtle1`` instead of the ``carrot1``, just remove the line that defines ``launch_arguments``. This will assign ``target_frame`` its default value, which is ``turtle1``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:387
msgid "Now create a ``mimic.launch.py`` file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:408
msgid "This launch file will start the ``mimic`` node, which will give commands to one turtlesim to follow the other. The node is designed to receive the target pose on the topic ``/input/pose``. In our case, we want to remap the target pose from ``/turtle2/pose`` topic. Finally, we remap the ``/output/cmd_vel`` topic to ``/turtlesim2/turtle1/cmd_vel``. This way ``turtle1`` in our ``turtlesim2`` simulation world will follow ``turtle2`` in our initial turtlesim world."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:415
msgid "7 Config files"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:417
msgid "Let's now create a file called ``turtlesim_rviz.launch.py``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:445
msgid "This launch file will start the RViz with the configuration file defined in the ``turtle_tf2_py`` package. This RViz configuration will set the world frame, enable TF visualization, and start RViz with a top-down view."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:449
msgid "8 Environment Variables"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:451
msgid "Let's now create the last launch file called ``fixed_broadcaster.launch.py`` in our package."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:475
msgid "This launch file shows the way environment variables can be called inside the launch files. Environment variables can be used to define or push namespaces for distinguishing nodes on different computers or robots."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:479
msgid "Running launch files"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:482
msgid "1 Update setup.py"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:484
msgid "Open ``setup.py`` and add the following lines so that the launch files from the ``launch/`` folder and configuration file from the ``config/`` would be installed. The ``data_files`` field should now look like this:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:505
msgid "To finally see the result of our code, build the package and launch the top-level launch file using the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:511
msgid "You will now see the two turtlesim simulations started. There are two turtles in the first one and one in the second one. In the first simulation, ``turtle2`` is spawned in the bottom-left part of the world. Its aim is to reach the ``carrot1`` frame which is five meters away on the x-axis relative to the ``turtle1`` frame."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:516
msgid "The ``turtlesim2/turtle1`` in the second is designed to mimic the behavior of the ``turtle2``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:518
msgid "If you want to control the ``turtle1``, run the teleop node."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:524
msgid "As a result, you will see a similar picture:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:528
msgid "In addition to that, the RViz should have started. It will show all turtle frames relative to the ``world`` frame, whose origin is at the bottom-left corner."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:536
msgid "In this tutorial, you learned about various tips and practices of managing large projects using ROS 2 launch files."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:7 ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:38
msgid "Using substitutions"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:9
msgid "**Goal:** Learn about substitutions in ROS 2 launch files."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:22
msgid "Launch files are used to start nodes, services and execute processes. This set of actions may have arguments, which affect their behavior. Substitutions can be used in arguments to provide more flexibility when describing reusable launch files. Substitutions are variables that are only evaluated during execution of the launch description and can be used to acquire specific information like a launch configuration, an environment variable, or to evaluate an arbitrary Python expression."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:27
msgid "This tutorial shows usage examples of substitutions in ROS 2 launch files."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:32
msgid "This tutorial uses the :doc:`turtlesim <../../Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim>` package. This tutorial also assumes you are familiar with :doc:`creating packages <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:41
msgid "1 Create and setup the package"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:43
msgid "Create a new package of build_type ``ament_python`` called ``launch_tutorial``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:49
msgid "Inside of that package, create a directory called ``launch``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:71
msgid "Finally, make sure to add in changes to the ``setup.py`` of the package so that the launch files will be installed:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:92
msgid "2 Parent launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:94
msgid "Let's create a launch file that will call and pass arguments to another launch file. To do this, create an ``example_main.launch.py`` file in the ``launch`` folder of the ``launch_tutorial`` package."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:130
msgid "In the ``example_main.launch.py`` file, the ``FindPackageShare`` substitution is used to find the path to the ``launch_tutorial`` package. The ``PathJoinSubstitution`` substitution is then used to join the path to that package path with the ``example_substitutions.launch.py`` file name."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:141
msgid "The ``launch_arguments`` dictionary with ``turtlesim_ns`` and ``use_provided_red`` arguments is passed to the ``IncludeLaunchDescription`` action. The ``TextSubstitution`` substitution is used to define the ``new_background_r`` argument with the value of the ``background_r`` key in the ``colors`` dictionary."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:153
msgid "3 Substitutions example launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:155
msgid "Now create an ``example_substitutions.launch.py`` file in the same folder."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:241
msgid "In the ``example_substitutions.launch.py`` file, ``turtlesim_ns``, ``use_provided_red``, and ``new_background_r`` launch configurations are defined. They are used to store values of launch arguments in the above variables and to pass them to required actions. These ``LaunchConfiguration`` substitutions allow us to acquire the value of the launch argument in any part of the launch description."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:245
msgid "``DeclareLaunchArgument`` is used to define the launch argument that can be passed from the above launch file or from the console."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:266
msgid "The ``turtlesim_node`` node with the ``namespace`` set to ``turtlesim_ns`` ``LaunchConfiguration`` substitution is defined."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:277
msgid "Afterwards, the ``ExecuteProcess`` action called ``spawn_turtle`` is defined with the corresponding ``cmd`` argument. This command makes a call to the spawn service of the turtlesim node."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:280
msgid "Additionally, the ``LaunchConfiguration`` substitution is used to get the value of the ``turtlesim_ns`` launch argument to construct a command string."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:295
msgid "The same approach is used for the ``change_background_r`` and ``change_background_r_conditioned`` actions that change the turtlesim background's red color parameter. The difference is that the ``change_background_r_conditioned`` action is only executed if the provided ``new_background_r`` argument equals ``200`` and the ``use_provided_red`` launch argument is set to ``True``. The evaluation inside the ``IfCondition`` is done using the ``PythonExpression`` substitution."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:329
msgid "4 Build the package"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:342
msgid "Now you can launch the ``example_main.launch.py`` file using the ``ros2 launch`` command."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:356
msgid "Modifying launch arguments"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:358
msgid "If you want to change the provided launch arguments, you can either update them in ``launch_arguments`` dictionary in the ``example_main.launch.py`` or launch the ``example_substitutions.launch.py`` with preferred arguments. To see arguments that may be given to the launch file, run the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:365
msgid "This will show the arguments that may be given to the launch file and their default values."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:383
msgid "Now you can pass the desired arguments to the launch file as follows:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:393
msgid "`The launch documentation <https://github.com/ros2/launch/blob/humble/launch/doc/source/architecture.rst>`_ provides detailed information about available substitutions."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:398
msgid "In this tutorial, you learned about using substitutions in launch files. You learned about their possibilities and capabilities to create reusable launch files."
msgstr ""

#: ../../source/Tutorials/Intermediate/Launch/Using-Substitutions.rst:401
msgid "You can now learn more about :doc:`using event handlers in launch files <./Using-Event-Handlers>` which are used to define a complex set of rules which can be used to dynamically modify the launch file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:6
msgid "Monitoring for parameter changes (C++)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:8
msgid "**Goal:** Learn to use the ParameterEventHandler class to monitor and respond to parameter changes."
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:14
msgid "**Minimum Platform:** Galactic"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:23
msgid "Often a node needs to respond to changes to its own parameters or another node's parameters. The ParameterEventHandler class makes it easy to listen for parameter changes so that your code can respond to them. This tutorial will show you how to use the C++ version of the ParameterEventHandler class to monitor for changes to a node's own parameters as well as changes to another node's parameters."
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:30
msgid "Before starting this tutorial, you should first complete the following tutorials:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:32
msgid ":doc:`../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters`"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:33
msgid ":doc:`../Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP`"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:35
msgid "In addition, you must be running the Galactic distribution of ROS 2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:40
msgid "In this tutorial, you will create a new package to contain some sample code, write some C++ code to use the ParameterEventHandler class, and test the resulting code."
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:46
msgid "First, open a new terminal and :doc:`source your ROS 2 installation <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` so that ``ros2`` commands will work."
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:50
msgid "Recall that packages should be created in the ``src`` directory, not the root of the workspace. So, navigate into ``ros2_ws/src`` and then create a new package there:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:57
msgid "Your terminal will return a message verifying the creation of your package ``cpp_parameter_event_handler`` and all its necessary files and folders."
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:64
msgid "Because you used the ``--dependencies`` option during package creation, you don’t have to manually add dependencies to ``package.xml`` or ``CMakeLists.txt``. As always, though, make sure to add the description, maintainer email and name, and license information to ``package.xml``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:76
msgid "Inside the ``ros2_ws/src/cpp_parameter_event_handler/src`` directory, create a new file called ``parameter_event_handler.cpp`` and paste the following code within:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:123
msgid "The first statement, ``#include <memory>`` is included so that the code can utilize the std::make_shared template. The next, ``#include \"rclcpp/rclcpp.hpp\"`` is included to allow the code to reference the various functionality provided by the rclcpp interface, including the ParameterEventHandler class."
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:126
msgid "After the class declaration, the code defines a class, ``SampleNodeWithParameters``. The constructor for the class declares an integer parameter ``an_int_param``, with a default value of 0. Next, the code creates a ``ParameterEventHandler`` that will be used to monitor changes to parameters. Finally, the code creates a lambda function and sets it as the callback to invoke whenever ``an_int_param`` is updated."
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:133
msgid "It is very important to save the handle that is returned by ``add_parameter_callback``; otherwise, the callback will not be properly registered."
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:157
msgid "Following the ``SampleNodeWithParameters`` is a typical ``main`` function which initializes ROS, spins the sample node so that it can send and receive messages, and then shuts down after the user enters ^C at the console."
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:174
msgid "To build this code, first open the ``CMakeLists.txt`` file and add the following lines of code below the dependency ``find_package(rclcpp REQUIRED)``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:241
msgid "The node is now active and has a single parameter and will print a message whenever this parameter is updated. To test this, open up another terminal and source the ROS setup file as before (. install/setup.bash) and execute the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:248
msgid "The terminal running the node will display a message similar to the following:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:254
msgid "The callback we set previously in the node has been invoked and has displayed the new updated value. You can now terminate the running parameter_event_handler sample using ^C in the terminal."
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:258
msgid "3.1 Monitor changes to another node's parameters"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:260
msgid "You can also use the ParameterEventHandler to monitor parameter changes to another node's parameters. Let's update the SampleNodeWithParameters class to also monitor for changes to a parameter in another node. We will use the parameter_blackboard demo application to host a double parameter that we will monitor for updates."
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:264
msgid "First update the constructor to add the following code after the existing code:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:282
msgid "Then add another member variable, ``cb_handle2`` for the additional callback handle:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:293
msgid "In a terminal, navigate back to the root of your workspace, ``ros2_ws``, and build your updated package as before:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:299
msgid "Then source the setup files:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:321
msgid "Now, to test monitoring of remote parameters, first run the newly-built parameter_event_handler code:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:327
msgid "Next, from another teminal (with ROS initialized), run the parameter_blackboard demo application, as follows:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:333
msgid "Finally, from a third terminal (with ROS initialized), let's set a parameter on the parameter_blackboard node:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:339
msgid "Upon executing this command, you should see output in the parameter_event_handler window, indicating that the callback function was invoked upon the parameter update:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:348
msgid "You created a node with a parameter and used the ParameterEventHandler class to set a callback to monitor changes to that parameter. You also used the same class to monitor changes to a remote node. The ParameterEventHandler is a convenient way to monitor for parameter changes so that you can then respond to the updated values."
msgstr ""

#: ../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:355
msgid "To learn how to adapt ROS 1 parameter files for ROS 2, see the :doc:`Migrating YAML parameter files from ROS 1 to ROS2 <../../How-To-Guides/Migrating-from-ROS1/Migrating-Parameters>` tutorial."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:6
msgid "Managing Dependencies with rosdep"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:12
msgid "**Goal:** Manage external dependencies using ``rosdep``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:18
msgid "This tutorial will explain how to manage external dependencies using ``rosdep``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:22
msgid "Currently rosdep only works on Linux and macOS; Windows is not supported. There are long-term plans to add support for Windows to https://github.com/ros-infrastructure/rosdep."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:26
msgid "What is rosdep?"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:28
msgid "``rosdep`` is a dependency management utility that can work with packages and external libraries. It is a command-line utility for identifying and installing dependencies to build or install a package. ``rosdep`` is *not* a package manager in its own right; it is a meta-package manager that uses its own knowledge of the system and the dependencies to find the appropriate package to install on a particular platform. The actual installation is done using the system package manager (e.g. ``apt`` on Debian/Ubuntu, ``dnf`` on Fedora/RHEL, etc)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:33
msgid "It is most often invoked before building a workspace, where it is used to install the dependencies of the packages within that workspace."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:35
msgid "It has the ability to work over a single package or over a directory of packages (e.g. workspace)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:39
msgid "While the name suggests it is for ROS, ``rosdep`` is semi-agnostic to ROS. You can utilize this powerful tool in non-ROS software projects by installing it as a standalone Python package. Successfully running ``rosdep`` relies on ``rosdep keys`` to be available, which can be downloaded from a public git repository with a few simple commands."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:44
msgid "A little about package.xml files"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:46
msgid "The ``package.xml`` is the file in your software where ``rosdep`` finds the set of dependencies. It is important that the list of dependencies in the ``package.xml`` is complete and correct, which allows all of the tooling to determine the packages dependencies. Missing or incorrect dependencies can lead to users not being able to use your package, to packages in a workspace being built out-of-order, and to packages not being able to be released."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:50
msgid "The dependencies in the ``package.xml`` file are generally referred to as \"rosdep keys\". These dependencies are manually populated in the ``package.xml`` file by the package's creators and should be an exhaustive list of any non-builtin libraries and packages it requires."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:53
msgid "These are represented in the following tags (see `REP-149 <https://ros.org/reps/rep-0149.html>`__ for the full specification):"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:56
msgid "``<depend>``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:58
msgid "These are dependencies that should be provided at both build time and run time for your package. For C++ packages, if in doubt, use this tag. Pure Python packages generally don't have a build phase, so should never use this and should use ``<exec_depend>`` instead."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:63
msgid "``<build_depend>``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:65
msgid "If you only use a particular dependency for building your package, and not at execution time, you can use the ``<build_depend>`` tag."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:67
msgid "With this type of dependency, an installed binary of your package does not require that particular package to be installed."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:69
msgid "However, that can create a problem if your package exports a header that includes a header from this dependency. In that case you also need a ``<build_export_depend>``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:73
msgid "``<build_export_depend>``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:75
msgid "If you export a header that includes a header from a dependency, it will be needed by other packages that ``<build_depend>`` on yours. This mainly applies to headers and CMake configuration files. Library packages referenced by libraries you export should normally specify ``<depend>``, because they are also needed at execution time."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:80
msgid "``<exec_depend>``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:82
msgid "This tag declares dependencies for shared libraries, executables, Python modules, launch scripts and other files required when running your package."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:85
msgid "``<test_depend>``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:87
msgid "This tag declares dependencies needed only by tests. Dependencies here should *not* be duplicated with keys specified by ``<build_depend>``, ``<exec_depend>``, or ``<depend>``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:91
msgid "How does rosdep work?"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:93
msgid "``rosdep`` will check for ``package.xml`` files in its path or for a specific package and find the rosdep keys stored within. These keys are then cross-referenced against a central index to find the appropriate ROS package or software library in various package managers. Finally, once the packages are found, they are installed and ready to go!"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:97
msgid "``rosdep`` works by retrieving the central index on to your local machine so that it doesn't have to access the network every time it runs (on Debian/Ubuntu the configuration for it is stored in ``/etc/ros/rosdep/sources.list.d/20-default.list``)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:99
msgid "The central index is known as ``rosdistro``, which `may be found online <https://github.com/ros/rosdistro>`_. We'll explore that more in the next section."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:103
msgid "How do I know what keys to put in my package.xml?"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:105
msgid "Great question, I'm glad you asked!"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:107
msgid "If the package you want to depend in your package is ROS-based, AND has been released into the ROS ecosystem [1]_, e.g. ``nav2_bt_navigator``, you may simply use the name of the package. You can find a list of all released ROS packages in https://github.com/ros/rosdistro at ``<distro>/distribution.yaml`` (e.g. ``humble/distribution.yaml``) for your given ROS distribution."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:108
msgid "If you want to depend on a non-ROS package, something often called \"system dependencies\", you will need to find the keys for a particular library. In general, there are two files of interest:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:110
msgid "`rosdep/base.yaml <https://github.com/ros/rosdistro/blob/master/rosdep/base.yaml>`_ contains the ``apt`` system dependencies"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:111
msgid "`rosdep/python.yaml <https://github.com/ros/rosdistro/blob/master/rosdep/python.yaml>`_ contains the Python dependencies"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:113
msgid "To find a key, search for your library in these files and find the name. This is the key to put in a ``package.xml`` file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:116
msgid "For example, imagine a package had a dependency on ``doxygen`` because it is a great piece of software that cares about quality documentation (hint hint). We would search ``rosdep/base.yaml`` for ``doxygen`` and come across:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:134
msgid "That means our rosdep key is ``doxygen``, which would resolve to those various names in different operating system's package managers for installation."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:137
msgid "What if my library isn't in rosdistro?"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:139
msgid "If your library isn't in ``rosdistro``, you can experience the greatness that is open-source software development: you can add it yourself! Pull requests for rosdistro are typically merged well within a week."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:142
msgid "`Detailed instructions may be found here <https://github.com/ros/rosdistro/blob/master/CONTRIBUTING.md#rosdep-rules-contributions>`_ for how to contribute new rosdep keys. If for some reason these may not be contributed openly, it is possible to fork rosdistro and maintain a alternate index for use."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:146
msgid "How do I use the rosdep tool?"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:149
msgid "rosdep installation"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:151
msgid "If you are using ``rosdep`` with ROS, it is conveniently packaged along with the ROS distribution. This is the recommended way to get ``rosdep``. You can install it with:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:161
msgid "On Debian and Ubuntu, there is another, similarly named package called ``python3-rosdep2``. If that package is installed, make sure to remove it before installing ``python3-rosdep``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:164
msgid "If you are using ``rosdep`` outside of ROS, the system package may not be available. In that case, you can install it directly from https://pypi.org:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:172
msgid "rosdep operation"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:174
msgid "Now that we have some understanding of ``rosdep``, ``package.xml``, and ``rosdistro``, we're ready to use the utility itself! Firstly, if this is the first time using ``rosdep``, it must be initialized via:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:182
msgid "This will initialize rosdep and ``update`` will update the locally cached rosdistro index. It is a good idea to ``update`` rosdep on occasion to get the latest index."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:185
msgid "Finally, we can run ``rosdep install`` to install dependencies. Typically, this is run over a workspace with many packages in a single call to install all dependencies. A call for that would appear as the following, if in the root of the workspace with directory ``src`` containing source code."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:193
msgid "Breaking that down:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:195
msgid "``--from-paths src`` specifies the path to check for ``package.xml`` files to resolve keys for"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:196
msgid "``-y`` means to default yes to all prompts from the package manager to install without prompts"
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:197
msgid "``--ignore-src`` means to ignore installing dependencies, even if a rosdep key exists, if the package itself is also in the workspace."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:199
msgid "There are additional arguments and options available. Use ``rosdep -h`` to see them, or look at the more complete documentation for rosdep at http://docs.ros.org/en/independent/api/rosdep/html/ ."
msgstr ""

#: ../../source/Tutorials/Intermediate/Rosdep.rst:202
msgid "\"released into the ROS ecosystem\" means the package is listed in one or more of the ``<distro>/distribution.yaml`` directories in the `rosdistro database <https://github.com/ros/rosdistro>`_."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:4
msgid "Running Tests in ROS 2 from the Command Line"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:7
msgid "Build and run your tests"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:9
msgid "To compile and run the tests, simply run the `test <https://colcon.readthedocs.io/en/released/reference/verb/test.html>`__ verb from ``colcon``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:15
msgid "(where ``package_selection_args`` are optional package selection arguments for ``colcon`` to limit which packages are built and run)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:17
msgid ":ref:`Sourcing the workspace <colcon-tutorial-source-the-environment>` before testing should not be necessary. ``colcon test`` makes sure that the tests run with the right environment, have access to their dependencies, etc."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:21
msgid "Examine Test Results"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:23
msgid "To see the results, simply run the `test-result <https://colcon.readthedocs.io/en/released/reference/verb/test-result.html>`__ verb from ``colcon``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:29
msgid "To see the exact test cases which fail, use the ``--verbose`` flag:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:36
msgid "Debugging tests with GDB"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:38
msgid "If a C++ test is failing, gdb can be used directly on the test executable in the build directory. Ensure to build the code in debug mode. Since the previous build type may be cached by CMake, clean the cache and rebuild."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/CLI.rst:46
msgid "Next, run the test directly through gdb. For example:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:4
msgid "Writing Basic Tests with C++ with GTest"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:6
msgid "Starting point: we'll assume you have a :ref:`basic ament_cmake package<CreatePkg>` set up already and you want to add some tests to it."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:8
msgid "In this tutorial, we'll be using `gtest <https://google.github.io/googletest/primer.html>`__."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:11 ../../source/Tutorials/Intermediate/Testing/Python.rst:12
msgid "Package Setup"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:14
msgid "Source Code"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:15
msgid "We'll start off with our code in a file called ``test/tutorial_test.cpp``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:34
msgid "package.xml"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:35
msgid "Add the following line to ``package.xml``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:42
msgid "CMakeLists.txt"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:59
msgid "The testing code is wrapped in the ``if/endif`` block to avoid building tests where possible. ``ament_add_gtest`` functions much like ``add_executable`` so you'll need to call ``target_include_directories``, ``ament_target_dependencies`` and ``target_link_libraries`` as you normally would."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:63 ../../source/Tutorials/Intermediate/Testing/Python.rst:60
msgid "Running Tests"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Cpp.rst:65 ../../source/Tutorials/Intermediate/Testing/Python.rst:62
msgid "See the :doc:`tutorial on how to run tests from the command line <CLI>` for more information on running the tests and inspecting the test results."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Python.rst:4
msgid "Writing Basic Tests with Python"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Python.rst:6
msgid "Starting point: we'll assume you have a :ref:`basic ament_python package<CreatePkg>` set up already and you want to add some tests to it."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Python.rst:8
msgid "If you are using ament_cmake_python, refer to the the :doc:`ament_cmake_python docs<../../../How-To-Guides/Ament-CMake-Python-Documentation>` for how to make tests dicoverable. The test contents and invocation with ``colcon`` remain the same."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Python.rst:15
msgid "setup.py"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Python.rst:17
msgid "Your ``setup.py`` must a test dependency on ``pytest`` within the call to ``setup(...)``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Python.rst:24
msgid "Test Files and Folders"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Python.rst:26
msgid "Your test code needs to go in a folder named ``tests`` in the root of your package."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Python.rst:28
msgid "Any file that contains tests that you want to run must have the pattern ``test_FOO.py`` where ``FOO`` can be replaced with anything."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Python.rst:31
msgid "Example package layout:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Python.rst:49
msgid "Test Contents"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Python.rst:51
msgid "You can now write tests to your heart's content. There are `plenty of resources on pytest <https://docs.pytest.org>`__, but in short, you can write functions with the ``test_`` prefix and include whatever assert statements you'd like."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Python.rst:65
msgid "Special Commands"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Python.rst:67
msgid "Beyond the :doc:`standard colcon testing commands <CLI>` you can also specify arguments to the ``pytest`` framework from the command line with the ``--pytest-args`` flag. For example, you can specify the name of the function to run with"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Python.rst:75
msgid "To see the pytest output while running the tests, use these flags:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:4
msgid "Testing"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:7
msgid "Why automatic tests?"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:9
msgid "Here are some of the many good reasons why should we have automated tests:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:11
msgid "You can make incremental updates to your code more quickly. ROS has hundreds of packages with many interdependencies, so it can be hard to anticipate the problems a small change might cause. If your change passes the unit tests, you can be more confident that you haven't introduced problems — or at least the problems aren't your fault."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:12
msgid "You can refactor your code with greater confidence. Passing the unit tests verifies that you haven't introduced any bugs while refactoring. This gives you this wonderful freedom from change fear!"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:13
msgid "It leads to better designed code. Unit tests force you to write your code so that it can be more easily tested. This often means keeping your underlying functions and framework separate, which is one of our design goals with ROS code."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:14
msgid "They prevent recurring bugs (bug regressions). It's a good practice to write a unit test for every bug you fix. In fact, write the unit test before you fix the bug. This will help you to precisely, or even deterministically, reproduce the bug, and much more precisely understand what the problem is. As a result, you will also create a better patch, which you can then test with your regression test to verify that the bug is fixed. That way the bug won't accidentally get reintroduced if the code gets modified later on. It also means that it will be easier to convince the reviewer of the patch that the problem is solved, and the contribution is of high quality."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:15
msgid "Other people can work on your code more easily (an automatic form of documentation). It can be hard to figure out whether or not you've broken someone else's code when you make a change. The unit tests are a tool for other developers to validate their changes. Automatic tests document your coding decisions, and communicate to other developers automatically about their violation. Thus tests become documentation for your code — a documentation that does not need to be read for the most time, and when it does need to be inspected the test system will precisely indicate what to read (which tests fail). By writing automatic tests you make other contributors faster. This improves the entire ROS project."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:16
msgid "It is much easier to become a contributor to ROS if we have automated unit tests. It is very difficult for new external developers to contribute to your components. When they make changes to code, they are often doing it in the blind, driven by a lot of guesswork. By providing a harness of automated tests, you help them in the task. They get immediate feedback for their changes. It becomes easier to contribute to a project, and new contributors to join more easily. Also their first contributions are of higher quality, which decreases the workload on maintainers. A win-win!"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:17
msgid "Automatic tests simplify maintainership. Especially for mature packages, which change more slowly, and mostly need to be updated to new dependencies, an automatic test suite helps to very quickly establish whether the package still works. This makes it much easier to decide whether the package is still supported or not."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:18
msgid "Automatic tests amplify the value of Continuous Integration. Regression tests, along with normal scenario-based requirements tests, contribute to overall body of automated tests for your component. Your component is better tested against evolution of other APIs that it depends on (CI servers will tell you better and more precisely what problems develop in your code)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:20
msgid "Perhaps the most important benefit of writing tests is that tests make you a good citizen. Tests influence quality in the long term. It is a well accepted practice in many open-source projects. By writing regressions tests, you are contributing to long term quality of the ROS ecosystem."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:26
msgid "Is this all coming for free?"
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:28
msgid "Of course, there is never free lunch. To get the benefits of testing, some investment is necessary."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:31
msgid "You need to develop a test, which sometimes may be difficult or costly. Sometimes it might also be nontrivial, as the test should be automatic. Things get particularly hairy if your tests should involve special hardware (they should not: try to use simulation, mock the hardware, or narrow down the test to a smaller software problem) or require external environment, for instance human operators."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:32
msgid "Regression tests and other automatic tests need to be maintained. When the design of the component changes, a lot of tests become invalidated (for instance they no longer compile, or throw runtime exceptions related to the API design). These tests fail not only because the redesign re-introduced bugs but also because they need to be updated to the new design. Occasionally, with bigger redesigns, old regression tests should be dropped."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:33
msgid "Large bodies of tests can take a long time to run, which can increase Continuous Integration server costs."
msgstr ""

#: ../../source/Tutorials/Intermediate/Testing/Testing-Main.rst:36
msgid "Available Tutorials:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:8
msgid "Adding a frame (C++)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:10 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:10
msgid "**Goal:** Learn how to to add an extra frame to tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:23
msgid "In previous tutorials, we recreated the turtle demo by writing a :doc:`tf2 broadcaster <./Writing-A-Tf2-Broadcaster-Cpp>` and a :doc:`tf2 listener <Writing-A-Tf2-Listener-Cpp>`. This tutorial will teach you how to add extra fixed and dynamic frames to the transformation tree. In fact, adding a frame in tf2 is very similar to creating the tf2 broadcaster, but this example will show you some additional features of tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:27 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:27
msgid "For many tasks related to transformations, it is easier to think inside a local frame. For example, it is easiest to reason about laser scan measurements in a frame at the center of the laser scanner. tf2 allows you to define a local frame for each sensor, link, or joint in your system. When transforming from one frame to another, tf2 will take care of all the hidden intermediate frame transformations that are introduced."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:33 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:33
msgid "tf2 tree"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:35 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:35
msgid "tf2 builds up a tree structure of frames and, thus, does not allow a closed loop in the frame structure. This means that a frame only has one single parent, but it can have multiple children. Currently, our tf2 tree contains three frames: ``world``, ``turtle1`` and ``turtle2``. The two turtle frames are children of the ``world`` frame. If we want to add a new frame to tf2, one of the three existing frames needs to be the parent frame, and the new one will become its child frame."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:47 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:47
msgid "1 Write the fixed frame broadcaster"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:49 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:49
msgid "In our turtle example, we'll add a new frame ``carrot1``, which will be the child of the ``turtle1``. This frame will serve as the goal for the second turtle."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:52
msgid "Let's first create the source files. Go to the ``learning_tf2_cpp`` package we created in the previous tutorials. Download the fixed frame broadcaster code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:83
msgid "Now open the file called ``fixed_frame_tf2_broadcaster.cpp``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:139 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:129
msgid "The code is very similar to the tf2 broadcaster tutorial example and the only difference is that the transform here does not change over time."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:144 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:134
msgid "Let's take a look at the key lines in this piece of code. Here we create a new transform, from the parent ``turtle1`` to the new child ``carrot1``. The ``carrot1`` frame is 2 meters offset in y axis in terms of the ``turtle1`` frame."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:162 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:451 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:222 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:307 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:249
msgid "Navigate one level back to the ``learning_tf2_cpp`` directory, where the ``CMakeLists.txt`` and ``package.xml`` files are located."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:164
msgid "Now open the ``CMakeLists.txt`` add the executable and name it ``fixed_frame_tf2_broadcaster``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:185 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:162
msgid "1.3 Write the launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:187
msgid "Now let's create a launch file for this example. With your text editor, create a new file called ``turtle_tf2_fixed_frame_demo.launch.py``, and add the following lines:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:220 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:197
msgid "This launch file imports the required packages and then creates a ``demo_nodes`` variable that will store nodes that we created in the previous tutorial's launch file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:222 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:199
msgid "The last part of the code will add our fixed ``carrot1`` frame to the turtlesim world using our ``fixed_frame_tf2_broadcaster`` node."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:233 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:211 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:272
msgid "1.4 Build"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:235 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:511 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:213 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:467 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:274 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:594 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:336 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:357 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:330 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:283
msgid "Run ``rosdep`` in the root of your workspace to check for missing dependencies."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:247 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:251 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:523 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:527 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:225 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:229 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:479 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:483 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:286 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:290 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:606 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:610 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:348 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:352 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:369 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:373 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:342 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:346 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:295 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:299 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:299 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:303 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:318 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:322
msgid "rosdep only runs on Linux, so you will need to install ``geometry_msgs`` and ``turtlesim`` dependencies yourself"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:253 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:529 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:354 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:348
msgid "From the root of your workspace, build your updated package:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:275 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:551 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:253 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:507 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:634 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:376 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:397 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:370 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:323 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:327 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:346
msgid "Open a new terminal, navigate to the root of your workspace, and source the setup files:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:302 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:280 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:534
msgid "1.5 Run"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:304
msgid "Now you can start the turtle broadcaster demo:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:310 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:288
msgid "You should notice that the new ``carrot1`` frame appeared in the transformation tree."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:314 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:292
msgid "If you drive the first turtle around, you should notice that the behavior didn't change from the previous tutorial, even though we added a new frame. That's because adding an extra frame does not affect the other frames and our listener is still using the previously defined frames."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:317 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:295
msgid "Therefore if we want our second turtle to follow the carrot instead of the first turtle, we need to change value of the ``target_frame``. This can be done two ways. One way is to pass the ``target_frame`` argument to the launch file directly from the console:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:325 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:303
msgid "The second way is to update the launch file. To do so, open the ``turtle_tf2_fixed_frame_demo.launch.py`` file, and add the ``'target_frame': 'carrot1'`` parameter via ``launch_arguments`` argument."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:336
msgid "Now rebuild the package, restart the ``turtle_tf2_fixed_frame_demo.launch.py``, and you'll see the second turtle following the carrot instead of the first turtle!"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:341 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:319
msgid "2 Write the dynamic frame broadcaster"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:343 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:321
msgid "The extra frame we published in this tutorial is a fixed frame that doesn't change over time in relation to the parent frame. However, if you want to publish a moving frame you can code the broadcaster to change the frame over time. Let's change our ``carrot1`` frame so that it changes relative to ``turtle1`` frame over time. Now download the dynamic frame broadcaster code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:376
msgid "Now open the file called ``dynamic_frame_tf2_broadcaster.cpp``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:439 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:407
msgid "Instead of a fixed definition of our x and y offsets, we are using the ``sin()`` and ``cos()`` functions on the current time so that the offset of ``carrot1`` is constantly changing."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:449
msgid "2.2 CMakeLists.txt"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:453
msgid "Now open the ``CMakeLists.txt`` add the executable and name it ``dynamic_frame_tf2_broadcaster``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:474 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:430
msgid "2.3 Write the launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:476
msgid "To test this code, create a new launch file ``turtle_tf2_dynamic_frame_demo.launch.py`` and paste the following code:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:509 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:465 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:592
msgid "2.4 Build"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:578
msgid "2.5 Run"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:580
msgid "Now you can start the dynamic frame demo:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:586 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:542
msgid "You should see that the second turtle is following the carrot's position that is constantly changing."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:594 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:549
msgid "In this tutorial, you learned about the tf2 transformation tree, its structure, and its features. You also learned that it is easiest to think inside a local frame, and learned to add extra fixed and dynamic frames for that local frame."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:8
msgid "Adding a frame (Python)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:23
msgid "In previous tutorials, we recreated the turtle demo by writing a :doc:`tf2 broadcaster <./Writing-A-Tf2-Broadcaster-Py>` and a :doc:`tf2 listener <./Writing-A-Tf2-Listener-Py>`. This tutorial will teach you how to add extra fixed and dynamic frames to the transformation tree. In fact, adding a frame in tf2 is very similar to creating the tf2 broadcaster, but this example will show you some additional features of tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:52
msgid "Let's first create the source files. Go to the ``learning_tf2_py`` package we created in the previous tutorials. Download the fixed frame broadcaster code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:83
msgid "Now open the file called ``fixed_frame_tf2_broadcaster.py``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:150 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:246 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:217
msgid "1.2 Add an entry point"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:152 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:420 ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:263 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:248 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:219 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:295
msgid "To allow the ``ros2 run`` command to run your node, you must add the entry point to ``setup.py`` (located in the ``src/learning_tf2_py`` directory)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:155 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:423 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:251
msgid "Finally, add the following line between the ``'console_scripts':`` brackets:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:164
msgid "Now let's create a launch file for this example. With your text editor, create a new file called ``launch/turtle_tf2_fixed_frame_demo.launch.py``, and add the following lines:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:231 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:485 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:375 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:301
msgid "Still in the root of your workspace, build your package:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:282 ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:536
msgid "Now you are ready to run the launch file:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:314
msgid "Now just rebuild the package, restart the ``turtle_tf2_fixed_frame_demo.launch.py``, and you'll see the second turtle following the carrot instead of the first turtle!"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:354
msgid "Now open the file called ``dynamic_frame_tf2_broadcaster.py``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:432
msgid "To test this code, create a new launch file ``launch/turtle_tf2_dynamic_frame_demo.launch.py`` and paste the following code:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:8
msgid "Debugging"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:10
msgid "**Goal:** Learn how to use a systematic approach for debugging tf2 related problems."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:23
msgid "This tutorial walks you through the steps to debug a typical tf2 problem. It will also use many of the tf2 debugging tools, such as ``tf2_echo``, ``tf2_monitor``, and ``view_frames``. This tutorial assumes you have completed the :doc:`learning tf2 <./Tf2-Main>` tutorials."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:28
msgid "Debugging example"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:31
msgid "1 Setting and starting the example"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:33
msgid "For this tutorial we will set up a demo application that has a number of problems. The goal of this tutorial is to apply a systematic approach to find and tackle these problems. First, let's create the source file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:37
msgid "Go to the ``learning_tf2_cpp`` package we created in :doc:`tf2 tutorials <./Tf2-Main>`. Inside the ``src`` directory make a copy of the source file ``turtle_tf2_listener.cpp`` and rename it to ``turtle_tf2_listener_debug.cpp``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:40
msgid "Open the file using your preferred text editor, and change line 67 from"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:46 ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:63
msgid "to"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:52
msgid "and change ``lookupTransform()`` call in lines 75-79 from"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:74
msgid "And save changes to the file. In order to run this demo, we need to create a launch file ``start_tf2_debug_demo.launch.py`` in the ``launch`` subdirectory of package ``learning_tf2_cpp``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:123
msgid "Don't forget to add the ``turtle_tf2_listener_debug`` executable to the ``CMakeLists.txt`` and build the package."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:125
msgid "Now let's run it to see what happens:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:131
msgid "You will now see that the turtlesim came up. At the same time, if you run the ``turtle_teleop_key`` in another terminal window, you can use the arrow keys to drive the ``turtle1`` around."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:138
msgid "You will also notice that there is a second turtle in the lower, left corner. If the demo would be working correctly, this second turtle should be following the turtle you can command with the arrow keys. However, it is not the case because we have to solve some problems first. You should notice the following message:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:150
msgid "2 Finding the tf2 request"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:152
msgid "Firstly, we need to find out what exactly we are asking tf2 to do. Therefore, we go into the part of the code that is using tf2. Open the ``src/turtle_tf2_listener_debug.cpp`` file, and take a look at line 67:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:160
msgid "and lines 75-79:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:171
msgid "Here we do the actual request to tf2. The three arguments tell us directly what we are asking tf2: transform from frame ``turtle3`` to frame ``turtle1`` at time ``now``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:174
msgid "Now, let's take a look at why this request to tf2 is failing."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:177
msgid "3 Checking the frames"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:179
msgid "Firstly, to find out if tf2 knows about our transform between ``turtle3`` and ``turtle1``, we will use ``tf2_echo`` tool."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:185
msgid "The output tells us that frame ``turtle3`` does not exist:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:193
msgid "Then what frames do exist? If you like to get a graphical representation of this, use ``view_frames`` tool."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:200
msgid "Open the generated ``frames.pdf`` file to see the following output:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:204
msgid "So obviously the problem is that we are requesting transform from frame ``turtle3``, which does not exist. To fix this bug, just replace ``turtle3`` with ``turtle2`` in line 67."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:207
msgid "And now stop the running demo, build it, and run it again:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:213
msgid "And right away we run into the next problem:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:223
msgid "4 Checking the timestamp"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:225
msgid "Now that we solved the frame name problem, it is time to look at the timestamps. Remember, we are trying to get the transform between ``turtle2`` and ``turtle1`` at the current time (i.e., ``now``). To get statistics on the timing, call ``tf2_monitor`` with corresponding frames."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:233
msgid "The result should look something like this:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:247
msgid "The key part here is the delay for the chain from ``turtle2`` to ``turtle1``. The output shows there is an average delay of about 3 milliseconds. This means that tf2 can only transform between the turtles after 3 milliseconds are passed. So, if we would be asking tf2 for the transformation between the turtles 3 milliseconds ago instead of ``now``, tf2 would be able to give us an answer sometimes. Let's test this quickly by changing lines 75-79 to:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:262
msgid "In the new code we are asking for the transform between the turtles 100 milliseconds ago. It is usual to use a longer periods, just to make sure that the transform will arrive. Stop the demo, build and run:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:270
msgid "And you should finally see the turtle move!"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:274
msgid "That last fix we made is not really what you want to do, it was just to make sure that was our problem. The real fix would look like this:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:286
msgid "Or like this:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:297
msgid "You can learn more about timeouts in the :doc:`Using time <./Learning-About-Tf2-And-Time-Cpp>` tutorial, and use them as below:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst:312
msgid "In this tutorial you learned how to use a systematic approach for debugging tf2 related problems. You also learned how to use tf2 debugging tools, such as ``tf2_echo``, ``tf2_monitor``, and ``view_frames`` to help you debug those tf2 problems."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:8
msgid "Introducing ``tf2``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:10
msgid "**Goal:** Run a turtlesim demo and see some of the power of tf2 in a multi-robot example using turtlesim."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:23
msgid "Let's start by installing the demo package and its dependencies."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:41
msgid "Running the demo"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:43
msgid "Now that we've installed the ``turtle_tf2_py`` tutorial package let's run the demo. First, open a new terminal and :doc:`source your ROS 2 installation <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>` so that ``ros2`` commands will work. Then run the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:51
msgid "You will see the turtlesim start with two turtles."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:55 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:411 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:432
msgid "In the second terminal window type the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:61
msgid "Once the turtlesim is started you can drive the central turtle around in the turtlesim using the keyboard arrow keys, select the second terminal window so that your keystrokes will be captured to drive the turtle."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:66
msgid "You can see that one turtle continuously moves to follow the turtle you are driving around."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:69
msgid "What is happening?"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:71
msgid "This demo is using the tf2 library to create three coordinate frames: a ``world`` frame, a ``turtle1`` frame, and a ``turtle2`` frame. This tutorial uses a tf2 broadcaster to publish the turtle coordinate frames and a tf2 listener to compute the difference in the turtle frames and move one turtle to follow the other."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:75
msgid "tf2 tools"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:77
msgid "Now let's look at how tf2 is being used to create this demo. We can use ``tf2_tools`` to look at what tf2 is doing behind the scenes."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:81
msgid "1 Using view_frames"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:83
msgid "``view_frames`` creates a diagram of the frames being broadcast by tf2 over ROS."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:89
msgid "You will see:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:96
msgid "Here a tf2 listener is listening to the frames that are being broadcast over ROS and drawing a tree of how the frames are connected. To view the tree, open the resulting ``frames.pdf`` with your favorite PDF viewer."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:101
msgid "Here we can see three frames that are broadcasted by tf2: ``world``, ``turtle1``, and ``turtle2``. The ``world`` here is the parent of the ``turtle1`` and ``turtle2`` frames. ``view_frames`` also report some diagnostic information about when the oldest and most recent frame transforms were received and how fast the tf2 frame is published to tf2 for debugging purposes."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:107
msgid "2 Using tf2_echo"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:109
msgid "``tf2_echo`` reports the transform between any two frames broadcasted over ROS."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:111
msgid "Usage:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:117
msgid "Let's look at the transform of the ``turtle2`` frame with respect to ``turtle1`` frame which is equivalent to:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:123
msgid "You will see the transform displayed as the ``tf2_echo`` listener receives the frames broadcasted over ROS 2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:134
msgid "As you drive your turtle around you will see the transform change as the two turtles move relative to each other."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:137
msgid "rviz and tf2"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:139
msgid "``rviz`` is a visualization tool that is useful for examining tf2 frames. Let's look at our turtle frames using rviz. Let's start rviz with the ``turtle_rviz.rviz`` configuration file using the ``-d`` option:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst:149
msgid "In the side bar you will see the frames broadcasted by tf2. As you drive the turtle around you will see the frames move in rviz."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:8
msgid "Using time (C++)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:10
msgid "**Goal:** Learn how to get a transform at a specific time and wait for a transform to be available on the tf2 tree using ``lookupTransform()`` function."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:23
msgid "In previous tutorials, we recreated the turtle demo by writing a :doc:`tf2 broadcaster <Writing-A-Tf2-Broadcaster-Cpp>` and a :doc:`tf2 listener <Writing-A-Tf2-Listener-Cpp>`. We also learned how to :doc:`add a new frame to the transformation tree <./Adding-A-Frame-Cpp>` and learned how tf2 keeps track of a tree of coordinate frames. This tree changes over time, and tf2 stores a time snapshot for every transform (for up to 10 seconds by default). Until now we used the ``lookupTransform()`` function to get access to the latest available transforms in that tf2 tree, without knowing at what time that transform was recorded. This tutorial will teach you how to get a transform at a specific time."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:33
msgid "1 tf2 and time"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:35
msgid "So let's go back to where we ended in the :doc:`adding a frame tutorial <./Adding-A-Frame-Cpp>`. Go to ``learning_tf2_cpp`` package. Open ``turtle_tf2_listener.cpp`` and take a look at the ``lookupTransform()`` call:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:46
msgid "You can see that we specified a time equal to 0 by calling ``tf2::TimePointZero``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:50
msgid "The ``tf2`` package has it's own time type ``tf2::TimePoint``, which is different from ``rclcpp::Time``. Many APIs in the package ``tf2_ros`` automatically convert between ``rclcpp::Time`` and ``tf2::TimePoint``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:53
msgid "``rclcpp::Time(0, 0, this->get_clock()->get_clock_type())`` could have been used here, but it would have been converted to ``tf2::TimePointZero`` anyways."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:55
msgid "For tf2, time 0 means \"the latest available\" transform in the buffer. Now, change this line to get the transform at the current time, ``this->get_clock()->now()``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:66
msgid "Now try to run the launch file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:72
msgid "You will notice that it fails and outputs something similar to this:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:80
msgid "It tells you that the frame does not exist or that the data is in the future."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:82
msgid "To understand why is this happening we need to understand how buffers work. Firstly, each listener has a buffer where it stores all the coordinate transforms coming from the different tf2 broadcasters. Secondly, when a broadcaster sends out a transform, it takes some time before that transform gets into the buffer (usually a couple of milliseconds). As a result, when you request a frame transform at time \"now\", you should wait a few milliseconds for that information to arrive."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:88
msgid "2 Wait for transforms"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:90
msgid "tf2 provides a nice tool that will wait until a transform becomes available. You use this by adding a timeout parameter to ``lookupTransform()``. To fix this, edit your code as shown below (add the last timeout parameter):"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:103
msgid "The ``lookupTransform()`` can take four arguments, where the last one is an optional timeout. It will block for up to that duration waiting for it to timeout."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:107
msgid "3 Checking the results"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:109 ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:87
msgid "You can now run the launch file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:115
msgid "You should notice that ``lookupTransform()`` will actually block until the transform between the two turtles becomes available (this will usually take a few milliseconds). Once the timeout has been reached (fifty milliseconds in this case), an exception will be raised only if the transform is still not available."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:121
msgid "In this tutorial, you learned how to acquire a transform at a specific timestamp and how to wait for a transform to be available on the tf2 tree when using the ``lookupTransform()`` function."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:8
msgid "Using time (Python)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:10
msgid "**Goal:** Learn to use the ``timeout`` in ``lookup_transform`` function to wait for a transform to be available on the tf2 tree."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:23
msgid "In previous tutorials, we recreated the turtle demo by writing a :doc:`tf2 broadcaster <./Writing-A-Tf2-Broadcaster-Py>` and a :doc:`tf2 listener <./Writing-A-Tf2-Listener-Py>`. We also learned how to :doc:`add a new frame to the transformation tree <./Adding-A-Frame-Py>`. Now we will learn more about the ``timeout`` argument which makes the ``lookup_transform`` wait for the specified transform for up to the specified duration before throwing an exception. This tool can be useful to listen for transforms that are published at varying rates or those incoming source with unreliable networking and non negligible latency. This tutorial will teach you how use the timeout in ``lookup_transform`` function to wait for a transform to be available on the tf2 tree."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:33
msgid "1 Update the listener node"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:35
msgid "Edit ``turtle_tf2_listener.py`` and remove the ``timeout=Duration(seconds=1.0)`` parameter that is passed to the ``lookup_transform()`` call on line 76. It should look like shown below:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:45
msgid "Moreover, import additional exceptions that we will handle in the beginning of the file:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:51
msgid "Edit the exception handling on line 81 by adding newly imported exceptions and ``raise`` statement to see the exception:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:60
msgid "If you now try to run the launch file, you will notice that it is failing:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:67
msgid "2 Fix the listener node"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:69
msgid "You now should notice that ``lookup_transform()`` is failing. It tells you that the frame does not exist or that the data is in the future. To fix this, edit your code on line 76 as shown below (return the ``timeout`` parameter):"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:80
msgid "The ``lookup_transform`` can take four arguments, where the last one is an optional timeout. It will block for up to that duration waiting for it to timeout."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:85
msgid "Once this change is made, remove the ``raise`` line from the ``except()`` block that we added above or the code will continue to fail."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:93
msgid "You should notice that ``lookup_transform()`` will actually block until the transform between the two turtles becomes available (this will usually take a few milli-seconds). Once the timeout has been reached (one second in this case), an exception will be raised only if the transform is still not available."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Py.rst:99
msgid "In this tutorial you learned more about the ``lookup_transform`` function and its timeout features. You also learned how to catch and handle additional exceptions that can be thrown by tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:8
msgid "Quaternion fundamentals"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:10
msgid "**Goal:** Learn the basics of quaternion usage in ROS 2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:23
msgid "A quaternion is a 4-tuple representation of orientation, which is more concise than a rotation matrix. Quaternions are very efficient for analyzing situations where rotations in three dimensions are involved. Quaternions are used widely in robotics, quantum mechanics, computer vision, and 3D animation."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:27
msgid "You can learn more about the underlying mathematical concept on `Wikipedia <https://en.wikipedia.org/wiki/Quaternion>`_. You can also take a look at an explorable video series `Visualizing quaternions <https://eater.net/quaternions>`_ made by `3blue1brown <https://www.youtube.com/3blue1brown>`_."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:30
msgid "In this tutorial, you will learn how quaternions and conversion methods work in ROS 2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:35
msgid "However, this is not a hard requirement and you can stick to any other geometric transfromation library that suit you best. You can take a look at libraries like `transforms3d <https://github.com/matthew-brett/transforms3d>`_, `scipy.spatial.transform <https://github.com/scipy/scipy/tree/master/scipy/spatial/transform>`_, `pytransform3d <https://github.com/rock-learning/pytransform3d>`_, `numpy-quaternion <https://github.com/moble/quaternion>`_ or `blender.mathutils <https://docs.blender.org/api/master/mathutils.html>`_."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:39
msgid "Components of a quaternion"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:41
msgid "ROS 2 uses quaternions to track and apply rotations. A quaternion has 4 components ``(x, y, z, w)``. In ROS 2, ``w`` is last, but in some libraries like Eigen, ``w`` can be placed at the first position. The commonly-used unit quaternion that yields no rotation about the x/y/z axes is ``(0, 0, 0, 1)``, and can be created in a following way:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:58
msgid "The magnitude of a quaternion should always be one. If numerical errors cause a quaternion magnitude other than one, ROS 2 will print warnings. To avoid these warnings, normalize the quaternion:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:67
msgid "Quaternion types in ROS 2"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:69
msgid "ROS 2 uses two quaternion datatypes: ``tf2::Quaternion`` and its equivalent ``geometry_msgs::msg::Quaternion``. To convert between them in C++, use the methods of ``tf2_geometry_msgs``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:105
msgid "Quaternion operations"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:108
msgid "1 Think in RPY then convert to quaternion"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:110
msgid "It's easy for us to think of rotations about axes, but hard to think in terms of quaternions. A suggestion is to calculate target rotations in terms of roll (about an X-axis), pitch (about the Y-axis), and yaw (about the Z-axis), and then convert to a quaternion."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:121
msgid "2 Applying a quaternion rotation"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:123
msgid "To apply the rotation of one quaternion to a pose, simply multiply the previous quaternion of the pose by the quaternion representing the desired rotation. The order of this multiplication matters."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:152
msgid "3 Inverting a quaternion"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:154
msgid "An easy way to invert a quaternion is to negate the w-component:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:161
msgid "4 Relative rotations"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:163
msgid "Say you have two quaternions from the same frame, ``q_1`` and ``q_2``. You want to find the relative rotation, ``q_r``, that converts ``q_1`` to ``q_2`` in a following manner:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:170
msgid "You can solve for ``q_r`` similarly to solving a matrix equation. Invert ``q_1`` and right-multiply both sides. Again, the order of multiplication is important:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:177
msgid "Here's an example to get the relative rotation from the previous robot pose to the current robot pose in python:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:232
msgid "In this tutorial, you learned about the fundamental concepts of a quaternion and its related mathematical operations, like inversion and rotation. You also learned about its usage examples in ROS 2 and conversion methods between two separate Quaternion classes."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:8
msgid "``tf2``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:10
msgid "Many of the tf2 tutorials are available for both C++ and Python. The tutorials are streamlined to complete either the C++ track or the Python track. If you want to learn both C++ and Python, you should go through the tutorials once for C++ and once for Python."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:39
msgid "Workspace setup"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:41
msgid "If you have not yet created a workspace in which to complete the tutorials, :doc:`follow this tutorial <../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:44
msgid "Learning tf2"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:46
msgid ":doc:`Introduction to tf2 <./Introduction-To-Tf2>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:48
msgid "This tutorial will give you a good idea of what tf2 can do for you. It shows off some of the tf2 power in a multi-robot example using turtlesim. This also introduces using ``tf2_echo``, ``view_frames``, and ``rviz``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:52
msgid "Writing a static broadcaster :doc:`(Python) <./Writing-A-Tf2-Static-Broadcaster-Py>` :doc:`(C++) <./Writing-A-Tf2-Static-Broadcaster-Cpp>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:54
msgid "This tutorial teaches you how to broadcast static coordinate frames to tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:56
msgid "Writing a broadcaster :doc:`(Python) <./Writing-A-Tf2-Broadcaster-Py>` :doc:`(C++) <Writing-A-Tf2-Broadcaster-Cpp>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:58
msgid "This tutorial teaches you how to broadcast the state of a robot to tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:60
msgid "Writing a listener :doc:`(Python) <./Writing-A-Tf2-Listener-Py>` :doc:`(C++) <./Writing-A-Tf2-Listener-Cpp>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:62
msgid "This tutorial teaches you how to use tf2 to get access to frame transformations."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:64
msgid "Adding a frame :doc:`(Python) <./Adding-A-Frame-Py>` :doc:`(C++) <Adding-A-Frame-Cpp>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:66
msgid "This tutorial teaches you how to add an extra fixed frame to tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:68
msgid "Using time :doc:`(Python) <Learning-About-Tf2-And-Time-Py>` :doc:`(C++) <Learning-About-Tf2-And-Time-Cpp>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:70
msgid "This tutorial teaches you to use the timeout in ``lookup_transform`` function to wait for a transform to be available on the tf2 tree."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:73
msgid "Traveling in time :doc:`(Python) <./Time-Travel-With-Tf2-Py>` :doc:`(C++) <./Time-Travel-With-Tf2-Cpp>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:75
msgid "This tutorial teaches you about advanced time travel features of tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:78
msgid "Debugging tf2"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:80
msgid ":doc:`Quaternion fundamentals <./Quaternion-Fundamentals>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:82
msgid "This tutorial teaches you basics of quaternion usage in ROS 2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:84
msgid ":doc:`Debugging tf2 problems <./Debugging-Tf2-Problems>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:86
msgid "This tutorial teaches you about a systematic approach for debugging tf2 related problems."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:89
msgid "Using sensor messages with tf2"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:91
msgid ":doc:`Using stamped datatypes with tf2_ros::MessageFilter <./Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Tf2-Main.rst:93
msgid "This tutorial teaches you how to use ``tf2_ros::MessageFilter`` to process stamped datatypes."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:8
msgid "Traveling in time (C++)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:10 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:10
msgid "**Goal:** Learn about advanced time travel features of tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:23
msgid "In the previous tutorial, we discussed the :doc:`basics of tf2 and time <./Learning-About-Tf2-And-Time-Cpp>`. This tutorial will take us one step further and expose a powerful tf2 trick: the time travel. In short, one of the key features of tf2 library is that it is able to transform data in time as well as in space."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:27 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:27
msgid "This tf2 time travel feature can be useful for various tasks, like monitoring the pose of the robot for a long period of time or building a follower robot that will follow the \"steps\" of the leader. We will use that time travel feature to look up transforms back in time and program ``turtle2`` to follow 5 seconds behind ``carrot1``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:31 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:31
msgid "Time travel"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:33
msgid "First, let's go back to where we ended in the previous tutorial :doc:`Using time <./Learning-About-Tf2-And-Time-Cpp>`. Go to your ``learning_tf2_cpp`` package."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:36
msgid "Now, instead of making the second turtle go to where the carrot is now, we will make the second turtle go to where the first carrot was 5 seconds ago. Edit the ``lookupTransform()`` call in ``turtle_tf2_listener.cpp`` file to"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:48 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:48
msgid "Now if you run this, during the first 5 seconds, the second turtle would not know where to go because we do not yet have a 5-second history of poses of the carrot. But what happens after these 5 seconds? Let's just give it a try:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:57 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:57
msgid "You should now notice that your turtle is driving around uncontrollably like in this screenshot. Let's try to understand reason behind that behavior."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:59 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:59
msgid "In our code we asked tf2 the following question: \"What was the pose of ``carrot1`` 5 seconds ago, relative to ``turtle2`` 5 seconds ago?\". This means we are controlling the second turtle based on where it was 5 seconds ago as well as where the first carrot was 5 seconds ago."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:61 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:61
msgid "However, what we really want to ask is: \"What was the pose of ``carrot1`` 5 seconds ago, relative to the current position of the ``turtle2``?\"."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:64
msgid "Advanced API for lookupTransform()"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:66
msgid "To ask the tf2 that particular question, we will use an advanced API that gives us the power to say explicitly when to acquire the specified transformations. This is done by calling the ``lookupTransform()`` method with additional parameters. Your code now would look like this:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:82
msgid "The advanced API for ``lookupTransform()`` takes six arguments:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:84 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:83 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:231 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:200
msgid "Target frame"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:86 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:85
msgid "The time to transform to"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:88 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:87 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:233 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:202
msgid "Source frame"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:90 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:89
msgid "The time at which source frame will be evaluated"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:92 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:91
msgid "Frame that does not change over time, in this case the ``world`` frame"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:94 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:93
msgid "Time to wait for the target frame to become available"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:96 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:95
msgid "To sum up, tf2 does the following in the background. In the past, it computes the transform from the ``carrot1`` to the ``world``. In the ``world`` frame, tf2 time travels from the past to now. And at the current time, tf2 computes the transform from the ``world`` to the ``turtle2``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:102 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:101
msgid "Checking the results"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:104 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:103
msgid "Let's run the simulation again, this time with the advanced time-travel API:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:112 ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:111
msgid "And yes, the second turtle is directed to where the first carrot was 5 seconds ago!"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst:117
msgid "In this tutorial, you have seen one of the advanced features of tf2. You learned that tf2 can transform data in time and learned how to do that with turtlesim example. tf2 allowed you to go back in time and make frame transformations between old and current poses of turtles by using the advanced ``lookupTransform()`` API."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:8
msgid "Traveling in time (Python)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:23
msgid "In the previous tutorial, we discussed the :doc:`basics of tf2 and time <./Learning-About-Tf2-And-Time-Py>`. This tutorial will take us one step further and expose a powerful tf2 trick: the time travel. In short, one of the key features of tf2 library is that it is able to transform data in time as well as in space."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:33
msgid "First, let's go back to where we ended in the previous tutorial :doc:`Using time <./Learning-About-Tf2-And-Time-Py>`. Go to your ``learning_tf2_py`` package."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:36
msgid "Now, instead of making the second turtle go to where the carrot is now, we will make the second turtle go to where the first carrot was 5 seconds ago. Edit the ``lookup_transform()`` call in ``turtle_tf2_listener.py`` file to"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:64
msgid "Advanced API for lookup_transform()"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:66
msgid "To ask the tf2 that particular question, we will use an advanced API that gives us the power to say explicitly when to acquire the specified transformations. This is done by calling the ``lookup_transform_full()`` method with additional parameters. Your code now would look like this:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:81
msgid "The advanced API for ``lookup_transform_full()`` takes six arguments:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Py.rst:116
msgid "In this tutorial, you have seen one of the advanced features of tf2. You learned that tf2 can transform data in time and learned how to do that with turtlesim example. tf2 allowed you to go back in time and make frame transformations between old and current poses of turtles by using the advanced ``lookup_transform_full()`` API."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:8
msgid "Using stamped datatypes with ``tf2_ros::MessageFilter``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:10
msgid "**Goal:** Learn how to use ``tf2_ros::MessageFilter`` to process stamped datatypes."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:23
msgid "This tutorial explains how to use sensor data with tf2. Some real-world examples of sensor data are:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:26
msgid "cameras, both mono and stereo"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:28
msgid "laser scans"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:30
msgid "Suppose that a new turtle named ``turtle3`` is created and it doesn't have good odometry, but there is an overhead camera tracking its position and publishing it as a ``PointStamped`` message in relation to the ``world`` frame."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:32
msgid "``turtle1`` wants to know where ``turtle3`` is compared to itself."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:34
msgid "To do this ``turtle1`` must listen to the topic where ``turtle3``'s pose is being published, wait until transforms into the desired frame are ready, and then do its operations. To make this easier the ``tf2_ros::MessageFilter`` is very useful. The ``tf2_ros::MessageFilter`` will take a subscription to any ROS 2 message with a header and cache it until it is possible to transform it into the target frame."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:42
msgid "1 Write the broadcaster node of PointStamped messages"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:44
msgid "For this tutorial we will set up a demo application which has a node (in Python) to broadcast the ``PointStamped`` position messages of ``turtle3``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:46
msgid "First, let's create the source file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:48
msgid "Go to the ``learning_tf2_py`` :doc:`package <./Writing-A-Tf2-Static-Broadcaster-Py>` we created in the previous tutorial. Inside the ``src/learning_tf2_py/learning_tf2_py`` directory download the example sensor message broadcaster code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:171
msgid "Now let's take a look at the code. First, in the ``on_timer`` callback function, we spawn the ``turtle3`` by asynchronously calling the ``Spawn`` service of ``turtlesim``, and initialize its position at (4, 2, 0), when the turtle spawning service is ready."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:186
msgid "Afterward, the node publishes the topic ``turtle3/cmd_vel``, topic ``turtle3/turtle_point_stamped``, and subscribes to topic ``turtle3/pose`` and runs callback function ``handle_turtle_pose`` on every incoming message."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:194
msgid "Finally, in the callback function ``handle_turtle_pose``, we initialize the ``Twist`` messages of ``turtle3`` and publish them, which will make the ``turtle3`` move along a circle. Then we fill up the ``PointStamped`` messages of ``turtle3`` with incoming ``Pose`` messages and publish them."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:213
msgid "1.2 Write the launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:215
msgid "In order to run this demo, we need to create a launch file ``turtle_tf2_sensor_message.launch.py`` in the ``launch`` subdirectory of package ``learning_tf2_py``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:261
msgid "1.3 Add an entry point"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:292
msgid "And then we can build the package:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:316
msgid "2 Writing the message filter/listener node"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:318
msgid "Now, to get the streaming ``PointStamped`` data of ``turtle3`` in the frame of ``turtle1`` reliably, we will create the source file of the message filter/listener node."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:320
msgid "Go to the ``learning_tf2_cpp`` :doc:`package <./Writing-A-Tf2-Static-Broadcaster-Cpp>` we created in the previous tutorial. Inside the ``src/learning_tf2_cpp/src`` directory download file ``turtle_tf2_message_filter.cpp`` by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:440
msgid "First, you must include the ``tf2_ros::MessageFilter`` headers from the ``tf2_ros`` package, as well as the previously used ``tf2`` and ``ros2`` related headers."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:458
msgid "Second, there needs to be persistent instances of ``tf2_ros::Buffer``, ``tf2_ros::TransformListener`` and ``tf2_ros::MessageFilter``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:469
msgid "Third, the ROS 2 ``message_filters::Subscriber`` must be initialized with the topic. And the ``tf2_ros::MessageFilter`` must be initialized with that ``Subscriber`` object. The other arguments of note in the ``MessageFilter`` constructor are the ``target_frame`` and the callback function. The target frame is the frame into which it will make sure ``canTransform`` will succeed. And the callback function is the function that will be called when the data is ready."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:504
msgid "And last, the callback method will call ``tf2_buffer_->transform`` when the data is ready and print output to the console."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:530
msgid "Before building the package ``learning_tf2_cpp``, please add two another dependencies in the ``package.xml`` file of this package:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:540
msgid "And in the ``CMakeLists.txt`` file, add two lines below the existing dependencies:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:547
msgid "The lines below will deal with differences between ROS distributions:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:564
msgid "After that, add the executable and name it ``turtle_tf2_message_filter``, which you'll use later with ``ros2 run``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:583
msgid "Finally, add the ``install(TARGETS…)`` section (below other existing nodes) so ``ros2 run`` can find your executable:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:612
msgid "Now open a new terminal, navigate to the root of your workspace, and rebuild the package with command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:661
msgid "3 Run"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:663
msgid "First we need to run several nodes (including the broadcaster node of PointStamped messages) by launching the launch file ``turtle_tf2_sensor_message.launch.py``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:669
msgid "This will bring up the ``turtlesim`` window with two turtles, where ``turtle3`` is moving along a circle, while ``turtle1`` isn't moving at first. But you can run the ``turtle_teleop_key`` node in another terminal to drive ``turtle1`` to move:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:678
msgid "Now if you echo the topic ``turtle3/turtle_point_stamped``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:684
msgid "Then there will be output like this:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:719
msgid "When the demo is running, open another terminal and run the message filter/listener node:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:725
msgid "If it's running correctly you should see streaming data like this:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst:741
msgid "In this tutorial you learned how to use sensor data/messages in tf2. Specifically speaking, you learned how to publish ``PointStamped`` messages on a topic, and how to listen to the topic and transform the frame of ``PointStamped`` messages with ``tf2_ros::MessageFilter``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:8
msgid "Writing a broadcaster (C++)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:10 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:10
msgid "**Goal:** Learn how to broadcast the state of a robot to tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:23 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:23
msgid "In the next two tutorials we will write the code to reproduce the demo from the :doc:`Introduction to tf2 <./Introduction-To-Tf2>` tutorial. After that, following tutorials focus on extending the demo with more advanced tf2 features, including the usage of timeouts in transformation lookups and time travel."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:29
msgid "This tutorial assumes you have a working knowledge of ROS 2 and you have completed the :doc:`Introduction to tf2 tutorial <./Introduction-To-Tf2>` and :doc:`tf2 static broadcaster tutorial (C++) <./Writing-A-Tf2-Static-Broadcaster-Cpp>`. In previous tutorials, you learned how to :doc:`create a workspace <../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>` and :doc:`create a package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`. You also have created the ``learning_tf2_cpp`` :doc:`package <./Writing-A-Tf2-Static-Broadcaster-Cpp>`, which is where we will continue working from."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:37 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:37
msgid "1 Write the broadcaster node"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:39
msgid "Let's first create the source files. Go to the ``learning_tf2_cpp`` package we created in the previous tutorial. Inside the ``src`` directory download the example broadcaster code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:157 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:175
msgid "Now, let's take a look at the code that is relevant to publishing the turtle pose to tf2. Firstly, we define and acquire a single parameter ``turtlename``, which specifies a turtle name, e.g. ``turtle1`` or ``turtle2``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:164 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:183
msgid "Afterward, the node subscribes to topic ``turtleX/pose`` and runs function ``handle_turtle_pose`` on every incoming message."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:172 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:193
msgid "Now, we create a ``TransformStamped`` object and give it the appropriate metadata."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:174
msgid "We need to give the transform being published a timestamp, and we'll just stamp it with the current time by calling ``this->get_clock()->now()``. This will return the current time used by the ``Node``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:176 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:197
msgid "Then we need to set the name of the parent frame of the link we're creating, in this case ``world``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:178 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:199
msgid "Finally, we need to set the name of the child node of the link we're creating, in this case this is the name of the turtle itself."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:180 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:201
msgid "The handler function for the turtle pose message broadcasts this turtle's translation and rotation, and publishes it as a transform from frame ``world`` to frame ``turtleX``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:192 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:213
msgid "Here we copy the information from the 3D turtle pose into the 3D transform."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:212 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:232
msgid "Finally we take the transform that we constructed and pass it to the ``sendTransform`` method of the ``TransformBroadcaster`` that will take care of broadcasting."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:224
msgid "Now open the ``CMakeLists.txt`` add the executable and name it ``turtle_tf2_broadcaster``, which you'll use later with ``ros2 run``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:249 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:260
msgid "Now create a launch file for this demo. With your text editor, create a new file called ``turtle_tf2_demo.launch.py`` in the ``launch`` folder, and add the following lines:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:278 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:289
msgid "First we import required modules from the ``launch`` and ``launch_ros`` packages. It should be noted that ``launch`` is a generic launching framework (not ROS 2 specific) and ``launch_ros`` has ROS 2 specific things, like nodes that we import here."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:286 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:297
msgid "Now we run our nodes that start the turtlesim simulation and broadcast ``turtle1`` state to the tf2 using our ``turtle_tf2_broadcaster`` node."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:309 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:320
msgid "Open ``package.xml`` with your text editor. Add the following dependencies corresponding to your launch file's import statements:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:317 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:328
msgid "This declares the additional required ``launch`` and ``launch_ros`` dependencies when its code is executed."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:324
msgid "Reopen ``CMakeLists.txt`` and add the line so that the launch files from the ``launch/`` folder would be installed."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:331 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:352
msgid "You can learn more about creating launch files in :doc:`this tutorial <../Launch/Creating-Launch-Files>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:334 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:355 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:328 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:281 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:285 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:304
msgid "3 Build"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:403 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:424 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:397 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:350 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:354 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:373
msgid "4 Run"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:405 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:426
msgid "Now run the launch file that will start the turtlesim simulation node and ``turtle_tf2_broadcaster`` node:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:417 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:438
msgid "You will now see that the turtlesim simulation have started with one turtle that you can control."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:421 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:442
msgid "Now, use the ``tf2_echo`` tool to check if the turtle pose is actually getting broadcast to tf2:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:427 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:448
msgid "This should show you the pose of the first turtle. Drive around the turtle using the arrow keys (make sure your ``turtle_teleop_key`` terminal window is active, not your simulator window). In your console output you will see something similar to this:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:446 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:467
msgid "If you run ``tf2_echo`` for the transform between the ``world`` and ``turtle2``, you should not see a transform, because the second turtle is not there yet. However, as soon as we add the second turtle in the next tutorial, the pose of ``turtle2`` will be broadcast to tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst:452
msgid "In this tutorial you learned how to broadcast the pose of the robot (position and orientation of the turtle) to tf2 and how to use the ``tf2_echo`` tool. To actually use the transforms broadcasted to tf2, you should move on to the next tutorial about creating a :doc:`tf2 listener <./Writing-A-Tf2-Listener-Cpp>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:8
msgid "Writing a broadcaster (Python)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:29
msgid "This tutorial assumes you have a working knowledge of ROS 2 and you have completed the :doc:`Introduction to tf2 tutorial <./Introduction-To-Tf2>`. In previous tutorials, you learned how to :doc:`create a workspace <../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>` and :doc:`create a package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`. You also have created the ``learning_tf2_py`` :doc:`package <./Writing-A-Tf2-Static-Broadcaster-Py>`, which is where we will continue working from."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:39
msgid "Let's first create the source files. Go to the ``learning_tf2_py`` package we created in the previous tutorial. Inside the ``src/learning_tf2_py/learning_tf2_py`` directory download the example broadcaster code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:195
msgid "We need to give the transform being published a timestamp, and we'll just stamp it with the current time by calling ``self.get_clock().now()``. This will return the current time used by the ``Node``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:241
msgid "You can also publish static transforms with the same pattern by instantiating a ``tf2_ros.StaticTransformBroadcaster`` instead of a ``tf2_ros.TransformBroadcaster``. The static transforms will be published on the ``/tf_static`` topic and will be sent only when required, not periodically. For more details see :doc:`here <./Writing-A-Tf2-Static-Broadcaster-Py>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:318
msgid "Navigate one level back to the ``src/learning_tf2_py`` directory, where the ``setup.py``, ``setup.cfg``, and ``package.xml`` files are located."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:333
msgid "2.3 Update setup.py"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:335
msgid "Reopen ``setup.py`` and add the line so that the launch files from the ``launch/`` folder would be installed. The ``data_files`` field should now look like this:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:345
msgid "Also add the appropriate imports at the top of the file:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst:473
msgid "In this tutorial you learned how to broadcast the pose of the robot (position and orientation of the turtle) to tf2 and how to use the ``tf2_echo`` tool. To actually use the transforms broadcasted to tf2, you should move on to the next tutorial about creating a :doc:`tf2 listener <./Writing-A-Tf2-Listener-Py>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:8
msgid "Writing a listener (C++)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:10 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:10
msgid "**Goal:** Learn how to use tf2 to get access to frame transformations."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:23 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:23
msgid "In previous tutorials we created a tf2 broadcaster to publish the pose of a turtle to tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:25 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:25
msgid "In this tutorial we'll create a tf2 listener to start using tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:30
msgid "This tutorial assumes you have completed the :doc:`tf2 static broadcaster tutorial (C++) <./Writing-A-Tf2-Static-Broadcaster-Cpp>` and the :doc:`tf2 broadcaster tutorial (C++) <./Writing-A-Tf2-Broadcaster-Cpp>`. In the previous tutorial, we created a ``learning_tf2_cpp`` package, which is where we will continue working from."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:37 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:37
msgid "1 Write the listener node"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:39
msgid "Let's first create the source files. Go to the ``learning_tf2_cpp`` package we created in the previous tutorial. Inside the ``src`` directory download the example listener code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:213
msgid "To understand how the service behind spawning turtle works, please refer to :doc:`writing a simple service and client (C++) <../../Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client>` tutorial."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:215
msgid "Now, let's take a look at the code that is relevant to get access to frame transformations. The ``tf2_ros`` contains a ``TransformListener`` header file implementation that makes the task of receiving transforms easier."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:222 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:192
msgid "Here, we create a ``TransformListener`` object. Once the listener is created, it starts receiving tf2 transformations over the wire, and buffers them for up to 10 seconds."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:229 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:198
msgid "Finally, we query the listener for a specific transformation. We call ``lookup_transform`` method with following arguments:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:235 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:204
msgid "The time at which we want to transform"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:237
msgid "Providing ``tf2::TimePointZero()`` will just get us the latest available transform. All this is wrapped in a try-catch block to handle possible exceptions."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:251
msgid "Now open the ``CMakeLists.txt`` add the executable and name it ``turtle_tf2_listener``, which you'll use later with ``ros2 run``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:274 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:227
msgid "2 Update the launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:276 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:229
msgid "Open the launch file called ``turtle_tf2_demo.launch.py`` with your text editor, add two new nodes to the launch description, add a launch argument, and add the imports. The resulting file should look like:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:325 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:277
msgid "This will declare a ``target_frame`` launch argument, start a broadcaster for second turtle that we will spawn and listener that will subscribe to those transformations."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:399 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:352
msgid "Now you're ready to start your full turtle demo:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:405 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:358
msgid "You should see the turtle sim with two turtles. In the second terminal window type the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:412 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:365
msgid "To see if things work, simply drive around the first turtle using the arrow keys (make sure your terminal window is active, not your simulator window), and you'll see the second turtle following the first one!"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:417 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:370
msgid "In this tutorial you learned how to use tf2 to get access to frame transformations. You also have finished writing your own turtlesim demo that you first tried in :doc:`Introduction to tf2 <./Introduction-To-Tf2>` tutorial."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:8
msgid "Writing a listener (Python)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:30
msgid "This tutorial assumes you have completed the :doc:`tf2 broadcaster tutorial (Python) <./Writing-A-Tf2-Broadcaster-Py>`. In the previous tutorial, we created a ``learning_tf2_py`` package, which is where we will continue working from."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:39
msgid "Let's first create the source files. Go to the ``learning_tf2_py`` package we created in the previous tutorial. Inside the ``src/learning_tf2_py/learning_tf2_py`` directory download the example listener code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:183
msgid "To understand how the service behind spawning turtle works, please refer to :doc:`writing a simple service and client (Python) <../../Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client>` tutorial."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:185
msgid "Now, let's take a look at the code that is relevant to get access to frame transformations. The ``tf2_ros`` package provides an implementation of a ``TransformListener`` to help make the task of receiving transforms easier."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:206
msgid "Providing ``rclpy.time.Time()`` will just get us the latest available transform. All this is wrapped in a try-except block to handle possible exceptions."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:8
msgid "Writing a static broadcaster (C++)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:10 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:10
msgid "**Goal:** Learn how to broadcast static coordinate frames to tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:23 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:23
msgid "Publishing static transforms is useful to define the relationship between a robot base and its sensors or non-moving parts. For example, it is easiest to reason about laser scan measurements in a frame at the center of the laser scanner."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:26 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:26
msgid "This is a standalone tutorial covering the basics of static transforms, which consists of two parts. In the first part we will write code to publish static transforms to tf2. In the second part we will explain how to use the commandline ``static_transform_publisher`` executable tool in ``tf2_ros``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:30 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:30
msgid "In the next two tutorials we will write the code to reproduce the demo from the :doc:`Introduction to tf2 <./Introduction-To-Tf2>` tutorial. After that, the following tutorials focus on extending the demo with more advanced tf2 features."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:36 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:36
msgid "In previous tutorials, you learned how to :doc:`create a workspace <../../Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace>` and :doc:`create a package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:44
msgid "First we will create a package that will be used for this tutorial and the following ones. The package called ``learning_tf2_cpp`` will depend on ``geometry_msgs``, ``rclcpp``, ``tf2``, ``tf2_ros``, and ``turtlesim``. Code for this tutorial is stored `here <https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_cpp/src/static_turtle_tf2_broadcaster.cpp>`_."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:48 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:48
msgid "Open a new terminal and :doc:`source your ROS 2 installation <../../Beginner-CLI-Tools/Configuring-ROS2-Environment>` so that ``ros2`` commands will work. Navigate to workspace's ``src`` folder and create a new package:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:55
msgid "Your terminal will return a message verifying the creation of your package ``learning_tf2_cpp`` and all its necessary files and folders."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:58 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:58
msgid "2 Write the static broadcaster node"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:60
msgid "Let's first create the source files. Inside the ``src/learning_tf2_cpp/src`` directory download the example static broadcaster code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:172
msgid "Now let's look at the code that is relevant to publishing the static turtle pose to tf2. The first lines include the required header files. First we include ``geometry_msgs/msg/transform_stamped.hpp`` to access the ``TransformStamped`` message type, which we will publish to the transformation tree."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:180
msgid "Afterward, ``rclcpp`` is included so its ``rclcpp::Node`` class can be used."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:186
msgid "``tf2::Quaternion`` is a class for a quaternion that provides convenient functions for converting Euler angles to quaternions and vice versa. We also include ``tf2_ros/static_transform_broadcaster.h`` to use the ``StaticTransformBroadcaster`` to make the publishing of static transforms easy."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:194 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:218
msgid "The ``StaticFramePublisher`` class constructor initializes the node with the name ``static_turtle_tf2_broadcaster``. Then, ``StaticTransformBroadcaster`` is created, which will send one static transformation upon the startup."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:203 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:226
msgid "Here we create a ``TransformStamped`` object, which will be the message we will send over once populated. Before passing the actual transform values we need to give it the appropriate metadata."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:206
msgid "We need to give the transform being published a timestamp and we'll just stamp it with the current time, ``this->get_clock()->now()``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:208 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:231
msgid "Then we need to set the name of the parent frame of the link we're creating, in this case ``world``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:210 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:233
msgid "Finally, we need to set the name of the child frame of the link we're creating"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:220 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:243
msgid "Here we populate the 6D pose (translation and rotation) of the turtle."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:237 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:257
msgid "Finally, we broadcast static transform using the ``sendTransform()`` function."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:246
msgid "Navigate one level back to the ``src/learning_tf2_cpp`` directory, where the ``CMakeLists.txt`` and ``package.xml`` files have been created for you."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:250 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:270
msgid "As mentioned in the :doc:`Create a package <../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>` tutorial, make sure to fill in the ``<description>``, ``<maintainer>`` and ``<license>`` tags:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:263
msgid "Add the executable to the CMakeLists.txt and name it ``static_turtle_tf2_broadcaster``, which you'll use later with ``ros2 run``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:287 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:306
msgid "It's good practice to run ``rosdep`` in the root of your workspace to check for missing dependencies before building:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:305 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:324
msgid "Still in the root of your workspace, build your new package:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:356 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:375
msgid "Now run the ``static_turtle_tf2_broadcaster`` node:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:362 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:381
msgid "This sets a turtle pose broadcast for ``mystaticturtle`` to float 1 meter above the ground."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:364 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:383
msgid "We can now check that the static transform has been published by echoing the ``tf_static`` topic"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:370 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:389
msgid "If everything went well you should see a single static transform"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:393 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:412
msgid "The proper way to publish static transforms"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:395 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:414
msgid "This tutorial aimed to show how ``StaticTransformBroadcaster`` can be used to publish static transforms. In your real development process you shouldn't have to write this code yourself and should use the dedicated ``tf2_ros`` tool to do so. ``tf2_ros`` provides an executable named ``static_transform_publisher`` that can be used either as a commandline tool or a node that you can add to your launchfiles."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:399 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:418
msgid "Publish a static coordinate transform to tf2 using an x/y/z offset in meters and roll/pitch/yaw in radians. In our case, roll/pitch/yaw refers to rotation about the x/y/z-axis, respectively."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:406 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:425
msgid "Publish a static coordinate transform to tf2 using an x/y/z offset in meters and quaternion."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:412 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:431
msgid "``static_transform_publisher`` is designed both as a command-line tool for manual use, as well as for use within ``launch`` files for setting static transforms. For example:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:428 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:447
msgid "Note that all arguments except for ``--frame-id`` and ``--child-frame-id`` are optional; if a particular option isn't specified, then the identity will be assumed."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:433 ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:452
msgid "In this tutorial you learned how static transforms are useful to define static relationships between frames, like ``mystaticturtle`` in relation to the ``world`` frame. In addition, you learned how static transforms can be useful for understanding sensor data, such as from laser scanners, by relating the data to a common coordinate frame. Finally, you wrote your own node to publish static transforms to tf2 and learned how to publish required static transformations using ``static_transform_publisher`` executable and launch files."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:8
msgid "Writing a static broadcaster (Python)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:44
msgid "First we will create a package that will be used for this tutorial and the following ones. The package called ``learning_tf2_py`` will depend on ``geometry_msgs``, ``python3-numpy``, ``rclpy``, ``tf2_ros_py``, and ``turtlesim``. Code for this tutorial is stored `here <https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/static_turtle_tf2_broadcaster.py>`_."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:55
msgid "Your terminal will return a message verifying the creation of your package ``learning_tf2_py`` and all its necessary files and folders."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:60
msgid "Let's first create the source files. Inside the ``src/learning_tf2_py/learning_tf2_py`` directory download the example static broadcaster code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:196
msgid "Now let's look at the code that is relevant to publishing the static turtle pose to tf2. The first lines import required packages. First we import the ``TransformStamped`` from the ``geometry_msgs``, which provides us a template for the message that we will publish to the transformation tree."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:204
msgid "Afterward, ``rclpy`` is imported so its ``Node`` class can be used."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:211
msgid "The ``tf2_ros`` package provides a ``StaticTransformBroadcaster`` to make the publishing of static transforms easy. To use the ``StaticTransformBroadcaster``, we need to import it from the ``tf2_ros`` module."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:229
msgid "We need to give the transform being published a timestamp and we'll just stamp it with the current time, ``self.get_clock().now()``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:266
msgid "Navigate one level back to the ``src/learning_tf2_py`` directory, where the ``setup.py``, ``setup.cfg``, and ``package.xml`` files have been created for you."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:278
msgid "After the lines above, add the following dependencies corresponding to your node’s import statements:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst:288
msgid "This declares the required ``geometry_msgs``, ``python3-numpy``, ``rclpy``, ``tf2_ros_py``, and ``turtlesim`` dependencies when its code is executed."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:8
msgid "Adding physical and collision properties"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:10
msgid "**Goal:** Learn how to add collision and inertial properties to links, and how to add joint dynamics to joints."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:20
msgid "In this tutorial, we’ll look at how to add some basic physical properties to your URDF model and how to specify its collision properties."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:23
msgid "Collision"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:25
msgid "So far, we’ve only specified our links with a single sub-element, ``visual``, which defines (not surprisingly) what the robot looks like. However, in order to get collision detection to work or to simulate the robot, we need to define a ``collision`` element as well. `Here is the new urdf <https://raw.githubusercontent.com/ros/urdf_tutorial/master/urdf/07-physics.urdf>`_ with collision and physical properties."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:29
msgid "Here is the code for our new base link."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:49
msgid "The collision element is a direct subelement of the link object, at the same level as the visual tag."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:50
msgid "The collision element defines its shape the same way the visual element does, with a geometry tag. The format for the geometry tag is exactly the same here as with the visual."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:52
msgid "You can also specify an origin in the same way as a subelement of the collision tag (as with the visual)."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:54
msgid "In many cases, you’ll want the collision geometry and origin to be exactly the same as the visual geometry and origin. However, there are two main cases where you wouldn’t:"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:57
msgid "**Quicker Processing**. Doing collision detection for two meshes is a lot more computational complex than for two simple geometries. Hence, you may want to replace the meshes with simpler geometries in the collision element."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:59
msgid "**Safe Zones**. You may want to restrict movement close to sensitive equipment. For instance, if we didn’t want anything to collide with R2D2’s head, we might define the collision geometry to be a cylinder encasing his head to prevent anything from getting too close to his head."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:63
msgid "Physical Properties"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:64
msgid "In order to get your model to simulate properly, you need to define several physical properties of your robot, i.e. the properties that a physics engine like Gazebo would need."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:68
msgid "Inertia"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:69
msgid "Every link element being simulated needs an inertial tag. Here is a simple one."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:94
msgid "This element is also a subelement of the link object."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:95
msgid "The mass is defined in kilograms."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:96
msgid "The 3x3 rotational inertia matrix is specified with the inertia element. Since this is symmetrical, it can be represented by only 6 elements, as such."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:100
msgid "**ixx**"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:100
msgid "**ixy**"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:100
msgid "**ixz**"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:102
msgid "ixy"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:102
msgid "**iyy**"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:102
msgid "**iyz**"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:104
msgid "ixz"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:104
msgid "iyz"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:104
msgid "**izz**"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:107
msgid "This information can be provided to you by modeling programs such as MeshLab. The inertia of geometric primitives (cylinder, box, sphere) can be computed using Wikipedia's `list of moment of inertia tensors <https://en.wikipedia.org/wiki/List_of_moments_of_inertia#List_of_3D_inertia_tensors>`_ (and is used in the above example)."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:109
msgid "The inertia tensor depends on both the mass and the distribution of mass of the object. A good first approximation is to assume equal distribution of mass in the volume of the object and compute the inertia tensor based on the object's shape, as outlined above."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:111
msgid "If unsure what to put, a matrix with ixx/iyy/izz=1e-3 or smaller is often a reasonable default for a mid-sized link (it corresponds to a box of 0.1 m side length with a mass of 0.6 kg). The identity matrix is a particularly bad choice, since it is often much too high (it corresponds to a box of 0.1 m side length with a mass of 600 kg!)."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:113
msgid "You can also specify an origin tag to specify the center of gravity and the inertial reference frame (relative to the link's reference frame)."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:114
msgid "When using realtime controllers, inertia elements of zero (or almost zero) can cause the robot model to collapse without warning, and all links will appear with their origins coinciding with the world origin."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:117
msgid "Contact Coefficients"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:118
msgid "You can also define how the links behave when they are in contact with one another. This is done with a subelement of the collision tag called contact_coefficients. There are three attributes to specify:"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:122
msgid "mu - `Friction coefficient <https://simple.wikipedia.org/wiki/Coefficient_of_friction>`_"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:123
msgid "kp - `Stiffness coefficient <https://en.wikipedia.org/wiki/Stiffness>`_"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:124
msgid "kd - `Dampening coefficient <https://en.wikipedia.org/wiki/Damping_ratio#Damping_ratio_definition>`_"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:127
msgid "Joint Dynamics"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:128
msgid "How the joint moves is defined by the dynamics tag for the joint. There are two attributes here:"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:131
msgid "``friction`` - The physical static friction. For prismatic joints, the units are Newtons. For revolving joints, the units are Newton meters."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:134
msgid "``damping`` - The physical damping value. For prismatic joints, the units are Newton seconds per meter. For revolving joints, Newton meter seconds per radian."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:138
msgid "If not specified, these coefficients default to zero."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:141
msgid "Other Tags"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:142
msgid "In the realm of pure URDF (i.e. excluding Gazebo-specific tags), there are two remaining tags to help define the joints: calibration and safety controller. Check out the `spec <https://wiki.ros.org/urdf/XML/joint>`_, as they are not included in this tutorial."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:146
msgid "Next Steps"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst:147
msgid "Reduce the amount of code and annoying math you have to do by :doc:`using xacro <./Using-Xacro-to-Clean-Up-a-URDF-File>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:8
msgid "Building a movable robot model"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:10
msgid "**Goal:** Learn how to define movable joints in URDF."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:20
msgid "In this tutorial, we’re going to revise the R2D2 model we made in the :doc:`previous tutorial <./Building-a-Visual-Robot-Model-with-URDF-from-Scratch>` so that it has movable joints. In the previous model, all of the joints were fixed. Now we’ll explore three other important types of joints: continuous, revolute and prismatic."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:24
msgid "Make sure you have installed all prerequisites before continuing. See the :doc:`previous tutorial <./Building-a-Visual-Robot-Model-with-URDF-from-Scratch>` for information on what is required."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:27
msgid "Again, all of the robot models mentioned in this tutorial can be found in the `urdf_tutorial <https://index.ros.org/p/urdf_tutorial>`_ package."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:29
msgid "`Here is the new urdf <https://github.com/ros/urdf_tutorial/blob/ros2/urdf/06-flexible.urdf>`_ with flexible joints. You can compare it to the previous version to see everything that has changed, but we’re just going to focus on three example joints."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:32
msgid "To visualize and control this model, run the same command as the last tutorial:"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:38
msgid "However now this will also pop up a GUI that allows you to control the values of all the non-fixed joints. Play with the model some and see how it moves. Then, we can take a look at how we accomplished this."
msgstr ""

msgid "Screenshot of Flexible Model"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:47
msgid "The Head"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:58
msgid "The connection between the body and the head is a continuous joint, meaning that it can take on any angle from negative infinity to positive infinity. The wheels are also modeled like this, so that they can roll in both directions forever."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:61
msgid "The only additional information we have to add is the axis of rotation, here specified by an xyz triplet, which specifies a vector around which the head will rotate. Since we want it to go around the z axis, we specify the vector \"0 0 1\"."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:65
msgid "The Gripper"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:77
msgid "Both the right and the left gripper joints are modeled as revolute joints. This means that they rotate in the same way that the continuous joints do, but they have strict limits. Hence, we must include the limit tag specifying the upper and lower limits of the joint (in radians). We also must specify a maximum velocity and effort for this joint but the actual values don't matter for our purposes here."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:83
msgid "The Gripper Arm"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:94
msgid "The gripper arm is a different kind of joint, namely a prismatic joint. This means that it moves along an axis, not around it. This translational movement is what allows our robot model to extend and retract its gripper arm."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:98
msgid "The limits of the prismatic arm are specified in the same way as a revolute joint, except that the units are meters, not radians."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:101
msgid "Other Types of Joints"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:103
msgid "There are two other kinds of joints that move around in space. Whereas the prismatic joint can only move along one dimension, a planar joint can move around in a plane, or two dimensions. Furthermore, a floating joint is unconstrained, and can move around in any of the three dimensions. These joints cannot be specified by just one number, and therefore aren’t included in this tutorial."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:109
msgid "Specifying the Pose"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:111
msgid "As you move the sliders around in the GUI, the model moves in Rviz. How is this done? First the `GUI <https://index.ros.org/p/joint_state_publisher_gui>`_ parses the URDF and finds all the non-fixed joints and their limits. Then, it uses the values of the sliders to publish `sensor_msgs/msg/JointState <https://github.com/ros2/common_interfaces/blob/eloquent/sensor_msgs/msg/JointState.msg>`_ messages. Those are then used by `robot_state_publisher <https://index.ros.org/p/robot_state_publisher>`_ to calculate all of transforms between the different parts. The resulting transform tree is then used to display all of the shapes in Rviz."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst:120
msgid "Now that you have a visibly functional model, you can :doc:`add in some physical properties <./Adding-Physical-and-Collision-Properties-to-a-URDF-Model>`, or :doc:`start using xacro to simplify your code <./Using-Xacro-to-Clean-Up-a-URDF-File>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:8
msgid "Building a visual robot model from scratch"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:10
msgid "**Goal:** Learn how to build a visual model of a robot that you can view in Rviz"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:20
msgid "This tutorial assumes you know how to write well-formatted XML code"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:22
msgid "In this tutorial, we’re going to build a visual model of a robot that vaguely looks like R2D2. In later tutorials, you’ll learn how to :doc:`articulate the model <./Building-a-Movable-Robot-Model-with-URDF>`, :doc:`add in some physical properties <./Adding-Physical-and-Collision-Properties-to-a-URDF-Model>`, and :doc:`generate neater code with xacro <./Using-Xacro-to-Clean-Up-a-URDF-File>`, but for now, we’re going to focus on getting the visual geometry correct."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:25
msgid "Before continuing, make sure you have the `joint_state_publisher <https://index.ros.org/p/joint_state_publisher>`_ package installed. If you installed `urdf_tutorial <https://index.ros.org/p/urdf_tutorial>`_ binaries, this should already be the case. If not, please update your installation to include that package (use ``rosdep`` to check)."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:29
msgid "All of the robot models mentioned in this tutorial (and the source files) can be found in the `urdf_tutorial <https://index.ros.org/p/urdf_tutorial>`_ package."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:32
msgid "One Shape"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:34
msgid "First, we’re just going to explore one simple shape. Here’s about as simple as a urdf as you can make. `[Source: 01-myfirst.urdf] <https://github.com/ros/urdf_tutorial/blob/ros2/urdf/01-myfirst.urdf>`_"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:51
msgid "To translate the XML into English, this is a robot with the name ``myfirst``, that contains only one link (a.k.a. part), whose visual component is just a cylinder 0.6 meters long with a 0.2 meter radius. This may seem like a lot of enclosing tags for a simple “hello world” type example, but it will get more complicated, trust me."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:54
msgid "To examine the model, launch the ``display.launch.py`` file:"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:60
msgid "This does three things:"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:62
msgid "Loads the specified model and saves it as a parameter"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:63
msgid "Runs nodes to publish `sensor_msgs/msg/JointState <https://github.com/ros2/common_interfaces/blob/eloquent/sensor_msgs/msg/JointState.msg>`_ and transforms (more on these later)"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:64
msgid "Starts Rviz with a configuration file"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:66
msgid "Note that the launch command above assumes that you are executing it from the `urdf_tutorial <https://index.ros.org/p/urdf_tutorial>`_ package directory (ie: the ``urdf`` directory is a direct child of the current working directory). If that is not the case, the relative path to ``01-myfirst.urdf`` will not be valid, and you'll receive an error as soon as the launcher tries to load the urdf as a parameter."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:69
msgid "A slightly modified argument allows this to work regardless of the current working directory:"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:75
msgid "You'll have to change all example launch commands given in these tutorials if you are not running them from the ``urdf_tutorial`` package location."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:77
msgid "After launching ``display.launch.py``, you should end up with RViz showing you the following:"
msgstr ""

msgid "my first image"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:87
msgid "Things to note:"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:84
msgid "The fixed frame is the transform frame where the center of the grid is located. Here, it’s a frame defined by our one link, base_link."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:86
msgid "The visual element (the cylinder) has its origin at the center of its geometry as a default. Hence, half the cylinder is below the grid."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:90
msgid "Multiple Shapes"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:92
msgid "Now let’s look at how to add multiple shapes/links. If we just add more link elements to the urdf, the parser won’t know where to put them. So, we have to add joints. Joint elements can refer to both flexible and inflexible joints. We’ll start with inflexible, or fixed joints. `[Source: 02-multipleshapes.urdf] <https://github.com/ros/urdf_tutorial/blob/ros2/urdf/02-multipleshapes.urdf>`_"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:126
msgid "Note how we defined a 0.6m x 0.1m x 0.2m box"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:127
msgid "The joint is defined in terms of a parent and a child. URDF is ultimately a tree structure with one root link. This means that the leg’s position is dependent on the base_link’s position."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:139
msgid "Both of the shapes overlap with each other, because they share the same origin. If we want them not to overlap we must define more origins."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:143
msgid "Origins"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:145
msgid "R2D2’s leg attaches to the top half of his torso, on the side. So that’s where we specify the origin of the JOINT to be. Also, it doesn’t attach to the middle of the leg, it attaches to the upper part, so we must offset the origin for the leg as well. We also rotate the leg so it is upright. `[Source: 03-origins.urdf] <https://github.com/ros/urdf_tutorial/blob/ros2/urdf/03-origins.urdf>`_"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:180
msgid "Let’s start by examining the joint’s origin. It is defined in terms of the parent’s reference frame. So we are -0.22 meters in the y direction (to our left, but to the right relative to the axes) and 0.25 meters in the z direction (up). This means that the origin for the child link will be up and to the right, regardless of the child link’s visual origin tag. Since we didn’t specify a rpy (roll pitch yaw) attribute, the child frame will be default have the same orientation as the parent frame."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:185
msgid "Now, looking at the leg’s visual origin, it has both a xyz and rpy offset. This defines where the center of the visual element should be, relative to its origin. Since we want the leg to attach at the top, we offset the origin down by setting the z offset to be -0.3 meters. And since we want the long part of the leg to be parallel to the z axis, we rotate the visual part PI/2 around the Y axis."
msgstr ""

msgid "Origins Screenshot"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:198
msgid "The launch file runs packages that will create TF frames for each link in your model based on your URDF. Rviz uses this information to figure out where to display each shape."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:200
msgid "If a TF frame does not exist for a given URDF link, then it will be placed at the origin in white (ref. `related question <http://answers.ros.org/question/207947/how-do-you-use-externally-defined-materials-in-a-urdfxacro-file/>`_)."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:203
msgid "Material Girl"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:205
msgid "“Alright,” I hear you say. “That’s very cute, but not everyone owns a B21. My robot and R2D2 are not red!” That’s a good point. Let’s take a look at the material tag. `[Source: 04-materials.urdf] <https://github.com/ros/urdf_tutorial/blob/ros2/urdf/04-materials.urdf>`_"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:268
msgid "The body is now blue. We’ve defined a new material called “blue”, with the red, green, blue and alpha channels defined as 0,0,0.8 and 1 respectively. All of the values can be in the range [0,1]. This material is then referenced by the base_link's visual element. The white material is defined similarly."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:273
msgid "You could also define the material tag from within the visual element, and even reference it in other links. No one will even complain if you redefine it though."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:275
msgid "You can also use a texture to specify an image file to be used for coloring the object"
msgstr ""

msgid "Materials Screenshot"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:286
msgid "Finishing the Model"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:288
msgid "Now we finish the model off with a few more shapes: feet, wheels, and head. Most notably, we add a sphere and a some meshes. We’ll also add few other pieces that we’ll use later. `[Source: 05-visual.urdf] <https://github.com/ros/urdf_tutorial/blob/ros2/urdf/05-visual.urdf>`_"
msgstr ""

msgid "Visual Screenshot"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:549
msgid "How to add the sphere should be fairly self explanatory:"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:562
msgid "The meshes here were borrowed from the PR2. They are separate files which you have to specify the path for. You should use the ``package://NAME_OF_PACKAGE/path`` notation. The meshes for this tutorial are located within the ``urdf_tutorial`` package, in a folder called meshes."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:578
msgid "The meshes can be imported in a number of different formats. STL is fairly common, but the engine also supports DAE, which can have its own color data, meaning you don’t have to specify the color/material. Often these are in separate files. These meshes reference the ``.tif`` files also in the meshes folder."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:582
msgid "Meshes can also be sized using relative scaling parameters or a bounding box size."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:583
msgid "We could have also referred to meshes in a completely different package."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst:585
msgid "There you have it. A R2D2-like URDF model. Now you can continue on to the next step, :doc:`making it move <./Building-a-Movable-Robot-Model-with-URDF>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/URDF-Main.rst:8
msgid "URDF"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/URDF-Main.rst:10
msgid "URDF (Unified Robot Description Format) is a file format for specifying the geometry and organization of robots in ROS."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:8
msgid "Using URDF with ``robot_state_publisher``"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:10
msgid "**Goal:** Simulate a walking robot modeled in URDF and view it in Rviz."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:23
msgid "This tutorial will show you how to model a walking robot, publish the state as a `tf2 <https://wiki.ros.org/tf2>`__ message and view the simulation in Rviz. First, we create the URDF model describing the robot assembly. Next we write a node which simulates the motion and publishes the JointState and transforms. We then use ``robot_state_publisher`` to publish the entire robot state to ``/tf2``."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:33
msgid "`rviz2 <https://index.ros.org/p/rviz2/>`__"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:50
msgid "You should now see a ``urdf_tutorial_r2d2`` folder. Next you will make several changes to it."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:54
msgid "2 Create the URDF File"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:56
msgid "Create the directory where we will store some assets:"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:62
msgid "Download the :download:`URDF file <documents/r2d2.urdf.xml>` and save it as ``~/second_ros2_ws/src/urdf_tutorial_r2d2/urdf/r2d2.urdf.xml``. Download the :download:`Rviz configuration file <documents/r2d2.rviz>` and save it as ``~/second_ros2_ws/src/urdf_tutorial_r2d2/urdf/r2d2.rviz``."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:66
msgid "3 Publish the state"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:68
msgid "Now we need a method for specifying what state the robot is in. To do this, we must specify all three joints and the overall odometry."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:71
msgid "Fire up your favorite editor and paste the following code into ``~/second_ros2_ws/src/urdf_tutorial_r2d2/urdf_tutorial_r2d2/state_publisher.py``"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:165
msgid "4 Create a launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:167
msgid "Create a new ``~/second_ros2_ws/src/urdf_tutorial_r2d2/launch`` folder. Open your editor and paste the following code, saving it as ``~/second_ros2_ws/src/urdf_tutorial_r2d2/launch/demo.launch.py``"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:211
msgid "5 Edit the setup.py file"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:213
msgid "You must tell the **colcon** build tool how to install your Python package. Edit the ``~/second_ros2_ws/src/urdf_tutorial_r2d2/setup.py`` file as follows:"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:216
msgid "include these import statements"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:225
msgid "append these 2 lines inside ``data_files``"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:235
msgid "modify the ``entry_points`` table so you can later run 'state_publisher' from a console"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:243
msgid "Save the ``setup.py`` file with your changes."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:246
msgid "6 Install the package"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:256
msgid "7 View the results"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:258
msgid "Launch the package"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:264
msgid "Open a new terminal, the run Rviz using"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:270
msgid "See the `User Guide <http://wiki.ros.org/rviz/UserGuide>`__ for details on how to use Rviz."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:275
msgid "You created a ``JointState`` publisher node and coupled it with ``robot_state_publisher`` to simulate a walking robot. The code used in these examples is originally from `here <https://github.com/benbongalon/ros2-migration/tree/master/urdf_tutorial>`__."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.rst:278
#, python-format
msgid "Credit is given to the authors of this `ROS 1 tutorial <http://wiki.ros.org/urdf/Tutorials/Using%20urdf%20with%20robot_state_publisher>`__ from which some content was reused."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:8
msgid "Using Xacro to clean up your code"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:10
msgid "**Goal:** Learn some tricks to reduce the amount of code in a URDF file using Xacro"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:20
msgid "By now, if you’re following all these steps at home with your own robot design, you might be sick of doing all sorts of math to get very simple robot descriptions to parse correctly. Fortunately, you can use the `xacro <https://index.ros.org/p/xacro>`_ package to make your life simpler. It does three things that are very helpful."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:24 ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:66
msgid "Constants"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:25
msgid "Simple Math"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:26 ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:145
msgid "Macros"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:28
msgid "In this tutorial, we take a look at all these shortcuts to help reduce the overall size of the URDF file and make it easier to read and maintain."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:31
msgid "Using Xacro"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:32
msgid "As its name implies, `xacro <https://index.ros.org/p/xacro>`_ is a macro language for XML. The xacro program runs all of the macros and outputs the result. Typical usage looks something like this:"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:40
msgid "You can also automatically generate the urdf in a launch file. This is convenient because it stays up to date and doesn’t use up hard drive space. However, it does take time to generate, so be aware that your launch file might take longer to start up."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:57
msgid "At the top of the URDF file, you must specify a namespace in order for the file to parse properly. For example, these are the first two lines of a valid xacro file:"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:67
msgid "Let’s take a quick look at our base_link in R2D2."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:85
msgid "The information here is a little redundant. We specify the length and radius of the cylinder twice. Worse, if we want to change that, we need to do so in two different places."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:89
msgid "Fortunately, xacro allows you to specify properties which act as constants. Instead, of the above code, we can write this."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:110
msgid "The two values are specified in the first two lines. They can be defined just about anywhere (assuming valid XML), at any level, before or after they are used. Usually they go at the top."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:113
msgid "Instead of specifying the actual radius in the geometry element, we use a dollar sign and curly brackets to signify the value."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:114
msgid "This code will generate the same code shown above."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:116
msgid "The value of the contents of the ${} construct are then used to replace the ${}. This means you can combine it with other text in the attribute."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:124
msgid "This will generate"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:130
msgid "However, the contents in the ${} don’t have to only be a property, which brings us to our next point..."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:133
msgid "Math"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:134
msgid "You can build up arbitrarily complex expressions in the ${} construct using the four basic operations (+,-,*,/), the unary minus, and parenthesis. Examples:"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:142
msgid "You can also use more than the basic mathematical operations, like ``sin`` and ``cos``."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:146
msgid "Here’s the biggest and most useful component to the xacro package."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:149
msgid "Simple Macro"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:150
msgid "Let’s take a look at a simple useless macro."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:159
msgid "(This is useless, since if the origin is not specified, it has the same value as this.) This code will generate the following."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:165
msgid "The name is not technically a required element, but you need to specify it to be able to use it."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:166
msgid "Every instance of the ``<xacro:$NAME />`` is replaced with the contents of the ``xacro:macro`` tag."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:167
msgid "Note that even though its not exactly the same (the two attributes have switched order), the generated XML is equivalent."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:168
msgid "If the xacro with a specified name is not found, it will not be expanded and will NOT generate an error."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:171
msgid "Parameterized Macro"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:172
msgid "You can also parameterize macros so that they don’t generate the same exact text every time. When combined with the math functionality, this is even more powerful."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:175
msgid "First, let’s take an example of a simple macro used in R2D2."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:188
msgid "This can be used with the code"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:194
msgid "The parameters act just like properties, and you can use them in expressions"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:196
msgid "You can also use entire blocks as parameters too."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:220
msgid "To specify a block parameter, include an asterisk before its parameter name."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:221
msgid "A block can be inserted using the insert_block command"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:222
msgid "Insert the block as many times as you wish."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:225
msgid "Practical Usage"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:226
msgid "The xacro language is rather flexible in what it allows you to do. Here are a few useful ways that xacro is used in the `R2D2 model <https://github.com/ros/urdf_tutorial/blob/master/urdf/08-macroed.urdf.xacro>`_, in addition to the default inertial macro shown above."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:229
msgid "To see the model generated by a xacro file, run the same command as with previous tutorials:"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:235
msgid "(The launch file has been running the xacro command this whole time, but since there were no macros to expand, it didn't matter)"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:238
msgid "Leg macro"
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:239
msgid "Often you want to create multiple similar looking objects in different locations. You can use a macro and some simple math to reduce the amount of code you have to write, like we do with R2’s two legs."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:272
msgid "Common Trick 1: Use a name prefix to get two similarly named objects."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:273
msgid "Common Trick 2: Use math to calculate joint origins. In the case that you change the size of your robot, changing a property with some math to calculate the joint offset will save a lot of trouble."
msgstr ""

#: ../../source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst:275
msgid "Common Trick 3: Using a reflect parameter, and setting it to 1 or -1. See how we use the reflect parameter to put the legs on either side of the body in the base_to_${prefix}_leg origin."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:8
msgid "Writing an action server and client (C++)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:10
msgid "**Goal:** Implement an action server and client in C++."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:23
msgid "Actions are a form of asynchronous communication in ROS. *Action clients* send goal requests to *action servers*. *Action servers* send goal feedback and results to *action clients*."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:30 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:30
msgid "You will need the ``action_tutorials_interfaces`` package and the ``Fibonacci.action`` interface defined in the previous tutorial, :doc:`../Creating-an-Action`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:37
msgid "1 Creating the action_tutorials_cpp package"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:39
msgid "As we saw in the :doc:`../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package` tutorial, we need to create a new package to hold our C++ and supporting code."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:42
msgid "1.1 Creating the action_tutorials_cpp package"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:44
msgid "Go into the action workspace you created in the :doc:`previous tutorial <../Creating-an-Action>` (remember to source the workspace), and create a new package for the C++ action server:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:71
msgid "1.2 Adding in visibility control"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:73
msgid "In order to make the package compile and work on Windows, we need to add in some \"visibility control\". For more details, see :ref:`Windows Symbol Visibility in the Windows Tips and Tricks document <Windows_Symbol_Visibility>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:76
msgid "Open up ``action_tutorials_cpp/include/action_tutorials_cpp/visibility_control.h``, and put the following code in:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:126
msgid "2 Writing an action server"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:128 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:39
msgid "Let's focus on writing an action server that computes the Fibonacci sequence using the action we created in the :doc:`../Creating-an-Action` tutorial."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:131
msgid "2.1 Writing the action server code"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:133
msgid "Open up ``action_tutorials_cpp/src/fibonacci_action_server.cpp``, and put the following code in:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:138 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:264
msgid "The first few lines include all of the headers we need to compile."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:140 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:266
msgid "Next we create a class that is a derived class of ``rclcpp::Node``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:146
msgid "The constructor for the ``FibonacciActionServer`` class initializes the node name as ``fibonacci_action_server``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:152
msgid "The constructor also instantiates a new action server:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:158
msgid "An action server requires 6 things:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:160 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:286
msgid "The templated action type name: ``Fibonacci``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:161
msgid "A ROS 2 node to add the action to: ``this``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:162 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:288 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:70
msgid "The action name: ``'fibonacci'``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:163
msgid "A callback function for handling goals: ``handle_goal``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:164
msgid "A callback function for handling cancellation: ``handle_cancel``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:165
msgid "A callback function for handling goal accept: ``handle_accept``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:167
msgid "The implementation of the various callbacks is next in the file. Note that all of the callbacks need to return quickly, otherwise we risk starving the executor."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:170
msgid "We start with the callback for handling new goals:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:176
msgid "This implementation just accepts all goals."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:178
msgid "Next up is the callback for dealing with cancellation:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:184
msgid "This implementation just tells the client that it accepted the cancellation."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:186
msgid "The last of the callbacks accepts a new goal and starts processing it:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:192
msgid "Since the execution is a long-running operation, we spawn off a thread to do the actual work and return from ``handle_accepted`` quickly."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:194
msgid "All further processing and updates are done in the ``execute`` method in the new thread:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:200
msgid "This work thread processes one sequence number of the Fibonacci sequence every second, publishing a feedback update for each step. When it has finished processing, it marks the ``goal_handle`` as succeeded, and quits."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:203
msgid "We now have a fully functioning action server.  Let's get it built and running."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:206
msgid "2.2 Compiling the action server"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:208
msgid "In the previous section we put the action server code into place. To get it to compile and run, we need to do a couple of additional things."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:211
msgid "First we need to setup the CMakeLists.txt so that the action server is compiled. Open up ``action_tutorials_cpp/CMakeLists.txt``, and add the following right after the ``find_package`` calls:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:235 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:363
msgid "And now we can compile the package.  Go to the top-level of the ``ros2_ws``, and run:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:241
msgid "This should compile the entire workspace, including the ``fibonacci_action_server`` in the ``action_tutorials_cpp`` package."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:244
msgid "2.3 Running the action server"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:246
msgid "Now that we have the action server built, we can run it. Source the workspace we just built (``ros2_ws``), and try to run the action server:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:254
msgid "3 Writing an action client"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:257
msgid "3.1 Writing the action client code"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:259
msgid "Open up ``action_tutorials_cpp/src/fibonacci_action_client.cpp``, and put the following code in:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:272
msgid "The constructor for the ``FibonacciActionClient`` class initializes the node name as ``fibonacci_action_client``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:278
msgid "The constructor also instantiates a new action client:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:284
msgid "An action client requires 3 things:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:287
msgid "A ROS 2 node to add the action client to: ``this``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:290
msgid "We also instantiate a ROS timer that will kick off the one and only call to ``send_goal``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:296
msgid "When the timer expires, it will call ``send_goal``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:302
msgid "This function does the following:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:304
msgid "Cancels the timer (so it is only called once)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:305
msgid "Waits for the action server to come up."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:306
msgid "Instantiates a new ``Fibonacci::Goal``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:307
msgid "Sets the response, feedback, and result callbacks."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:308
msgid "Sends the goal to the server."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:310
msgid "When the server receives and accepts the goal, it will send a response to the client. That response is handled by ``goal_response_callback``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:317
msgid "Assuming the goal was accepted by the server, it will start processing. Any feedback to the client will be handled by the ``feedback_callback``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:324
msgid "When the server is finished processing, it will return a result to the client. The result is handled by the ``result_callback``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:331
msgid "We now have a fully functioning action client.  Let's get it built and running."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:334
msgid "3.2 Compiling the action client"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:336
msgid "In the previous section we put the action client code into place. To get it to compile and run, we need to do a couple of additional things."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:339
msgid "First we need to setup the CMakeLists.txt so that the action client is compiled. Open up ``action_tutorials_cpp/CMakeLists.txt``, and add the following right after the ``find_package`` calls:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:369
msgid "This should compile the entire workspace, including the ``fibonacci_action_client`` in the ``action_tutorials_cpp`` package."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:372
msgid "3.3 Running the action client"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:374
msgid "Now that we have the action client built, we can run it. First make sure that an action server is running in a separate terminal. Now source the workspace we just built (``ros2_ws``), and try to run the action client:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:382
msgid "You should see logged messages for the goal being accepted, feedback being printed, and the final result."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:387
msgid "In this tutorial, you put together a C++ action server and action client line by line, and configured them to exchange goals, feedback, and results."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst:392
msgid "There are several ways you could write an action server and client in C++; check out the ``minimal_action_server`` and ``minimal_action_client`` packages in the `ros2/examples <https://github.com/ros2/examples/tree/humble/rclcpp>`_ repo."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:8
msgid "Writing an action server and client (Python)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:10
msgid "**Goal:** Implement an action server and client in Python."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:23
msgid "Actions are a form of asynchronous communication in ROS 2. *Action clients* send goal requests to *action servers*. *Action servers* send goal feedback and results to *action clients*."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:37
msgid "1 Writing an action server"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:42
msgid "Until now, you've created packages and used ``ros2 run`` to run your nodes. To keep things simple in this tutorial, however, we’ll scope the action server to a single file. If you'd like to see what a complete package for the actions tutorials looks like, check out `action_tutorials <https://github.com/ros2/demos/tree/humble/action_tutorials>`__."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:47
msgid "Open a new file in your home directory, let's call it ``fibonacci_action_server.py``, and add the following code:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:53
msgid "Line 8 defines a class ``FibonacciActionServer`` that is a subclass of ``Node``. The class is initialized by calling the ``Node`` constructor, naming our node ``fibonacci_action_server``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:60
msgid "In the constructor we also instantiate a new action server:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:66
msgid "An action server requires four arguments:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:68
msgid "A ROS 2 node to add the action client to: ``self``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:69
msgid "The type of the action: ``Fibonacci`` (imported in line 5)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:71
msgid "A callback function for executing accepted goals: ``self.execute_callback``. This callback **must** return a result message for the action type."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:74
msgid "We also define an ``execute_callback`` method in our class:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:80
msgid "This is the method that will be called to execute a goal once it is accepted."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:82
msgid "Let's try running our action server:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:104
msgid "In another terminal, we can use the command line interface to send a goal:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:110
msgid "In the terminal that is running the action server, you should see a logged message \"Executing goal...\" followed by a warning that the goal state was not set. By default, if the goal handle state is not set in the execute callback it assumes the *aborted* state."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:113
msgid "We can use the method `succeed() <http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.server.ServerGoalHandle.succeed>`_ on the goal handle to indicate that the goal was successful:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:120
msgid "Now if you restart the action server and send another goal, you should see the goal finished with the status ``SUCCEEDED``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:122
msgid "Now let's make our goal execution actually compute and return the requested Fibonacci sequence:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:129
msgid "After computing the sequence, we assign it to the result message field before returning."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:131
msgid "Again, restart the action server and send another goal. You should see the goal finish with the proper result sequence."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:135
msgid "1.2 Publishing feedback"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:137
msgid "One of the nice things about actions is the ability to provide feedback to an action client during goal execution. We can make our action server publish feedback for action clients by calling the goal handle's `publish_feedback() <http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.server.ServerGoalHandle.publish_feedback>`_ method."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:140
msgid "We'll replace the ``sequence`` variable, and use a feedback message to store the sequence instead. After every update of the feedback message in the for-loop, we publish the feedback message and sleep for dramatic effect:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:147
msgid "After restarting the action server, we can confirm that feedback is now published by using the command line tool with the ``--feedback`` option:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:154
msgid "2 Writing an action client"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:156
msgid "We'll also scope the action client to a single file. Open a new file, let's call it ``fibonacci_action_client.py``, and add the following boilerplate code:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:162
msgid "We've defined a class ``FibonacciActionClient`` that is a subclass of ``Node``. The class is initialized by calling the ``Node`` constructor, naming our node ``fibonacci_action_client``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:169
msgid "Also in the class constructor, we create an action client using the custom action definition from the previous tutorial on :doc:`../Creating-an-Action`:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:175
msgid "We create an ``ActionClient`` by passing it three arguments:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:177
msgid "A ROS 2 node to add the action client to: ``self``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:178
msgid "The type of the action: ``Fibonacci``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:179
msgid "The action name: ``'fibonacci'``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:181
msgid "Our action client will be able to communicate with action servers of the same action name and type."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:183
msgid "We also define a method ``send_goal`` in the ``FibonacciActionClient`` class:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:189
msgid "This method waits for the action server to be available, then sends a goal to the server. It returns a future that we can later wait on."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:192
msgid "After the class definition, we define a function ``main()`` that initializes ROS 2 and creates an instance of our ``FibonacciActionClient`` node. It then sends a goal and waits until that goal has been completed."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:196
msgid "Finally, we call ``main()`` in the entry point of our Python program."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:198
msgid "Let's test our action client by first running the action server built earlier:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:220
msgid "In another terminal, run the action client:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:242
msgid "You should see messages printed by the action server as it successfully executes the goal:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:253
msgid "The action client should start up, and then quickly finish. At this point, we have a functioning action client, but we don't see any results or get any feedback."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:257
msgid "2.1 Getting a result"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:259
msgid "So we can send a goal, but how do we know when it is completed? We can get the result information with a couple steps. First, we need to get a goal handle for the goal we sent. Then, we can use the goal handle to request the result."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:264 ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:329
msgid "Here's the complete code for this example:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:269
msgid "The `ActionClient.send_goal_async() <http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.client.ActionClient.send_goal_async>`_ method returns a future to a goal handle. First we register a callback for when the future is complete:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:276
msgid "Note that the future is completed when an action server accepts or rejects the goal request. Let's look at the ``goal_response_callback`` in more detail. We can check to see if the goal was rejected and return early since we know there will be no result:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:284
msgid "Now that we've got a goal handle, we can use it to request the result with the method `get_result_async() <http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.client.ClientGoalHandle.get_result_async>`_. Similar to sending the goal, we will get a future that will complete when the result is ready. Let's register a callback just like we did for the goal response:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:292
msgid "In the callback, we log the result sequence and shutdown ROS 2 for a clean exit:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:298
msgid "With an action server running in a separate terminal, go ahead and try running our Fibonacci action client!"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:320
msgid "You should see logged messages for the goal being accepted and the final result."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:323
msgid "2.2 Getting feedback"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:325
msgid "Our action client can send goals. Nice! But it would be great if we could get some feedback about the goals we send from the action server."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:334
msgid "Here's the callback function for feedback messages:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:340
msgid "In the callback we get the feedback portion of the message and print the ``partial_sequence`` field to the screen."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:342
msgid "We need to register the callback with the action client. This is achieved by additionally passing the callback to the action client when we send a goal:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:349
msgid "We're all set. If we run our action client, you should see feedback being printed to the screen."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:354
msgid "In this tutorial, you put together a Python action server and action client line by line, and configured them to exchange goals, feedback, and results."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:359
msgid "There are several ways you could write an action server and client in Python; check out the ``minimal_action_server`` and ``minimal_action_client`` packages in the `ros2/examples <https://github.com/ros2/examples/tree/humble/rclpy/actions>`_ repo."
msgstr ""

#: ../../source/Tutorials/Miscellaneous.rst:2
msgid "Miscellaneous"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:6
msgid "Building a package with Eclipse 2021-06"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:12
msgid "You cannot create a ROS 2 package with eclipse, you need to create it with commandline tools. Follow the :doc:`Create a package <../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package>` tutorial."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:15
msgid "After you created your project, you can edit the source code and build it with eclipse."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:17
msgid "We start eclipse and select a eclipse-workspace."
msgstr ""

msgid "eclipse_work_dir"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:23
msgid "We create a C++ project"
msgstr ""

msgid "eclipse_create_c++_project"
msgstr ""

msgid "eclipse_c++_project_select_type"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:34
msgid "We see that we got C++ includes."
msgstr ""

msgid "eclipse_c++_project_includes"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:41
msgid "We now import our ROS 2 project. The code is still in the old place."
msgstr ""

msgid "eclipse_import_project"
msgstr ""

msgid "eclipse_import_filesystem"
msgstr ""

msgid "eclipse_import_select_my_package"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:58
msgid "We see in the source code that the C++ includes got resolved but not the ROS 2 ones."
msgstr ""

msgid "eclipse_c++_wo_ros_includes"
msgstr ""

msgid "eclipse_c++_path_and_symbols"
msgstr ""

msgid "eclipse_c++_add_directory_path"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:75
msgid "We now see that the ROS 2 includes got resolved too."
msgstr ""

msgid "eclipse_c++_indexer_ok"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:82
msgid "Adding Builder colcon, so that we can build with right-click on project and \"Build project\"."
msgstr ""

msgid "eclipse_c++_properties_builders"
msgstr ""

msgid "eclipse_c++_builder_main"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:94
msgid "With PYTHONPATH you can also build python projects."
msgstr ""

msgid "eclipse_c++_builder_env"
msgstr ""

msgid "eclipse_c++_properties_builders_with_colcon"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-ROS2-Package-with-eclipse-2021-06.rst:106
msgid "Right-click on the project and select \"Build Project\"."
msgstr ""

msgid "eclipse_c++_build_project_with_colcon"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:7
msgid "Building a real-time Linux kernel [community-contributed]"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:9
msgid "This tutorial begins with a clean Ubuntu 20.04.1 install on Intel x86_64. Actual kernel is 5.4.0-54-generic, but we will install the Latest Stable RT_PREEMPT Version. To build the kernel you need at least 30GB free disk space."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:11
msgid "Check https://wiki.linuxfoundation.org/realtime/start for the latest stable version, at the time of writing this is \"Latest Stable Version 5.4-rt\". If we click on the `link <http://cdn.kernel.org/pub/linux/kernel/projects/rt/5.4/>`_, we get the exact version. Currently it is patch-5.4.78-rt44.patch.gz."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:17
msgid "We create a directory in our home dir with"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:23
msgid "and switch into it with"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:29
msgid "We can go with a browser to https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/ and see if the version is there. You can download it from the site and move it manually from /Downloads to the /kernel folder, or download it using wget by right clicking the link using \"copy link location\". Example:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:35 ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:47
msgid "unpack it with"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:41
msgid "download rt_preempt patch matching the Kernel version we just downloaded over at http://cdn.kernel.org/pub/linux/kernel/projects/rt/5.4/"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:53
msgid "Then switch into the linux directory with"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:59
msgid "and patch the kernel with the realtime patch"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:65
msgid "We simply want to use the config of our Ubuntu installation, so we get the Ubuntu config with"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:71
msgid "Open Software & Updates. in the Ubuntu Software menu tick the 'Source code' box"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:73
msgid "We need some tools to build kernel, install them with"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:80
msgid "To enable all Ubuntu configurations, we simply use"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:86
msgid "Then we need to enable rt_preempt in the kernel. We call"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:92
msgid "and set the following"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:124
msgid "Save and exit menuconfig. Now we're going to build the kernel which will take quite some time. (10-30min on a modern cpu)"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:130
msgid "After the build is finished check the debian packages"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:138
msgid "Then we install all kernel debian packages"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst:144
msgid "Now the real time kernel should be installed. Reboot the system and check the new kernel version"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:7
msgid "Deploying on IBM Cloud Kubernetes [community-contributed]"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:15
msgid "About"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:17
msgid "This article describes how to get ROS 2 running on IBM Cloud using Docker files. It first gives a brief overview of docker images and how they work locally and then explores IBM Cloud and how the user can deploy their containers on it. Afterwards, a short description of how the user can use their own custom packages for ROS 2 from github on IBM Cloud is provided. A walkthrough of how to create a cluster and utilize Kubernetes on IBM Cloud is provided and finally the Docker image is deployed on the cluster. Originally published `here <https://github.com/mm-nasr/ros2_ibmcloud>`__ and `here <https://medium.com/@mahmoud-nasr/running-ros2-on-ibm-cloud-1b1284cbd487>`__."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:23
msgid "ROS 2 on IBM Cloud"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:25
msgid "In this tutorial, we show how you can easily integrate and run ROS 2 on IBM Cloud with your custom packages."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:28
msgid "ROS 2 is the new generation of ROS which gives more control over multi-robot formations. With the advancements of cloud computing, cloud robotics are becoming more important in today's age. In this tutorial, we will go through a short introduction on running ROS 2 on IBM Cloud. By the end of the tutorial, you will be able to create your own packages in ROS 2 and deploy them to the cloud using docker files."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:35
msgid "The following instructions assume you're using Linux and have been tested with Ubuntu 18.04 (Bionic Beaver)."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:39
msgid "Step 1: Setting up your system"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:41
msgid "Before we go into how the exact process works, lets first make sure all the required software is properly installed. We'll point you towards the appropriate sources to set up your system and only highlight the details that pertain to our use-case."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:47
msgid "a) Docker files?"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:49
msgid "Docker files are a form of containers that can run separate from your system, this way, you can set-up potentially hundreds of different projects without affecting one another. You can even set-up different versions of Linux on one machine, without the need for virtual machine. Docker files have an advantage of saving space and only utilizing your system resources when running. In addition, dockers are versatile and transferable. They contain all the required pre-requisites to run separately, meaning that you can easily use a docker file for a specific system or service without any cubersome steps!"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:59
msgid "Excited yet? Let's start off by installing docker to your system by following the following `link <https://docs.docker.com/get-docker/>`__. From the tutorial, you should have done some sanity checks to make sure docker is properly set-up. Just in case, however, let's run the following command once again that uses the hello-world docker image:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:69
msgid "You should obtain the following output:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:95
msgid "b) ROS 2 Image"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:97
msgid "ROS `announced <https://discourse.ros.org/t/announcing-official-docker-images-for-ros2/7381/2>`__ image containers for several ROS distributions in January 2019. More detailed instructions on the use of ROS 2 docker images can be found `here <https://hub.docker.com/_/ros/>`__."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:103
msgid "Let's skip through that and get to real-deal right away; creating a local ROS 2 docker. We'll create our own Dockerfile (instead of using a ready Image) since we'll need this method for deployment on IBM Cloud. First, we create a new directory which will hold our Dockerfile and any other files we need later on and navigate to it. Using your favorite $EDITOR of choice, open a new file named *Dockerfile* (make sure the file naming is correct):"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:119
msgid "Insert the following in the *Dockerfile*, and save it (also found `here <https://github.com/mm-nasr/ros2_ibmcloud/blob/main/dockers/ros2_basic/Dockerfile>`__):"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:137
msgid "**FROM**: creates a layer from the ros:foxy Docker image"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:138
msgid "**RUN**: builds your container by installing vim into it and creating a directory called /ros2_home"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:140
msgid "**WORKDIR**: informs the container where the working directory should be for it"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:143
#, python-format
msgid "Of course, you are free to change the ROS distribution (*foxy* is used here) or change the directory name. The above docker file sets up ROS-foxy and installs the demo nodes for C++ and Python. Then it launches a file which runs a talker and a listener node. We will see it in action in just a few, but they act very similar to the publisher-subscriber example found in the `ROS wiki <https://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29>`__"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:151
msgid "Now, we are ready to build the docker image to run ROS 2 in it (yes, it is THAT easy!)."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:154
msgid "**Note**: if you have errors due to insufficient privileges or *permission denied*, try running the command with *sudo* privileges:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:164
msgid "*0dc6ce7cb487* will most probably be different for you, so keep note of it and copy it somewhere for reference. You can always go back and check the docker images you have on your system using:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:172
msgid "Now, run the docker file using:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:194
msgid "If it works correctly, you should see something similar to what is shown above. As can be seen, there are two ROS nodes (a publisher and a subscriber) running and their output is provided to us through ROS INFO."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:199
msgid "Step 2: Running the image on IBM Cloud"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:201
msgid "The following steps assume you have an IBM cloud account and have ibmcloud CLI installed. If not, please check this `link <https://cloud.ibm.com/docs/cli/reference/ibmcloud/download_cli.html>`__ out to get that done first."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:206
msgid "We also need to make sure that the CLI plug-in for the IBM Cloud Container Registry is installed by running the command"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:213
msgid "Afterwards, login to your ibmcloud account through the terminal:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:219
msgid "From here, let's create a container registry name-space. Make sure you use a unique name that is also descriptive as to what it is. Here, I used *ros2nasr*."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:227
msgid "IBM cloud has a lot of shortcuts that would help us get our container onto the cloud right away. The command below builds the container and tags it with the name **ros2foxy** and the version of **1**. Make sure you use the correct registry name you created and you are free to change the container name as you wish. The **.** at the end indicates that the *Dockerfile* is in the current directory (and it is important), if not, change it to point to the directory containing the Dockerfile."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:239
msgid "You can now make sure that the container has been pushed to the registry you created by running the following command"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:252
msgid "Next, it is important to log-in to your registry to run the docker image. Again, if you face a *permission denied* error, perform the command with sudo privileges. Afterwards, run your docker file as shown below."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:269
msgid "Where *ros2nasr* is the name of the registry you created and *ros2foxy:1* is the tag of the docker container and the version as explained previously."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:273
msgid "You should now see your docker file running and providing similar output to that you saw when you ran it locally on your machine."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:277
msgid "Step 3: Using Custom ROS 2 Packages"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:279
msgid "So now we have the full pipeline working, from creating the Dockerfile, all the way to deploying it and seeing it work on IBM Cloud. But, what if we want to use a custom set of packages we (or someone else) created?"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:283
msgid "Well that all has to do with how you set-up your Dockerfile. Lets use the example provided by ROS 2 `here <https://hub.docker.com/_/ros/>`__. Create a new directory with a new Dockerfile (or overwrite the existing one) and add the following in it (or download the file `here <https://github.com/mm-nasr/ros2_ibmcloud/blob/main/dockers/git_pkgs_docker/Dockerfile>`__)"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:351
msgid "Going through the lines shown, we can see how we can add custom packages from github in 4 steps:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:354
msgid "Create an overlay with custom packages cloned from Github:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:369
msgid "Install package dependencies using rosdep"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:385
msgid "Build the packages *you need*"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:399
msgid "Running the launch file"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:406
msgid "Likewise, we can change the packages used, install their dependencies, and then run them."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:409
msgid "**Back to IBM Cloud**"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:411
msgid "With this Dockerfile, we can follow the same steps we did before to deploy it on IBM Cloud. Since we already have our registry created, and we're logged in to IBM Cloud, we directly build our new Dockerfile. Notice how I kept the tag the same but changed the version, this way I can update the docker image created previously. (You are free to create a completely new one if you want)"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:422
msgid "Then, make sure you are logged in to the registry and run the new docker image:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:437
msgid "You should see, again, the same output. However, this time we did it through custom packages from github, which allows us to utilize our personally created packages for ROS 2 on IBM Cloud."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:442
msgid "Extra: Deleting Docker Images"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:444
msgid "As you may find yourself in need of deleting a specific docker image(s) from IBM Cloud, this is how you should go about it!"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:447
msgid "List all the images you have and find all the ones that share the *IMAGE* name corresponding to *registry.ng.bluemix.net/ros2nasr/ros2foxy:2* (in my case). Then delete them using their *NAMES*"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:456
msgid "Delete the docker image from IBM Cloud using its *IMAGE* name"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:463
msgid "Step 4: Kubernetes"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:466
msgid "a) Creating the Cluster"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:468
msgid "Create a cluster using the Console. The instructions are found `here <https://cloud.ibm.com/docs/containers?topic=containers-clusters#clusters_ui>`__. The settings used are detailed below. These are merely suggestions and can be changed if you need to. However, make sure you understand the implications of your choices:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:474
msgid "Plan: *Standard*"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:476
msgid "Orchestration Service: *Kubernetes v1.18.10*"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:478
msgid "Infrastructure: *Classic*"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:480
msgid "Location:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:482
msgid "Resource group: *Default*"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:484
msgid "Geography: *North America* (you are free to change this)"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:486
msgid "Availability: *Single zone* (you are free to change this but make sure you understand the impact of your choices by checking the IBM Cloud documentation.)"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:490
msgid "Worker Zone: *Toronto 01* (choose the location that is physically closest to you)"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:493
msgid "Worker Pool:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:495
msgid "Virtual - shared, Ubuntu 18"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:497
msgid "Memory: 16 GB"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:499
msgid "Worker nodes per zone: *1*"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:501
msgid "Master service endpoint: *Both private & public endpoints*"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:503
msgid "Resource details (Totally flexible):"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:505
msgid "Cluster name: *mycluster-tor01-rosibm*"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:507
msgid "Tags: *version:1*"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:509
msgid "After you create your cluster, you will be redirected to a page which details how you can set up the CLI tools and access your cluster. Please follow these instructions (or check the instructions `here <https://github.com/mm-nasr/ros2_ibmcloud/blob/main/Kubernetes-Cluster-Set-up.md>`__)and wait for the progress bar to show that the worker nodes you created are ready by indicating *Normal* next to the cluster name. You can also reach this screen from the IBM Cloud Console inside the Kubernetes."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:518
msgid "b) Deploying your Docker Image *Finally!*"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:520
msgid "Create a deployment configuration yaml file named *ros2-deployment.yaml* using your favorite $EDITOR and insert the following in it:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:544
msgid "You should replace the tags shown between *\"<\" \">\"* as described `here <https://cloud.ibm.com/docs/containers?topic=containers-images#namespace>`__. The file in my case would look something like this:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:568
msgid "Deploy the file using the following command"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:575
msgid "Now your docker image is fully deployed on your cluster!"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:578
msgid "Step 5: Using CLI for your Docker Image"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:580
msgid "Navigate to your cluster through the IBM Cloud console Kubernetes."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:582
msgid "Click on *Kubernetes dashboard* on the top right corner of the page."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:584
msgid "You should now be able to see a full list of all the different parameters of your cluster as well as its CPU and Memory Usage."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:587
msgid "Navigate to *Pods* and click on your deployment."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:589
msgid "On the top right corner, click on *Exec into pod*"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:591
msgid "Now you are inside your docker image! You can source your workspace (if needed) and run ROS 2! For example:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:600
msgid "Final Remarks"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst:602
msgid "At this point, you are capable of creating your own docker image using ROS 2 packages on github. It is also possible, with little changes to utilize local ROS 2 packages as well. This could be the topic of another article. However, you are encouraged to check out the following `Dockerfile <https://github.com/mm-nasr/ros2_ibmcloud/tree/main/dockers/local_pkgs_docker>`__ which uses a local copy of the demos repository. Similarly, you can use your own local package."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:7
msgid "Using Eclipse Oxygen with ``rviz2`` [community-contributed]"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:14
msgid "Setup"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:16
msgid "This tutorial assumes Eclipse Oxygen, git, and Egit (http://www.eclipse.org/egit/download/) are already installed."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:18
msgid "Throughout the tutorial we name the eclipse workspace the same name as the ros2 package, but this is not required."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:20
msgid "HINT: We use nested projects and one Eclipse Workspace for each ROS-2 package."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:25
msgid "Create a C++ Project."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:34
msgid "Choose the ROS 2 package name as the Project Name. Choose a Makefile Project and Other Toolchain."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:40
msgid "Click on Finish"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:45
msgid "Our project should be shown in the \"Project Explorer\"."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:50
msgid "Inside our Project create a folder called \"src\"."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:55
msgid "Import a git repository."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:60
msgid "Put in the repository URL."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:65
msgid "IMPORTANT: Use the source folder of the project we created before as the destination folder."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:67
msgid "HINT: If you ran into problems choosing the destination folder path, the Eclipse Dialog needs a name in the name field."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:72
msgid "Import using the new project wizard."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:77
msgid "Create a General->Project."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:82
msgid "Use the git repository name as the project name. IMPORTANT: Use the folder we cloned the git repository in as the \"Location\"."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:88
msgid "The git project and the new project should be visible in the Project Explorer view. The same files are listed multiple times, but only one project is linked with Egit."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:94
msgid "Repeat this procedure again. Import git repository pluginlib."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:100
msgid "IMPORTANT: Use a folder inside the source folder as \"Destination->Directory\"."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:105
msgid "IMPORTANT: Use the folder we cloned the git repository in as the location for the new project."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:110
msgid "Run the same procedure with the tinyxml2_vendor git repository."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:115
msgid "IMPORTANT: Again use a folder inside the source folder."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:120
msgid "IMPORTANT: Use the location of the folder we cloned as the new project folder."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:125
msgid "Now all four Projects should be visible in the Project Explorer view."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:130
msgid "Clicking in the top right cornder for the Project Explorer view allows us to change the Project Presentation to Hierarchical view. Now it looks like a ROS-2 project as it is on the hard drive. But this view loses the linkage to Egit, so use the Flat Project Presentation. The Egit linkage is good if you want to see e.g. which author wrote which code-line, etc."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:138
msgid "Go to \"C/C++ build\"-section and put \"ament\" into \"Build command\"."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:143
msgid "Go to \"Behavior\" tab and unselect \"clean\" and put \"build\" into Build textbox."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:148
msgid "Before \"Build project\" will work, we need to close Eclipse. Open a shell and source the ROS-2 setup.bash file, then cd into the directory of the eclipse project (here: /home/ubu/rviz2_ws/rviz2_ws) and start Eclipse from inside this directory."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:154
msgid "Now code completion, egit annotations, eclipse C/C++ Tools, etc. should all work."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:160
msgid "Eclipse-indexer"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:162
msgid "Opening the main.cpp of rviz2 may show a lot of \"unresolved inclusion\" warnings. To fix this, go to Project->Properties->C++ General->Path and Symbols. Click on the \"References\" tab and select \"ros2_ws\"."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:170
msgid "Go to C/C++-General->Path-and-Symbols, click on the \"Source locations\" tab and click on \"Link folder\". Choose the location of qt5 includes."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:177
msgid "The next image should be shown. It is a good idea to add excludes to the source locations, so that some directories (like \"Build\" and \"Install\") don't get indexed."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:184
msgid "Go to C++General->Preprocessor includes, select \"CDT GCC Built in compiler settings [Shared]\" and enter in the \"command to get compiler specs\" text box the following:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:194
msgid "Go to \"C/C++-General->Indexer\" and select the following in the image. E.g \"index unused headers as c files\" to resolve e.g. QApplication, because the QApplication headers content is only \"#include \"qapplication.h\"."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:201
msgid "After running the indexer (which happens later, so you will see this also later), you can see what it added"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:207
msgid "After that right-click on the rviz2 project and select \"Indexer->Rebuild\", which will start rebuilding the index (there is an icon in the lower right showing progress). Once the index is finished rebuilding, it should be able to resolve all includes."
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:215
msgid "Debugging with eclipse"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:217
msgid "Go to \"C/C++-Build\" and add to the build command:"
msgstr ""

#: ../../source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst:227
msgid "Then in eclipse go to \"Run->Debug Configurations\" and add the following and click on \"Debug\"."
msgstr ""

